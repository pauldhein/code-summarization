<BoL> Context manager for global scikit-learn configuration <EoL>
<BoL> @ contextmanager decorator . <EoL>
<BoL> Retrieve current values for configuration set by : func : ` set_config ` <EoL>
<BoL> Set global scikit-learn configuration <EoL>
<BoL> Get parameter names for the estimator <EoL>
<BoL> Get parameters for this estimator . <EoL>
<BoL> Set the parameters of this estimator . <EoL>
<BoL> Row and column indices of the i'th bicluster . <EoL>
<BoL> Shape of the i'th bicluster . <EoL>
<BoL> Returns the submatrix corresponding to bicluster ` i ` . <EoL>
<BoL> Returns the mean accuracy on the given test data and labels . <EoL>
<BoL> Performs clustering on X and returns cluster labels . <EoL>
<BoL> Returns the score of the model on the data X <EoL>
<BoL> Performs outlier detection on X . <EoL>
<BoL> Returns the coefficient of determination R^2 of the prediction . <EoL>
<BoL> Fit to data , then transform it . <EoL>
<BoL> Returns first and last element of numpy array or sparse matrix . <EoL>
<BoL> Pretty print the dictionary 'params ' <EoL>
<BoL> Constructs a new estimator with the same parameters . <EoL>
<BoL> Returns True if the given estimator is ( probably ) a classifier . <EoL>
<BoL> Returns True if the given estimator is ( probably ) an outlier detector . <EoL>
<BoL> Returns True if the given estimator is ( probably ) a regressor . <EoL>
<BoL> Get a signature object for the passed callable . <EoL>
<BoL> Helper function to download a remote dataset into path <EoL>
<BoL> Ensure different filenames for Python 2 and Python 3 pickles <EoL>
<BoL> Calculate the sha256 hash of the file at path . <EoL>
<BoL> Turn seed into a np.random.RandomState instance <EoL>
<BoL> Delete all the content of the data home cache . <EoL>
<BoL> Returns the directory component of a pathname <EoL>
<BoL> Test whether a path exists . Returns False for broken symbolic links <EoL>
<BoL> Expand ~ and ~user constructions . If user or $ HOME is unknown , <EoL>
<BoL> Return the path of the scikit-learn data dir . <EoL>
<BoL> Return true if the pathname refers to an existing directory . <EoL>
<BoL> Join two or more pathname components , inserting '/ ' as needed . <EoL>
<BoL> Load and return the boston house-prices dataset ( regression ) . <EoL>
<BoL> Load and return the breast cancer wisconsin dataset ( classification ) . <EoL>
<BoL> Loads data from module_path/data/data_file_name . <EoL>
<BoL> Load and return the diabetes dataset ( regression ) . <EoL>
<BoL> Load and return the digits dataset ( classification ) . <EoL>
<BoL> Load and return the iris dataset ( classification ) . <EoL>
<BoL> Load and return the linnerud dataset ( multivariate regression ) . <EoL>
<BoL> Load the numpy array of a single sample image <EoL>
<BoL> Load sample images for image manipulation . <EoL>
<BoL> Load and return the wine dataset ( classification ) . <EoL>
<BoL> makedirs ( name [ , mode=0o777 ] [ , exist_ok=False ] ) <EoL>
<BoL> Returns a new subclass of tuple with named fields . <EoL>
<BoL> Retrieve a URL into a temporary location on disk . <EoL>
<BoL> Invoke the underlying file object 's fileno ( ) method . <EoL>
<BoL> Implements BufferedIOBase.read1 ( ) <EoL>
<BoL> Return the uncompressed stream file position indicator to the <EoL>
<BoL> Fetch dataset from openml by name or dataset id . <EoL>
<BoL> Ensure directory d exists ( like mkdir -p on Unix ) <EoL>
<BoL> Shuffle arrays or sparse matrices in a consistent way <EoL>
<BoL> We do n't store the timestamp when pickling , to avoid the hash <EoL>
<BoL> Decorates the given function func to only compute its return <EoL>
<BoL> Erase the complete cache directory . <EoL>
<BoL> Eval function func with arguments ` *args ` and ` **kwargs ` , <EoL>
<BoL> Return the formatted representation of the object . <EoL>
<BoL> Remove cache elements to make cache size fit in `` bytes_limit `` . <EoL>
<BoL> Helper function to download any missing LFW data <EoL>
<BoL> Internally used to load images <EoL>
<BoL> Call method <EoL>
<BoL> Decorate function fun <EoL>
<BoL> Scale back to 0-1 range in case of normalization for plotting . <EoL>
<BoL> r '' '' '' Load a datasets as downloaded from http : //mlcomp.org <EoL>
<BoL> Generate the `` Friedman # 1 '' regression problem <EoL>
<BoL> Generate the `` Friedman # 2 '' regression problem <EoL>
<BoL> Generate the `` Friedman # 3 '' regression problem <EoL>
<BoL> Generates data for binary classification used in <EoL>
<BoL> Make two interleaving half circles <EoL>
<BoL> Generate an S curve dataset . <EoL>
<BoL> Generate a random regression problem with sparse uncorrelated design <EoL>
<BoL> Generate a random symmetric , positive-definite matrix . <EoL>
<BoL> Generate a swiss roll dataset . <EoL>
<BoL> Close the temporary file , possibly deleting it . <EoL>
<BoL> copy data from file-like object fsrc to file-like object fdst <EoL>
<BoL> Convert a raw name for a data set in a mldata.org filename . <EoL>
<BoL> quote ( 'abc def ' ) - > 'abc % 20def ' <EoL>
<BoL> Open the URL url , which can be either a string or a Request object . <EoL>
<BoL> Load MATLAB file . <EoL>
<BoL> Return a string indicating the HTTP request method . <EoL>
<BoL> converts the arff object into the appropriate matrix type ( np.array or <EoL>
<BoL> Utilizes the openml dataset listing api to find a dataset by <EoL>
<BoL> Returns a resource from OpenML.org . Caches it to data_home if required . <EoL>
<BoL> obtains several columns from sparse arff representation . Additionally , the <EoL>
<BoL> find the permutation from a to b <EoL>
<BoL> inverse permutation p <EoL>
<BoL> Transforms the label sets with a given mapping <EoL>
<BoL> Fit the label sets binarizer , storing ` classes_ ` <EoL>
<BoL> Fit the label sets binarizer and transform the given label sets <EoL>
<BoL> Transform the given indicator matrix into label sets <EoL>
<BoL> Transform the given label sets <EoL>
<BoL> Returns distinct binary samples of length dimensions <EoL>
<BoL> Load a coverage file from an open file object . <EoL>
<BoL> Load csv file . <EoL>
<BoL> Construct the map grid from the batch object <EoL>
<BoL> Tokenize text_document into a sequence of character n-grams <EoL>
<BoL> Whitespace sensitive char-n-gram tokenization . <EoL>
<BoL> Check if vocabulary is empty or missing ( not fit-ed ) <EoL>
<BoL> Create sparse feature matrix , and vocabulary where fixed_vocab=False <EoL>
<BoL> Sort features by name <EoL>
<BoL> Check validity of ngram_range parameter <EoL>
<BoL> Turn tokens into a sequence of n-grams after stop words filtering <EoL>
<BoL> Return a callable that handles preprocessing and tokenization <EoL>
<BoL> Return a function to preprocess the text before tokenization <EoL>
<BoL> Return a function that splits a string into a sequence of tokens <EoL>
<BoL> Decode the input into a string of unicode symbols <EoL>
<BoL> Learn a vocabulary dictionary of all tokens in the raw documents . <EoL>
<BoL> Learn the vocabulary dictionary and return term-document matrix . <EoL>
<BoL> Array mapping from feature integer indices to feature name <EoL>
<BoL> Build or fetch the effective stop words list <EoL>
<BoL> Return terms per document with nonzero entries in X . <EoL>
<BoL> Transform documents to document-term matrix . <EoL>
<BoL> Download the 20 newsgroups data and stored it as a zipped pickle . <EoL>
<BoL> Scale input vectors individually to unit norm ( vector length ) . <EoL>
<BoL> Given text in `` news '' format , attempt to remove a signature block . <EoL>
<BoL> Given text in `` news '' format , strip the headers , by removing everything <EoL>
<BoL> Given text in `` news '' format , strip lines beginning with the quote <EoL>
<BoL> Constructor . <EoL>
<BoL> Do the job the `` encode `` . <EoL>
<BoL> ( INTERNAL ) Decodes an attribute line . <EoL>
<BoL> ( INTERNAL ) Decodes a comment line . <EoL>
<BoL> ( INTERNAL ) Decodes a relation line . <EoL>
<BoL> Returns the Python representation of a given ARFF file . <EoL>
<BoL> ( INTERNAL ) Encodes an attribute line . <EoL>
<BoL> ( INTERNAL ) Encodes a comment line . <EoL>
<BoL> ( INTERNAL ) Decodes a relation line . <EoL>
<BoL> Encodes a given object to an ARFF file . <EoL>
<BoL> The iterative version of ` arff.ArffEncoder.encode ` . <EoL>
<BoL> ( INTERNAL ) Encodes a line of data . <EoL>
<BoL> r '' ' <EoL>
<BoL> ( INTERNAL ) Split a line into a list of values <EoL>
<BoL> Serialize an object representing the ARFF document to a given file-like <EoL>
<BoL> Serialize an object representing the ARFF document , returning a string . <EoL>
<BoL> Load a file-like object containing the ARFF document and convert it into <EoL>
<BoL> Convert a string instance containing the ARFF document into a Python <EoL>
<BoL> Parameters <EoL>
<BoL> Clear value from cache <EoL>
<BoL> Read value from cache and return it . <EoL>
<BoL> Queue the batch for computing , with or without multiprocessing <EoL>
<BoL> Build a process or thread pool and return the number of workers <EoL>
<BoL> Display the message on stout or stderr depending on verbosity <EoL>
<BoL> Dispatch more data for parallel processing <EoL>
<BoL> Prefetch the tasks for the next batch and dispatch them . <EoL>
<BoL> Display the process of the parallel execution only a fraction <EoL>
<BoL> Print the time elapsed between the last call and the currentMultiprocessing writing to files can create race <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Recursively look up the original np.memmap instance base if any . <EoL>
<BoL> Get the full path to a subfolder inside the temporary folder . <EoL>
<BoL> Pickling reduction for memmap backed arrays . <EoL>
<BoL> Create a view into the array with the given shape and strides . <EoL>
<BoL> Utility function to cleanup a temporary folder if it still exists . <EoL>
<BoL> Persist an arbitrary Python object into one file . <EoL>
<BoL> Return True if a is backed by some mmap buffer directly or not . <EoL>
<BoL> Reconstruct a Python object from a file persisted with joblib.dump . <EoL>
<BoL> Pickle the descriptors of a memmap instance to reopen on same file . <EoL>
<BoL> Generate a random UUID . <EoL>
<BoL> Find the module an object belong to . <EoL>
<BoL> Open a file in read only mode using the encoding detected by <EoL>
<BoL> Returns a semaphore object <EoL>
<BoL> Override for isinstance ( instance , cls ) . <EoL>
<BoL> Override for issubclass ( subclass , cls ) . <EoL>
<BoL> Debug helper to print the ABC registry . <EoL>
<BoL> Register a virtual subclass of an ABC . <EoL>
<BoL> Callback indicate how long it took to run a batch <EoL>
<BoL> Determine the optimal batch size <EoL>
<BoL> Reset batch statistics to default values . <EoL>
<BoL> Shutdown the workers and restart a new one with the same parameters <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Determine the number of jobs which are going to run in parallel <EoL>
<BoL> List of exception types to be captured . <EoL>
<BoL> Backend instance to be used by nested Parallel calls . <EoL>
<BoL> Initializer to limit the number of threads used by some C-libraries . <EoL>
<BoL> Context manager to manage an execution context . <EoL>
<BoL> Call-back method called at the beginning of a Parallel call <EoL>
<BoL> Call-back method called at the end of a Parallel call <EoL>
<BoL> Wrapper for Future.result to implement the same behaviour as <EoL>
<BoL> Provides a generator of tasks for imap and imap_unordered with <EoL>
<BoL> Cleanup after any worker processes which have exited due to reaching <EoL>
<BoL> Clean up any exited workers and start replacements for them . <EoL>
<BoL> Bring the number of pool processes up to the specified number , <EoL>
<BoL> Equivalent of ` func ( *args , **kwds ) ` . <EoL>
<BoL> Equivalent of ` map ( ) ` -- can be MUCH slower than ` Pool.map ( ) ` . <EoL>
<BoL> Like ` imap ( ) ` method but ordering of results is arbitrary . <EoL>
<BoL> Apply ` func ` to each element in ` iterable ` , collecting the results <EoL>
<BoL> Like ` map ( ) ` method but the elements of the ` iterable ` are expected to <EoL>
<BoL> Used by apply_async to make it possible to implement lazy init <EoL>
<BoL> Shutdown the pool and restart a new one with the same parameters <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Determine the number of jobs which are going to run in parallel . <EoL>
<BoL> Shutdown the process or thread pool <EoL>
<BoL> Abort any running tasks <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Callback indicate how long it took to run a batch <EoL>
<BoL> Determine the optimal batch size <EoL>
<BoL> Determine the number of jobs that can actually run in parallel <EoL>
<BoL> Shutdown the workers and free the shared memory . <EoL>
<BoL> Determine the number of jobs which are going to run in parallel <EoL>
<BoL> Shutdown the process or thread pool <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Determine the number of jobs which are going to run in parallel <EoL>
<BoL> Lazily initialize the thread pool <EoL>
<BoL> Build a process or thread pool and return the number of workers <EoL>
<BoL> A decorator indicating abstract methods . <EoL>
<BoL> Return the number of CPUs the current process can use . <EoL>
<BoL> Return a nice text document describing the traceback . <EoL>
<BoL> Printable representation of the store location . <EoL>
<BoL> Writes an object into a file in a concurrency-safe way . <EoL>
<BoL> Get items to delete to keep the store under a size limit . <EoL>
<BoL> Clear the whole store content . <EoL>
<BoL> Clear the item at the path , given as a list of strings . <EoL>
<BoL> Delete location on store . <EoL>
<BoL> Clear all items with a common path in the store . <EoL>
<BoL> Configure the store backend . <EoL>
<BoL> Check if there is an item at the path , given as a list of <EoL>
<BoL> Check cached function is available in store . <EoL>
<BoL> Create object location on store <EoL>
<BoL> Dump an item in the store at the path given as a list of <EoL>
<BoL> Store the code of the cached function . <EoL>
<BoL> Return information related to the cached function if it exists . <EoL>
<BoL> Return information about item . <EoL>
<BoL> Returns the whole list of items available in the store . <EoL>
<BoL> Return actual metadata of an item . <EoL>
<BoL> Load an item from the store given its path as a list of <EoL>
<BoL> Reduce store size to keep it under the given bytes limit . <EoL>
<BoL> Store the code of the cached function . <EoL>
<BoL> Store metadata of a computation . <EoL>
<BoL> Checks if an item location exists in the store . <EoL>
<BoL> Moves an item from src to dst in the store . <EoL>
<BoL> Opens an item on the store and return a file-like object . <EoL>
<BoL> Clears a location on the store . <EoL>
<BoL> Configures the store . <EoL>
<BoL> Creates a location on the store . <EoL>
<BoL> Returns the whole list of items available in the store . <EoL>
<BoL> Writes an object into a unique file in a concurrency-safe way . <EoL>
<BoL> Convert a memory text to its value in bytes . <EoL>
<BoL> Ensure directory d exists ( like mkdir -p on Unix ) <EoL>
<BoL> Remove all subdirectories in this path . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Read up to size uncompressed bytes from the file . <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read up to len ( b ) bytes into b . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a byte string to the file . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Factory function that returns a new reentrant lock . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Return the number of CPUs . <EoL>
<BoL> Decorator used to capture the arguments of a function . <EoL>
<BoL> Return the disk usage in a directory . <EoL>
<BoL> Determine the number of jobs that can actually run in parallel <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Ensure de-pickler imports any package child-modules that <EoL>
<BoL> Clears the pickler 's `` memo '' . <EoL>
<BoL> Find all globals names read or written to by codeblock co <EoL>
<BoL> Turn the function into a tuple of data necessary to recreate it : <EoL>
<BoL> Plug in system . Register additional pickling functions if modules already loaded <EoL>
<BoL> Store an object in the memo . <EoL>
<BoL> attrgetter serializer <EoL>
<BoL> Save a code object <EoL>
<BoL> Save a class that ca n't be stored as module global . <EoL>
<BoL> Save a file <EoL>
<BoL> Registered with the dispatch to handle all function types . <EoL>
<BoL> Pickles an actual func object . <EoL>
<BoL> Save a `` global '' . <EoL>
<BoL> Inner logic to save instance . Based off pickle.save_inst <EoL>
<BoL> itemgetter serializer ( needed for namedtuple support ) <EoL>
<BoL> Save a module as an import <EoL>
<BoL> This takes a binary file for writing a pickle data stream . <EoL>
<BoL> Write a pickled representation of obj to the open file . <EoL>
<BoL> Set the value of a closure cell . <EoL>
<BoL> Fills in the rest of function data into the skeleton function object <EoL>
<BoL> Iterate over each part instead of calling imp.find_module directly . <EoL>
<BoL> Get the Python compiler to emit LOAD_FAST ( arg ) ; STORE_DEREF <EoL>
<BoL> Creates a skeleton function object that contains just the provided <EoL>
<BoL> Force every module in modList to be placed into main <EoL>
<BoL> Put attributes from ` class_dict ` back on ` skeleton_class ` . <EoL>
<BoL> Yield ( opcode , argument number ) tuples for all <EoL>
<BoL> Serialize obj as bytes streamed into file <EoL>
<BoL> Serialize obj as a string of bytes allocated in memory <EoL>
<BoL> Create a new instance of a class . <EoL>
<BoL> Return whether *func* is a Tornado coroutine function . <EoL>
<BoL> Returns an iterator equivalent to map ( fn , iter ) . <EoL>
<BoL> Clean-up the resources associated with the Executor . <EoL>
<BoL> Submits a callable to be executed with the given arguments . <EoL>
<BoL> Initializes the future . Should not be called by clients . <EoL>
<BoL> Attaches a callable that will be called when the future finishes . <EoL>
<BoL> Cancel the future if possible . <EoL>
<BoL> Return True if the future was cancelled . <EoL>
<BoL> Return True of the future was cancelled or finished executing . <EoL>
<BoL> Return the exception raised by the call that the future represents . <EoL>
<BoL> Return the result of the call that the future represents . <EoL>
<BoL> Return True if the future is currently executing . <EoL>
<BoL> Sets the result of the future as being the given exception . <EoL>
<BoL> Sets the return value of work associated with the future . <EoL>
<BoL> Mark the future as running or process any cancel notifications . <EoL>
<BoL> ensures all workers and management thread are running <EoL>
<BoL> Returns an iterator equivalent to map ( fn , iter ) . <EoL>
<BoL> An iterator over the given futures that yields each as it completes . <EoL>
<BoL> Wait for the futures in the given sequence to complete . <EoL>
<BoL> Close the connection <EoL>
<BoL> File descriptor or handle of the connection <EoL>
<BoL> Whether there is any input available to be read <EoL>
<BoL> Receive a ( picklable ) object <EoL>
<BoL> Receive bytes data as a bytes object . <EoL>
<BoL> Receive bytes data into a writeable bytes-like object . <EoL>
<BoL> Send a ( picklable ) object <EoL>
<BoL> Send the bytes data from a bytes-like object <EoL>
<BoL> Return a wrapper for an fd . <EoL>
<BoL> Attach a reducer function to a given type in the dispatch table . <EoL>
<BoL> Return whether process is alive <EoL>
<BoL> Wait until child process terminates <EoL>
<BoL> Method to be run in sub-process ; can be overridden in sub-class <EoL>
<BoL> Start child process <EoL>
<BoL> Terminate process ; sends SIGTERM signal or uses TerminateProcess ( ) <EoL>
<BoL> Wait till an object in object_list is ready/readable . <EoL>
<BoL> Returns a synchronized shared array <EoL>
<BoL> Returns a barrier object <EoL>
<BoL> Returns a bounded semaphore object <EoL>
<BoL> Returns a condition object <EoL>
<BoL> Returns an event object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a non-recursive lock object <EoL>
<BoL> Returns a manager associated with a running server process <EoL>
<BoL> Returns two connection object connected by a pipe <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a recursive lock object <EoL>
<BoL> Returns a shared array <EoL>
<BoL> Returns a shared object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a synchronized shared object <EoL>
<BoL> Return list of process objects corresponding to live child processes <EoL>
<BoL> Install support for sending connections and sockets <EoL>
<BoL> Returns the number of CPUs in the system <EoL>
<BoL> Return process object representing the current process <EoL>
<BoL> Check whether this is a fake forked process in a frozen executable . <EoL>
<BoL> Return package logger -- if it does not already exist then <EoL>
<BoL> Turn on logging and add a handler which prints to stderr <EoL>
<BoL> Sets the path to a python.exe or pythonw.exe binary used to run <EoL>
<BoL> Set list of module names to try to load in forkserver process . <EoL>
<BoL> Returns a bounded semaphore object <EoL>
<BoL> Returns a condition object <EoL>
<BoL> Returns an event object <EoL>
<BoL> Returns a lock object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a recurrent lock object <EoL>
<BoL> Returns a semaphore object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Attach a reducer function to a given type in the dispatch table . <EoL>
<BoL> Private API hook called when feeding data in the background thread <EoL>
<BoL> Replacement for pickle.dump ( ) using LokyPickler . <EoL>
<BoL> Put a `` _clean_exit `` flag on the current thread <EoL>
<BoL> Recursively kill the descendants of a process before killing it . <EoL>
<BoL> Terminate a process and its descendants . <EoL>
<BoL> Serialize obj as a string of bytes allocated in memory <EoL>
<BoL> Specialized implementation of itertools.chain.from_iterable . <EoL>
<BoL> Iterates over zip ( ) ed iterables in chunks . <EoL>
<BoL> Processes a chunk of an iterable passed to map . <EoL>
<BoL> Safely send back the given result or exception <EoL>
<BoL> Wait for the cache to be empty before resizing the pool . <EoL>
<BoL> Ensure that each successive executor instance has a unique , monotonic id . <EoL>
<BoL> Try to fix the filenames in each record from inspect.getinnerframes ( ) . <EoL>
<BoL> Stateful tokeneater which builds dotted names . <EoL>
<BoL> Hopefully pretty robust repr equivalent . <EoL>
<BoL> uniq_stable ( elems ) - > list <EoL>
<BoL> Windows can not encode some characters in filename . <EoL>
<BoL> Helper function to output a function call <EoL>
<BoL> Helper function to output a function signature <EoL>
<BoL> Filters the given args and kwargs using a list of arguments to <EoL>
<BoL> Returns a nicely formatted statement displaying the function <EoL>
<BoL> Attempts to retrieve a reliable function code hash . <EoL>
<BoL> Return the function import path ( as a list of module names ) , and <EoL>
<BoL> Compatibility function to provide inspect.getfullargspec in Python 2 <EoL>
<BoL> Quick calculation of a hash to identify uniquely Python objects <EoL>
<BoL> Parameters <EoL>
<BoL> Subclass the save method , to hash ndarray subclass , rather <EoL>
<BoL> Remove .1s to the time under Windows : this is the time it take to <EoL>
<BoL> We do n't store the timestamp when pickling , to avoid the hash <EoL>
<BoL> Call wrapped function and cache result , or read cache if available . <EoL>
<BoL> stacklevel is the depth a which this function is called , to <EoL>
<BoL> Return the func identifier and input parameter hash of a result . <EoL>
<BoL> Hash a function to key the online cache <EoL>
<BoL> Save a small summary of the call using json format in the <EoL>
<BoL> Write the function code and the filename to a file . <EoL>
<BoL> Force the execution of the function with the given arguments and <EoL>
<BoL> Call wrapped function , cache result and return a reference . <EoL>
<BoL> Empty the function 's cache . <EoL>
<BoL> Build a roughly unique identifier for the cached function . <EoL>
<BoL> Helper function to format the message when loading the results . <EoL>
<BoL> Compute the part of part associated with a function . <EoL>
<BoL> Return the correct store object for the given location . <EoL>
<BoL> Extract the first line information from the function code <EoL>
<BoL> Extend available store backends . <EoL>
<BoL> Constructor . Store the useful information for later . <EoL>
<BoL> Reconstruct the array . <EoL>
<BoL> Constructor . Store the useful information for later . <EoL>
<BoL> Read the array corresponding to this wrapper . <EoL>
<BoL> Read array from unpickler file handle . <EoL>
<BoL> Read an array using numpy memmap . <EoL>
<BoL> Write array bytes to pickler file handle . <EoL>
<BoL> Create and returns a numpy array wrapper from a numpy array . <EoL>
<BoL> Subclass the Pickler ` save ` method . <EoL>
<BoL> Read a pickled object representation from the open file . <EoL>
<BoL> Called to set the state of a newly created object . <EoL>
<BoL> Return the bytes representation of the path . This is only <EoL>
<BoL> Return the string representation of the path , suitable for <EoL>
<BoL> Open the file pointed by this path and return a file descriptor , <EoL>
<BoL> Return an absolute version of this path . This function works <EoL>
<BoL> Return the string representation of the path with forward ( / ) <EoL>
<BoL> Return the path as a 'file ' URI . <EoL>
<BoL> Change the permissions of the path , like os.chmod ( ) . <EoL>
<BoL> Return a new path pointing to the current working directory <EoL>
<BoL> Whether this path exists . <EoL>
<BoL> Return a new path with expanded ~ and ~user constructs <EoL>
<BoL> Iterate over this subtree and yield all existing files ( of any <EoL>
<BoL> Return the group name of the file gid . <EoL>
<BoL> Return a new path pointing to the user 's home directory ( as <EoL>
<BoL> True if the path is absolute ( has both a root and , if applicable , <EoL>
<BoL> Whether this path is a block device . <EoL>
<BoL> Whether this path is a character device . <EoL>
<BoL> Whether this path is a directory . <EoL>
<BoL> Whether this path is a FIFO . <EoL>
<BoL> Whether this path is a regular file ( also True for symlinks pointing <EoL>
<BoL> Return True if the path contains one of the special names reserved <EoL>
<BoL> Whether this path is a socket . <EoL>
<BoL> Whether this path is a symbolic link . <EoL>
<BoL> Iterate over the files in this directory . Does not yield any <EoL>
<BoL> Combine this path with one or several arguments , and return a <EoL>
<BoL> Like chmod ( ) , except if the path points to a symlink , the symlink 's <EoL>
<BoL> Like stat ( ) , except if the path points to a symlink , the symlink 's <EoL>
<BoL> Return True if this path matches the given pattern . <EoL>
<BoL> Create a new directory at this given path . <EoL>
<BoL> Return the login name of the file owner . <EoL>
<BoL> Open the file in bytes mode , read it , and close the file . <EoL>
<BoL> Open the file in text mode , read it , and close the file . <EoL>
<BoL> Return the relative path to another path identified by the passed <EoL>
<BoL> Rename this path to the given path . <EoL>
<BoL> Rename this path to the given path , clobbering the existing <EoL>
<BoL> Make the path absolute , resolving all symlinks on the way and also <EoL>
<BoL> Recursively yield all existing files ( of any kind , including <EoL>
<BoL> Remove this directory . The directory must be empty . <EoL>
<BoL> Return whether other_path is the same or not as this file <EoL>
<BoL> Return the result of the stat ( ) system call on this path , like <EoL>
<BoL> Make this path a symlink pointing to the given path . <EoL>
<BoL> Create this file with the given access mode , if it does n't exist . <EoL>
<BoL> Remove this file or link . <EoL>
<BoL> Return a new path with the file name changed . <EoL>
<BoL> Return a new path with the file suffix changed ( or added , if none ) . <EoL>
<BoL> Open the file in bytes mode , write to it , and close the file . <EoL>
<BoL> Open the file in text mode , write to it , and close the file . <EoL>
<BoL> Constructor . Store the useful information for later . <EoL>
<BoL> Reconstruct the array from the meta-information and the z-file . <EoL>
<BoL> Read from file-like object until size bytes are read . <EoL>
<BoL> Utility function opening the right fileobject from a filename . <EoL>
<BoL> Internal unpickling function . <EoL>
<BoL> Return the right compressor file object in write mode . <EoL>
<BoL> Reconstruct a Python object from a file persisted with joblib.dump . <EoL>
<BoL> Constructor . <EoL>
<BoL> Set the state of a newly created object . <EoL>
<BoL> Convert an int to an hexadecimal string . <EoL>
<BoL> Read the z-file and return the content as a string . <EoL>
<BoL> Write the data in the given file as a Z-file . <EoL>
<BoL> Return a buffered version of a read file object . <EoL>
<BoL> Return a buffered version of a write file object . <EoL>
<BoL> Return the compressor matching fileobj . <EoL>
<BoL> Check if fileobj is a raw file object , e.g created with open . <EoL>
<BoL> Returns the Real distance from 0 . Called for abs ( self ) . <EoL>
<BoL> self + other <EoL>
<BoL> self & other <EoL>
<BoL> True if self ! = 0 . Called for bool ( self ) . <EoL>
<BoL> Finds the least Integral > = self . <EoL>
<BoL> complex ( self ) == complex ( float ( self ) , 0 ) <EoL>
<BoL> divmod ( self , other ) : The pair ( self // other , self % other ) . <EoL>
<BoL> self == other <EoL>
<BoL> float ( self ) == float ( int ( self ) ) <EoL>
<BoL> Finds the greatest Integral < = self . <EoL>
<BoL> self // other : The floor ( ) of self/other . <EoL>
<BoL> Called whenever an index is needed , such as in slicing <EoL>
<BoL> int ( self ) <EoL>
<BoL> ~self <EoL>
<BoL> self < = other <EoL>
<BoL> self < < other <EoL>
<BoL> self < other <EoL>
<BoL> self % other <EoL>
<BoL> self * other <EoL>
<BoL> -self <EoL>
<BoL> self | other <EoL>
<BoL> +self <EoL>
<BoL> self ** exponent % modulus , but maybe faster . <EoL>
<BoL> other + self <EoL>
<BoL> other & self <EoL>
<BoL> divmod ( other , self ) : The pair ( self // other , self % other ) . <EoL>
<BoL> other // self : The floor ( ) of other/self . <EoL>
<BoL> other < < self <EoL>
<BoL> other % self <EoL>
<BoL> other * self <EoL>
<BoL> other | self <EoL>
<BoL> Rounds self to ndigits decimal places , defaulting to 0 . <EoL>
<BoL> base ** self <EoL>
<BoL> other > > self <EoL>
<BoL> self > > other <EoL>
<BoL> other - self <EoL>
<BoL> other / self <EoL>
<BoL> other ^ self <EoL>
<BoL> self - other <EoL>
<BoL> self / other : Should promote to float when necessary . <EoL>
<BoL> trunc ( self ) : Truncates self to an Integral . <EoL>
<BoL> self ^ other <EoL>
<BoL> Conjugate is a no-op for Reals . <EoL>
<BoL> Register Dask Backend if called with parallel_backend ( `` dask '' ) <EoL>
<BoL> Returns False for indices increasingly apart , the distance <EoL>
<BoL> Return the active default backend <EoL>
<BoL> Register a new Parallel backend factory . <EoL>
<BoL> Attach a reducer function to a given type in the dispatch table . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the ( key , [ values ] ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Learn a list of feature name - > indices mappings . <EoL>
<BoL> Learn a list of feature name - > indices mappings and transform X . <EoL>
<BoL> Returns a list of feature names , ordered by their indices . <EoL>
<BoL> Transform array or sparse matrix X back to feature mappings . <EoL>
<BoL> Restrict the features to those in support using feature selection . <EoL>
<BoL> Transform feature- > value dicts to array or sparse matrix . <EoL>
<BoL> No-op . <EoL>
<BoL> Transform a sequence of instances to a scipy.sparse matrix . <EoL>
<BoL> Turn X into a sequence or ndarray , avoiding a copy if possible . <EoL>
<BoL> Cast iterable x to a Sequence , avoiding a copy if possible . <EoL>
<BoL> Like d.iteritems , but accepts any collections.Mapping . <EoL>
<BoL> Do nothing and return the estimator unchanged <EoL>
<BoL> Transforms the image samples in X into a matrix of patch data . <EoL>
<BoL> Compute the number of patches that will be extracted in an image . <EoL>
<BoL> Returns a list of edges for a 3D image . <EoL>
<BoL> Apply a mask to edges ( weighted or not ) <EoL>
<BoL> Extracts patches of any n-dimensional array in place using strides . <EoL>
<BoL> Reshape a 2D image into a collection of patches <EoL>
<BoL> Graph of the pixel-to-pixel gradient connections <EoL>
<BoL> Reconstruct the image from all of its patches . <EoL>
<BoL> Does nothing : this transformer is stateless . <EoL>
<BoL> Transform a sequence of documents to a document-term matrix . <EoL>
<BoL> Does nothing : this transformer is stateless . <EoL>
<BoL> Transform a sequence of documents to a document-term matrix . <EoL>
<BoL> Learn the idf vector ( global term weights ) <EoL>
<BoL> Transform a count matrix to a tf or tf-idf representation <EoL>
<BoL> Learn vocabulary and idf from training set . <EoL>
<BoL> Learn vocabulary and idf , return term-document matrix . <EoL>
<BoL> Transform documents to document-term matrix . <EoL>
<BoL> Count the number of non-zero values for each feature in sparse X . <EoL>
<BoL> Construct an array.array of a type suitable for scipy.sparse indices . <EoL>
<BoL> Perform is_fitted validation for estimator . <EoL>
<BoL> Transform accentuated unicode symbols into ascii or nothing <EoL>
<BoL> Transform accentuated unicode symbols into their simple counterpart <EoL>
<BoL> Basic regexp based HTML / XML tag stripper function <EoL>
<BoL> Run score function on ( X , y ) and get the appropriate features . <EoL>
<BoL> Get a mask , or integer index , of the features selected <EoL>
<BoL> Reverse the transformation operation <EoL>
<BoL> Reduce X to the selected features . <EoL>
<BoL> Compute the decision function of `` X `` . <EoL>
<BoL> Fit the RFE model and then the underlying estimator on the selected <EoL>
<BoL> Reduce X to the selected features and then predict using the <EoL>
<BoL> Predict class log-probabilities for X . <EoL>
<BoL> Predict class probabilities for X . <EoL>
<BoL> Reduce X to the selected features and then return the score of the <EoL>
<BoL> Fit the RFE model and automatically tune the number of selected <EoL>
<BoL> Fit the SelectFromModel meta-transformer . <EoL>
<BoL> Fit the SelectFromModel meta-transformer only once . <EoL>
<BoL> Learn empirical variances from X . <EoL>
<BoL> Get the boolean mask indicating which features are selected <EoL>
<BoL> interpret other and call one of the following <EoL>
<BoL> apply the binary operation fn to two sparse matrices . <EoL>
<BoL> Process indices with Ellipsis . Returns modified index . <EoL>
<BoL> Determine whether the matrix has sorted indices and no duplicates <EoL>
<BoL> Determine whether the matrix has sorted indices <EoL>
<BoL> Divide this matrix by a second sparse matrix . <EoL>
<BoL> Return a submatrix of this matrix ( new matrix is created ) . <EoL>
<BoL> Inserts new nonzero at each ( i , j ) with value x <EoL>
<BoL> Reduce nonzeros with a ufunc over the minor axis when non-empty <EoL>
<BoL> Scalar version of self._binopt , for cases in which no new nonzeros <EoL>
<BoL> Sets value at each ( i , j ) to x <EoL>
<BoL> take the member variables of other and assign them to self <EoL>
<BoL> Given a slice object , use numpy arange to change it to a 1D <EoL>
<BoL> swap the members of x if this is a column-oriented matrix <EoL>
<BoL> Parse index . Always return a tuple of the form ( row , col ) . <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , <EoL>
<BoL> Sets value at each ( i , j ) to zero , preserving sparsity structure . <EoL>
<BoL> Return indices of maximum elements along an axis . <EoL>
<BoL> Return indices of minimum elements along an axis . <EoL>
<BoL> Return this matrix in the passed sparse format . <EoL>
<BoL> Upcast matrix to a floating point format ( if necessary ) <EoL>
<BoL> check whether the matrix format is valid <EoL>
<BoL> Ordinary dot product <EoL>
<BoL> Remove zero entries from the matrix <EoL>
<BoL> Return the Hermitian transpose of this matrix . <EoL>
<BoL> Get shape of a matrix . <EoL>
<BoL> Returns a copy of column i of the matrix , as a ( m x 1 ) <EoL>
<BoL> Format of a matrix representation as a string . <EoL>
<BoL> Maximum number of elements to display when printed . <EoL>
<BoL> Returns a copy of row i of the matrix , as a ( 1 x n ) <EoL>
<BoL> Return the maximum of the matrix or maximum along an axis . <EoL>
<BoL> Compute the arithmetic mean along the specified axis . <EoL>
<BoL> Return the minimum of the matrix or maximum along an axis . <EoL>
<BoL> Point-wise multiplication by another matrix , vector , or <EoL>
<BoL> This function performs element-wise power . <EoL>
<BoL> Remove empty space after all non-zero elements . <EoL>
<BoL> reshape ( self , shape , order='C ' , copy=False ) <EoL>
<BoL> See ` reshape ` . <EoL>
<BoL> Set diagonal or off-diagonal elements of the array . <EoL>
<BoL> Sort the indices of this matrix *in place* <EoL>
<BoL> Return a copy of this matrix with sorted indices <EoL>
<BoL> Sum the matrix over the given axis . If the axis is None , sum <EoL>
<BoL> Eliminate duplicate matrix entries by adding them together <EoL>
<BoL> Convert this matrix to Block Sparse Row format . <EoL>
<BoL> Return a dense matrix representation of this matrix . <EoL>
<BoL> Convert this matrix to sparse DIAgonal format . <EoL>
<BoL> Convert this matrix to Dictionary Of Keys format . <EoL>
<BoL> Convert this matrix to LInked List format . <EoL>
<BoL> Is x of a sparse matrix type ? <EoL>
<BoL> Return a mask which is safe to use on X . <EoL>
<BoL> Compute chi-squared stats between each non-negative feature and class . <EoL>
<BoL> Compute the ANOVA F-value for the provided sample . <EoL>
<BoL> Performs a 1-way ANOVA . <EoL>
<BoL> Univariate linear regression tests . <EoL>
<BoL> Interpret the threshold value <EoL>
<BoL> Retrieve or aggregate feature importances from estimator <EoL>
<BoL> Create a decorator for methods that are delegated to a sub-estimator <EoL>
<BoL> Fit the model using X as training data <EoL>
<BoL> Finds the K-neighbors of a point . <EoL>
<BoL> Finds the neighbors within a given radius of a point or points . <EoL>
<BoL> Computes the ( weighted ) graph of Neighbors for points in X <EoL>
<BoL> Compute mutual information between two variables . <EoL>
<BoL> Compute mutual information between two continuous variables . <EoL>
<BoL> Compute mutual information between continuous and discrete variables . <EoL>
<BoL> Iterate over columns of a matrix . <EoL>
<BoL> Ensure that target y is of a non-regression type . <EoL>
<BoL> Mutual Information between two clusterings . <EoL>
<BoL> Return the score for a fit across one fold . <EoL>
<BoL> Create subset of dataset and properly handle kernels . <EoL>
<BoL> Compute the score ( s ) of an estimator on a given test set . <EoL>
<BoL> Input checker utility for building a cross-validator <EoL>
<BoL> Determine scorer from user options . <EoL>
<BoL> Element wise squaring of array-likes and sparse matrices . <EoL>
<BoL> Fit label binarizer <EoL>
<BoL> Fit label binarizer and transform multi-class labels to binary <EoL>
<BoL> Transform binary labels back to multi-class labels <EoL>
<BoL> Transform multi-class labels to binary labels <EoL>
<BoL> Fast replacement for scipy.stats.chisquare . <EoL>
<BoL> Fixes Issue # 1240 : NaNs ca n't be properly compared , so change them to the <EoL>
<BoL> Converts an array-like to an array of floats . <EoL>
<BoL> Row-wise ( squared ) Euclidean norm of X . <EoL>
<BoL> Dot product that handle the sparse matrix case correctly <EoL>
<BoL> Compute mean and variance along an axix on a CSR or CSC matrix <EoL>
<BoL> Set the intercept_ <EoL>
<BoL> Fit the ARDRegression model according to the given training data <EoL>
<BoL> Predict using the linear model . <EoL>
<BoL> Fit the model <EoL>
<BoL> Predict using the linear model . <EoL>
<BoL> Decision function of the linear model <EoL>
<BoL> Fit model with coordinate descent . <EoL>
<BoL> Predict using the linear model <EoL>
<BoL> Fit linear model with coordinate descent <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Auxiliary method to fit the model using X , y as training data <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit linear model . <EoL>
<BoL> Probability estimation for OvR logistic regression . <EoL>
<BoL> Predict confidence scores for samples . <EoL>
<BoL> Convert coefficient matrix to dense array format . <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Predict class labels for samples in X . <EoL>
<BoL> Log of probability estimates . <EoL>
<BoL> Probability estimates . <EoL>
<BoL> Convert coefficient matrix to sparse format . <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Returns the score using the ` scoring ` option on the given <EoL>
<BoL> Fit MultiTaskElasticNet model with coordinate descent <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Get concrete `` LossFunction `` object for str `` loss `` . <EoL>
<BoL> Split the dataset between training set and validation set . <EoL>
<BoL> Validate input params . <EoL>
<BoL> Set the sample weight array . <EoL>
<BoL> Compute the score on the validation set . Used for early stopping . <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Predict using the linear model <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Predict using the linear model <EoL>
<BoL> Fit linear model with Stochastic Gradient Descent . <EoL>
<BoL> Fit estimator using RANSAC algorithm . <EoL>
<BoL> Predict using the estimated model . <EoL>
<BoL> Returns the score of the prediction . <EoL>
<BoL> Get the boolean mask indicating which features are selected . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Center the data in X but not in y <EoL>
<BoL> Fit Ridge regression model <EoL>
<BoL> Fit Ridge regression model <EoL>
<BoL> Fit Ridge regression model . <EoL>
<BoL> Fit the ridge classifier . <EoL>
<BoL> Fit linear model with Stochastic Gradient Descent . <EoL>
<BoL> Fit linear model . <EoL>
<BoL> Fit model . <EoL>
<BoL> Rescale data so as to support sample_weight <EoL>
<BoL> Inplace column scaling of a CSC/CSR matrix . <EoL>
<BoL> Create `` Dataset `` abstraction for sparse and dense inputs . <EoL>
<BoL> Compute log ( det ( A ) ) for A symmetric <EoL>
<BoL> Ravel column or 1d numpy array , else raises an error <EoL>
<BoL> Returns the Huber loss and the gradient . <EoL>
<BoL> This mask is safer than safe_mask since it returns an <EoL>
<BoL> Check that all arrays have consistent first dimensions . <EoL>
<BoL> Return available LAPACK function objects from names . <EoL>
<BoL> Fit label encoder <EoL>
<BoL> Fit label encoder and return encoded labels <EoL>
<BoL> Transform labels back to original encoding . <EoL>
<BoL> Transform labels to normalized encoding . <EoL>
<BoL> Computes y * np.dot ( X , w ) . <EoL>
<BoL> Computes the gradient and the Hessian , in the case of a logistic loss . <EoL>
<BoL> Computes the logistic loss . <EoL>
<BoL> Computes the logistic loss and gradient . <EoL>
<BoL> Computes the gradient and the Hessian , in the case of a multinomial loss . <EoL>
<BoL> Computes multinomial loss and class probabilities . <EoL>
<BoL> Computes the multinomial loss , gradient and class probabilities . <EoL>
<BoL> Estimate class weights for unbalanced datasets . <EoL>
<BoL> Get a scorer from string <EoL>
<BoL> Compute the log of the logistic function , `` log ( 1 / ( 1 + e ** -x ) ) `` . <EoL>
<BoL> Compute the log of the sum of exponentials of input elements . <EoL>
<BoL> Calculate the softmax function . <EoL>
<BoL> Squared Euclidean or Frobenius norm of x . <EoL>
<BoL> Return the parameters passed to the estimator <EoL>
<BoL> Evaluate the interpolant <EoL>
<BoL> Find nearest neighbour interpolated y_new = f ( x_new ) . <EoL>
<BoL> Use previous/next neighbour of x_new , y_new = f ( x_new ) . <EoL>
<BoL> Check the inputs for being in the bounds of the interpolated data . <EoL>
<BoL> Reshape interpolated y back to n-d array similar to initial y <EoL>
<BoL> Reshape input x array to 1-D <EoL>
<BoL> Determine number trials such that at least one outlier-free subset is <EoL>
<BoL> Checks whether the estimator 's fit method supports the given parameter . <EoL>
<BoL> A small helper to store the scores/times to the cv_results_ <EoL>
<BoL> Search all candidates in param_grid <EoL>
<BoL> Call decision_function on the estimator with the best found parameters . <EoL>
<BoL> Run fit with all sets of parameters . <EoL>
<BoL> Call inverse_transform on the estimator with the best found params . <EoL>
<BoL> Call predict on the estimator with the best found parameters . <EoL>
<BoL> Call predict_log_proba on the estimator with the best found parameters . <EoL>
<BoL> Call predict_proba on the estimator with the best found parameters . <EoL>
<BoL> Returns the score on the given data , if the estimator has been refit . <EoL>
<BoL> Call transform on the estimator with the best found parameters . <EoL>
<BoL> Helper function to avoid code duplication between self._errors and <EoL>
<BoL> Helper function to avoid code duplication between self._errors_svd <EoL>
<BoL> Fit Ridge regression model <EoL>
<BoL> Estimate sample weights by class for unbalanced datasets . <EoL>
<BoL> Fit model . <EoL>
<BoL> Private helper function for factorizing common classes param logic <EoL>
<BoL> Initialization for fit_binary . <EoL>
<BoL> Split arrays or matrices into random train and test subsets <EoL>
<BoL> Approximation of the breakdown point . <EoL>
<BoL> Least Squares Estimator for TheilSenRegressor class . <EoL>
<BoL> Modified Weiszfeld step . <EoL>
<BoL> Spatial median ( L1 median ) . <EoL>
<BoL> Accuracy classification score . <EoL>
<BoL> Rand index adjusted for chance . <EoL>
<BoL> Compute Area Under the Curve ( AUC ) using the trapezoidal rule <EoL>
<BoL> Determine the type of data indicated by the target . <EoL>
<BoL> Compute the Brier score . <EoL>
<BoL> Compute the Calinski and Harabaz score . <EoL>
<BoL> Check that y_true is binary and y_prob contains valid probabilities <EoL>
<BoL> Check that y_true and y_pred belong to the same classification task <EoL>
<BoL> Return number of samples in array-like x . <EoL>
<BoL> Performs division and handles divide-by-zero . <EoL>
<BoL> Throw a ValueError if X contains NaN or infinity . <EoL>
<BoL> r '' '' '' Cohen 's kappa : a statistic that measures inter-annotator agreement . <EoL>
<BoL> Compute confusion matrix to evaluate the accuracy of a classification <EoL>
<BoL> Checks data structure for consistency <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , <EoL>
<BoL> Remove zero entries from the matrix <EoL>
<BoL> Returns a copy of column j of the matrix , as an ( m x 1 ) sparse <EoL>
<BoL> Returns a copy of row i of the matrix , as a ( 1 x n ) sparse <EoL>
<BoL> Element-wise maximum between this and another matrix . <EoL>
<BoL> Element-wise minimum between this and another matrix . <EoL>
<BoL> Point-wise multiplication by another matrix <EoL>
<BoL> nonzero indices <EoL>
<BoL> Sum the matrix elements over a given axis . <EoL>
<BoL> Eliminate duplicate matrix entries by adding them together <EoL>
<BoL> See the docstring for ` spmatrix.toarray ` . <EoL>
<BoL> Convert this matrix to Compressed Sparse Column format <EoL>
<BoL> Convert this matrix to Compressed Sparse Row format <EoL>
<BoL> A variant of X.getnnz ( ) with extension to weighting on axis 0 <EoL>
<BoL> Return a sparse matrix P so that P*self implements <EoL>
<BoL> Returns a copy of row self [ i , cslice ] <EoL>
<BoL> Return a submatrix of this matrix ( new matrix is created ) . <EoL>
<BoL> swap the members of x if this is a column-oriented matrix <EoL>
<BoL> Returns a copy of column i of the matrix , as a ( m x 1 ) <EoL>
<BoL> Returns a copy of row i of the matrix , as a ( 1 x n ) <EoL>
<BoL> Compute the average Hamming loss . <EoL>
<BoL> Average hinge loss ( non-regularized ) <EoL>
<BoL> Binarize labels in a one-vs-all fashion <EoL>
<BoL> Compute the Matthews correlation coefficient ( MCC ) <EoL>
<BoL> Extract an ordered array of unique labels <EoL>
<BoL> Zero-one classification loss . <EoL>
<BoL> Unpacks the row and column arrays and checks their shape . <EoL>
<BoL> Jaccard coefficient on the elements of the two biclusters . <EoL>
<BoL> Computes pairwise similarity matrix . <EoL>
<BoL> The similarity of two sets of biclusters . <EoL>
<BoL> Solve the linear assignment problem using the Hungarian algorithm . <EoL>
<BoL> Completeness metric of a cluster labeling given a ground truth . <EoL>
<BoL> Build a contingency matrix describing the relationship between labels . <EoL>
<BoL> Computes the Davies-Bouldin score . <EoL>
<BoL> Calculates the entropy for a labeling . <EoL>
<BoL> Measure the similarity of two clusterings of a set of points . <EoL>
<BoL> Compute the homogeneity and completeness and V-Measure scores at once . <EoL>
<BoL> Homogeneity metric of a cluster labeling given a ground truth . <EoL>
<BoL> Compute the Silhouette Coefficient for each sample . <EoL>
<BoL> Return a particular mean of two numbers . <EoL>
<BoL> Check that the labels arrays are 1D and of same dimension . <EoL>
<BoL> The number of combinations of N things taken k at a time . <EoL>
<BoL> V-measure cluster labeling given a ground truth . <EoL>
<BoL> Accumulate silhouette statistics for vertical chunk of X <EoL>
<BoL> Check that number of labels are valid . <EoL>
<BoL> Compute the distance matrix from a vector array X and optional Y . <EoL>
<BoL> Return items or rows from X using indices . <EoL>
<BoL> Coverage error measure <EoL>
<BoL> Compute ranking-based average precision <EoL>
<BoL> Compute Ranking loss measure <EoL>
<BoL> Median absolute error regression loss <EoL>
<BoL> Checks chunk is a sequence of expected size or a tuple of same <EoL>
<BoL> Handle the callable case for pairwise_ { distances , kernels } <EoL>
<BoL> Break the pairwise matrix in n_jobs even slices <EoL>
<BoL> 1 . If dtype of X and Y is float32 , then dtype float32 is returned . <EoL>
<BoL> Computes the additive chi-squared kernel between observations in X and Y <EoL>
<BoL> Set X and Y appropriately and checks inputs for paired distances <EoL>
<BoL> Set X and Y appropriately and checks inputs <EoL>
<BoL> Computes the exponential chi-squared kernel X and Y . <EoL>
<BoL> Compute cosine distance between samples in X and Y . <EoL>
<BoL> Compute cosine similarity between samples in X and Y . <EoL>
<BoL> Valid metrics for pairwise_distances . <EoL>
<BoL> Generator to create slices containing batch_size elements , from 0 to n . <EoL>
<BoL> Generator to create n_packs slices going up to n . <EoL>
<BoL> Valid metrics for pairwise_kernels <EoL>
<BoL> Compute the laplacian kernel between X and Y . <EoL>
<BoL> Compute the linear kernel between X and Y . <EoL>
<BoL> Computes the paired cosine distances between X and Y <EoL>
<BoL> Computes the paired distances between X and Y . <EoL>
<BoL> Computes the paired euclidean distances between X and Y <EoL>
<BoL> Compute the L1 distances between the vectors in X and Y . <EoL>
<BoL> Compute the polynomial kernel between X and Y : : <EoL>
<BoL> Compute the rbf ( gaussian ) kernel between X and Y : : <EoL>
<BoL> Compute the sigmoid kernel between X and Y : : <EoL>
<BoL> Calculate true and false positives per binary classification threshold . <EoL>
<BoL> Assign ranks to data , dealing with ties appropriately . <EoL>
<BoL> Use high precision for cumsum and check that final value matches sum <EoL>
<BoL> Check that y_true and y_pred belong to the same regression task <EoL>
<BoL> Return non-default make_scorer arguments for repr . <EoL>
<BoL> Evaluate predicted target values for X relative to y_true . <EoL>
<BoL> Evaluate predicted probabilities for X relative to y_true . <EoL>
<BoL> Evaluate decision function output for X relative to y_true . <EoL>
<BoL> Check the scoring parameter in cases when multiple metrics are allowed <EoL>
<BoL> Function that wraps estimator.score <EoL>
<BoL> Generates integer indices corresponding to test sets . <EoL>
<BoL> Generates boolean masks corresponding to test sets . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Get the parameters that would be `` ind `` th in iteration <EoL>
<BoL> Iterate over the points in the grid . <EoL>
<BoL> Number of points on the grid . <EoL>
<BoL> Number of points that will be sampled . <EoL>
<BoL> Generates boolean masks corresponding to test sets . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Search n_iter candidates from param_distributions <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generates indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Repeatedly calls ` evaluate_candidates ` to conduct a search . <EoL>
<BoL> Add a warning to be triggered when the specified key is read <EoL>
<BoL> Return the value corresponding to key , else default . <EoL>
<BoL> Add self to other , and return a new masked array . <EoL>
<BoL> Finalizes the masked array . <EoL>
<BoL> Special hook for ufuncs . <EoL>
<BoL> Divide other into self , and return a new masked array . <EoL>
<BoL> Check whether other equals self elementwise . <EoL>
<BoL> Convert to float . <EoL>
<BoL> Divide other into self , and return a new masked array . <EoL>
<BoL> x.__getitem__ ( y ) < == > x [ y ] Return whether ` elem ` is a scalar result of indexing ` arr ` , or None <EoL>
<BoL> Return the internal state of the masked array , for pickling <EoL>
<BoL> Add other to self in-place . <EoL>
<BoL> Divide self by other in-place . <EoL>
<BoL> Floor divide self by other in-place . <EoL>
<BoL> Multiply self by other in-place . <EoL>
<BoL> Convert to int . <EoL>
<BoL> Raise self to the power other , in place . <EoL>
<BoL> Subtract other from self in-place . <EoL>
<BoL> True divide self by other in-place . <EoL>
<BoL> Convert to long . <EoL>
<BoL> Check whether other does not equal self elementwise . <EoL>
<BoL> Raise self to the power other , masking the potential NaNs/Infs <EoL>
<BoL> Add other to self , and return a new masked array . <EoL>
<BoL> Return a 3-tuple for pickling a MaskedArray . <EoL>
<BoL> Literal string representation . <EoL>
<BoL> Divide self into other , and return a new masked array . <EoL>
<BoL> Multiply other by self , and return a new masked array . <EoL>
<BoL> Raise other to the power self , masking the potential NaNs/Infs <EoL>
<BoL> Subtract self from other , and return a new masked array . <EoL>
<BoL> Divide self into other , and return a new masked array . <EoL>
<BoL> x.__setitem__ ( i , y ) < == > x [ i ] =y <EoL>
<BoL> Set the mask . <EoL>
<BoL> Restore the internal state of the masked array , for <EoL>
<BoL> Subtract other from self , and return a new masked array . <EoL>
<BoL> Divide other into self , and return a new masked array . <EoL>
<BoL> Compare self with other using operator.eq or operator.ne . <EoL>
<BoL> Return the current data , as a view of the original <EoL>
<BoL> Return the current mask . <EoL>
<BoL> Return the mask of the records . <EoL>
<BoL> Replace masked values with masked_print_option , casting all innermost <EoL>
<BoL> Return the mask of the records . <EoL>
<BoL> Copies some attributes of obj to self . <EoL>
<BoL> Returns True if all elements evaluate to True . <EoL>
<BoL> Compute the anomalies ( deviations from the arithmetic mean ) <EoL>
<BoL> Returns True if any of the elements of ` a ` evaluate to True . <EoL>
<BoL> Returns array of indices of the maximum values along the given axis . <EoL>
<BoL> Return array of indices to the minimum values along the given axis . <EoL>
<BoL> Returns a copy of the MaskedArray cast to given newtype . <EoL>
<BoL> Return ` a ` where condition is `` True `` . <EoL>
<BoL> Return all the non-masked data as a 1-D array . <EoL>
<BoL> Count the non-masked elements of the array along the given axis . <EoL>
<BoL> Return the cumulative product of the array elements over the given axis . <EoL>
<BoL> Return the cumulative sum of the array elements over the given axis . <EoL>
<BoL> a.dot ( b , out=None ) <EoL>
<BoL> Return a copy of self , with masked values filled with a given value . <EoL>
<BoL> Return the filling value of the masked array . <EoL>
<BoL> Return the imaginary part of the masked array . <EoL>
<BoL> Return the real part of the masked array . <EoL>
<BoL> Force the mask to hard . <EoL>
<BoL> Return the addresses of the data and mask areas . <EoL>
<BoL> Return a boolean indicating whether the data is contiguous . <EoL>
<BoL> Return the maximum along a given axis . <EoL>
<BoL> Returns the average of the array elements along given axis . <EoL>
<BoL> Return the minimum along a given axis . <EoL>
<BoL> Return the array minimum along the specified axis . <EoL>
<BoL> Return the indices of unmasked elements that are not zero . <EoL>
<BoL> Return the product of the array elements over the given axis . <EoL>
<BoL> Return ( maximum - minimum ) along the given dimension <EoL>
<BoL> Set storage-indexed locations to corresponding values . <EoL>
<BoL> Returns a 1D version of self , as a view . <EoL>
<BoL> Give a new shape to the array without changing its data . <EoL>
<BoL> .. warning : : <EoL>
<BoL> Return each element rounded to the given number of decimals . <EoL>
<BoL> Set the filling value of the masked array . <EoL>
<BoL> Reduce a mask to nomask when possible . <EoL>
<BoL> Force the mask to soft . <EoL>
<BoL> Return the sum of the array elements over the given axis . <EoL>
<BoL> <EoL>
<BoL> Return the array data as a string containing the raw bytes in the array . <EoL>
<BoL> Save a masked array to a file in binary format . <EoL>
<BoL> Transforms a masked array into a flexible-type array . <EoL>
<BoL> Return the data portion of the masked array as a hierarchical Python list . <EoL>
<BoL> This function is a compatibility alias for tobytes . Despite its name it <EoL>
<BoL> ( this docstring should be overwritten ) <EoL>
<BoL> Copy the mask and set the sharedmask flag to False . <EoL>
<BoL> Return a view of the MaskedArray data <EoL>
<BoL> S.index ( value , [ start , [ stop ] ] ) - > integer -- return first index of value . <EoL>
<BoL> Simple custom repr to summarize the main info <EoL>
<BoL> Aggregate the list of dict to dict of np ndarray <EoL>
<BoL> Make arrays indexable for cross-validation . <EoL>
<BoL> Generate ( train , test ) indices <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Computes approximate mode of multivariate hypergeometric . <EoL>
<BoL> Validation helper to check if the test/test sizes are meaningful wrt to the <EoL>
<BoL> Validation helper to check the test_size and train_size at init <EoL>
<BoL> Check whether indices is a reordering of the array np.arange ( n_samples ) <EoL>
<BoL> Private helper function for parameter value indexing . <EoL>
<BoL> Returns whether the input is array-like <EoL>
<BoL> Return a dict of score for multimetric scoring <EoL>
<BoL> Auxiliary function for permutation_test_score <EoL>
<BoL> Return a shuffled copy of y eventually shuffle among same groups . <EoL>
<BoL> Determine absolute sizes of training subsets and validate 'train_sizes ' . <EoL>
<BoL> Format the exception part of a traceback . <EoL>
<BoL> Fit the model using X as training data and y as target values <EoL>
<BoL> Predict the class labels for the provided data <EoL>
<BoL> Return probability estimates for the test data X . <EoL>
<BoL> Fit the model using X as training data and y as target values <EoL>
<BoL> Predict the target for the provided data <EoL>
<BoL> Fit the Kernel Density model on the data . <EoL>
<BoL> Generate random samples from the model . <EoL>
<BoL> Compute the total log probability under the model . <EoL>
<BoL> Evaluate the density model on the data . <EoL>
<BoL> Computes the cosine distance . <EoL>
<BoL> Creates left and right masks for all hash lengths . <EoL>
<BoL> Performs the Synchronous ascending phase . <EoL>
<BoL> Finds radius neighbors from the candidates obtained . <EoL>
<BoL> Performs descending phase to find maximum depth . <EoL>
<BoL> Fit the LSH forest on the data . <EoL>
<BoL> Returns n_neighbors of approximate nearest neighbors . <EoL>
<BoL> Inserts new data into the already fitted LSH Forest . <EoL>
<BoL> Finds the neighbors within a given radius of a point or points . <EoL>
<BoL> Shifted opposite of the Local Outlier Factor of X . <EoL>
<BoL> Fits the model to the training set X and returns the labels . <EoL>
<BoL> The local reachability density ( LRD ) <EoL>
<BoL> Predict the labels ( 1 inlier , -1 outlier ) of X according to LOF . <EoL>
<BoL> Opposite of the Local Outlier Factor of X . <EoL>
<BoL> Fit the model using X as training data . <EoL>
<BoL> Fit the NearestCentroid model according to the given training data . <EoL>
<BoL> Perform classification on an array of test vectors X . <EoL>
<BoL> Predict the class labels for the provided data <EoL>
<BoL> Predict the target for the provided data <EoL>
<BoL> Generate the random projection matrix <EoL>
<BoL> Generate a sparse random projection matrix <EoL>
<BoL> Project the data by using matrix product with the random matrix <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Creates an array of array from list of arrays . <EoL>
<BoL> Finds indices in sorted array of integers . <EoL>
<BoL> Check to make sure weights are valid <EoL>
<BoL> Get the weights from an array of distances and a parameter `` weights `` <EoL>
<BoL> Returns an array of the weighted modal ( most common ) value in a <EoL>
<BoL> Check the validity of the input parameters <EoL>
<BoL> Return the query based on include_self param <EoL>
<BoL> Find the median across axis 0 of a CSC matrix . <EoL>
<BoL> Do nothing and return the estimator unchanged <EoL>
<BoL> Binarize each element of X <EoL>
<BoL> Check that func and inverse_func are the inverse . <EoL>
<BoL> Fit transformer by checking X . <EoL>
<BoL> Transform X using the inverse function . <EoL>
<BoL> Transform X using the forward function . <EoL>
<BoL> Fit the transformer on dense data . <EoL>
<BoL> Fit the transformer on sparse data . <EoL>
<BoL> Fit the imputer on X . <EoL>
<BoL> Impute all missing values in X . <EoL>
<BoL> Returns n_bins_ , the number of bins per feature . <EoL>
<BoL> Fits the estimator . <EoL>
<BoL> Transforms discretized data back to original feature space . <EoL>
<BoL> Discretizes the data . <EoL>
<BoL> Fit KernelCenterer <EoL>
<BoL> Center kernel matrix . <EoL>
<BoL> Reset internal data-dependent state of the scaler , if necessary . <EoL>
<BoL> Compute the maximum absolute value to be used for later scaling . <EoL>
<BoL> Scale back the data to the original representation <EoL>
<BoL> Online computation of max absolute value of X for later scaling . <EoL>
<BoL> Scale the data <EoL>
<BoL> Reset internal data-dependent state of the scaler , if necessary . <EoL>
<BoL> Compute the minimum and maximum to be used for later scaling . <EoL>
<BoL> Undo the scaling of X according to feature_range . <EoL>
<BoL> Online computation of min and max on X for later scaling . <EoL>
<BoL> Scaling features of X according to feature_range . <EoL>
<BoL> Do nothing and return the estimator unchanged <EoL>
<BoL> Scale each non zero row of X to unit norm <EoL>
<BoL> Perform custom check_array : <EoL>
<BoL> Assumes X contains only categorical features . <EoL>
<BoL> Assumes X contains only categorical features . <EoL>
<BoL> New implementation assuming categorical input <EoL>
<BoL> Fit OneHotEncoder to X . <EoL>
<BoL> Fit OneHotEncoder to X , then transform X . <EoL>
<BoL> Return feature names for output features . <EoL>
<BoL> Convert the back data to the original representation . <EoL>
<BoL> Transform X using one-hot encoding . <EoL>
<BoL> Fit the OrdinalEncoder to X . <EoL>
<BoL> Convert the data back to the original representation . <EoL>
<BoL> Transform X to ordinal codes . <EoL>
<BoL> Compute number of output features . <EoL>
<BoL> Return feature names for output features <EoL>
<BoL> Transform data to polynomial features <EoL>
<BoL> Return inverse-transformed input x following Box-Cox inverse <EoL>
<BoL> Find and return optimal lambda parameter of the Box-Cox transform by <EoL>
<BoL> Return inverse-transformed input x following Yeo-Johnson inverse <EoL>
<BoL> Find and return optimal lambda parameter of the Yeo-JohnsonReturn the negative log likelihood of the observed data x as a <EoL>
<BoL> Return transformed input x following Yeo-Johnson transform with <EoL>
<BoL> Estimate the optimal parameter lambda for each feature . <EoL>
<BoL> Apply the inverse power transformation using the fitted lambdas . <EoL>
<BoL> Apply the power transform to each feature using the fitted lambdas . <EoL>
<BoL> Check inputs before fit and transform <EoL>
<BoL> Check the inputs before transforming <EoL>
<BoL> Compute percentiles for dense matrices . <EoL>
<BoL> Compute percentiles for sparse matrices . <EoL>
<BoL> Forward and inverse transform . <EoL>
<BoL> Private function to transform a single feature <EoL>
<BoL> Compute the quantiles used for transforming . <EoL>
<BoL> Back-projection to the original space . <EoL>
<BoL> Feature-wise transformation of the data . <EoL>
<BoL> Compute the median and quantiles to be used for scaling . <EoL>
<BoL> Scale back the data to the original representation <EoL>
<BoL> Center and scale the data . <EoL>
<BoL> Reset internal data-dependent state of the scaler , if necessary . <EoL>
<BoL> Compute the mean and std to be used for later scaling . <EoL>
<BoL> Scale back the data to the original representation <EoL>
<BoL> Online computation of mean and std on X for later scaling . <EoL>
<BoL> Perform standardization by centering and scaling <EoL>
<BoL> Helper function to factorize ( find uniques ) and encode values . <EoL>
<BoL> Helper function to check for unknowns in values to be encoded . <EoL>
<BoL> The identity function . <EoL>
<BoL> Assert allclose for sparse and dense data . <EoL>
<BoL> Augment dataset with an additional dummy feature . <EoL>
<BoL> Boolean thresholding of array-like or scipy.sparse matrix <EoL>
<BoL> Makes sure that whenever scale is zero , we handle it correctly . <EoL>
<BoL> Calculate mean update and a Youngs and Cramer variance update . <EoL>
<BoL> Compute incremental mean and variance along an axix on a CSR or <EoL>
<BoL> Compute minimum and maximum along an axis on a CSR or CSC matrix and <EoL>
<BoL> Compute the median along the specified axis , while ignoring NaNs . <EoL>
<BoL> Apply a power transform featurewise to make data more Gaussian-like . <EoL>
<BoL> Compute the boolean mask X == missing_values . <EoL>
<BoL> Compute the median of data with n_zeros additional zeros . <EoL>
<BoL> Compute the most frequent value in a 1d array extended with <EoL>
<BoL> Inverse label binarization transformation for multiclass . <EoL>
<BoL> Inverse label binarization transformation using thresholding . <EoL>
<BoL> Generate the random projection matrix <EoL>
<BoL> Generate the random projection matrix <EoL>
<BoL> Factorize density check according to Li et al . <EoL>
<BoL> Factorize argument checking for random matrix generation <EoL>
<BoL> Raises an AssertionError if two objects are not equal . <EoL>
<BoL> Generate a dense Gaussian random matrix . <EoL>
<BoL> Find a 'safe ' number of components to randomly project to <EoL>
<BoL> Fixture for the tests to assure globally controllable seeding of RNGs <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Return the data transformed by a callable kernel <EoL>
<BoL> Distance of the samples X to the separating hyperplane . <EoL>
<BoL> Distance of the samples X to the separating hyperplane . <EoL>
<BoL> Fit the SVM model according to the given training data . <EoL>
<BoL> Perform classification on samples in X . <EoL>
<BoL> Validation of y and class_weight . <EoL>
<BoL> Perform regression on samples in X . <EoL>
<BoL> Signed distance to the separating hyperplane . <EoL>
<BoL> Detects the soft boundary of the set of samples X . <EoL>
<BoL> Perform classification on samples in X . <EoL>
<BoL> Raw scoring function of the samples . <EoL>
<BoL> Raise a ValueError if X has 64bit indices and accept_large_sparse=False <EoL>
<BoL> Find the liblinear magic number for the solver . <EoL>
<BoL> Generate primal coefficients from dual coefficients <EoL>
<BoL> Compute a continuous , tie-breaking OvR decision function from OvO . <EoL>
<BoL> Information on system BLAS <EoL>
<BoL> Overview of the installed version of main dependencies <EoL>
<BoL> System information <EoL>
<BoL> Create an instance of the class that will use the named test <EoL>
<BoL> The default assertEqual implementation , not type specific . <EoL>
<BoL> Honour the longMessage attribute when generating failure messages . <EoL>
<BoL> Get a detailed comparison function for the types of the two args . <EoL>
<BoL> Add a function , with arguments , to be called when the test is <EoL>
<BoL> Add a type specific assertEqual style function to compare a type . <EoL>
<BoL> An unordered sequence comparison asserting that the same elements , <EoL>
<BoL> Checks whether dictionary is a superset of subset . <EoL>
<BoL> Fail if the two objects are unequal as determined by the '== ' <EoL>
<BoL> Check that the expression is false . <EoL>
<BoL> Just like self.assertTrue ( a > b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a > = b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a in b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a is b ) , but with a nicer default message . <EoL>
<BoL> Same as self.assertTrue ( isinstance ( obj , cls ) ) , with a nicer <EoL>
<BoL> Same as self.assertTrue ( obj is None ) , with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a is not b ) , but with a nicer default message . <EoL>
<BoL> Included for symmetry with assertIsNone . <EoL>
<BoL> Just like self.assertTrue ( a < b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a < = b ) , but with a nicer default message . <EoL>
<BoL> A list-specific equality assertion . <EoL>
<BoL> Fail unless a log message of level *level* or higher is emitted <EoL>
<BoL> Assert that two multi-line strings are equal . <EoL>
<BoL> Fail if the two objects are equal as determined by the ' ! = ' <EoL>
<BoL> Just like self.assertTrue ( a not in b ) , but with a nicer default message . <EoL>
<BoL> Included for symmetry with assertIsInstance . <EoL>
<BoL> Fail the test if the text matches the regular expression . <EoL>
<BoL> Fail unless an exception of class expected_exception is raised <EoL>
<BoL> Fail the test unless the text matches the regular expression . <EoL>
<BoL> An equality assertion for ordered sequences ( like lists and tuples ) . <EoL>
<BoL> A set-specific equality assertion . <EoL>
<BoL> Check that the expression is true . <EoL>
<BoL> A tuple-specific equality assertion . <EoL>
<BoL> Fail unless a warning of class warnClass is triggered <EoL>
<BoL> Run the test without collecting errors in a TestResult <EoL>
<BoL> Execute all cleanup functions . Normally called for you after <EoL>
<BoL> Fail immediately , with the given message . <EoL>
<BoL> Returns a one-line description of the test , or None if no <EoL>
<BoL> Skip this test . <EoL>
<BoL> Return a context manager that will return the enclosed block <EoL>
<BoL> If args is empty , assertRaises/Warns is being used as a <EoL>
<BoL> Helper to check if func is wraped by our deprecated decorator <EoL>
<BoL> Modify the sign of vectors for reproducibility <EoL>
<BoL> Helper Function <EoL>
<BoL> Generate a cartesian product of input arrays . <EoL>
<BoL> Compute density of a sparse vector <EoL>
<BoL> Computes the sum of arr assuming arr is in the log domain . <EoL>
<BoL> Ensure ` X.min ( ) ` > = ` min_value ` . <EoL>
<BoL> Compute the Euclidean or Frobenius norm of x . <EoL>
<BoL> Returns the minimum value of a dense or a CSR/CSC matrix . <EoL>
<BoL> Sign correction to ensure deterministic output from SVD . <EoL>
<BoL> Workaround for Python 2 limitations of pickling instance methods <EoL>
<BoL> Convert list of indices to boolean mask . <EoL>
<BoL> Tests if x is NaN <EoL>
<BoL> Clear all covered matrix cells <EoL>
<BoL> Find the first prime element in the specified row . Returns <EoL>
<BoL> The Hungarian algorithm . <EoL>
<BoL> Steps 1 and 2 in the Wikipedia page . <EoL>
<BoL> Cover each column containing a starred zero . If n columns are covered , <EoL>
<BoL> Find a noncovered zero and prime it . If there is no starred zero <EoL>
<BoL> Construct a series of alternating primed and starred zeros as follows . <EoL>
<BoL> Add the value found in Step 4 to every element of each covered row , <EoL>
<BoL> Compute class priors from multioutput-multiclass target data <EoL>
<BoL> If key= ( i , j ) is a pair of integers , return the corresponding <EoL>
<BoL> An update method for dict data defined for direct access to <EoL>
<BoL> Cast the matrix elements to a specified type . <EoL>
<BoL> Element-wise complex conjugation . <EoL>
<BoL> Return the conjugate transpose . <EoL>
<BoL> Returns the k-th diagonal of the matrix . <EoL>
<BoL> This overrides the dict.get method , providing type checking <EoL>
<BoL> Returns the j-th column as a ( m x 1 ) DOK matrix . <EoL>
<BoL> Returns the i-th row as a ( 1 x n ) DOK matrix . <EoL>
<BoL> Element-wise power . <EoL>
<BoL> Return a dense ndarray representation of this matrix . <EoL>
<BoL> Convert this matrix to Compressed Sparse Row format . <EoL>
<BoL> Check if `` y `` is in a multilabel format . <EoL>
<BoL> Return the element ( s ) index= ( i , j ) , where j may be a slice . <EoL>
<BoL> Fast path for indexing in the case where column index is slice . <EoL>
<BoL> Returns a copy of the 'i'th row . <EoL>
<BoL> Returns a view of the 'i'th row ( without copying ) . <EoL>
<BoL> Convert this matrix to COOrdinate format . <EoL>
<BoL> Convert this matrix to Compressed Sparse Column format . <EoL>
<BoL> Returns a copy of this matrix . <EoL>
<BoL> Number of non-zero entries , equivalent to <EoL>
<BoL> Number of stored values , including explicit zeros . <EoL>
<BoL> Resize the matrix in-place to dimensions given by `` shape `` <EoL>
<BoL> Reverses the dimensions of the sparse matrix . <EoL>
<BoL> Solve iteratively the linear system 'fhess_p . xsupi = fgrad ' <EoL>
<BoL> choice ( a , size=None , replace=True , p=None ) <EoL>
<BoL> Resample arrays or sparse matrices in a consistent way <EoL>
<BoL> Find the value in data augmented with n_zeros for the given rank <EoL>
<BoL> Raises a TypeError if X is not a CSR or CSC matrix <EoL>
<BoL> Inplace column scaling of a CSR matrix . <EoL>
<BoL> Inplace row scaling of a CSR matrix . <EoL>
<BoL> Inplace row scaling of a CSR or CSC matrix . <EoL>
<BoL> Swaps two columns of a CSC/CSR matrix in-place . <EoL>
<BoL> Swaps two rows of a CSC/CSR matrix in-place . <EoL>
<BoL> Swaps two rows of a CSC matrix in-place . <EoL>
<BoL> Swaps two rows of a CSR matrix in-place . <EoL>
<BoL> Decorator to catch and hide warnings without visual nesting . <EoL>
<BoL> Utility function to cleanup a temporary folder if still existing . <EoL>
<BoL> Helper to get function arguments <EoL>
<BoL> Get function full name <EoL>
<BoL> Test must raise one of expected exceptions to pass . <EoL>
<BoL> Decorator to add setup and/or teardown methods to a test function : : <EoL>
<BoL> Raises an AssertionError if two items are not equal up to desired <EoL>
<BoL> Raises an AssertionError if two items are not equal up to significant <EoL>
<BoL> Raises an AssertionError if two objects are not equal up to desired <EoL>
<BoL> Raises an AssertionError if two array_like objects are not equal . <EoL>
<BoL> Raises an AssertionError if two array_like objects are not ordered by less <EoL>
<BoL> Parameters <EoL>
<BoL> Helper function to test the message raised in an exception . <EoL>
<BoL> Test that a certain warning occurs . <EoL>
<BoL> Assume that numpy 's warning for divide by zero is raised <EoL>
<BoL> Helper to check docstring <EoL>
<BoL> Clean Python warning registry for easier testing of warning messages . <EoL>
<BoL> Parameters <EoL>
<BoL> Create a fake mldata data set . <EoL>
<BoL> Test decorator that skips test if matplotlib not installed . <EoL>
<BoL> Context manager and decorator to ignore warnings . <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Set random state of an estimator if it has the ` random_state ` param . <EoL>
<BoL> Like assert_all_finite , but only for ndarray . <EoL>
<BoL> Return a platform independent representation of an array shape <EoL>
<BoL> Check that `` memory `` is joblib.Memory-like . <EoL>
<BoL> Check if there is any negative value in an array . <EoL>
<BoL> Create a DataSource with a local path at destpath . <EoL>
<BoL> Cache the file specified by path . <EoL>
<BoL> Searches for `` path `` and returns full path if found . <EoL>
<BoL> Test if path is a net location . Tests the scheme and netloc . <EoL>
<BoL> Test if the given mode will open a file for writing . <EoL>
<BoL> Test if the filename is a zip file by looking at the file extension . <EoL>
<BoL> Return a tuple containing compressed filename variations . <EoL>
<BoL> Return a sanitised relative path for which <EoL>
<BoL> Split zip extension from filename and return filename . <EoL>
<BoL> Return absolute path of file in the DataSource directory . <EoL>
<BoL> Test if path exists . <EoL>
<BoL> Open and return file-like object . <EoL>
<BoL> Load one or more packages into parent package top-level namespace . <EoL>
<BoL> Manages loading packages . <EoL>
<BoL> Execute command in parent_frame . <EoL>
<BoL> Get the title from a package info.py file . <EoL>
<BoL> Return list of ( package name , info.py file ) from parent_path subdirectories . <EoL>
<BoL> Return package names sorted in the order as they should be <EoL>
<BoL> Initialize info_modules = { < package_name > : < package info.py module > } . <EoL>
<BoL> Return repr ( obj ) with <EoL>
<BoL> Return documentation summary of subpackages . <EoL>
<BoL> Return instantiated plugin for doctests <EoL>
<BoL> Generate argv for nosetest command <EoL>
<BoL> Run benchmarks for module using nose . <EoL>
<BoL> Execute command in parent_frame . <EoL>
<BoL> Interpret the input as a matrix . <EoL>
<BoL> Build a matrix object from a string , nested sequence , or array . <EoL>
<BoL> Convert the input to an ndarray , but pass ndarray subclasses through . <EoL>
<BoL> Return the binary representation of the input number as a string . <EoL>
<BoL> Return the identity array . <EoL>
<BoL> Returns True if the type of ` num ` is a scalar type . <EoL>
<BoL> Returns True if first argument is a typecode lower/equal in type hierarchy.Helper to produce clear error messages <EoL>
<BoL> A convenience function for operations that need to preserve axis <EoL>
<BoL> A convenience function for operations that want to collapse <EoL>
<BoL> Test whether all matrix elements along a given axis evaluate to True . <EoL>
<BoL> Test whether any array element along a given axis evaluates to True . <EoL>
<BoL> Indexes of the maximum values along an axis . <EoL>
<BoL> Indexes of the minimum values along an axis . <EoL>
<BoL> Return a flattened copy of the matrix . <EoL>
<BoL> Return ` self ` as an ` ndarray ` object . <EoL>
<BoL> Return ` self ` as a flattened ` ndarray ` . <EoL>
<BoL> Returns the ( complex ) conjugate transpose of ` self ` . <EoL>
<BoL> Returns the ( multiplicative ) inverse of invertible ` self ` . <EoL>
<BoL> Returns the transpose of the matrix . <EoL>
<BoL> Return the maximum value along an axis . <EoL>
<BoL> Returns the average of the matrix elements along the given axis . <EoL>
<BoL> Return the minimum value along an axis . <EoL>
<BoL> Return the product of the array elements over the given axis . <EoL>
<BoL> Peak-to-peak ( maximum - minimum ) value along the given axis . <EoL>
<BoL> Return a flattened matrix . <EoL>
<BoL> Return a possibly reshaped matrix . <EoL>
<BoL> Return the standard deviation of the array elements along the given axis . <EoL>
<BoL> Returns the sum of the matrix elements , along the given axis . <EoL>
<BoL> Return the matrix as a ( possibly nested ) list . <EoL>
<BoL> Returns the variance of the matrix elements , along the given axis . <EoL>
<BoL> Raise a square matrix to the ( integer ) power ` n ` . <EoL>
<BoL> Adds documentation to obj which is in module place . <EoL>
<BoL> Return the length of the first dimension of the input array . <EoL>
<BoL> Test whether all array elements along a given axis evaluate to True . <EoL>
<BoL> Returns True if two arrays are element-wise equal within a tolerance . <EoL>
<BoL> Check if all elements of input array are true . <EoL>
<BoL> Return the maximum of an array or maximum along an axis . <EoL>
<BoL> Return the minimum of an array or minimum along an axis . <EoL>
<BoL> Return the angle of the complex argument . <EoL>
<BoL> Test whether any array element along a given axis evaluates to True . <EoL>
<BoL> Append values to the end of an array . <EoL>
<BoL> Apply a function to 1-D slices along the given axis . <EoL>
<BoL> Apply a function repeatedly over multiple axes . <EoL>
<BoL> Returns the indices of the maximum values along an axis . <EoL>
<BoL> Returns the indices of the minimum values along an axis . <EoL>
<BoL> Perform an indirect partition along the given axis using the <EoL>
<BoL> Returns the indices that would sort an array . <EoL>
<BoL> Find the indices of array elements that are non-zero , grouped by element . <EoL>
<BoL> Evenly round to the given number of decimals . <EoL>
<BoL> True if two arrays have the same shape and elements , False otherwise . <EoL>
<BoL> Returns True if input arrays are shape consistent and all elements equal . <EoL>
<BoL> Return the string representation of an array . <EoL>
<BoL> Split an array into multiple sub-arrays . <EoL>
<BoL> Return a string representation of the data in an array . <EoL>
<BoL> Convert the input to an array . <EoL>
<BoL> Convert the input to an array , checking for NaNs or Infs . <EoL>
<BoL> Return a contiguous array in memory ( C order ) . <EoL>
<BoL> Return an array converted to a float type . <EoL>
<BoL> Return an array laid out in Fortran order in memory . <EoL>
<BoL> Convert an array of size 1 to its scalar equivalent . <EoL>
<BoL> Convert inputs to arrays with at least one dimension . <EoL>
<BoL> View inputs as arrays with at least two dimensions . <EoL>
<BoL> View inputs as arrays with at least three dimensions . <EoL>
<BoL> Compute the weighted average along the specified axis . <EoL>
<BoL> Return the Bartlett window . <EoL>
<BoL> Return a string representation of a number in the given base system . <EoL>
<BoL> Return the Blackman window . <EoL>
<BoL> Assemble an nd-array from nested lists of blocks . <EoL>
<BoL> Broadcast any number of arrays against each other . <EoL>
<BoL> Broadcast an array to a new shape . <EoL>
<BoL> Returns pointers to the end-points of an array . <EoL>
<BoL> Helper function for delegating arguments to Python string <EoL>
<BoL> Helper function that returns the number of characters per field in <EoL>
<BoL> Helper function to cast a result back into a string or unicode array <EoL>
<BoL> Helper function for determining the output type of some string <EoL>
<BoL> Return element-wise string concatenation for two arrays of str or unicode . <EoL>
<BoL> Create a ` chararray ` . <EoL>
<BoL> Convert the input to a ` chararray ` , copying the data only if <EoL>
<BoL> Return a copy of ` a ` with only the first character of each element <EoL>
<BoL> Return a copy of ` a ` with its elements centered in a string of <EoL>
<BoL> Return ( self + other ) , that is string concatenation , <EoL>
<BoL> Return ( self == other ) element-wise . <EoL>
<BoL> Return ( self > = other ) element-wise . <EoL>
<BoL> Return ( self > other ) element-wise . <EoL>
<BoL> Return ( self < = other ) element-wise . <EoL>
<BoL> Return ( self < other ) element-wise . <EoL>
<BoL> Return ( self % i ) , that is pre-Python 2.6 string formatting <EoL>
<BoL> Return ( self * i ) , that is string multiple concatenation , <EoL>
<BoL> Return ( self ! = other ) element-wise . <EoL>
<BoL> Return ( other + self ) , that is string concatenation , <EoL>
<BoL> Return ( self * i ) , that is string multiple concatenation , <EoL>
<BoL> Return the indices that sort the array lexicographically . <EoL>
<BoL> Return a copy of ` self ` with only the first character of each element <EoL>
<BoL> Return a copy of ` self ` with its elements centered in a <EoL>
<BoL> Returns an array with the number of non-overlapping occurrences of <EoL>
<BoL> Calls ` str.decode ` element-wise . <EoL>
<BoL> Calls ` str.encode ` element-wise . <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element <EoL>
<BoL> Return a copy of each string element where all tab characters are <EoL>
<BoL> For each element , return the lowest index in the string where <EoL>
<BoL> Like ` find ` , but raises ` ValueError ` when the substring is not found . <EoL>
<BoL> Returns true for each element if all characters in the string <EoL>
<BoL> Returns true for each element if all characters in the string <EoL>
<BoL> For each element in ` self ` , return True if there are only <EoL>
<BoL> Returns true for each element if all characters in the string are <EoL>
<BoL> Returns true for each element if all cased characters in the <EoL>
<BoL> For each element in ` self ` , return True if there are only <EoL>
<BoL> Returns true for each element if there are only whitespace <EoL>
<BoL> Returns true for each element if the element is a titlecased <EoL>
<BoL> Returns true for each element if all cased characters in the <EoL>
<BoL> Return a string which is the concatenation of the strings in the <EoL>
<BoL> Return an array with the elements of ` self ` left-justified in a <EoL>
<BoL> Return an array with the elements of ` self ` converted to <EoL>
<BoL> For each element in ` self ` , return a copy with the leading characters <EoL>
<BoL> Partition each element in ` self ` around ` sep ` . <EoL>
<BoL> For each element in ` self ` , return a copy of the string with all <EoL>
<BoL> For each element in ` self ` , return the highest index in the string <EoL>
<BoL> Like ` rfind ` , but raises ` ValueError ` when the substring ` sub ` is <EoL>
<BoL> Return an array with the elements of ` self ` <EoL>
<BoL> Partition each element in ` self ` around ` sep ` . <EoL>
<BoL> For each element in ` self ` , return a list of the words in <EoL>
<BoL> For each element in ` self ` , return a copy with the trailing <EoL>
<BoL> For each element in ` self ` , return a list of the words in the <EoL>
<BoL> For each element in ` self ` , return a list of the lines in the <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element <EoL>
<BoL> For each element in ` self ` , return a copy with the leading and <EoL>
<BoL> For each element in ` self ` , return a copy of the string with <EoL>
<BoL> For each element in ` self ` , return a titlecased version of the <EoL>
<BoL> For each element in ` self ` , return a copy of the string where <EoL>
<BoL> Return an array with the elements of ` self ` converted to <EoL>
<BoL> Return the numeric string left-filled with zeros in a string of <EoL>
<BoL> Returns an array with the number of non-overlapping occurrences of <EoL>
<BoL> Calls ` str.decode ` element-wise . <EoL>
<BoL> Calls ` str.encode ` element-wise . <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element <EoL>
<BoL> Return ( x1 == x2 ) element-wise . <EoL>
<BoL> Return a copy of each string element where all tab characters are <EoL>
<BoL> For each element , return the lowest index in the string where <EoL>
<BoL> Return ( x1 > x2 ) element-wise . <EoL>
<BoL> Return ( x1 > = x2 ) element-wise . <EoL>
<BoL> Like ` find ` , but raises ` ValueError ` when the substring is not found . <EoL>
<BoL> Returns true for each element if all characters in the string are <EoL>
<BoL> Returns true for each element if all characters in the string are <EoL>
<BoL> For each element , return True if there are only decimal <EoL>
<BoL> Returns true for each element if all characters in the string are <EoL>
<BoL> Returns true for each element if all cased characters in the <EoL>
<BoL> For each element , return True if there are only numeric <EoL>
<BoL> Returns true for each element if there are only whitespace <EoL>
<BoL> Returns true for each element if the element is a titlecased <EoL>
<BoL> Returns true for each element if all cased characters in the <EoL>
<BoL> Return a string which is the concatenation of the strings in the <EoL>
<BoL> Return ( x1 < x2 ) element-wise . <EoL>
<BoL> Return ( x1 < = x2 ) element-wise . <EoL>
<BoL> Return an array with the elements of ` a ` left-justified in a <EoL>
<BoL> Return an array with the elements converted to lowercase . <EoL>
<BoL> For each element in ` a ` , return a copy with the leading characters <EoL>
<BoL> Return ( a % i ) , that is pre-Python 2.6 string formatting <EoL>
<BoL> Return ( a * i ) , that is string multiple concatenation , <EoL>
<BoL> Return ( x1 ! = x2 ) element-wise . <EoL>
<BoL> Partition each element in ` a ` around ` sep ` . <EoL>
<BoL> For each element in ` a ` , return a copy of the string with all <EoL>
<BoL> For each element in ` a ` , return the highest index in the string <EoL>
<BoL> Like ` rfind ` , but raises ` ValueError ` when the substring ` sub ` is <EoL>
<BoL> Return an array with the elements of ` a ` right-justified in a <EoL>
<BoL> Partition ( split ) each element around the right-most separator . <EoL>
<BoL> For each element in ` a ` , return a list of the words in the <EoL>
<BoL> For each element in ` a ` , return a copy with the trailing <EoL>
<BoL> For each element in ` a ` , return a list of the words in the <EoL>
<BoL> For each element in ` a ` , return a list of the lines in the <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element <EoL>
<BoL> Return len ( a ) element-wise . <EoL>
<BoL> For each element in ` a ` , return a copy with the leading and <EoL>
<BoL> Return element-wise a copy of the string with <EoL>
<BoL> Return element-wise title cased version of string or unicode . <EoL>
<BoL> For each element in ` a ` , return a copy of the string where all <EoL>
<BoL> Return an array with the elements converted to uppercase . <EoL>
<BoL> Return the numeric string left-filled with zeros <EoL>
<BoL> Construct an array from an index array and a set of arrays to choose from . <EoL>
<BoL> Clip ( limit ) the values in an array . <EoL>
<BoL> Stack 1-D arrays as columns into a 2-D array . <EoL>
<BoL> Return a scalar type which is common to the input arrays . <EoL>
<BoL> Get information about the arguments accepted by a code object . <EoL>
<BoL> Get the names and default values of a function 's arguments . <EoL>
<BoL> Get information about arguments passed into a particular frame . <EoL>
<BoL> Return true if the object is a code object . <EoL>
<BoL> Return true if the object is a user-defined function . <EoL>
<BoL> Return true if the object is an instance method . <EoL>
<BoL> Recursively walk a sequence , stringifying each element . <EoL>
<BoL> Check whether obj is a pathlib.Path object . <EoL>
<BoL> Load a module . <EoL>
<BoL> Return selected slices of an array along given axis . <EoL>
<BoL> Returns the discrete , linear convolution of two one-dimensional sequences . <EoL>
<BoL> Return an array copy of the given object . <EoL>
<BoL> Inject the specified number of padding bytes at the end of a dtype <EoL>
<BoL> Return copy of structured array with padding between fields removed . <EoL>
<BoL> Replace names which are None with the next unused f % d name <EoL>
<BoL> Calculate the greatest common divisor of a and b <EoL>
<BoL> Checks safety of getfield for object arrays . <EoL>
<BoL> Given a datatype and an order object , return a new names tuple , with the <EoL>
<BoL> Builds a signature string which resembles PEP 457 <EoL>
<BoL> Checks safety of a view involving object arrays , for example when <EoL>
<BoL> Format the error message for when __array_ufunc__ gives up . <EoL>
<BoL> This is a second way to initialize StructuredVoidFormat , using the raw data <EoL>
<BoL> By using this local function , we do n't need to recurse with all the <EoL>
<BoL> find the right formatting function for the dtype_ <EoL>
<BoL> Keep only the N-D corners ( leading and trailing edges ) of an array . <EoL>
<BoL> Object arrays containing lists should be printed unambiguously <EoL>
<BoL> Like the python 3.2 reprlib.recursive_repr , but forwards *args and **kwargs <EoL>
<BoL> Implements the repr for structured-void scalars . It is called from the <EoL>
<BoL> Determine if the given dtype is implied by the representation of its values . <EoL>
<BoL> Convert a dtype to a short form which evaluates to the same dtype . <EoL>
<BoL> Return the current print options . <EoL>
<BoL> Return a contiguous flattened array . <EoL>
<BoL> Set a Python function to be used when pretty printing arrays . <EoL>
<BoL> Cross-correlation of two 1-dimensional sequences . <EoL>
<BoL> Counts the number of non-zero values in the array `` a `` . <EoL>
<BoL> Return the cross product of two ( arrays of ) vectors . <EoL>
<BoL> Return the cumulative product of elements along a given axis . <EoL>
<BoL> Return the cumulative product over the given axis . <EoL>
<BoL> Return the cumulative sum of the elements along a given axis . <EoL>
<BoL> Return specified diagonals . <EoL>
<BoL> einsum ( subscripts , *operands , out=None , dtype=None , order='K ' , <EoL>
<BoL> einsum_path ( subscripts , *operands , optimize='greedy ' ) <EoL>
<BoL> Checks if we can use BLAS ( np.tensordot ) call and its beneficial to do so . <EoL>
<BoL> Computes the product of the elements in indices based on the dictionary <EoL>
<BoL> Finds the contraction for a given set of input and output sets . <EoL>
<BoL> Finds the path by contracting the best pair until the input list is <EoL>
<BoL> Computes all possible pair contractions , sieves the results based <EoL>
<BoL> A reproduction of einsum c side einsum parsing in python . <EoL>
<BoL> Compute tensor dot product along specified axes for arrays > = 1-D . <EoL>
<BoL> Determine common type following standard coercion rules . <EoL>
<BoL> Return indices that are non-zero in the flattened version of a . <EoL>
<BoL> Parse the field formats <EoL>
<BoL> convert input field names into a list and assign to the _names <EoL>
<BoL> Construct an array by executing a function over each coordinate . <EoL>
<BoL> Return the string representation of a scalar dtype . <EoL>
<BoL> Compute the arithmetic mean along the specified axis . <EoL>
<BoL> Return the number of dimensions of an array . <EoL>
<BoL> Return the indices of the elements that are non-zero . <EoL>
<BoL> Return a partitioned copy of an array . <EoL>
<BoL> Return the product of array elements over a given axis . <EoL>
<BoL> Return the product of array elements over a given axis . <EoL>
<BoL> Range of values ( maximum - minimum ) along an axis . <EoL>
<BoL> Replaces specified elements of an array with given values . <EoL>
<BoL> Return the number of dimensions of an array . <EoL>
<BoL> Repeat elements of an array . <EoL>
<BoL> Gives a new shape to an array without changing its data . <EoL>
<BoL> Return a new array with the specified shape . <EoL>
<BoL> Round an array to the given number of decimals . <EoL>
<BoL> Find indices where elements should be inserted to maintain order . <EoL>
<BoL> Return the shape of an array . <EoL>
<BoL> Return the number of elements along a given axis . <EoL>
<BoL> Check whether some values are true . <EoL>
<BoL> Return a sorted copy of an array . <EoL>
<BoL> Remove single-dimensional entries from the shape of an array . <EoL>
<BoL> Compute the standard deviation along the specified axis . <EoL>
<BoL> Sum of array elements over a given axis . <EoL>
<BoL> Interchange two axes of an array . <EoL>
<BoL> Take elements from an array along an axis . <EoL>
<BoL> Return the sum along diagonals of the array . <EoL>
<BoL> Permute the dimensions of an array . <EoL>
<BoL> Compute the variance along the specified axis . <EoL>
<BoL> Return a new array of given shape and type , filled with ` fill_value ` . <EoL>
<BoL> Return a full array with the same shape and type as a given array . <EoL>
<BoL> Return numbers spaced evenly on a log scale ( a geometric progression ) . <EoL>
<BoL> Return evenly spaced numbers over a specified interval . <EoL>
<BoL> Return numbers spaced evenly on a log scale . <EoL>
<BoL> Return the size of the buffer used in ufuncs . <EoL>
<BoL> Get the current way of handling floating-point errors . <EoL>
<BoL> Return the current callback function used on floating-point errors . <EoL>
<BoL> Create MachAr instance with found information on float types <EoL>
<BoL> fix rank-0 -- > rank-1 <EoL>
<BoL> fix rank > 0 -- > rank-0 <EoL>
<BoL> Get MachAr instance or MachAr-like instance <EoL>
<BoL> String representation . <EoL>
<BoL> Stack arrays in sequence horizontally ( column wise ) . <EoL>
<BoL> Return an array representing the indices of a grid . <EoL>
<BoL> Returns a boolean array where two arrays are element-wise equal within a <EoL>
<BoL> Returns True if the array is Fortran contiguous but *not* C contiguous . <EoL>
<BoL> Determines whether the given object represents a scalar data-type . <EoL>
<BoL> Wrapper around cPickle.load which accepts either a file-like object or <EoL>
<BoL> Return the scalar type of highest precision of the same kind as the input . <EoL>
<BoL> Write any changes in the array to the file on disk . <EoL>
<BoL> Move axes of an array to new positions . <EoL>
<BoL> Normalizes an axis argument into a tuple of non-negative integer axes . <EoL>
<BoL> Return a bit-width name for a given type object <EoL>
<BoL> Apply English case rules to convert the first character of an ASCII <EoL>
<BoL> Apply English case rules to convert ASCII strings to all lower case . <EoL>
<BoL> Apply English case rules to convert ASCII strings to all upper case . <EoL>
<BoL> Determine if a class is a subclass of a second class . <EoL>
<BoL> Determine if the first argument is a subclass of the second argument . <EoL>
<BoL> Return the scalar dtype or NumPy equivalent of Python type of an object . <EoL>
<BoL> Return a new array of given shape and type , filled with ones . <EoL>
<BoL> Return an array of ones with the same shape and type as a given array . <EoL>
<BoL> Compute the outer product of two vectors . <EoL>
<BoL> Return an ndarray of the provided type that satisfies requirements . <EoL>
<BoL> Roll array elements along a given axis . <EoL>
<BoL> Roll the specified axis backwards , until it lies in a given position . <EoL>
<BoL> Set the size of the buffer used in ufuncs . <EoL>
<BoL> Set how floating-point errors are handled . <EoL>
<BoL> Set the floating-point error callback function or log object . <EoL>
<BoL> Return an array of zeros with the same shape and type as a given array . <EoL>
<BoL> Find duplication in a list , return a list of duplicated elements <EoL>
<BoL> Pretty-print all fields . <EoL>
<BoL> Internal implementation of block . ` arrays ` is the argument passed to <EoL>
<BoL> Recursive function checking that the depths of nested lists in ` arrays ` <EoL>
<BoL> Join a sequence of arrays along a new axis . <EoL>
<BoL> Stack arrays in sequence vertically ( row wise ) . <EoL>
<BoL> Return Pearson product-moment correlation coefficients . <EoL>
<BoL> This method is called when this class is used as the .restype <EoL>
<BoL> Create a numpy array from a ctypes array or a ctypes POINTER . <EoL>
<BoL> Create and return a ctypes object from a numpy array . Actually <EoL>
<BoL> ` arrayrange ` is deprecated , use ` arange ` instead ! <EoL>
<BoL> Issues a DeprecationWarning , adds warning to ` old_name ` 's <EoL>
<BoL> It is possible to load a library using <EoL>
<BoL> Array-checking restype/argtypes . <EoL>
<BoL> Given a ctypes array type , construct and attach an <EoL>
<BoL> Given a ctypes pointer object , construct and <EoL>
<BoL> Given a ctypes simple type , construct and attach an <EoL>
<BoL> Return a new array with sub-arrays along an axis deleted . For a one <EoL>
<BoL> Extract a diagonal or construct a diagonal array . <EoL>
<BoL> Return the indices to access the main diagonal of an array . <EoL>
<BoL> Return the indices to access the main diagonal of an n-dimensional array . <EoL>
<BoL> Create a two-dimensional array with the flattened input as a diagonal . <EoL>
<BoL> Calculate the n-th discrete difference along the given axis . <EoL>
<BoL> Display a message on a device . <EoL>
<BoL> Return the section headers of the config file . <EoL>
<BoL> Return the list of variable names . <EoL>
<BoL> Ensures that every element of 'definitions ' is a valid macro <EoL>
<BoL> Compile 'src ' to product 'obj ' . <EoL>
<BoL> Typecheck and fix-up some of the arguments to the 'compile ( ) ' <EoL>
<BoL> Typecheck and fix up some of the arguments supplied to the <EoL>
<BoL> Typecheck and fix up some arguments supplied to various methods . <EoL>
<BoL> Return true if we need to relink the files listed in 'objects ' <EoL>
<BoL> Decide which souce files must be recompiled . <EoL>
<BoL> Add 'dir ' to the list of directories that will be searched for <EoL>
<BoL> Add 'libname ' to the list of libraries that will be included in <EoL>
<BoL> Add 'dir ' to the list of directories that will be searched for <EoL>
<BoL> Add 'object ' to the list of object files ( or analogues , such as <EoL>
<BoL> Add 'dir ' to the list of directories that will be searched for <EoL>
<BoL> Define a preprocessor macro for all compilations driven by this <EoL>
<BoL> Detect the language of a given file , or list of files . Uses <EoL>
<BoL> Search the specified list of directories for a static or shared <EoL>
<BoL> Return the compiler option to add 'dir ' to the list of <EoL>
<BoL> Return the compiler option to add 'lib ' to the list of libraries <EoL>
<BoL> Return the compiler option to add 'dir ' to the list of <EoL>
<BoL> Define the executables ( and options for them ) that will be run <EoL>
<BoL> Set the list of directories that will be searched to 'dirs ' ( a <EoL>
<BoL> Set the list of libraries to be included in all links driven by <EoL>
<BoL> Set the list of library search directories to 'dirs ' ( a list of <EoL>
<BoL> Set the list of object files ( or analogues ) to be included in <EoL>
<BoL> Set the list of directories to search for shared libraries at <EoL>
<BoL> Undefine a preprocessor macro for all compilations driven by <EoL>
<BoL> Do any platform-specific customization of a compiler instance . <EoL>
<BoL> Customize compiler using distutils command . <EoL>
<BoL> Return the C++ compiler . <EoL>
<BoL> Does nothing here , but is called by the get_version method and can be <EoL>
<BoL> Return compiler version , or None if compiler is not available . <EoL>
<BoL> Return the name of the object files for the given source files . <EoL>
<BoL> Print the compiler customizations to stdout . <EoL>
<BoL> Execute a command in a sub-process . <EoL>
<BoL> Return commandline representation used to determine if a file needs <EoL>
<BoL> Generate linker options for searching library directories and <EoL>
<BoL> Generate C pre-processor options ( -D , -U , -I ) as used by at least <EoL>
<BoL> Generate an instance of some CCompiler subclass for the supplied <EoL>
<BoL> Check if an objects needs to be rebuild based on its dependencies <EoL>
<BoL> Shallow copy operation on arbitrary Python objects . <EoL>
<BoL> Do any platform-specific customization of a CCompiler instance . <EoL>
<BoL> Perform some action that affects the outside world ( eg . by <EoL>
<BoL> Determine the default compiler to use for the given platform . <EoL>
<BoL> Get number of parallel build jobs set by the -- parallel command line <EoL>
<BoL> Return true when using mingw32 environment . <EoL>
<BoL> Create a directory and any missing ancestor directories . <EoL>
<BoL> Return true if 'target ' is out-of-date with respect to any file <EoL>
<BoL> Walk two filename lists in parallel , testing if each source is newer <EoL>
<BoL> Print list of available compilers ( used by the `` -- help-compiler '' <EoL>
<BoL> Simple matching of version numbers , for use in CCompiler and FCompiler . <EoL>
<BoL> Run another program , specified as a command list 'cmd ' , in a new process . <EoL>
<BoL> Return True if the C compiler is GCC 4.x.int <EoL>
<BoL> Return True if the given function attribute is supported . <EoL>
<BoL> Return True if the given variable attribute is supported . <EoL>
<BoL> Return the inline identifier ( may be empty ) . # ifndef __cplusplus <EoL>
<BoL> Return the restrict identifier ( may be empty ) .static int static_func ( char * % ( restrict ) s a ) <EoL>
<BoL> Create and initialize a new Command object . Most importantly , <EoL>
<BoL> If the current verbosity level is of greater than or equal to <EoL>
<BoL> Return True if the C compiler is gcc > = 4 . <EoL>
<BoL> Return the inline keyword recognized by the compiler , empty string <EoL>
<BoL> Return the restrict keyword recognized by the compiler , empty string <EoL>
<BoL> Check size of a given type.r '' '' '' r '' '' '' r '' '' '' <EoL>
<BoL> Print 'msg ' to stdout if the global DEBUG ( taken from the <EoL>
<BoL> Ensure that 'option ' is the name of an existing file . <EoL>
<BoL> Ensure that 'option ' is a string ; if not defined , set it to <EoL>
<BoL> r '' '' '' Ensure that 'option ' is a list of strings . If 'option ' is <EoL>
<BoL> Wrapper around Distribution 's 'get_command_obj ( ) ' method : find <EoL>
<BoL> Determine the sub-commands that are relevant in the current <EoL>
<BoL> Move a file respecting dry-run flag . <EoL>
<BoL> Run some other command : uses the 'run_command ( ) ' method of <EoL>
<BoL> Set the values of any `` undefined '' options from corresponding <EoL>
<BoL> Spawn an external command respecting dry-run flag . <EoL>
<BoL> Try to compile a source file built from 'body ' and 'headers ' . <EoL>
<BoL> Construct a source file from 'body ' ( a string containing lines <EoL>
<BoL> Internal workhorse for exec_command ( ) . <EoL>
<BoL> Quote the argument for safe use in a shell command line . <EoL>
<BoL> Returns True if 'stream ' supports the file descriptor and allows fileno ( ) . <EoL>
<BoL> Return full path of a executable or None . <EoL>
<BoL> If we log WARN messages , log this message as a 'nice ' anti-warn <EoL>
<BoL> Compiles the source by spawning GCC and windres if needed . <EoL>
<BoL> Build the import libraries for Mingw32-gcc on Windows <EoL>
<BoL> Check if an import library for the Python runtime already exists . <EoL>
<BoL> msver is the ms runtime version used for the MANIFEST . <EoL>
<BoL> Given a dll file location , get all its exported symbols and dump them <EoL>
<BoL> Return the processor architecture . <EoL>
<BoL> Return the version of MSVC that was used to build Python . <EoL>
<BoL> Replacement for outdated version of get_msvcr from cygwinccompiler <EoL>
<BoL> Return the rc file used to generate the res file which will be embedded <EoL>
<BoL> Given a major and minor version of the MSVCR , returns the\ <EoL>
<BoL> Common implementation for add_library and add_installed_library . Do <EoL>
<BoL> Return path 's Mercurial revision number . <EoL>
<BoL> Return path 's SVN revision number . <EoL>
<BoL> Recursively add files under data_path to data_files list . <EoL>
<BoL> Add data files to configuration data_files . <EoL>
<BoL> Add define macros to configuration <EoL>
<BoL> Add extension to configuration . <EoL>
<BoL> Add installable headers to configuration . <EoL>
<BoL> Add paths to configuration include directories . <EoL>
<BoL> Similar to add_library , but the specified library is installed . <EoL>
<BoL> Add library to configuration . <EoL>
<BoL> Generate and install a npy-pkg config file from a template . <EoL>
<BoL> Add scripts to configuration . <EoL>
<BoL> Append libraries , include_dirs to extension or library item . <EoL>
<BoL> Return a path to a temporary directory where temporary files should be <EoL>
<BoL> Returns the numpy.distutils config command instance . <EoL>
<BoL> Return the distutils distribution object for self . <EoL>
<BoL> Get resources information . <EoL>
<BoL> Try to get version string of a package . <EoL>
<BoL> Check for availability of Fortran 77 compiler.subroutine simple <EoL>
<BoL> Check for availability of Fortran 90 compiler.subroutine simple <EoL>
<BoL> Generate package __config__.py file containing system_info <EoL>
<BoL> Appends a data function to the data_files list that will generate <EoL>
<BoL> Appends a data function to the data_files list that will generate <EoL>
<BoL> Apply glob to paths and prepend local_path if needed . <EoL>
<BoL> Configure Configuration instance . <EoL>
<BoL> Return a dictionary compatible with the keyword arguments of distutils <EoL>
<BoL> Return a list of Fortran f90 module names that <EoL>
<BoL> Return True if all items in lst are string objects . <EoL>
<BoL> Return a configuration dictionary for usage in <EoL>
<BoL> Return four lists of filenames containing <EoL>
<BoL> Return a directory name relative to top_path and <EoL>
<BoL> Generate config.py file containing system_info information <EoL>
<BoL> Return frame object from call stack with given level . <EoL>
<BoL> Return an info dict for a given C library . <EoL>
<BoL> Return the MATHLIB line from numpyconfig.h <EoL>
<BoL> Return the path where to find the npy-pkg-config directory . <EoL>
<BoL> Return path of the module given a frame object from the call stack . <EoL>
<BoL> Return library info for the given package . <EoL>
<BoL> Return the correct file extension for shared libraries . <EoL>
<BoL> Apply glob to paths and prepend local_path if needed . <EoL>
<BoL> Return True if sources contains C++ files <EoL>
<BoL> Return True if sources contains Fortran files <EoL>
<BoL> Return true if directory is local directory . <EoL>
<BoL> Resolve ` .. ` and ' . ' from path . <EoL>
<BoL> Return version major and minor of compiler instance if it is <EoL>
<BoL> Join two or more pathname components + <EoL>
<BoL> Return path relative to parent_path . <EoL>
<BoL> Return a boolean value translating from other types if necessary . <EoL>
<BoL> Parse a sectioned configuration file . <EoL>
<BoL> Create a sequence of lookups with 'vars ' taking priority over <EoL>
<BoL> Raises a TypeError for non-string values . <EoL>
<BoL> Write a single section to the specified ` fp ' . <EoL>
<BoL> Create a new section in the configuration . <EoL>
<BoL> Get an option value for a given section . <EoL>
<BoL> Check for the existence of a given option in a given section . <EoL>
<BoL> Indicate whether the named section is present in the configuration . <EoL>
<BoL> Return a list of ( name , value ) tuples for each option in a section . <EoL>
<BoL> Return a list of option names for the given section name . <EoL>
<BoL> D.pop ( k [ , d ] ) - > v , remove specified key and return the corresponding value . <EoL>
<BoL> Remove a section from the parser and return it as <EoL>
<BoL> Read and parse a filename or a list of filenames . <EoL>
<BoL> Read configuration from a dictionary . <EoL>
<BoL> Like read ( ) but the argument must be a file-like object . <EoL>
<BoL> Read configuration from a given string . <EoL>
<BoL> Deprecated , use read_file instead . <EoL>
<BoL> Remove an option . <EoL>
<BoL> Remove a file section . <EoL>
<BoL> Return a list of section names , excluding [ DEFAULT ] <EoL>
<BoL> Set an option . <EoL>
<BoL> D.update ( [ E , ] **F ) - > None . Update D from mapping/iterable E and F . <EoL>
<BoL> Write an .ini-format representation of the configuration state . <EoL>
<BoL> Parse a line from a config file containing compile flags . <EoL>
<BoL> Return library info for a package from its configuration file . <EoL>
<BoL> Construct a new Distribution instance : initialize all the <EoL>
<BoL> Return the non-display options recognized at the top level . <EoL>
<BoL> Parse the command-line options for a single command . <EoL>
<BoL> Set the options for 'command_obj ' from 'option_dict ' . Basically <EoL>
<BoL> Set final values for all the options on the Distribution <EoL>
<BoL> Find as many configuration files as should be processed for this <EoL>
<BoL> Return the class that implements the Distutils command named by <EoL>
<BoL> Get a list of ( command , description ) tuples . <EoL>
<BoL> Return the command object for 'command ' . Normally this object <EoL>
<BoL> Return a list of packages from which commands are loaded . <EoL>
<BoL> Get the option dictionary for a given command . If that <EoL>
<BoL> If there were any non-global `` display-only '' options <EoL>
<BoL> Parse the setup script 's command line , taken from the <EoL>
<BoL> Print a subset of the list of all commands -- used by <EoL>
<BoL> Print out a help message listing all available commands with a <EoL>
<BoL> Reinitializes a command to the state it was in when first <EoL>
<BoL> Do whatever it takes to run a command ( including nothing at all , <EoL>
<BoL> Run each command that was seen on the setup script command line . <EoL>
<BoL> Find mandatory and optional libs in expected paths . <EoL>
<BoL> Updates the information in the current information with <EoL>
<BoL> If static or shared libraries are available then return <EoL>
<BoL> If static or shared libraries are available then return <EoL>
<BoL> Return a list of existing paths composed by all combinations <EoL>
<BoL> Return a dictonary with items that are compatible <EoL>
<BoL> ********************************************************************* <EoL>
<BoL> Return a list of existing paths composed by all combinations of <EoL>
<BoL> Returns True on successful version detection , else False <EoL>
<BoL> notfound_action : <EoL>
<BoL> Return a string that identifies the current platform . This is used <EoL>
<BoL> Returns a list of files named 'fname ' from <EoL>
<BoL> Return a list of paths matching a pathname pattern . <EoL>
<BoL> Return a list of library paths valid on 32 or 64 bit systems . <EoL>
<BoL> Compile a single source files with a Unix-style compiler . <EoL>
<BoL> Return true if 'source ' exists and is more recently modified than <EoL>
<BoL> Split array into multiple sub-arrays along the 3rd axis ( depth ) . <EoL>
<BoL> Stack arrays in sequence depth wise ( along third axis ) . <EoL>
<BoL> Compute the Cholesky decomposition of a matrix . <EoL>
<BoL> Compute the determinant of a matrix <EoL>
<BoL> Return discrete Fourier transform of real or complex sequence . <EoL>
<BoL> 2-D discrete Fourier transform . <EoL>
<BoL> Return multidimensional discrete Fourier transform . <EoL>
<BoL> Return discrete inverse Fourier transform of real or complex sequence . <EoL>
<BoL> 2-D discrete inverse Fourier transform of real or complex sequence . <EoL>
<BoL> Return inverse multi-dimensional discrete Fourier transform of <EoL>
<BoL> Compute the inverse of a matrix . <EoL>
<BoL> Matrix or vector norm . <EoL>
<BoL> Compute the ( Moore-Penrose ) pseudo-inverse of a matrix . <EoL>
<BoL> The differences between consecutive elements of an array . <EoL>
<BoL> Convert ` x ` to double if it has real , negative components . <EoL>
<BoL> Convert ` x ` to complex if it has real components x_i with abs ( x_i ) > 1 . <EoL>
<BoL> Convert ` x ` to complex if it has real , negative components . <EoL>
<BoL> Convert its input ` arr ` to a complex array . <EoL>
<BoL> Compute the inverse cosine of x . <EoL>
<BoL> Compute the inverse sine of x . <EoL>
<BoL> Compute the inverse hyperbolic tangent of ` x ` . <EoL>
<BoL> Returns a bool array , where True if input element is real . <EoL>
<BoL> Compute the natural logarithm of ` x ` . <EoL>
<BoL> Compute the logarithm base 10 of ` x ` . <EoL>
<BoL> Compute the logarithm base 2 of ` x ` . <EoL>
<BoL> Take log base n of x . <EoL>
<BoL> Return x to the power p , ( x**p ) . <EoL>
<BoL> Compute the square root of x . <EoL>
<BoL> Expand the shape of an array . <EoL>
<BoL> Return the elements of an array that satisfy some condition . <EoL>
<BoL> Return a 2-D array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Compute the one-dimensional discrete Fourier Transform . <EoL>
<BoL> Compute the 2-dimensional discrete Fourier Transform <EoL>
<BoL> Return the Discrete Fourier Transform sample frequencies . <EoL>
<BoL> Compute the N-dimensional discrete Fourier Transform . <EoL>
<BoL> Pop twiddle factors for an FFT of length n from the cache . <EoL>
<BoL> Store twiddle factors for an FFT of length n in the cache . <EoL>
<BoL> Compute the FFT of a signal that has Hermitian symmetry , i.e. , a real <EoL>
<BoL> Compute the one-dimensional inverse discrete Fourier Transform . <EoL>
<BoL> Compute the 2-dimensional inverse discrete Fourier Transform . <EoL>
<BoL> Compute the N-dimensional inverse discrete Fourier Transform . <EoL>
<BoL> Compute the inverse FFT of a signal that has Hermitian symmetry . <EoL>
<BoL> Compute the inverse of the n-point DFT for real input . <EoL>
<BoL> Compute the 2-dimensional inverse FFT of a real array . <EoL>
<BoL> Compute the inverse of the N-dimensional FFT of real input . <EoL>
<BoL> Compute the one-dimensional discrete Fourier Transform for real input . <EoL>
<BoL> Compute the 2-dimensional FFT of a real array . <EoL>
<BoL> Compute the N-dimensional discrete Fourier Transform for real input . <EoL>
<BoL> Shift the zero-frequency component to the center of the spectrum . <EoL>
<BoL> The inverse of ` fftshift ` . Although identical for even-length ` x ` , the <EoL>
<BoL> Return the Discrete Fourier Transform sample frequencies <EoL>
<BoL> Fill the main diagonal of the given array of any dimensionality . <EoL>
<BoL> Round to nearest integer towards zero . <EoL>
<BoL> Reverse the order of elements in an array along the given axis . <EoL>
<BoL> Flip array in the left/right direction . <EoL>
<BoL> Flip array in the up/down direction . <EoL>
<BoL> Construct an array from a text file , using regular expression parsing . <EoL>
<BoL> Compute the future value . <EoL>
<BoL> Find the wrapper for the array with the highest priority . <EoL>
<BoL> Return the directory that contains the NumPy \\*.h header files . <EoL>
<BoL> Return the gradient of an N-dimensional array . <EoL>
<BoL> Return the Hamming window . <EoL>
<BoL> Return the Hanning window . <EoL>
<BoL> Compute the bi-dimensional histogram of two data samples . <EoL>
<BoL> Compute the multidimensional histogram of some data . <EoL>
<BoL> Split an array into multiple sub-arrays horizontally ( column-wise ) . <EoL>
<BoL> Modified Bessel function of the first kind , order 0 . <EoL>
<BoL> Return the imaginary part of the complex argument . <EoL>
<BoL> Test whether each element of a 1-D array is also present in a second array . <EoL>
<BoL> Get help information for a function , class , or module . <EoL>
<BoL> Insert values along the given axis before the given indices . <EoL>
<BoL> One-dimensional linear interpolation . <EoL>
<BoL> Find the intersection of two arrays . <EoL>
<BoL> Compute the interest portion of a payment . <EoL>
<BoL> Return the Internal Rate of Return ( IRR ) . <EoL>
<BoL> Returns a bool array , where True if input element is complex . <EoL>
<BoL> Check for a complex type or an array of complex numbers . <EoL>
<BoL> Calculates ` element in test_elements ` , broadcasting over ` element ` only . <EoL>
<BoL> Test element-wise for negative infinity , return result as bool array . <EoL>
<BoL> Test element-wise for positive infinity , return result as bool array . <EoL>
<BoL> Return True if x is a not complex type or an array of complex numbers . <EoL>
<BoL> Check whether or not an object can be iterated over . <EoL>
<BoL> Construct an open mesh from multiple sequences . <EoL>
<BoL> Return the Kaiser window . <EoL>
<BoL> Kronecker product of two arrays . <EoL>
<BoL> Return corresponding data . <EoL>
<BoL> Return a new arrayterator . <EoL>
<BoL> Compare alpha/beta/rc/final . <EoL>
<BoL> Compare major.minor.bugfix <EoL>
<BoL> Create a Repository with a shared url or directory of baseurl . <EoL>
<BoL> Extend DataSource method to prepend baseurl to `` path `` . <EoL>
<BoL> Return complete path for path . Prepends baseurl if necessary . <EoL>
<BoL> Return absolute path of file in the Repository directory . <EoL>
<BoL> Test if path exists prepending Repository base URL to path . <EoL>
<BoL> List files in the source Repository . <EoL>
<BoL> Open and return file-like object prepending Repository base URL . <EoL>
<BoL> Return the keys of currently supported file openers . <EoL>
<BoL> Check mode and that encoding and newline are compatible . <EoL>
<BoL> Wrapper to open bz2 in text mode . <EoL>
<BoL> Wrapper to open gzip in text mode . <EoL>
<BoL> Open ` path ` with ` mode ` and return the file object . <EoL>
<BoL> Chop off comments , strip , and split at delimiter . <EoL>
<BoL> Wrapper to strip each member of the output of ` method ` . <EoL>
<BoL> Validate a list of strings as field names for a structured array . <EoL>
<BoL> Returns dtype for datetime64 and type of dtype otherwise . <EoL>
<BoL> Returns the dtype of the input variable . <EoL>
<BoL> Returns the type of the dtype of the input variable . <EoL>
<BoL> Find the best converter for a given string , and return the result . <EoL>
<BoL> Upgrade the mapper of a StringConverter by adding a new function and <EoL>
<BoL> Decode bytes from binary input streams . <EoL>
<BoL> Check whether obj behaves like a bytes object . <EoL>
<BoL> Check whether obj behaves like a string . <EoL>
<BoL> Returns the filehandle corresponding to a string or a file . <EoL>
<BoL> Convenience function to create a ` np.dtype ` object . <EoL>
<BoL> Unpack a structured data-type by collapsing nested fields and/or fields <EoL>
<BoL> Returns whether one or several fields of a dtype are nested . <EoL>
<BoL> Tries to transform a string supposed to represent a boolean to a boolean . <EoL>
<BoL> Append constant ` val ` along ` axis ` of ` arr ` . <EoL>
<BoL> Append ` pad_amt ` to ` arr ` along ` axis ` by extending edge values . <EoL>
<BoL> Pad one ` axis ` of ` arr ` with the maximum of the last ` num ` elements . <EoL>
<BoL> Append ` pad_amt ` mean values along ` axis ` . <EoL>
<BoL> Append ` pad_amt ` median values along ` axis ` . <EoL>
<BoL> Append ` pad_amt ` median values along ` axis ` . <EoL>
<BoL> Append linear ramp along ` axis ` . <EoL>
<BoL> Create an ndarray of ` shape ` with increments along specified ` axis ` <EoL>
<BoL> Private function which does some checks and normalizes the possibly <EoL>
<BoL> Pad ` axis ` of ` arr ` by reflection . <EoL>
<BoL> Pad ` axis ` of ` arr ` by symmetry . <EoL>
<BoL> Pad ` axis ` of ` arr ` via wrapping . <EoL>
<BoL> Prepend constant ` val ` along ` axis ` of ` arr ` . <EoL>
<BoL> Prepend ` pad_amt ` to ` arr ` along ` axis ` by extending edge values . <EoL>
<BoL> Prepend ` pad_amt ` maximum values along ` axis ` . <EoL>
<BoL> Prepend ` pad_amt ` mean values along ` axis ` . <EoL>
<BoL> Prepend ` pad_amt ` median values along ` axis ` . <EoL>
<BoL> Prepend ` pad_amt ` minimum values along ` axis ` . <EoL>
<BoL> Prepend linear ramp along ` axis ` . <EoL>
<BoL> Rounds arr inplace if destination dtype is integer . <EoL>
<BoL> Private function which does some checks and reformats pad_width and <EoL>
<BoL> Pads an array . <EoL>
<BoL> Find the set difference of two arrays . <EoL>
<BoL> Find the set exclusive-or of two arrays . <EoL>
<BoL> Find the union of two arrays . <EoL>
<BoL> This function is here to simply have a different name for the 'fv ' <EoL>
<BoL> Modified internal rate of return . <EoL>
<BoL> Compute the number of periodic payments . <EoL>
<BoL> Returns the NPV ( Net Present Value ) of a cash flow series . <EoL>
<BoL> Compute the payment against loan principal plus interest . <EoL>
<BoL> Compute the payment against loan principal . <EoL>
<BoL> Compute the present value . <EoL>
<BoL> Compute the rate of interest per period . <EoL>
<BoL> Clean up 'L ' in npz header ints . <EoL>
<BoL> see read_array_header_1_0 <EoL>
<BoL> Read from file-like object until size bytes are read . <EoL>
<BoL> Write the header for an array and returns the version used <EoL>
<BoL> Get a serializable descriptor from the dtype . <EoL>
<BoL> Get the dictionary of header metadata from a numpy.ndarray . <EoL>
<BoL> Return the magic string for the given file format version . <EoL>
<BoL> Read an array from an NPY file . <EoL>
<BoL> Read an array header from a filelike object using the 1.0 file format <EoL>
<BoL> Read an array header from a filelike object using the 2.0 file format <EoL>
<BoL> Read the magic string to get the version of the file format . <EoL>
<BoL> Protected string evaluation . <EoL>
<BoL> Write an array to an NPY file , including a header . <EoL>
<BoL> Write the header for an array using the 1.0 format . <EoL>
<BoL> Write the header for an array using the 2.0 format . <EoL>
<BoL> Helper for calculating broadcast shapes with core dimensions . <EoL>
<BoL> Helper for creating output arrays in vectorize . <EoL>
<BoL> Histogram bin estimator that uses the minimum width of the <EoL>
<BoL> Doane 's histogram bin estimator . <EoL>
<BoL> The Freedman-Diaconis histogram bin estimator . <EoL>
<BoL> Rice histogram bin estimator . <EoL>
<BoL> Scott histogram bin estimator . <EoL>
<BoL> Square root histogram bin estimator . <EoL>
<BoL> Sturges histogram bin estimator . <EoL>
<BoL> Parse string signatures for a generalized universal function . <EoL>
<BoL> Parse broadcast and core dimensions for vectorize with a signature . <EoL>
<BoL> Incrementally check and update core dimension sizes for a single argument . <EoL>
<BoL> Internal Function . <EoL>
<BoL> Compute the median along the specified axis . <EoL>
<BoL> Return coordinate matrices from coordinate vectors . <EoL>
<BoL> Return a copy of an array sorted along the first axis . <EoL>
<BoL> Evaluate a piecewise-defined function . <EoL>
<BoL> Change elements of an array based on conditional and input values . <EoL>
<BoL> Rotate an array by 90 degrees in the plane specified by axes . <EoL>
<BoL> Return an array drawn from elements in choicelist , depending on conditions . <EoL>
<BoL> Return the sinc function . <EoL>
<BoL> Sort a complex array using the real part first , then the imaginary part . <EoL>
<BoL> Integrate along the given axis using the composite trapezoidal rule . <EoL>
<BoL> Trim the leading and/or trailing zeros from a 1-D array or sequence . <EoL>
<BoL> Unwrap by changing deltas between values to 2*pi complement . <EoL>
<BoL> Return arrays with the results of ` pyfunc ` broadcast ( vectorized ) over <EoL>
<BoL> Return ( ufunc , otypes ) . <EoL>
<BoL> Vectorized call to ` func ` over positional ` args ` . <EoL>
<BoL> Vectorized call over positional arguments with a signature . <EoL>
<BoL> Standard iterator method , returns the index tuple and array value . <EoL>
<BoL> Standard iterator method , updates the index and returns the index <EoL>
<BoL> Increment the multi-dimensional index by one . <EoL>
<BoL> Unpack a structured data-type , and produce re-packing info.Pack items into nested lists based on re-packing info.Chop off comments , strip , and split at delimiter.Parse each line , including the first . <EoL>
<BoL> Load ASCII data stored in a text file and return a masked array . <EoL>
<BoL> Return the indices to access ( n , n ) arrays , given a masking function . <EoL>
<BoL> Return the character for the minimum-size type to which given types can <EoL>
<BoL> Implement a forward binary method with a ufunc , e.g. , __add__ . <EoL>
<BoL> True when __array_ufunc__ is set to None . <EoL>
<BoL> Implement an in-place binary method with a ufunc , e.g. , __iadd__ . <EoL>
<BoL> Implement forward , reflected and inplace binary methods with a ufunc . <EoL>
<BoL> Implement a reflected binary method with a ufunc , e.g. , __radd__ . <EoL>
<BoL> Implement a unary special method with a ufunc . <EoL>
<BoL> Replace nan with zero and inf with large finite numbers . <EoL>
<BoL> Return the indices of the maximum values in the specified axis ignoring <EoL>
<BoL> Return the indices of the minimum values in the specified axis ignoring <EoL>
<BoL> Return the cumulative product of array elements over a given axis treating Not a <EoL>
<BoL> Return the cumulative sum of array elements over a given axis treating Not a <EoL>
<BoL> Replace values in ` a ` with NaN where ` mask ` is True . This differs from <EoL>
<BoL> Compute a/b ignoring invalid results . If ` a ` is an array the division <EoL>
<BoL> Private function that does n't support extended axis or keepdims . <EoL>
<BoL> Private function for rank 1 arrays . Compute the median ignoring NaNs . <EoL>
<BoL> sort + indexing median , faster for small medians along multiple <EoL>
<BoL> Private function for rank 1 arrays . Compute percentile ignoring NaNs . <EoL>
<BoL> Equivalent to arr1d [ ~arr1d.isnan ( ) ] , but in a different order <EoL>
<BoL> If ` a ` is of inexact type , make a copy of ` a ` , replace NaNs with <EoL>
<BoL> Return the maximum of an array or maximum along an axis , ignoring any <EoL>
<BoL> Compute the arithmetic mean along the specified axis , ignoring NaNs . <EoL>
<BoL> Return minimum of an array or minimum along an axis , ignoring any NaNs . <EoL>
<BoL> Return the product of array elements over a given axis treating Not a <EoL>
<BoL> Compute the standard deviation along the specified axis , while <EoL>
<BoL> Return the sum of array elements over a given axis treating Not a <EoL>
<BoL> Compute the variance along the specified axis , while ignoring NaNs . <EoL>
<BoL> Load ASCII data stored in a file and return it as a single array . <EoL>
<BoL> Enables dir ( bagobj ) to list the files in an NpzFile . <EoL>
<BoL> Close the file . <EoL>
<BoL> Return a list of tuples , with each tuple ( filename , array in file ) . <EoL>
<BoL> Generator that returns tuples ( filename , array in file ) . <EoL>
<BoL> Return an iterator over the files in the archive . <EoL>
<BoL> Return files in the archive with a `` .npy `` extension . <EoL>
<BoL> Find the correct dtype converter . Adapted from matplotlib <EoL>
<BoL> Load ASCII data stored in a comma-separated file . <EoL>
<BoL> Load ASCII data from a file and return it in a record array . <EoL>
<BoL> Save an array to a binary file in NumPy `` .npy `` format . <EoL>
<BoL> Save several arrays into a single file in uncompressed `` .npz `` format . <EoL>
<BoL> Save several arrays into a single file in compressed `` .npz `` format . <EoL>
<BoL> Create a ZipFile . <EoL>
<BoL> Find the coefficients of a polynomial with the given sequence of roots . <EoL>
<BoL> Return a derivative of this polynomial . <EoL>
<BoL> Return an antiderivative ( indefinite integral ) of this polynomial . <EoL>
<BoL> Find the sum of two polynomials . <EoL>
<BoL> Return the derivative of the specified order of a polynomial . <EoL>
<BoL> Returns the quotient and remainder of polynomial division . <EoL>
<BoL> Least squares polynomial fit . <EoL>
<BoL> Return an antiderivative ( indefinite integral ) of a polynomial . <EoL>
<BoL> Find the product of two polynomials . <EoL>
<BoL> Compute the eigenvalues of a general matrix . <EoL>
<BoL> Compute the ( multiplicative ) inverse of a matrix . <EoL>
<BoL> Return the least-squares solution to a linear matrix equation . <EoL>
<BoL> Difference ( subtraction ) of two polynomials . <EoL>
<BoL> Evaluate a polynomial at specific values . <EoL>
<BoL> Return the real part of the complex argument . <EoL>
<BoL> Return the roots of a polynomial with coefficients given in p . <EoL>
<BoL> Generate a Vandermonde matrix . <EoL>
<BoL> If complex input returns a real array if complex parts are close to zero . <EoL>
<BoL> Find the wrapper for the array with the highest priority . <EoL>
<BoL> Split an array into multiple sub-arrays . <EoL>
<BoL> Construct an array by repeating A the number of times given by reps . <EoL>
<BoL> Split an array into multiple sub-arrays vertically ( row-wise ) . <EoL>
<BoL> Print or write to a file the source code for a NumPy object . <EoL>
<BoL> Returns the shape of the arrays that would result from broadcasting the <EoL>
<BoL> An array with ones at and below the given diagonal and zeros elsewhere . <EoL>
<BoL> Lower triangle of an array . <EoL>
<BoL> Return the indices for the lower-triangle of an ( n , m ) array . <EoL>
<BoL> Return the indices for the lower-triangle of arr . <EoL>
<BoL> Upper triangle of an array . <EoL>
<BoL> Return the indices for the upper-triangle of an ( n , m ) array . <EoL>
<BoL> Return the indices for the upper-triangle of arr . <EoL>
<BoL> get small int that fits the range <EoL>
<BoL> Return a description for the given data type code . <EoL>
<BoL> Allow the out argument to be passed as the name ` y ` ( deprecated ) <EoL>
<BoL> Decorator call . Refer to `` decorate `` . ` arrayrange ` is deprecated , use ` arange ` instead ! <EoL>
<BoL> Provide information about ndarray obj . <EoL>
<BoL> Generate docstring cache for given module . <EoL>
<BoL> Utility function to check median result from data for NaN values at the end <EoL>
<BoL> Print the NumPy arrays in the given dictionary . <EoL>
<BoL> Cholesky decomposition . <EoL>
<BoL> Compute the condition number of a matrix . <EoL>
<BoL> Compute the determinant of an array . <EoL>
<BoL> Compute the eigenvalues and right eigenvectors of a square array . <EoL>
<BoL> Return the eigenvalues and eigenvectors of a Hermitian or symmetric matrix . <EoL>
<BoL> Compute the eigenvalues of a Hermitian or real symmetric matrix . <EoL>
<BoL> Cast the type t to either double or cdouble . <EoL>
<BoL> Actually do the multiplication with the given order . <EoL>
<BoL> Return a np.array that encodes the optimal order of mutiplications . <EoL>
<BoL> Find the best order for three arrays and do the multiplication . <EoL>
<BoL> Compute a function of the singular values of the 2-D matrices in ` x ` . <EoL>
<BoL> Return matrix rank of array using SVD method <EoL>
<BoL> Compute the dot product of two or more arrays in a single function call , <EoL>
<BoL> Matrix or vector norm . <EoL>
<BoL> Compute the ( Moore-Penrose ) pseudo-inverse of a matrix . <EoL>
<BoL> Compute the qr factorization of a matrix . <EoL>
<BoL> Compute the sign and ( natural ) logarithm of the determinant of an array . <EoL>
<BoL> Solve a linear matrix equation , or system of linear scalar equations . <EoL>
<BoL> Singular Value Decomposition . <EoL>
<BoL> Compute the 'inverse ' of an N-dimensional array . <EoL>
<BoL> Solve the tensor equation `` a x = b `` for x . <EoL>
<BoL> Transpose each matrix in a stack of matrices . <EoL>
<BoL> Returns True if two arrays are element-wise equal within a tolerance . <EoL>
<BoL> Return True if all entries of a and b are equal , using <EoL>
<BoL> Reduce ` target ` along the given ` axis ` . <EoL>
<BoL> Append values to the end of an array . <EoL>
<BoL> ( This docstring should be overwritten ) <EoL>
<BoL> ( This docstring will be overwritten ) <EoL>
<BoL> Convert the input to a masked array , conserving subclasses . <EoL>
<BoL> Convert the input to a masked array of the given data-type . <EoL>
<BoL> Return the weighted average of array over the given axis . <EoL>
<BoL> Use an index array to construct a new array from a set of choices . <EoL>
<BoL> Returns a list of slices corresponding to the masked clumps of a 1-D array . <EoL>
<BoL> Return list of slices corresponding to the unmasked clumps of a 1-D array . <EoL>
<BoL> Return the common filling value of two masked arrays , if any . <EoL>
<BoL> Suppress whole columns of a 2-D array that contain masked values . <EoL>
<BoL> Suppress slices from multiple dimensions which contain masked values . <EoL>
<BoL> Suppress the rows and/or columns of a 2-D array that contain <EoL>
<BoL> Suppress whole rows of a 2-D array that contain masked values . <EoL>
<BoL> Return all the non-masked data as a 1-D array . <EoL>
<BoL> Concatenate a sequence of arrays along the given axis . <EoL>
<BoL> Returns the discrete , linear convolution of two one-dimensional sequences . <EoL>
<BoL> Override of MaskedArray 's __reduce__ . <EoL>
<BoL> Copy is a no-op on the maskedconstant , as it is a scalar <EoL>
<BoL> Return the next value , or raise StopIteration . <EoL>
<BoL> abfunc ( fillx , filly ) must be defined . <EoL>
<BoL> Execute the call behavior . <EoL>
<BoL> abfunc ( fillx , filly ) must be defined . <EoL>
<BoL> Accumulate ` target ` along ` axis ` after filling with y fill <EoL>
<BoL> Return the function applied to the outer product of a and b . <EoL>
<BoL> Create the masked_print_option object . <EoL>
<BoL> Display the string to print for masked values . <EoL>
<BoL> Set the enabling shrink to ` shrink ` . <EoL>
<BoL> Is the use of the display value enabled ? <EoL>
<BoL> Set the string to print for masked values . <EoL>
<BoL> Execute the call behavior . <EoL>
<BoL> Return a class method wrapper around a basic array method . <EoL>
<BoL> Private function validating the given ` fill_value ` for the given dtype . <EoL>
<BoL> Helper function for ma.correlate and ma.convolve <EoL>
<BoL> Adjust the axis passed to argsort , warning if necessary <EoL>
<BoL> Convert the argument for *_fill_value into a dtype <EoL>
<BoL> Internal function that builds a new MaskedArray from the <EoL>
<BoL> Recursively produce a fill value for ` dtype ` , calling f on scalar dtypes <EoL>
<BoL> Recursively fill ` a ` with ` fill_value ` . <EoL>
<BoL> Puts printoptions in result where mask is True . <EoL>
<BoL> Create a fill value for a structured dtype . <EoL>
<BoL> Construct a dtype description list from a given dtype . <EoL>
<BoL> Shrink a mask to nomask if possible <EoL>
<BoL> Cross-correlation of two 1-dimensional sequences . <EoL>
<BoL> Return the default fill value for the argument object . <EoL>
<BoL> Extract a diagonal or construct a diagonal array . <EoL>
<BoL> Adds a Notes section to an existing docstring. % s <EoL>
<BoL> Return the dot product of two arrays . <EoL>
<BoL> Pickle a masked array to a file . <EoL>
<BoL> Return a string corresponding to the pickling of a masked array . <EoL>
<BoL> Expand the shape of an array . <EoL>
<BoL> Return input as an array with masked data replaced by a fill value . <EoL>
<BoL> Return input with invalid data masked and replaced by a fill value . <EoL>
<BoL> Returns a completely flattened version of the mask , where nested fields <EoL>
<BoL> Flatten a structured array.Flattens a compound of nested iterables . <EoL>
<BoL> Build a masked array from a suitable flexible-type array . <EoL>
<BoL> Return the data of a masked array as an ndarray . <EoL>
<BoL> Return the filling value of a , if any . Otherwise , returns the <EoL>
<BoL> Return the mask of a masked array , or nomask . <EoL>
<BoL> Return the youngest subclass of MaskedArray from a list of ( masked ) arrays . <EoL>
<BoL> Get the signature from obj <EoL>
<BoL> Return the mask of a masked array , or full boolean array of False . <EoL>
<BoL> Returns the inner product of a and b for arrays of floating point types . <EoL>
<BoL> Test whether input is an instance of MaskedArray . <EoL>
<BoL> Return True if m is a valid , standard mask . <EoL>
<BoL> Determine whether input has masked values . <EoL>
<BoL> Shift the bits of an integer to the left . <EoL>
<BoL> Wrapper around `` cPickle.load `` which accepts either a file-like object <EoL>
<BoL> Load a pickle from the current string . <EoL>
<BoL> Create a boolean mask from an array . <EoL>
<BoL> Construct a dtype description list from a given dtype . <EoL>
<BoL> Return a boolean mask of the given shape , filled with False . <EoL>
<BoL> Combine two masks with the `` logical_or `` operator . <EoL>
<BoL> Mask rows and/or columns of a 2D array that contain masked values . <EoL>
<BoL> Mask an array where equal to a given value . <EoL>
<BoL> Mask an array where greater than a given value . <EoL>
<BoL> Mask an array where greater than or equal to a given value . <EoL>
<BoL> Mask an array inside a given interval . <EoL>
<BoL> Mask an array where invalid values occur ( NaNs or infs ) . <EoL>
<BoL> Mask an array where less than a given value . <EoL>
<BoL> Mask an array where less than or equal to a given value . <EoL>
<BoL> Mask an array where ` not ` equal to a given value . <EoL>
<BoL> Mask the array ` x ` where the data are exactly equal to value . <EoL>
<BoL> Mask an array outside a given interval . <EoL>
<BoL> Mask using floating point equality . <EoL>
<BoL> Mask an array where a condition is met . <EoL>
<BoL> Return the minimum value that can be represented by the dtype of an object . <EoL>
<BoL> Return the maximum value that can be represented by the dtype of an object . <EoL>
<BoL> Get the index . <EoL>
<BoL> Return a copy with masked fields filled with a given value . <EoL>
<BoL> Transforms the mvoid object into a tuple . <EoL>
<BoL> maskedarray version of the numpy function . <EoL>
<BoL> Returns element-wise base array raised to power from second array . <EoL>
<BoL> a.ptp ( axis=None ) = a.max ( axis ) - a.min ( axis ) <EoL>
<BoL> Set storage-indexed locations to corresponding values . <EoL>
<BoL> Changes elements of an array based on conditional and input values . <EoL>
<BoL> maskedarray version of the numpy function . <EoL>
<BoL> Returns an array containing the same data with a new shape . <EoL>
<BoL> Return a new masked array with the specified size and shape . <EoL>
<BoL> Shift the bits of an integer to the right . <EoL>
<BoL> Return a copy of a , rounded to 'decimals ' places . <EoL>
<BoL> Set the filling value of a , if a is a masked array . <EoL>
<BoL> <EoL>
<BoL> Permute the dimensions of an array . <EoL>
<BoL> Return a masked array with elements from x or y , depending on condition . <EoL>
<BoL> Count the number of masked elements along the given axis . <EoL>
<BoL> Estimate the covariance matrix . <EoL>
<BoL> Compute the differences between consecutive elements of an array . <EoL>
<BoL> Private function for the computation of covariance and correlation <EoL>
<BoL> Finds the clumps ( groups of data with the same values ) for a 1D bool array . <EoL>
<BoL> Retrieve the docstring and signature from the function . <EoL>
<BoL> Find contiguous unmasked data in a masked array along the given axis . <EoL>
<BoL> Find the indices of the first and last unmasked values . <EoL>
<BoL> Flatten a sequence in place . <EoL>
<BoL> Test whether each element of an array is also present in a second <EoL>
<BoL> Returns the unique elements common to both arrays . <EoL>
<BoL> Calculates ` element in test_elements ` , broadcasting over <EoL>
<BoL> Is seq a sequence ( ndarray , list or tuple ) ? <EoL>
<BoL> Mask columns of a 2D array that contain masked values . <EoL>
<BoL> Mask rows of a 2D array that contain masked values . <EoL>
<BoL> Empty masked array with all elements masked . <EoL>
<BoL> Empty masked array with the properties of an existing array . <EoL>
<BoL> Compute the median along the specified axis . <EoL>
<BoL> Find contiguous unmasked data in a masked array along the given axis . <EoL>
<BoL> Find the indices of the first and last unmasked values along an axis . <EoL>
<BoL> Any masked values in x is propagated in y , and vice-versa . <EoL>
<BoL> Set difference of 1D arrays with unique elements . <EoL>
<BoL> Set exclusive-or of 1-D arrays with unique elements . <EoL>
<BoL> Union of two arrays . <EoL>
<BoL> Finds the unique elements of an array . <EoL>
<BoL> Masked values in the input array result in rows of zeros . <EoL>
<BoL> Return a new matrix of given shape and type , without initializing entries . <EoL>
<BoL> Return a matrix with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Returns the square identity matrix of given size . <EoL>
<BoL> Matrix of ones . <EoL>
<BoL> Return a matrix of random values with given shape . <EoL>
<BoL> Return a random matrix with data from the `` standard normal '' distribution . <EoL>
<BoL> Repeat a 0-D to 2-D array or matrix MxN times . <EoL>
<BoL> Return a matrix of given shape and type , filled with zeros . <EoL>
<BoL> Add one Chebyshev series to another . <EoL>
<BoL> Differentiate a Chebyshev series . <EoL>
<BoL> Divide one Chebyshev series by another . <EoL>
<BoL> Least squares fit of Chebyshev series to data . <EoL>
<BoL> Generate a Chebyshev series with given roots . <EoL>
<BoL> Interpret other as polynomial coefficients . <EoL>
<BoL> Integrate a Chebyshev series . <EoL>
<BoL> Chebyshev series whose graph is a straight line . <EoL>
<BoL> Multiply one Chebyshev series by another . <EoL>
<BoL> Raise a Chebyshev series to a power . <EoL>
<BoL> Compute the roots of a Chebyshev series . <EoL>
<BoL> Subtract one Chebyshev series from another . <EoL>
<BoL> Evaluate a Chebyshev series at points x . <EoL>
<BoL> Series basis polynomial of degree ` deg ` . <EoL>
<BoL> Convert series to series of this class . <EoL>
<BoL> Convert series to a different kind and/or domain and/or window . <EoL>
<BoL> Return a copy . <EoL>
<BoL> Truncate series to the given degree . <EoL>
<BoL> The degree of the series . <EoL>
<BoL> Differentiate . <EoL>
<BoL> Return series instance that has the specified roots . <EoL>
<BoL> Check if coefficients match . <EoL>
<BoL> Check if domains match . <EoL>
<BoL> Check if types match . <EoL>
<BoL> Check if windows match . <EoL>
<BoL> Identity function . <EoL>
<BoL> Integrate . <EoL>
<BoL> Interpolate a function at the Chebyshev points of the first kind . <EoL>
<BoL> Return x , y values at equally spaced points in domain . <EoL>
<BoL> Return the mapping parameters . <EoL>
<BoL> Return the roots of the series polynomial . <EoL>
<BoL> Remove trailing coefficients <EoL>
<BoL> Truncate series to length ` size ` . <EoL>
<BoL> Add one Hermite series to another . <EoL>
<BoL> Differentiate a Hermite series . <EoL>
<BoL> Divide one Hermite series by another . <EoL>
<BoL> Least squares fit of Hermite series to data . <EoL>
<BoL> Generate a Hermite series with given roots . <EoL>
<BoL> Integrate a Hermite series . <EoL>
<BoL> Hermite series whose graph is a straight line . <EoL>
<BoL> Multiply one Hermite series by another . <EoL>
<BoL> Raise a Hermite series to a power . <EoL>
<BoL> Compute the roots of a Hermite series . <EoL>
<BoL> Subtract one Hermite series from another . <EoL>
<BoL> Evaluate an Hermite series at points x . <EoL>
<BoL> Add one Hermite series to another . <EoL>
<BoL> Differentiate a Hermite_e series . <EoL>
<BoL> Divide one Hermite series by another . <EoL>
<BoL> Least squares fit of Hermite series to data . <EoL>
<BoL> Generate a HermiteE series with given roots . <EoL>
<BoL> Integrate a Hermite_e series . <EoL>
<BoL> Hermite series whose graph is a straight line . <EoL>
<BoL> Multiply one Hermite series by another . <EoL>
<BoL> Raise a Hermite series to a power . <EoL>
<BoL> Compute the roots of a HermiteE series . <EoL>
<BoL> Subtract one Hermite series from another . <EoL>
<BoL> Evaluate an HermiteE series at points x . <EoL>
<BoL> Add one Laguerre series to another . <EoL>
<BoL> Differentiate a Laguerre series . <EoL>
<BoL> Divide one Laguerre series by another . <EoL>
<BoL> Least squares fit of Laguerre series to data . <EoL>
<BoL> Generate a Laguerre series with given roots . <EoL>
<BoL> Integrate a Laguerre series . <EoL>
<BoL> Laguerre series whose graph is a straight line . <EoL>
<BoL> Multiply one Laguerre series by another . <EoL>
<BoL> Raise a Laguerre series to a power . <EoL>
<BoL> Compute the roots of a Laguerre series . <EoL>
<BoL> Subtract one Laguerre series from another . <EoL>
<BoL> Evaluate a Laguerre series at points x . <EoL>
<BoL> Add one Legendre series to another . <EoL>
<BoL> Differentiate a Legendre series . <EoL>
<BoL> Divide one Legendre series by another . <EoL>
<BoL> Least squares fit of Legendre series to data . <EoL>
<BoL> Generate a Legendre series with given roots . <EoL>
<BoL> Integrate a Legendre series . <EoL>
<BoL> Legendre series whose graph is a straight line . <EoL>
<BoL> Multiply one Legendre series by another . <EoL>
<BoL> Raise a Legendre series to a power . <EoL>
<BoL> Compute the roots of a Legendre series . <EoL>
<BoL> Subtract one Legendre series from another . <EoL>
<BoL> Evaluate a Legendre series at points x . <EoL>
<BoL> Add one polynomial to another . <EoL>
<BoL> Differentiate a polynomial . <EoL>
<BoL> Divide one polynomial by another . <EoL>
<BoL> Least-squares fit of a polynomial to data . <EoL>
<BoL> Generate a monic polynomial with given roots . <EoL>
<BoL> Integrate a polynomial . <EoL>
<BoL> Returns an array representing a linear polynomial . <EoL>
<BoL> Multiply one polynomial by another . <EoL>
<BoL> Raise a polynomial to a power . <EoL>
<BoL> Compute the roots of a polynomial . <EoL>
<BoL> Subtract one polynomial from another . <EoL>
<BoL> Evaluate a polynomial at points x . <EoL>
<BoL> Covert Chebyshev series to z-series . <EoL>
<BoL> Differentiate a z-series . <EoL>
<BoL> Divide the first z-series by the second . <EoL>
<BoL> Integrate a z-series . <EoL>
<BoL> Multiply two z-series . <EoL>
<BoL> Covert z-series to a Chebyshev series . <EoL>
<BoL> Convert a Chebyshev series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-Chebyshev quadrature . <EoL>
<BoL> Evaluate a 2-D Chebyshev series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Chebyshev series on the Cartesian product of x , y , and z . <EoL>
<BoL> Interpolate a function at the Chebyshev points of the first kind . <EoL>
<BoL> Multiply a Chebyshev series by x . <EoL>
<BoL> Chebyshev points of the first kind . <EoL>
<BoL> Chebyshev points of the second kind . <EoL>
<BoL> Remove `` small '' `` trailing '' coefficients from a polynomial . <EoL>
<BoL> Evaluate a 2-D Chebyshev series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Chebyshev series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> The weight function of the Chebyshev polynomials . <EoL>
<BoL> Convert a polynomial to a Chebyshev series . <EoL>
<BoL> Evaluate a normalized Hermite polynomial . <EoL>
<BoL> Convert a Hermite series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-Hermite quadrature . <EoL>
<BoL> Evaluate a 2-D Hermite series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Hermite series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Hermite series by x . <EoL>
<BoL> Evaluate a 2-D Hermite series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Hermite series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Hermite polynomials . <EoL>
<BoL> poly2herm ( pol ) <EoL>
<BoL> Evaluate a normalized HermiteE polynomial . <EoL>
<BoL> Convert a Hermite series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-HermiteE quadrature . <EoL>
<BoL> Evaluate a 2-D HermiteE series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D HermiteE series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Hermite series by x . <EoL>
<BoL> Evaluate a 2-D HermiteE series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Hermite_e series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Hermite_e polynomials . <EoL>
<BoL> poly2herme ( pol ) <EoL>
<BoL> Convert a Laguerre series to a polynomial . <EoL>
<BoL> Return the companion matrix of c . <EoL>
<BoL> Gauss-Laguerre quadrature . <EoL>
<BoL> Evaluate a 2-D Laguerre series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Laguerre series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Laguerre series by x . <EoL>
<BoL> Evaluate a 2-D Laguerre series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Laguerre series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Laguerre polynomials . <EoL>
<BoL> poly2lag ( pol ) <EoL>
<BoL> Convert a Legendre series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-Legendre quadrature . <EoL>
<BoL> Evaluate a 2-D Legendre series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Legendre series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Legendre series by x . <EoL>
<BoL> Evaluate a 2-D Legendre series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Legendre series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Legendre polynomials . <EoL>
<BoL> Convert a polynomial to a Legendre series . <EoL>
<BoL> Return the companion matrix of c . <EoL>
<BoL> Evaluate a 2-D polynomial on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D polynomial on the Cartesian product of x , y and z . <EoL>
<BoL> Multiply a polynomial by x . <EoL>
<BoL> Evaluate a 2-D polynomial at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D polynomial at points ( x , y , z ) . <EoL>
<BoL> Evaluate a polynomial specified by its roots at points x . <EoL>
<BoL> Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Return argument as a list of 1-d arrays . <EoL>
<BoL> Return a domain suitable for given abscissae . <EoL>
<BoL> Apply linear map to input points . <EoL>
<BoL> Linear map parameters between domains . <EoL>
<BoL> Remove small Poly series coefficients . <EoL>
<BoL> Return a RandomState instance . <EoL>
<BoL> Honour the longMessage attribute when generating failure messages . <EoL>
<BoL> Fail unless an exception of class expected_exception is raised <EoL>
<BoL> Check that ufuncs do n't mishandle refcount of object ` 1 ` . <EoL>
<BoL> generator producing data with different alignment and offsets <EoL>
<BoL> Assert that works in release mode . <EoL>
<BoL> Compare two arrays relatively to their spacing . <EoL>
<BoL> Handling nan/inf : check that x and y have the nan/inf at the same <EoL>
<BoL> Check that all items of arrays differ in at most N Units in the Last Place . <EoL>
<BoL> Fail if the given callable produces any warnings . <EoL>
<BoL> assert_raises ( exception_class , callable , *args , **kwargs ) <EoL>
<BoL> assert_raises_regex ( exception_class , expected_regexp , callable , *args , <EoL>
<BoL> Test if two strings are equal . <EoL>
<BoL> Fail unless the given callable throws the specified warning . <EoL>
<BoL> Filter deprecation warnings while running the test suite . <EoL>
<BoL> Make function raise KnownFailureException exception if given condition is true . <EoL>
<BoL> Pytest compatibility class . This implements the simplest level of <EoL>
<BoL> Signals to nose that this function is or is not a test . <EoL>
<BoL> Make function raise SkipTest exception if a given condition is true.Skip message with information about function being skipped.Skipper for normal test functions.Skipper for test generators . <EoL>
<BoL> Label a test as 'slow ' . <EoL>
<BoL> Apply a decorator to all methods in a class matching a regular expression . <EoL>
<BoL> Return number of jiffies elapsed . <EoL>
<BoL> Return elapsed time for executing code in the namespace of the caller . <EoL>
<BoL> Return memory usage of running python . [ Not implemented ] <EoL>
<BoL> Given a path where a package is installed , determine its name . <EoL>
<BoL> Import nose only when needed . <EoL>
<BoL> Run a test module . <EoL>
<BoL> Function decorator to apply certain suppressions to a whole <EoL>
<BoL> Add a new suppressing filter or apply it if the state is entered . <EoL>
<BoL> Append a new recording filter or apply it if the state is entered . <EoL>
<BoL> like isfinite , but always raise an error if type not supported instead of <EoL>
<BoL> like isinf , but always raise an error if type not supported instead of <EoL>
<BoL> like isnan , but always raise an error if type not supported instead of <EoL>
<BoL> Return the signed-magnitude interpretation of the binary representation of <EoL>
<BoL> User-callable function to create and return a unique temporary <EoL>
<BoL> User-callable function to create and return a unique temporary <EoL>
<BoL> For each item in x and y , return the number of representable floating <EoL>
<BoL> Test if two objects are equal , and print an error message if test fails . <EoL>
<BoL> Run doctests found in the given file . <EoL>
<BoL> Context manager to provide a temporary test folder . <EoL>
<BoL> Context manager for temporary files . <EoL>
<BoL> Create a low-level callback function from an exported Cython function . <EoL>
<BoL> Compare alpha/beta/rc/final . <EoL>
<BoL> Compare major.minor.bugfix <EoL>
<BoL> Get information about memory available , not counting swap . <EoL>
<BoL> Check *free_mb* of memory is available , otherwise do pytest.skip <EoL>
<BoL> Decorate a function with a threading lock and prevent reentrant calls . <EoL>
<BoL> Allocate a new ndarray with aligned memory . <EoL>
<BoL> Mimic ` np.select ( condlist , choicelist ) ` . <EoL>
<BoL> np.where ( cond , x , fillvalue ) always evaluates x even where cond is False . <EoL>
<BoL> Return an array equivalent to the input array . If the input <EoL>
<BoL> Return an array of all value . <EoL>
<BoL> Turn seed into a np.random.RandomState instance <EoL>
<BoL> inspect.getargspec replacement using inspect.signature . <EoL>
<BoL> Context manager decorator <EoL>
<BoL> Append `` a `` to the list of the virtual ancestors , unless it is already <EoL>
<BoL> Context manager decorator <EoL>
<BoL> decorate ( func , caller ) decorates a function using a caller . <EoL>
<BoL> decorator ( caller ) converts a caller function into a decorator <EoL>
<BoL> Factory of decorators turning a function into a generic functionMake sure one passes the expected number of argumentsDecorator turning a function into a generic functionGet a list of sets of virtual ancestors for the given typesGet a list of virtual MROs , one for each typeDecorator to register an implementation for the given typesAn utility to introspect the dispatch algorithm <EoL>
<BoL> A replacement for inspect.getargspec <EoL>
<BoL> Get the names and default values of a callable object 's parameters . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Return True if input array is a valid distance matrix . <EoL>
<BoL> Return True if the input array is a valid condensed distance matrix . <EoL>
<BoL> Convert a vector-form distance vector to a square-form distance <EoL>
<BoL> The number of leaf nodes ( original observations ) belonging to <EoL>
<BoL> The identifier of the target node . <EoL>
<BoL> Return a reference to the left child tree object . <EoL>
<BoL> Return a reference to the right child tree object . <EoL>
<BoL> Return True if the target node is a leaf . <EoL>
<BoL> Perform pre-order traversal without recursive function calls . <EoL>
<BoL> Copy the array if its base points to a parent array . <EoL>
<BoL> Accept a tuple of arrays T. Copies the array T [ i ] if its base array <EoL>
<BoL> Return clustering nodes in bottom-up order by distance . <EoL>
<BoL> Generate a random distance matrix stored in condensed form . <EoL>
<BoL> Remove duplicates AND preserve the original order of the elements . <EoL>
<BoL> Perform average/UPGMA linkage on a condensed distance matrix . <EoL>
<BoL> Perform centroid/UPGMC linkage . <EoL>
<BoL> Perform complete/max/farthest point linkage on a condensed distance matrix . <EoL>
<BoL> Calculate the cophenetic distances between each observation in <EoL>
<BoL> Check for correspondence between linkage and condensed distance matrices . <EoL>
<BoL> Given a linkage matrix Z , return the cut tree . <EoL>
<BoL> Form flat clusters from the hierarchical clustering defined by <EoL>
<BoL> Convert a linkage matrix generated by MATLAB ( TM ) to a new <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Determine if two different cluster assignments are equivalent . <EoL>
<BoL> Return True if the linkage passed is monotonic . <EoL>
<BoL> Return True if the inconsistency matrix passed is valid . <EoL>
<BoL> Check the validity of a linkage matrix . <EoL>
<BoL> Return the root nodes in a hierarchical clustering . <EoL>
<BoL> Return a list of leaf node ids . <EoL>
<BoL> Perform hierarchical/agglomerative clustering . <EoL>
<BoL> Return the maximum statistic for each non-singleton cluster and its <EoL>
<BoL> Return the maximum distance between any non-singleton cluster . <EoL>
<BoL> Return the maximum inconsistency coefficient for each <EoL>
<BoL> Perform median/WPGMC linkage . <EoL>
<BoL> Return the number of original observations of the linkage matrix passed . <EoL>
<BoL> Given a linkage matrix Z and distance , reorder the cut tree . <EoL>
<BoL> Set list of matplotlib color codes for use by dendrogram . <EoL>
<BoL> Perform single/min/nearest linkage on the condensed distance matrix `` y `` . <EoL>
<BoL> Convert a linkage matrix to a MATLAB ( TM ) compatible one . <EoL>
<BoL> Convert a linkage matrix into an easy-to-use tree object . <EoL>
<BoL> Perform Ward 's linkage on a condensed distance matrix . <EoL>
<BoL> Perform weighted/WPGMA linkage on the condensed distance matrix . <EoL>
<BoL> `` raw '' version of k-means . <EoL>
<BoL> Pick k points at random in data ( one row = one observation ) . <EoL>
<BoL> Returns k samples of a random variable which parameters depend on data . <EoL>
<BoL> raise a ClusterError when called . <EoL>
<BoL> Print a warning when called . <EoL>
<BoL> Compute distance between each pair of the two collections of inputs . <EoL>
<BoL> Performs k-means on a set of observation vectors forming k clusters . <EoL>
<BoL> Python version of vq algorithm . <EoL>
<BoL> Assign codes from a code book to observations . <EoL>
<BoL> Normalize a group of observations on a per feature basis . <EoL>
<BoL> Like numpy asfarray , except that it does not modify x dtype if x is <EoL>
<BoL> Strict check for ` arr ` not sharing any data with ` original ` , <EoL>
<BoL> Internal auxiliary function for _raw_fft , _raw_fftnd . <EoL>
<BoL> Is the size of FFT such that FFTPACK can handle it in single precision <EoL>
<BoL> Internal auxiliary function for fft , ifft , rfft , irfft . <EoL>
<BoL> Internal auxiliary function for fftnd , ifftnd . <EoL>
<BoL> Return inverse discrete Fourier transform of real sequence x . <EoL>
<BoL> Discrete Fourier transform of a real sequence . <EoL>
<BoL> Return ( a , b ) -cosh/cosh pseudo-derivative of a periodic sequence . <EoL>
<BoL> Return ( a , b ) -cosh/sinh pseudo-derivative of a periodic sequence . <EoL>
<BoL> Return the Discrete Cosine Transform of arbitrary type sequence x . <EoL>
<BoL> Return multidimensional Discrete Cosine Transform along the specified axes . <EoL>
<BoL> Return k-th derivative ( or integral ) of a periodic sequence x . <EoL>
<BoL> Return the Discrete Sine Transform of arbitrary type sequence x . <EoL>
<BoL> Return multidimensional Discrete Sine Transform along the specified axes . <EoL>
<BoL> Find the next fast size of input data to ` fft ` , for zero-padding , etc . <EoL>
<BoL> DFT sample frequencies ( for usage with rfft , irfft ) . <EoL>
<BoL> Return Hilbert transform of a periodic sequence x . <EoL>
<BoL> Return the Inverse Discrete Cosine Transform of an arbitrary type sequence . <EoL>
<BoL> Return multidimensional Discrete Cosine Transform along the specified axes . <EoL>
<BoL> Return the Inverse Discrete Sine Transform of an arbitrary type sequence . <EoL>
<BoL> Return multidimensional Discrete Sine Transform along the specified axes . <EoL>
<BoL> Return inverse Hilbert transform of a periodic sequence x . <EoL>
<BoL> Return inverse h-Tilbert transform of a periodic sequence x . <EoL>
<BoL> Return ( a , b ) -sinh/cosh pseudo-derivative of a periodic sequence x . <EoL>
<BoL> Shift periodic sequence x by a : y ( u ) = x ( u+a ) . <EoL>
<BoL> Return ( a , b ) -sinh/sinh pseudo-derivative of a periodic sequence x . <EoL>
<BoL> Return h-Tilbert transform of a periodic sequence x . <EoL>
<BoL> Return Discrete Cosine Transform of arbitrary type sequence x . <EoL>
<BoL> Return Discrete Sine Transform of arbitrary type sequence x . <EoL>
<BoL> Handle shape and axes arguments for dctn , idctn , dstn , idstn . <EoL>
<BoL> Compute a local interpolant over the last successful step . <EoL>
<BoL> Perform one integration step . <EoL>
<BoL> Evaluate the interpolant . <EoL>
<BoL> Evaluate the solution . <EoL>
<BoL> Evaluate collocation residuals . <EoL>
<BoL> Compute indices for the collocation system Jacobian construction . <EoL>
<BoL> Create a cubic spline given values and derivatives . <EoL>
<BoL> Estimate derivatives of boundary conditions with forward differences . <EoL>
<BoL> Estimate derivatives of an ODE system rhs with forward differences . <EoL>
<BoL> Estimate rms values of collocation residuals using Lobatto quadrature . <EoL>
<BoL> Insert nodes into a mesh . <EoL>
<BoL> Create the function and the Jacobian for the collocation system . <EoL>
<BoL> Solve the nonlinear collocation system by a Newton method . <EoL>
<BoL> Stacked matrix multiply : out [ i , : , : ] = np.dot ( a [ i , : , : ] , b [ i , : , : ] ) . <EoL>
<BoL> Wrap functions for unified usage in the solver . <EoL>
<BoL> Helper function for checking arguments common to all solvers . <EoL>
<BoL> Change differences array in-place when step size is changed . <EoL>
<BoL> Compute the matrix for changing the differences array . <EoL>
<BoL> Sparse matrix with ones on diagonal <EoL>
<BoL> Group columns of a 2-d matrix for sparse finite differencing [ 1 ] _ . <EoL>
<BoL> Compute pivoted LU decomposition of a matrix . <EoL>
<BoL> Solve an equation system , a x = b , given the LU factorization of a <EoL>
<BoL> Compute RMS norm . <EoL>
<BoL> Finite differences Jacobian approximation tailored for ODE solvers . <EoL>
<BoL> Empirically select a good initial step . <EoL>
<BoL> Solve the algebraic system resulting from BDF method . <EoL>
<BoL> Assert that max_Step is valid and return it . <EoL>
<BoL> Validate tolerance values . <EoL>
<BoL> Display a warning for extraneous keyword arguments . <EoL>
<BoL> Return the indices and values of the nonzero elements of a matrix <EoL>
<BoL> Find which event occurred during an integration step . <EoL>
<BoL> Helper function to handle events . <EoL>
<BoL> Standardize event functions and extract is_terminal and direction . <EoL>
<BoL> Solve an equation corresponding to an ODE event . <EoL>
<BoL> Extracts the return code for the integration to enable better control <EoL>
<BoL> Find y=y ( t ) , set y as an initial condition , and return y . <EoL>
<BoL> Set extra parameters for user-supplied function f . <EoL>
<BoL> Set initial conditions y ( t ) = y . <EoL>
<BoL> Set integrator by name . <EoL>
<BoL> Set extra parameters for user-supplied function jac . <EoL>
<BoL> Set callable to be called at every successful integration step . <EoL>
<BoL> Check if integration was successful . <EoL>
<BoL> Predict by which factor to increase/decrease the step size . <EoL>
<BoL> Perform a single Runge-Kutta step . <EoL>
<BoL> Prepare integrator for call : allocate memory , set flags , etc . <EoL>
<BoL> Integrate from t=t0 to t=t1 using y0 as an initial condition . <EoL>
<BoL> Integrate from t=t0 to t > =t1 and return ( y1 , t ) . <EoL>
<BoL> Make one integration step and return ( y1 , t1 ) . <EoL>
<BoL> Convert a real matrix of the form ( for example ) <EoL>
<BoL> Wrap a banded Jacobian function with a function that pads <EoL>
<BoL> Find y=y ( t ) , set y as an initial condition , and return y . <EoL>
<BoL> Set initial conditions y ( t ) = y . <EoL>
<BoL> Set integrator by name . <EoL>
<BoL> Set callable to be called at every successful integration step . <EoL>
<BoL> Determine the ` MF ` parameter ( Method Flag ) for the Fortran subroutine ` dvode ` . <EoL>
<BoL> Cumulatively integrate y ( x ) using the composite trapezoidal rule . <EoL>
<BoL> Compute a double integral . <EoL>
<BoL> Compute a definite integral using fixed-order Gaussian quadrature . <EoL>
<BoL> Return weights and error coefficient for Newton-Cotes integration . <EoL>
<BoL> Integration over multiple variables . <EoL>
<BoL> Print extra information about integrate.quad ( ) parameters and returns . <EoL>
<BoL> Return stored dict . <EoL>
<BoL> Return stored value . <EoL>
<BoL> Romberg integration using samples of a function . <EoL>
<BoL> Integrate y ( x ) using samples along the given axis and the composite <EoL>
<BoL> Evaluate the piecewise polynomial or its derivative . <EoL>
<BoL> c and x may be modified by the user . The Cython code expects <EoL>
<BoL> Construct a new piecewise polynomial representing the antiderivative . <EoL>
<BoL> Construct the piecewise polynomial without making checks . <EoL>
<BoL> Construct a new piecewise polynomial representing the derivative . <EoL>
<BoL> Compute a definite integral over a piecewise polynomial . <EoL>
<BoL> Find real roots of the the piecewise polynomial . <EoL>
<BoL> Find real solutions of the the equation `` pp ( x ) == y `` . <EoL>
<BoL> r '' '' '' Compute the coefficients of a polynomial in the Bernstein basis <EoL>
<BoL> r '' '' '' Raise a degree of a polynomial in the Bernstein basis . <EoL>
<BoL> Construct a new piecewise polynomial representing the antiderivative . <EoL>
<BoL> Construct a new piecewise polynomial representing the derivative . <EoL>
<BoL> Construct a piecewise polynomial in the Bernstein basis , <EoL>
<BoL> Construct a piecewise polynomial in Bernstein basis <EoL>
<BoL> Compute a definite integral over a piecewise polynomial . <EoL>
<BoL> Evaluate a spline function . <EoL>
<BoL> c and t may be modified by the user . The Cython code expects <EoL>
<BoL> Return a b-spline representing the antiderivative . <EoL>
<BoL> Return a B-spline basis element `` B ( x | t [ 0 ] , ... , t [ k+1 ] ) `` . <EoL>
<BoL> Construct a spline without making checks . <EoL>
<BoL> Return a b-spline representing the derivative . <EoL>
<BoL> Compute a definite integral of the spline . <EoL>
<BoL> Evaluate the interpolating polynomial at the points x <EoL>
<BoL> Add more x values to the set to be interpolated <EoL>
<BoL> Update the y values to be interpolated <EoL>
<BoL> Evaluate the spline or its derivatives at given positions . <EoL>
<BoL> Construct a spline object from given tck and degree <EoL>
<BoL> Evaluate the spline at points <EoL>
<BoL> Return spline coefficients . <EoL>
<BoL> Return a tuple ( tx , ty ) where tx , ty contain knots positions <EoL>
<BoL> Return weighted sum of squared residuals of the spline <EoL>
<BoL> Evaluate the integral of the spline over area [ xa , xb ] x [ ya , yb ] . <EoL>
<BoL> Validate and prepare boundary conditions . <EoL>
<BoL> Add additional breakpoints and coefficients to the polynomial . <EoL>
<BoL> Construct a piecewise polynomial in the power basis <EoL>
<BoL> Construct a piecewise polynomial from a spline <EoL>
<BoL> Evaluate spline ( or its nu-th derivative ) at positions x . <EoL>
<BoL> Construct a spline object from given tck <EoL>
<BoL> Construct a new spline representing the antiderivative of this spline . <EoL>
<BoL> Construct a new spline representing the derivative of this spline . <EoL>
<BoL> Return all derivatives of the spline at the point x . <EoL>
<BoL> Return spline coefficients . <EoL>
<BoL> Return positions of interior knots of the spline . <EoL>
<BoL> Return weighted sum of squared residuals of the spline approximation . <EoL>
<BoL> Return definite integral of the spline between two given points . <EoL>
<BoL> Return the zeros of the spline . <EoL>
<BoL> Continue spline computation with the given smoothing <EoL>
<BoL> Evaluate one derivative of the polynomial at the point x <EoL>
<BoL> Evaluate many derivatives of the polynomial at the point x <EoL>
<BoL> Evaluate the spline or its derivatives at given positions . <EoL>
<BoL> Evaluate the spline at points <EoL>
<BoL> Evaluate the piecewise polynomial or its derivative <EoL>
<BoL> Compute 1D antiderivative along a selected dimension <EoL>
<BoL> Compute 1D derivative along a selected dimension in-place <EoL>
<BoL> Construct a new piecewise polynomial representing the antiderivative . <EoL>
<BoL> Construct the piecewise polynomial without making checks . <EoL>
<BoL> Construct a new piecewise polynomial representing the derivative . <EoL>
<BoL> Compute a definite integral over a piecewise polynomial . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Evaluate interpolator at given points . <EoL>
<BoL> Return the roots of the interpolated function . <EoL>
<BoL> Interpolation at coordinates <EoL>
<BoL> Convert the input into a C contiguous float array . <EoL>
<BoL> Construct a knot vector appropriate for the order-k interpolation . <EoL>
<BoL> Return np.complex128 for complex dtypes , np.float64 otherwise . <EoL>
<BoL> Given data x , construct the knot vector w/ not-a-knot BC . <EoL>
<BoL> Solve the linear equations `` A x = b `` , given the Cholesky factorization of <EoL>
<BoL> Cholesky decompose a banded Hermitian positive-definite matrix <EoL>
<BoL> r '' '' '' Compute the ( coefficients of ) an LSQ B-spline . <EoL>
<BoL> Product of a list of numbers ; ~40x faster vs np.prod for Python tuples <EoL>
<BoL> Check whether x is if a scalar type , or 0-dim <EoL>
<BoL> Convenience function for pchip interpolation . <EoL>
<BoL> Cast the value to an intc and raise an OverflowError if the value <EoL>
<BoL> Evaluate a bivariate B-spline and its derivatives . <EoL>
<BoL> Evaluate the integral of a spline over area [ xa , xb ] x [ ya , yb ] . <EoL>
<BoL> Insert knots into a B-spline . <EoL>
<BoL> Evaluate all derivatives of a B-spline . <EoL>
<BoL> Compute the spline for the antiderivative ( integral ) of a given spline . <EoL>
<BoL> Compute the spline representation of the derivative of a given spline <EoL>
<BoL> Evaluate a B-spline or its derivatives . <EoL>
<BoL> Evaluate the definite integral of a B-spline . <EoL>
<BoL> Find the roots of a cubic B-spline . <EoL>
<BoL> Return Pade approximation to a polynomial as the ratio of two polynomials . <EoL>
<BoL> Actually evaluate the value of the interpolator . <EoL>
<BoL> Estimate the Taylor polynomial of f at x by polynomial fitting . <EoL>
<BoL> Convenience function for polynomial interpolation . <EoL>
<BoL> Insert knots into a B-spline . <EoL>
<BoL> Evaluate all derivatives of a B-spline . <EoL>
<BoL> Compute the spline for the antiderivative ( integral ) of a given spline . <EoL>
<BoL> Compute the spline representation of the derivative of a given spline <EoL>
<BoL> Evaluate a B-spline or its derivatives . <EoL>
<BoL> Evaluate the definite integral of a B-spline between two given points . <EoL>
<BoL> Find the roots of a cubic B-spline . <EoL>
<BoL> Interpolate the function . <EoL>
<BoL> Helper to check that arr_from broadcasts up to shape_to <EoL>
<BoL> Helper to check if fill_value == `` extrapolate '' without warnings <EoL>
<BoL> Similar to numpy.dot , but sum over last axis of a and 1st axis of b <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Product of a list of numbers ; ~40x faster vs np.prod for Python tuples <EoL>
<BoL> Convenience function for polynomial interpolation . <EoL>
<BoL> The factorial of a number or array of numbers . <EoL>
<BoL> Closes the file . It is unsupported to call any other methods off this <EoL>
<BoL> Reads a record of a given type from the file , defaulting to an integer <EoL>
<BoL> Reads a record of a given type from the file , defaulting to a floating <EoL>
<BoL> Reads a record of a given type from the file . <EoL>
<BoL> Write a record ( including sizes ) to the file . <EoL>
<BoL> Convert various order codings to numpy format . <EoL>
<BoL> Create a HBFile instance . <EoL>
<BoL> Gives the header corresponding to this instance as a string . <EoL>
<BoL> Create a HBInfo instance from an existing sparse matrix . <EoL>
<BoL> Create a HBInfo instance from a file object containing a matrix in the <EoL>
<BoL> \ <EoL>
<BoL> Given a float number , returns a `` reasonable '' ExpFormat instance to <EoL>
<BoL> Given an integer , returns a `` reasonable '' IntFormat instance to represent <EoL>
<BoL> Return the number of bytes to read to get every full lines for the <EoL>
<BoL> Read HB-format file . <EoL>
<BoL> Write HB-format file . <EoL>
<BoL> Align to the next 32-bit position in a file <EoL>
<BoL> Read an array of type ` typecode ` , with the array descriptor given as <EoL>
<BoL> Function to read in an array descriptor <EoL>
<BoL> Read a single byte <EoL>
<BoL> Read the next ` n ` bytes <EoL>
<BoL> Read a variable with a specified data type <EoL>
<BoL> Read a 32-bit float <EoL>
<BoL> Read a 64-bit float <EoL>
<BoL> Read a signed 16-bit integer <EoL>
<BoL> Read a signed 32-bit integer <EoL>
<BoL> Read a signed 64-bit integer <EoL>
<BoL> Read a signed 32-bit integer <EoL>
<BoL> Function to read in a full record <EoL>
<BoL> Read a string <EoL>
<BoL> Read a data string ( length is specified twice ) <EoL>
<BoL> Function to read in a structure descriptor <EoL>
<BoL> Read a structure , with the array and structure descriptors given as <EoL>
<BoL> Function to read in a tag descriptor <EoL>
<BoL> Function to read in a type descriptor <EoL>
<BoL> Read an unsigned 16-bit integer <EoL>
<BoL> Read an unsigned 32-bit integer <EoL>
<BoL> Read an unsigned 64-bit integer <EoL>
<BoL> Skip ` n ` bytes <EoL>
<BoL> Initialize matlab 4 file reader <EoL>
<BoL> get variables from stream as dictionary <EoL>
<BoL> Run when beginning read of variables <EoL>
<BoL> list variables from stream <EoL>
<BoL> Read array , given ` header ` <EoL>
<BoL> Read and return header , next position <EoL>
<BoL> Sets options to return arrays as MATLAB loads them <EoL>
<BoL> Write variables in ` mdict ` to stream <EoL>
<BoL> get variables from stream as dictionary <EoL>
<BoL> Guess byte order . <EoL>
<BoL> Run when beginning read of variables <EoL>
<BoL> list variables from stream <EoL>
<BoL> Read in mat 5 file header <EoL>
<BoL> Read array , given ` header ` <EoL>
<BoL> Read header , return header , next position <EoL>
<BoL> Write variables in ` mdict ` to stream <EoL>
<BoL> Open ` file_like ` and return as file-like object . First , check if object is <EoL>
<BoL> Return major , minor tuple depending on apparent mat file type <EoL>
<BoL> Create reader for matlab .mat format files . <EoL>
<BoL> List variables inside a MATLAB file . <EoL>
<BoL> As we do not know what file type we have , assume native <EoL>
<BoL> latin-1 text matrix ( char matrix ) reader <EoL>
<BoL> Full ( rather than sparse ) matrix getter <EoL>
<BoL> Read and return header for variable <EoL>
<BoL> Read and return sparse matrix type <EoL>
<BoL> Mat4 read using header ` hdr ` dtype and dims <EoL>
<BoL> Read the shape of the array described by the header . <EoL>
<BoL> Write matrix ` arr ` , with name ` name ` <EoL>
<BoL> Write header for given data options <EoL>
<BoL> Sparse matrices are 2D <EoL>
<BoL> Return dtype for given number of items per element <EoL>
<BoL> Make `` arr `` exactly two dimensional <EoL>
<BoL> Convert string array to char array <EoL>
<BoL> Convert dtypes in mapping to given order <EoL>
<BoL> Determine equivalent MATLAB dimensions for given array <EoL>
<BoL> Generic get of byte stream data of known type <EoL>
<BoL> Write ` arr ` to stream at top and sub levels <EoL>
<BoL> Write string array ` arr ` with given ` codec ` <EoL>
<BoL> write tag and data <EoL>
<BoL> Same as writing structs , except different mx class , and extra <EoL>
<BoL> Sparse matrices are 2D <EoL>
<BoL> Write variable at top level of mat file <EoL>
<BoL> Convert input object `` source `` to something we can write <EoL>
<BoL> Pull variables out of mat 5 file as a sequence of mat file objects <EoL>
<BoL> Convert codec template mapping to byte order <EoL>
<BoL> Reads array given header <EoL>
<BoL> Returns header <EoL>
<BoL> Return size and storage parameters from Matrix Market file-like 'source ' . <EoL>
<BoL> Initialize each attributes with the corresponding keyword arg value <EoL>
<BoL> Return an open file stream for reading based on source . <EoL>
<BoL> Return size , storage parameters from Matrix Market file-like 'source ' . <EoL>
<BoL> Reads the contents of a Matrix Market file-like 'source ' into a matrix . <EoL>
<BoL> Check whether ` stream ` is compatible with numpy.fromfile . <EoL>
<BoL> Reads the contents of a Matrix Market file-like 'source ' into a matrix . <EoL>
<BoL> Writes the sparse or dense array ` a ` to Matrix Market file-like ` target ` . <EoL>
<BoL> Closes the NetCDF file . <EoL>
<BoL> Adds a dimension to the Dimension section of the NetCDF data structure . <EoL>
<BoL> Create an empty variable for the ` netcdf_file ` object , specifying its data <EoL>
<BoL> Perform a sync-to-disk flush if the ` netcdf_file ` object is in write mode . <EoL>
<BoL> Applies the given missing value to the data array . <EoL>
<BoL> The default encoded fill-value for this Variable 's data type . <EoL>
<BoL> Returns the encoded fill value for this variable as bytes . <EoL>
<BoL> Returns the value denoting `` no data '' for this variable . <EoL>
<BoL> Assign a scalar value to a ` netcdf_variable ` of length one . <EoL>
<BoL> Retrieve a scalar value from a ` netcdf_variable ` of length one . <EoL>
<BoL> Return the itemsize of the variable . <EoL>
<BoL> Return the typecode of the variable . <EoL>
<BoL> Round floating-point lwork returned by lapack to integer . <EoL>
<BoL> Helper function to construct explicit outer factors of LDL factorization . <EoL>
<BoL> Helper function to extract the diagonal and triangular matrices for <EoL>
<BoL> This helper function takes the rather strangely encoded permutation array <EoL>
<BoL> Computes the LDLt or Bunch-Kaufman factorization of a symmetric/ <EoL>
<BoL> Compute the polar decomposition . <EoL>
<BoL> Strict check for ` arr ` not sharing any data with ` original ` , <EoL>
<BoL> Relative condition number of the matrix exponential in the Frobenius norm . <EoL>
<BoL> Frechet derivative of the matrix exponential of A in the direction E . <EoL>
<BoL> This is a helper function , mostly for testing and profiling . <EoL>
<BoL> Construct the Kronecker form of the Frechet derivative of expm . <EoL>
<BoL> Stack columns of M to construct a single vector . <EoL>
<BoL> Matrix square root of an upper triangular matrix . <EoL>
<BoL> Convert real Schur form to complex Schur form . <EoL>
<BoL> Matrix square root . <EoL>
<BoL> Compute the matrix solution of the orthogonal Procrustes problem . <EoL>
<BoL> r '' '' '' '' <EoL>
<BoL> r '' '' '' '' <EoL>
<BoL> A helper function to validate the arguments supplied to the <EoL>
<BoL> Solves the discrete Lyapunov equation using a bilinear transformation . <EoL>
<BoL> Solves the discrete Lyapunov equation directly . <EoL>
<BoL> Create a block diagonal matrix from provided arrays . <EoL>
<BoL> Kronecker product . <EoL>
<BoL> Compute pivoted LU decomposition of a matrix . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Solves the continuous Lyapunov equation : math : ` AX + XA^H = Q ` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Solves the discrete Lyapunov equation : math : ` AXA^H - X + Q = 0 ` . <EoL>
<BoL> Computes a solution ( X ) to the Sylvester equation : math : ` AX + XB = Q ` . <EoL>
<BoL> Check arguments during the different steps of the solution phase <EoL>
<BoL> Return optimal available _flinalg function objects with <EoL>
<BoL> Compute the ( Moore-Penrose ) pseudo-inverse of a matrix . <EoL>
<BoL> Solve a Toeplitz system using Levinson Recursion <EoL>
<BoL> Find best-matching BLAS/LAPACK type . <EoL>
<BoL> Return available BLAS function objects from names . <EoL>
<BoL> Converts complex eigenvalues `` w `` and eigenvectors `` v `` to real <EoL>
<BoL> Compute the Cholesky decomposition of a matrix , to use in cho_solve <EoL>
<BoL> Solve the linear equations A x = b , given the Cholesky factorization of A . <EoL>
<BoL> Construct a circulant matrix . <EoL>
<BoL> Create a companion matrix . <EoL>
<BoL> Compute the hyperbolic matrix cosine . <EoL>
<BoL> Compute the matrix cosine . <EoL>
<BoL> Check info return value . <EoL>
<BoL> Check that select is valid , convert to Fortran style . <EoL>
<BoL> Produce complex-valued eigenvectors from LAPACK DGGEV real-valued output <EoL>
<BoL> Compute Hessenberg form of a matrix . <EoL>
<BoL> Compute RQ decomposition of a matrix . <EoL>
<BoL> Call a LAPACK routine , determining lwork automatically and handling <EoL>
<BoL> Construct the sigma matrix in SVD from singular values and size M , N . <EoL>
<BoL> Construct an orthonormal basis for the null space of A using SVD <EoL>
<BoL> Construct an orthonormal basis for the range of A using SVD <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute singular values of a matrix . <EoL>
<BoL> Discrete Fourier transform matrix . <EoL>
<BoL> Compute the matrix exponential using Pade approximation . <EoL>
<BoL> Compute the fractional power of a matrix . <EoL>
<BoL> Evaluate a matrix function specified by a callable . <EoL>
<BoL> Construct a Hadamard matrix . <EoL>
<BoL> Construct a Hankel matrix . <EoL>
<BoL> Create a Helmert matrix of order ` n ` . <EoL>
<BoL> Create a Hilbert matrix of order ` n ` . <EoL>
<BoL> Compute the inverse of the Hilbert matrix of order ` n ` . <EoL>
<BoL> Returns the inverse of the n x n Pascal matrix . <EoL>
<BoL> Create a Leslie matrix . <EoL>
<BoL> Compute matrix logarithm . <EoL>
<BoL> Wraps asarray with the extra requirement that the input be a square matrix . <EoL>
<BoL> Return either B or the real part of B , depending on properties of A and B . <EoL>
<BoL> Matrix sign function . <EoL>
<BoL> Compute the hyperbolic matrix sine . <EoL>
<BoL> Compute the matrix sine . <EoL>
<BoL> Compute the hyperbolic matrix tangent . <EoL>
<BoL> Compute the matrix tangent . <EoL>
<BoL> Make a copy of a matrix with elements below the k-th diagonal zeroed . <EoL>
<BoL> Returns the n x n Pascal matrix . <EoL>
<BoL> Construct a Toeplitz matrix . <EoL>
<BoL> Construct ( N , M ) matrix filled with ones at and below the k-th diagonal . <EoL>
<BoL> Make a copy of a matrix with elements above the k-th diagonal zeroed . <EoL>
<BoL> Double factorial . <EoL>
<BoL> Multifactorial of n of order k , n ( ! ! ... ! ) . <EoL>
<BoL> Get an 8-bit grayscale bit-depth , 512 x 512 derived image for easy use in demos <EoL>
<BoL> Return weights for an Np-point central derivative . <EoL>
<BoL> Find the n-th derivative of a function at a point . <EoL>
<BoL> Fill a function docstring from variables in dictionary <EoL>
<BoL> This decorator replaces the decorated function 's docstring <EoL>
<BoL> Return docstring decorator using docdict variable dictionary <EoL>
<BoL> Minimum indent for all lines in line list <EoL>
<BoL> This decorator modifies the decorated function 's docstring by <EoL>
<BoL> This decorator replaces the decorated function 's docstring <EoL>
<BoL> Unindent all strings in a docdict <EoL>
<BoL> Set docstring to minimum indent for all lines , including first <EoL>
<BoL> Load an electrocardiogram as an example for a one-dimensional signal . <EoL>
<BoL> Get a 1024 x 768 , color image of a raccoon face . <EoL>
<BoL> Convert an extension mode to the corresponding integer code . <EoL>
<BoL> If input is a scalar , create a sequence of length equal to the <EoL>
<BoL> Fill the holes in binary objects . <EoL>
<BoL> Calculate the center of mass of the values of an array at labels . <EoL>
<BoL> Calculate the minimums and maximums of the values of an array <EoL>
<BoL> Computes a 1D Gaussian convolution kernel . <EoL>
<BoL> N-dimensional Laplace filter based on approximate second derivatives . <EoL>
<BoL> Calculate a Prewitt filter . <EoL>
<BoL> Calculate a Sobel filter . <EoL>
<BoL> Find objects in a labeled array . <EoL>
<BoL> Multi-dimensional ellipsoid fourier filter . <EoL>
<BoL> Multi-dimensional Gaussian fourier filter . <EoL>
<BoL> Multi-dimensional fourier shift filter . <EoL>
<BoL> Multi-dimensional uniform fourier filter . <EoL>
<BoL> Generate a binary structure for binary morphological operations . <EoL>
<BoL> Calculate the histogram of the values of an array , optionally at labels . <EoL>
<BoL> Multi-dimensional spline filter . <EoL>
<BoL> Calculate a one-dimensional spline filter along the given axis . <EoL>
<BoL> Iterate a structure by dilating it with itself . <EoL>
<BoL> Label features in an array . <EoL>
<BoL> Roughly equivalent to [ func ( input [ labels == i ] ) for i in index ] .labels must be sorted <EoL>
<BoL> Calculate the maximum of the values of an array over labeled regions . <EoL>
<BoL> Find the positions of the maximums of the values of an array at labels . <EoL>
<BoL> Calculate the mean of the values of an array at labels . <EoL>
<BoL> Test whether the numpy data type ` dt ` can be safely cast to an int . <EoL>
<BoL> Count , sum , and optionally compute ( sum - centre ) ^2 of input by label <EoL>
<BoL> Calculate the median of the values of an array over labeled regions . <EoL>
<BoL> Calculate the minimum of the values of an array over labeled regions . <EoL>
<BoL> Find the positions of the minimums of the values of an array at labels . <EoL>
<BoL> Calculate the standard deviation of the values of an n-D image array , <EoL>
<BoL> Calculate the sum of the values of the array . <EoL>
<BoL> Calculate the variance of the values of an n-D image array , optionally at <EoL>
<BoL> Apply watershed from markers using image foresting transform algorithm . <EoL>
<BoL> Update the Hessian matrix . <EoL>
<BoL> Update the inverse Hessian matrix . <EoL>
<BoL> Compute the product of the internal matrix with the given vector . <EoL>
<BoL> Return the current internal matrix . <EoL>
<BoL> Initialize internal matrix . <EoL>
<BoL> Update internal matrix . <EoL>
<BoL> Compute the product of the internal matrix with the given vector . <EoL>
<BoL> Return current internal matrix . <EoL>
<BoL> Initialize internal matrix . <EoL>
<BoL> Update internal matrix . <EoL>
<BoL> Construct the operator . <EoL>
<BoL> Default implementation of _adjoint ; defers to rmatvec . <EoL>
<BoL> Called from subclasses at the end of the __init__ routine . <EoL>
<BoL> Default matrix-matrix multiplication handler . <EoL>
<BoL> Efficient matrix-vector multiply with the BFGS matrices . <EoL>
<BoL> Default implementation of _rmatvec ; defers to adjoint . <EoL>
<BoL> Hermitian adjoint . <EoL>
<BoL> Matrix-matrix or matrix-vector multiplication . <EoL>
<BoL> Matrix-matrix multiplication . <EoL>
<BoL> Matrix-vector multiplication . <EoL>
<BoL> Adjoint matrix-vector multiplication . <EoL>
<BoL> Return a dense array representation of this operator . <EoL>
<BoL> Transpose this linear operator . <EoL>
<BoL> Do one Monte Carlo iteration <EoL>
<BoL> Do one cycle of the basinhopping algorithm <EoL>
<BoL> print a status update <EoL>
<BoL> f_new and f_old are mandatory in kwargs <EoL>
<BoL> If new energy is lower than old , it will always be accepted . <EoL>
<BoL> Convert the new bounds representation to the old one . <EoL>
<BoL> Convert the old bounds representation to the new one . <EoL>
<BoL> Remove bounds which are not asked to be kept feasible . <EoL>
<BoL> Initialize this LinearOperator . <EoL>
<BoL> Default matrix-vector multiplication handler . <EoL>
<BoL> Deep copy operation on arbitrary Python objects . <EoL>
<BoL> Evolve the population by a single generation <EoL>
<BoL> best1bin , best1exp <EoL>
<BoL> best2bin , best2exp <EoL>
<BoL> Calculate the energies of all the population members at the same time . <EoL>
<BoL> currenttobest1bin , currenttobest1exp <EoL>
<BoL> make sure the parameters lie between the limits <EoL>
<BoL> create a trial vector based on a mutation strategy <EoL>
<BoL> rand1bin , rand1exp <EoL>
<BoL> rand2bin , rand2exp <EoL>
<BoL> randtobest1bin , randtobest1exp <EoL>
<BoL> scale from a number between 0 and 1 to parameters . <EoL>
<BoL> obtain random integers from range ( self.num_population_members ) , <EoL>
<BoL> scale from parameters to a number between 0 and 1 . <EoL>
<BoL> Initialises the population with a user specified population . <EoL>
<BoL> Initializes the population with Latin Hypercube Sampling . <EoL>
<BoL> Initialises the population at random . This type of initialization <EoL>
<BoL> Evolve the population by a single generation <EoL>
<BoL> Runs the DifferentialEvolutionSolver . <EoL>
<BoL> Clear all covered matrix cells <EoL>
<BoL> Steps 1 and 2 in the Wikipedia page . <EoL>
<BoL> Cover each column containing a starred zero . If n columns are covered , <EoL>
<BoL> Find a noncovered zero and prime it . If there is no starred zero <EoL>
<BoL> Construct a series of alternating primed and starred zeros as follows . <EoL>
<BoL> Add the value found in Step 4 to every element of each covered row , <EoL>
<BoL> Solve the linear sum assignment problem . <EoL>
<BoL> Given a linear programming simplex tableau , determine the column <EoL>
<BoL> Given a linear programming simplex tableau , determine the row for the <EoL>
<BoL> A sample callback function demonstrating the linprog callback interface . <EoL>
<BoL> A sample callback function demonstrating the linprog callback interface . <EoL>
<BoL> Print indicators of optimization status to the console . <EoL>
<BoL> An implementation of [ 1 ] Equation 8.9 <EoL>
<BoL> Return the starting point from [ 1 ] 4.4 <EoL>
<BoL> Given problem status code , return a more detailed message . <EoL>
<BoL> Given solver options , return a handle to the appropriate linear system <EoL>
<BoL> An implementation of [ 1 ] equation 8.21 <EoL>
<BoL> Implementation of several equations from [ 1 ] used as indicators of <EoL>
<BoL> Given inputs for a linear programming problem in preferred format , <EoL>
<BoL> Eliminates redundant equations from system of equations defined by Ax = b <EoL>
<BoL> Eliminates redundant equations from system of equations defined by Ax = b <EoL>
<BoL> Eliminates redundant equations from system of equations defined by Ax = b <EoL>
<BoL> An implementation of [ 1 ] equation 8.31 and 8.32 <EoL>
<BoL> Compute the maximum violation of KKT conditions . <EoL>
<BoL> Compute Coleman-Li scaling vector and its derivatives . <EoL>
<BoL> Return A as a LinearOperator . <EoL>
<BoL> Parameterize a multivariate quadratic function along a line . <EoL>
<BoL> Check termination condition for nonlinear least squares . <EoL>
<BoL> Compute gradient of the least-squares cost function . <EoL>
<BoL> Compute variables scale based on the Jacobian matrix . <EoL>
<BoL> Compute values of a quadratic function arising in least squares . <EoL>
<BoL> Determine which constraints are active in a given point . <EoL>
<BoL> Check if a point lies within bounds . <EoL>
<BoL> Find the intersection of a line with the boundary of a trust region . <EoL>
<BoL> Return diag ( d ) J as LinearOperator . <EoL>
<BoL> Compute diag ( d ) J . <EoL>
<BoL> Shift a point to the interior of a feasible region . <EoL>
<BoL> Minimize a 1-d quadratic function subject to bounds . <EoL>
<BoL> Compute reflective transformation and its gradient . <EoL>
<BoL> Return a matrix arising in regularized least squares as LinearOperator . <EoL>
<BoL> Return J diag ( d ) as LinearOperator . <EoL>
<BoL> Compute J diag ( d ) . <EoL>
<BoL> Scale Jacobian and residuals for a robust loss function . <EoL>
<BoL> Function of which to find zero . <EoL>
<BoL> Solve a general trust-region problem in 2 dimensions . <EoL>
<BoL> Compute a min_step size required to reach a bound . <EoL>
<BoL> Find dogleg step in a rectangular region . <EoL>
<BoL> Find intersection of trust-region bounds and initial bounds . <EoL>
<BoL> Compute LinearOperator to use in LSMR by dogbox algorithm . <EoL>
<BoL> Select the best step according to Trust Region Reflective algorithm . <EoL>
<BoL> Find an appropriate step size using backtracking line search . <EoL>
<BoL> Solve regularized least squares using information from QR-decomposition . <EoL>
<BoL> Select the best step according to Trust Region Reflective algorithm . <EoL>
<BoL> Adjust final difference scheme to the presence of bounds . <EoL>
<BoL> Returns the index of the densest row of A . Ignores rows that are not <EoL>
<BoL> Eliminates trivial equations from system of equations defined by Ax = b <EoL>
<BoL> Counts the number of nonzeros in each row of input array A . <EoL>
<BoL> Options <EoL>
<BoL> Options <EoL>
<BoL> Options <EoL>
<BoL> Options <EoL>
<BoL> Options <EoL>
<BoL> Options <EoL>
<BoL> Options <EoL>
<BoL> Wrap a function and an initial value so that ( i ) complex values <EoL>
<BoL> Convert from real to complex and reshape result arrays . <EoL>
<BoL> Solve the scalar quadratic equation ||z + t d|| == trust_radius . <EoL>
<BoL> Concatenate multiple ` CanonicalConstraint ` into one . <EoL>
<BoL> Create an `` empty '' instance . <EoL>
<BoL> Create an instance from ` PreparedConstrained ` object . <EoL>
<BoL> Convert initial values of the constraints to the canonical format . <EoL>
<BoL> Solve nonlinear equality-constrained problem using trust-region SQP . <EoL>
<BoL> Approximately minimize `` 1/2*|| A x + b ||^2 `` inside trust-region . <EoL>
<BoL> Return three linear operators related with a given matrix A . <EoL>
<BoL> Return linear operators for matrix A - `` AugmentedSystem `` . <EoL>
<BoL> Build a sparse matrix from sparse sub-blocks <EoL>
<BoL> Return linear operators for matrix A using `` NormalEquation `` approach . <EoL>
<BoL> Measure orthogonality between a vector and the null space of a matrix . <EoL>
<BoL> Return linear operators for matrix A using `` QRFactorization `` approach . <EoL>
<BoL> Return linear operators for matrix A using `` SVDFactorization `` approach . <EoL>
<BoL> Solve equality-constrained quadratic programming ( EQP ) problem . <EoL>
<BoL> Check if lb < = x < = ub . <EoL>
<BoL> Return clipped value of x <EoL>
<BoL> Assemble sparse jacobian given its components . <EoL>
<BoL> Returns barrier function and constraints at given point . <EoL>
<BoL> Returns scaled gradient . <EoL>
<BoL> Returns scaled Lagrangian Hessian <EoL>
<BoL> Returns scaled Lagrangian Hessian ( in relation to ` s ` ) - > S Hs S <EoL>
<BoL> Returns Lagrangian Hessian ( in relation to ` x ` ) - > Hx <EoL>
<BoL> Returns scaling vector . <EoL>
<BoL> The Cauchy point is minimal along the direction of steepest descent . <EoL>
<BoL> The Newton point is a global minimum of the approximate function . <EoL>
<BoL> Minimize a function using the dog-leg trust-region algorithm . <EoL>
<BoL> Given a trust radius , return a good initial guess for <EoL>
<BoL> Solve quadratic subproblem <EoL>
<BoL> Given upper triangular matrix `` U `` estimate the smallest singular <EoL>
<BoL> Given a square matrix `` H `` compute upper <EoL>
<BoL> Compute term that makes the leading `` k `` by `` k `` <EoL>
<BoL> Solve the subproblem using a conjugate gradient method . <EoL>
<BoL> Finite-difference approximation of the gradient of a scalar function . <EoL>
<BoL> Bracket the minimum of the function . <EoL>
<BoL> Given a function of one-variable and a possible bracket , return <EoL>
<BoL> Check the correctness of a gradient function by comparing it against a <EoL>
<BoL> Find a fixed point of the function . <EoL>
<BoL> See `` approx_fprime `` . An optional initial function value arg is added . <EoL>
<BoL> Finds the minimizer for a cubic polynomial that goes through the <EoL>
<BoL> Finds the minimizer for a quadratic polynomial that goes through <EoL>
<BoL> Compatibility wrapper for ` line_search_armijo ` <EoL>
<BoL> Minimize over alpha , the function `` f ( xk+alpha pk ) `` . <EoL>
<BoL> Minimize over alpha , the function `` phi ( alpha ) `` . <EoL>
<BoL> Perform a simple check on the gradient for correctness . <EoL>
<BoL> Solve `` argmin_x || Ax - b ||_2 `` for `` x > =0 `` . This is a wrapper <EoL>
<BoL> Evaluate w = M^-1 v <EoL>
<BoL> Collapse the low-rank matrix to a full-rank one . <EoL>
<BoL> Evaluate w = M v <EoL>
<BoL> Reduce the rank of the matrix by dropping all vectors . <EoL>
<BoL> Evaluate w = M^H v <EoL>
<BoL> Evaluate w = M^-H v <EoL>
<BoL> Reduce the rank of the matrix by dropping oldest vectors . <EoL>
<BoL> Evaluate w = M^-1 v <EoL>
<BoL> Reduce the rank of the matrix by retaining some SVD components . <EoL>
<BoL> Return ndarray ` x ` as same array subclass and shape as ` x0 ` <EoL>
<BoL> Return ` x ` as an array , of either floats or complex floats <EoL>
<BoL> Construct a solver wrapper with given name and jacobian approx.def % ( name ) s ( F , xin , iter=None % ( kw ) s , verbose=False , maxiter=None , <EoL>
<BoL> Convert given object to one suitable for use as a Jacobian . <EoL>
<BoL> Line-search algorithm using fminbound . <EoL>
<BoL> Test whether ` x ` is either a scalar or an array scalar . <EoL>
<BoL> The Rosenbrock function . <EoL>
<BoL> The derivative ( i.e . gradient ) of the Rosenbrock function . <EoL>
<BoL> The Hessian matrix of the Rosenbrock function . <EoL>
<BoL> Product of the Hessian matrix of the Rosenbrock function with a vector . <EoL>
<BoL> Show documentation for additional options of optimization solvers . <EoL>
<BoL> Approximate the Jacobian matrix of a callable function . <EoL>
<BoL> Adds two systems in the sense of frequency domain addition . <EoL>
<BoL> Initialize the state space lti/dlti system . <EoL>
<BoL> Post-multiply another system or a scalar <EoL>
<BoL> Negate the system ( equivalent to pre-multiplying by -1 ) . <EoL>
<BoL> Create new StateSpace object and settle inheritance . <EoL>
<BoL> Return representation of the ` StateSpace ` system . <EoL>
<BoL> Pre-multiply a scalar or matrix ( but not StateSpace ) <EoL>
<BoL> Divide by a scalar <EoL>
<BoL> Convert to ` StateSpace ` system , without copying . <EoL>
<BoL> Convert to ` TransferFunction ` system , without copying . <EoL>
<BoL> Convert to ` ZerosPolesGain ` system , without copying . <EoL>
<BoL> Copy the parameters of another ` StateSpace ` system . <EoL>
<BoL> Return a copy of the current ` StateSpace ` system . <EoL>
<BoL> Convert system representation to ` TransferFunction ` . <EoL>
<BoL> Convert system representation to ` ZerosPolesGain ` . <EoL>
<BoL> Initialize the state space LTI system . <EoL>
<BoL> Handle object conversion if input is an instance of lti . <EoL>
<BoL> Return representation of the system 's transfer function <EoL>
<BoL> Copy the parameters of another ` TransferFunction ` object <EoL>
<BoL> Change a transfer function from the variable ` z ` to ` z**-1 ` . <EoL>
<BoL> Change a transfer function from the variable ` z ` to ` z**-1 ` . <EoL>
<BoL> Convert system representation to ` StateSpace ` . <EoL>
<BoL> Return a copy of the current ` TransferFunction ` system . <EoL>
<BoL> Convert system representation to ` ZerosPolesGain ` . <EoL>
<BoL> Initialize the zeros , poles , gain system . <EoL>
<BoL> Handle object conversion if input is an instance of ` lti ` <EoL>
<BoL> Return representation of the ` ZerosPolesGain ` system . <EoL>
<BoL> Copy the parameters of another ` ZerosPolesGain ` system . <EoL>
<BoL> Convert system representation to ` StateSpace ` . <EoL>
<BoL> Convert system representation to ` TransferFunction ` . <EoL>
<BoL> Return a copy of the current 'ZerosPolesGain ' system . <EoL>
<BoL> Reverse the 1-d slices of ` a ` along axis ` axis ` . <EoL>
<BoL> Take a slice along axis 'axis ' from 'a ' . <EoL>
<BoL> Constant extension at the boundaries of an array <EoL>
<BoL> Even extension at the boundaries of an array <EoL>
<BoL> Odd extension at the boundaries of an array <EoL>
<BoL> Zero padding at the boundaries of an array <EoL>
<BoL> Maximum length sequence ( MLS ) generator . <EoL>
<BoL> Calculate the relative extrema of ` data ` . <EoL>
<BoL> Identify ridges in the 2-D matrix . <EoL>
<BoL> Evaluate which peaks fulfill the threshold condition . <EoL>
<BoL> Evaluate where the generic property of peaks confirms to an interval . <EoL>
<BoL> Parse condition arguments for ` find_peaks ` . <EoL>
<BoL> Calculate the relative extrema of ` data ` . <EoL>
<BoL> Calculate the relative maxima of ` data ` . <EoL>
<BoL> Calculate the relative minima of ` data ` . <EoL>
<BoL> Continuous wavelet transform . <EoL>
<BoL> Calculate the prominence of each peak in a signal . <EoL>
<BoL> Calculate the width of each peak in a signal . <EoL>
<BoL> Return a Ricker wavelet , also known as the `` Mexican hat wavelet '' . <EoL>
<BoL> Use polynomial interpolation of x at the low and high ends of the axis <EoL>
<BoL> Differentiate polynomials represented with coefficients . <EoL>
<BoL> Helper for resampling <EoL>
<BoL> Apply the prepared filter to the specified axis of a nD signal x <EoL>
<BoL> Store coefficients in a transposed , flipped arrangement . <EoL>
<BoL> Upsample , FIR filter , and downsample <EoL>
<BoL> Check state-space matrices and ensure they are two-dimensional . <EoL>
<BoL> Band Stop Objective Function for order minimization . <EoL>
<BoL> Bessel/Thomson digital and analog filter design . <EoL>
<BoL> Return ( z , p , k ) for analog prototype of an Nth-order Bessel filter . <EoL>
<BoL> Return a digital filter from an analog one using a bilinear transform . <EoL>
<BoL> Return a digital IIR filter from an analog one using a bilinear transform . <EoL>
<BoL> Calculate Bode magnitude and phase data of a continuous-time system . <EoL>
<BoL> B-spline basis function of order n . <EoL>
<BoL> Returns the function defined over the left-side pieces for a bspline of <EoL>
<BoL> Compute cubic spline coefficients for rank-1 array . <EoL>
<BoL> Evaluate a spline at the new set of points . <EoL>
<BoL> A cubic B-spline . <EoL>
<BoL> Gaussian approximation to B-spline basis function of order n . <EoL>
<BoL> Compute quadratic spline coefficients for rank-1 array . <EoL>
<BoL> Evaluate a quadratic spline at the new set of points . <EoL>
<BoL> A quadratic B-spline . <EoL>
<BoL> Smoothing spline ( cubic ) filtering of a rank-2 array . <EoL>
<BoL> Return ( z , p , k ) for analog prototype of Nth-order Butterworth filter . <EoL>
<BoL> Butterworth digital and analog filter design . <EoL>
<BoL> Butterworth filter order selection . <EoL>
<BoL> Return ( x , phi , psi ) at dyadic points `` K/2**J `` from filter coefficients . <EoL>
<BoL> Return ( z , p , k ) for Nth-order Chebyshev type I analog lowpass filter . <EoL>
<BoL> Chebyshev type I filter order selection . <EoL>
<BoL> Return ( z , p , k ) for Nth-order Chebyshev type I analog lowpass filter . <EoL>
<BoL> Chebyshev type II filter order selection . <EoL>
<BoL> Chebyshev type I digital and analog filter design . <EoL>
<BoL> Chebyshev type II digital and analog filter design . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Frequency-swept cosine generator . <EoL>
<BoL> Find the fastest convolution/correlation method . <EoL>
<BoL> Sort roots based on magnitude . <EoL>
<BoL> Transform a continuous to a discrete state-space system . <EoL>
<BoL> Convolve two N-dimensional arrays . <EoL>
<BoL> Convolve two 2-dimensional arrays . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Cross-correlate two 2-dimensional arrays . <EoL>
<BoL> The coefficients for the FIR low-pass filter producing Daubechies wavelets . <EoL>
<BoL> Calculate Bode magnitude and phase data of a discrete-time system . <EoL>
<BoL> Downsample the signal after applying an anti-aliasing filter . <EoL>
<BoL> Deconvolves `` divisor `` out of `` signal `` using inverse filtering . <EoL>
<BoL> Remove linear trend along axis from data . <EoL>
<BoL> Calculate the frequency response of a discrete-time system . <EoL>
<BoL> Impulse response of discrete-time system . <EoL>
<BoL> Simulate output of a discrete-time linear system . <EoL>
<BoL> Initialize the ` lti ` baseclass . <EoL>
<BoL> Create an instance of the appropriate subclass . <EoL>
<BoL> Calculate Bode magnitude and phase data of a discrete-time system . <EoL>
<BoL> Calculate the frequency response of a discrete-time system . <EoL>
<BoL> Return the impulse response of the discrete-time ` dlti ` system . <EoL>
<BoL> Return the response of the discrete-time system to input ` u ` . <EoL>
<BoL> Return the step response of the discrete-time ` dlti ` system . <EoL>
<BoL> Step response of discrete-time system . <EoL>
<BoL> Elliptic ( Cauer ) digital and analog filter design . <EoL>
<BoL> Return ( z , p , k ) of Nth-order elliptic analog lowpass filter . <EoL>
<BoL> Elliptic ( Cauer ) filter order selection . <EoL>
<BoL> Convolve two N-dimensional arrays using FFT . <EoL>
<BoL> Given a function ` f ` , its first derivative ` fp ` , and a set of initial <EoL>
<BoL> Aligns the shapes of multiple numerators . <EoL>
<BoL> Return the coefficients of Bessel polynomial of degree ` n ` <EoL>
<BoL> Find zeros of ordinary Bessel polynomial of order ` N ` , by root-finding of <EoL>
<BoL> Return approximate zero locations of Bessel polynomials y_n ( x ) for order <EoL>
<BoL> Sort into pairs of complex conjugates . <EoL>
<BoL> Split into complex and real parts , combining conjugate pairs . <EoL>
<BoL> Design notch or peak digital filter . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Get the next closest real or complex element based on distance <EoL>
<BoL> Numerically find frequency shift to apply to delay-normalized filter suchGain of filterWhen gain = -3 dB , return 0 <EoL>
<BoL> Return relative degree of transfer function from zeros and poles <EoL>
<BoL> Helper to validate a SOS input <EoL>
<BoL> Find array of frequencies for computing the response of an analog filter . <EoL>
<BoL> Compute frequency response of analog filter . <EoL>
<BoL> Compute frequency response of analog filter . <EoL>
<BoL> Compute the frequency response of a digital filter . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Compute the group delay of a digital filter . <EoL>
<BoL> Complete IIR digital and analog filter design . <EoL>
<BoL> Design second-order IIR notch digital filter . <EoL>
<BoL> Design second-order IIR peak ( resonant ) digital filter . <EoL>
<BoL> Transform a lowpass filter prototype to a bandpass filter . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Transform a lowpass filter prototype to a bandstop filter . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Transform a lowpass filter prototype to a highpass filter . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Transform a lowpass filter prototype to a different frequency . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Normalize numerator/denominator of a continuous-time transfer function . <EoL>
<BoL> Return a single transfer function from a series of second-order sections <EoL>
<BoL> Return zeros , poles , and gain of a series of second-order sections <EoL>
<BoL> Compute the frequency response of a digital filter in SOS format . <EoL>
<BoL> Return second-order sections from transfer function representation <EoL>
<BoL> r '' '' '' Return zero , pole , gain ( z , p , k ) representation from a numerator , <EoL>
<BoL> Return second-order sections from zeros , poles , and gain of a system <EoL>
<BoL> Return polynomial transfer function representation from zeros and poles <EoL>
<BoL> Compute the modified 1D discrete Hilbert transform <EoL>
<BoL> Utility for replacing the argument 'nyq ' ( with default 1 ) with 'fs ' . <EoL>
<BoL> Compute the attenuation of a Kaiser FIR filter . <EoL>
<BoL> Compute the Kaiser parameter ` beta ` , given the attenuation ` a ` . <EoL>
<BoL> Determine the filter window parameters for the Kaiser window method . <EoL>
<BoL> Calculate the frequency response of a continuous-time system . <EoL>
<BoL> Return a window . <EoL>
<BoL> Compute the analytic signal , using the Hilbert transform . <EoL>
<BoL> Compute the '2-D ' analytic signal of ` x ` <EoL>
<BoL> Impulse response of continuous-time system . <EoL>
<BoL> Impulse response of a single-input , continuous-time linear system . <EoL>
<BoL> Compute b ( s ) and a ( s ) from partial fraction expansion . <EoL>
<BoL> Compute b ( z ) and a ( z ) from partial fraction expansion . <EoL>
<BoL> Filter data along one-dimension with an IIR or FIR filter . <EoL>
<BoL> Construct initial conditions for lfilter for step response steady-state . <EoL>
<BoL> Construct initial conditions for lfilter given input and output vectors . <EoL>
<BoL> Simulate output of a continuous-time linear system . <EoL>
<BoL> Simulate output of a continuous-time linear system , by usingThe vector field of the linear system.The vector field of the linear system . <EoL>
<BoL> Initialize the ` lti ` baseclass . <EoL>
<BoL> Create an instance of the appropriate subclass . <EoL>
<BoL> Calculate Bode magnitude and phase data of a continuous-time system . <EoL>
<BoL> Calculate the frequency response of a continuous-time system . <EoL>
<BoL> Return the impulse response of a continuous-time system . <EoL>
<BoL> Return the response of a continuous-time system to input ` U ` . <EoL>
<BoL> Return the step response of a continuous-time system . <EoL>
<BoL> Return a discretized version of the current system . <EoL>
<BoL> r '' '' '' State-space to transfer function . <EoL>
<BoL> State-space representation to zero-pole-gain representation . <EoL>
<BoL> r '' '' '' Transfer function to state-space representation . <EoL>
<BoL> Zero-pole-gain representation to state-space representation <EoL>
<BoL> Initialize the ` lti ` baseclass . <EoL>
<BoL> Create a new object , do n't allow direct instances . <EoL>
<BoL> Returns the discretized ` StateSpace ` system . <EoL>
<BoL> Returns the discretized ` TransferFunction ` system . <EoL>
<BoL> Returns the discretized ` ZerosPolesGain ` system . <EoL>
<BoL> Algorithm `` KNV0 '' Kautsky et Al . Robust pole <EoL>
<BoL> Loop over all poles one by one and apply KNV method 0 algorithm <EoL>
<BoL> Applies algorithm from YT section 6.2 page 20 related to complex pairs <EoL>
<BoL> Algorithm `` YT '' Tits , Yang . Globally Convergent <EoL>
<BoL> Applies algorithm from YT section 6.1 page 19 related to real pairs <EoL>
<BoL> Cast array to dtype of other array , while avoiding ComplexWarning . <EoL>
<BoL> Compute a reasonable set of time samples for the response time . <EoL>
<BoL> Check we have complex conjugates pairs and reorder P according to YT , ie <EoL>
<BoL> Check the poles come in complex conjugage pairs <EoL>
<BoL> Compute K such that eigenvalues ( A - dot ( B , K ) ) =poles . <EoL>
<BoL> Step response of continuous-time system . <EoL>
<BoL> Step response of continuous-time system . <EoL>
<BoL> Perform a median filter on an N-dimensional array . <EoL>
<BoL> Median filter a 2-dimensional array . <EoL>
<BoL> Complex Morlet wavelet . <EoL>
<BoL> Perform an order filter on an N-dimensional array . <EoL>
<BoL> Return high-pass qmf filter from low-pass <EoL>
<BoL> Resample ` x ` to ` num ` samples using Fourier method along the given axis . <EoL>
<BoL> Resample ` x ` along the given axis using polyphase filtering . <EoL>
<BoL> Compute partial-fraction expansion of b ( s ) / a ( s ) . <EoL>
<BoL> Compute partial-fraction expansion of b ( z ) / a ( z ) . <EoL>
<BoL> Return a periodic sawtooth or triangle waveform . <EoL>
<BoL> See if using ` fftconvolve ` or ` _correlateND ` is faster . The boolean value <EoL>
<BoL> Forward-backward IIR filter that uses Gustafsson 's method . <EoL>
<BoL> If in 'valid ' mode , returns whether or not the input arrays need to be <EoL>
<BoL> See if numpy supports convolution of ` volume ` and ` kernel ` ( i.e . both are <EoL>
<BoL> See if a list of arrays are all numeric . <EoL>
<BoL> Product of a list of numbers . <EoL>
<BoL> Reverse array ` x ` in all dimensions and perform the complex conjugate <EoL>
<BoL> Returns the time the statement/function took , in seconds . <EoL>
<BoL> Helper to validate padding for filtfilt <EoL>
<BoL> Filter data along one dimension using cascaded second-order sections . <EoL>
<BoL> Construct initial conditions for sosfilt for step response steady-state . <EoL>
<BoL> A forward-backward digital filter using cascaded second-order sections . <EoL>
<BoL> Determine unique roots and their multiplicities from a list of roots . <EoL>
<BoL> Determine the vector strength of the events corresponding to the given <EoL>
<BoL> Perform a Wiener filter on an N-dimensional array . <EoL>
<BoL> Calculate windowed FFT , for internal use by <EoL>
<BoL> Parses window and nperseg arguments for spectrogram and _spectral_helper . <EoL>
<BoL> Return a periodic square-wave waveform . <EoL>
<BoL> Frequency-swept cosine generator , with a time-dependent frequency . <EoL>
<BoL> Unit impulse signal ( discrete delta function ) or unit basis vector . <EoL>
<BoL> Calculate the phase used by chirp_phase to generate its output . <EoL>
<BoL> Calculate the phase used by sweep_poly to generate its output . <EoL>
<BoL> Return a modified Bartlett-Hann window . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return a minimum 4-term Blackman-Harris window . <EoL>
<BoL> Return a Bohman window . <EoL>
<BoL> Return a boxcar or rectangular window . <EoL>
<BoL> r '' '' '' Return a Dolph-Chebyshev window . <EoL>
<BoL> Return a window with a simple cosine shape . <EoL>
<BoL> r '' '' '' Return an exponential ( or Poisson ) window . <EoL>
<BoL> Return a flat top window . <EoL>
<BoL> r '' '' '' Return a Gaussian window . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Return a window with a generalized Gaussian shape . <EoL>
<BoL> r '' '' '' Return a generalized Hamming window . <EoL>
<BoL> r '' '' '' Return a Hamming window . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Return a Kaiser window . <EoL>
<BoL> Return a minimum 4-term Blackman-Harris window according to Nuttall . <EoL>
<BoL> Return a Parzen window . <EoL>
<BoL> Return a digital Slepian ( DPSS ) window . <EoL>
<BoL> Return a triangular window . <EoL>
<BoL> r '' '' '' Return a Tukey window , also known as a tapered cosine window . <EoL>
<BoL> Extend window by 1 sample if needed for DFT-even symmetry <EoL>
<BoL> Compute the autocorrelation of a real array and crop the result . <EoL>
<BoL> Handle small or incorrect window lengths <EoL>
<BoL> Truncate window by 1 sample if needed for DFT-even symmetry <EoL>
<BoL> Load a sparse matrix from a file using `` .npz `` format . <EoL>
<BoL> Save a sparse matrix to a file using `` .npz `` format . <EoL>
<BoL> Unpack keyword arguments for reshape function . <EoL>
<BoL> Imitate numpy.matrix handling of shape arguments <EoL>
<BoL> Mimic numpy 's casting for np.sum <EoL>
<BoL> Is x appropriate as an index into a sparse matrix ? Returns True <EoL>
<BoL> Is x either a scalar , an array scalar , or a 0-dim array ? <EoL>
<BoL> Build a block diagonal sparse matrix from provided matrices . <EoL>
<BoL> Apply the binary operation fn to two sparse matrices . <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , <EoL>
<BoL> check whether the matrix format is valid <EoL>
<BoL> Remove zero elements in-place . <EoL>
<BoL> Remove empty space after all non-zero elements . <EoL>
<BoL> Sort the indices of this matrix *in place* <EoL>
<BoL> Eliminate duplicate matrix entries by adding them together <EoL>
<BoL> Convert this matrix into Block Sparse Row Format . <EoL>
<BoL> Convert this matrix to COOrdinate format . <EoL>
<BoL> Based on input ( integer ) arrays ` a ` , determine a suitable index data <EoL>
<BoL> Function used to simplify argument processing . If 'dtype ' is not <EoL>
<BoL> Is x a valid 2-tuple of dimensions ? <EoL>
<BoL> Is x of a bsr_matrix type ? <EoL>
<BoL> Returns the nearest supported sparse dtype for the <EoL>
<BoL> Returns a mask of the same shape as self.data , where <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , <EoL>
<BoL> Down-cast index array to np.intp dtype if it is of a larger dtype . <EoL>
<BoL> Same as ` upcast ` but taking dtype.char as input ( faster ) . <EoL>
<BoL> Stacking fast path for CSR/CSC matrices <EoL>
<BoL> Construct a sparse matrix from diagonals . <EoL>
<BoL> Stack sparse matrices horizontally ( column wise ) <EoL>
<BoL> Identity matrix in sparse format <EoL>
<BoL> kronecker product of sparse matrices A and B <EoL>
<BoL> kronecker sum of sparse matrices A and B <EoL>
<BoL> Generate a sparse matrix of the given shape and density with uniformly <EoL>
<BoL> Return a sparse matrix from diagonals . <EoL>
<BoL> Stack sparse matrices vertically ( row wise ) <EoL>
<BoL> Is x of coo_matrix type ? <EoL>
<BoL> Is x of csc_matrix type ? <EoL>
<BoL> Return the Laplacian matrix of a directed graph . <EoL>
<BoL> Is x of csr_matrix type ? <EoL>
<BoL> Is x of lil_matrix type ? <EoL>
<BoL> Is x of dia_matrix type ? <EoL>
<BoL> Product of a list of numbers ; ~40x faster vs np.prod for Python tuples <EoL>
<BoL> Is x of dok_matrix type ? <EoL>
<BoL> Determine data type for binary operation between an array of <EoL>
<BoL> Return the lower triangular portion of a matrix in sparse format <EoL>
<BoL> Return the upper triangular portion of a matrix in sparse format <EoL>
<BoL> Convert index and data arrays to form suitable for passing to the <EoL>
<BoL> Provide the operator and some norm-related information . <EoL>
<BoL> Lazily compute max ( d ( p ) , d ( p+1 ) ) . <EoL>
<BoL> Lazily estimate d_p ( A ) ~= || A^p ||^ ( 1/p ) where ||.|| is the 1-norm . <EoL>
<BoL> Compute the exact 1-norm . <EoL>
<BoL> Set the scale parameter . <EoL>
<BoL> A helper function for computing bounds . <EoL>
<BoL> Compute the largest positive integer p such that p* ( p-1 ) < = m_max + 1 . <EoL>
<BoL> A helper function for the _expm_multiply_* functions . <EoL>
<BoL> A helper function , for the case q < = s . <EoL>
<BoL> A helper function , for the case q > s and q % s == 0 . <EoL>
<BoL> A helper function , for the case q > s and q % s > 0 . <EoL>
<BoL> Compute the action of the matrix exponential at a single time point . <EoL>
<BoL> A helper function . <EoL>
<BoL> A helper function for the _expm_multiply_* functions . <EoL>
<BoL> Compute the action of the matrix exponential of A on B . <EoL>
<BoL> Norm of a sparse matrix <EoL>
<BoL> This is Algorithm 2.2 . <EoL>
<BoL> Decorator for an elementwise function , to apply it blockwise along <EoL>
<BoL> Compute a lower bound of the 1-norm of a sparse matrix . <EoL>
<BoL> Compute a lower bound of the 1-norm of a sparse matrix . <EoL>
<BoL> Choose number of lanczos vectors based on target number <EoL>
<BoL> gmres with looser termination condition . <EoL>
<BoL> Return a function for solving a sparse linear system , with A pre-factorized . <EoL>
<BoL> Get umfpack family string given the sparse matrix dtype . <EoL>
<BoL> Solve the sparse linear system Ax=b , where b may be a vector or a matrix . <EoL>
<BoL> Solve the equation ` A x = b ` for ` x ` , assuming A is a triangular matrix . <EoL>
<BoL> Select default sparse direct solver to be used . <EoL>
<BoL> Compute the matrix exponential using Pade approximation . <EoL>
<BoL> Compute the inverse of a sparse matrix <EoL>
<BoL> Make a linear system Ax=b <EoL>
<BoL> Parse arguments for absolute tolerance in termination condition . <EoL>
<BoL> Successful termination condition for the solvers . <EoL>
<BoL> Initialize the object . <EoL>
<BoL> A helper function for expm_2009 . <EoL>
<BoL> Equation ( 10.42 ) of Functions of Matrices : Theory and Computation . <EoL>
<BoL> A helper function for expm_2009 . <EoL>
<BoL> Compute the 1-norm of a non-negative integer power of a non-negative matrix . <EoL>
<BoL> Stably evaluate sinch . <EoL>
<BoL> A matrix product that knows about sparse and structured matrices . <EoL>
<BoL> A helper function for expm_2009 . <EoL>
<BoL> Count how many nearby pairs can be formed . <EoL>
<BoL> Query the kd-tree for nearest neighbors <EoL>
<BoL> Find all points within distance r of point ( s ) x . <EoL>
<BoL> Find all pairs of points whose distance is at most r <EoL>
<BoL> Find all pairs of points within a distance . <EoL>
<BoL> Compute a sparse distance matrix <EoL>
<BoL> Construct a hyperrectangle . <EoL>
<BoL> Return the maximum distance between input and points in the hyperrectangle . <EoL>
<BoL> Compute the maximum distance between points in the two hyperrectangles . <EoL>
<BoL> Return the minimum distance between input and points in the hyperrectangle . <EoL>
<BoL> Compute the minimum distance between points in the two hyperrectangles . <EoL>
<BoL> Produce two hyperrectangles by splitting . <EoL>
<BoL> Total volume . <EoL>
<BoL> Initializes the object and starts the computation of the Voronoi <EoL>
<BoL> Calculates the Voronoi vertices and regions of the generators stored <EoL>
<BoL> For each region in regions , it sorts the indices of the Voronoi <EoL>
<BoL> Plot the given convex hull diagram in 2-D <EoL>
<BoL> Plot the given Delaunay triangulation in 2-D <EoL>
<BoL> Plot the given Voronoi diagram in 2-D <EoL>
<BoL> r '' '' '' Procrustes analysis , a similarity test for two data sets . <EoL>
<BoL> Calculates the cirumcenters of the circumspheres of tetrahedrons . <EoL>
<BoL> Pairwise distances between observations in n-dimensional space . <EoL>
<BoL> Projects the elements of points onto the sphere defined <EoL>
<BoL> Determines distance of generators from theoretical sphere <EoL>
<BoL> Convert legacy positional arguments to keyword arguments for pdist/cdist . <EoL>
<BoL> Copy the array if its base points to a parent array . <EoL>
<BoL> Compute the Bray-Curtis distance between two 1-D arrays . <EoL>
<BoL> Compute the Canberra distance between two 1-D arrays . <EoL>
<BoL> Compute the Chebyshev distance . <EoL>
<BoL> Compute the City Block ( Manhattan ) distance . <EoL>
<BoL> Compute the correlation distance between two 1-D arrays . <EoL>
<BoL> Compute the Cosine distance between 1-D arrays . <EoL>
<BoL> Compute the Dice dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the directed Hausdorff distance between two N-D arrays . <EoL>
<BoL> Computes the Euclidean distance between two 1-D arrays . <EoL>
<BoL> Compute the Hamming distance between two 1-D arrays . <EoL>
<BoL> Compute the Jaccard-Needham dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Kulsinski dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Mahalanobis distance between two 1-D arrays . <EoL>
<BoL> Compute the Minkowski distance between two 1-D arrays . <EoL>
<BoL> Return the number of original observations that correspond to a <EoL>
<BoL> Return the number of original observations that correspond to a <EoL>
<BoL> Compute the Rogers-Tanimoto dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Russell-Rao dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Return the standardized Euclidean distance between two 1-D arrays . <EoL>
<BoL> Compute the Sokal-Michener dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Sokal-Sneath dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the squared Euclidean distance between two 1-D arrays . <EoL>
<BoL> Compute the weighted Minkowski distance between two 1-D arrays . <EoL>
<BoL> Compute the Yule dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the distance matrix . <EoL>
<BoL> Compute the L**p distance between two arrays . <EoL>
<BoL> Compute the p-th power of the L**p distance between two arrays . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Modified spherical Bessel function of the first kind or its derivative . <EoL>
<BoL> r '' '' '' Spherical Bessel function of the first kind or its derivative . <EoL>
<BoL> r '' '' '' Modified spherical Bessel function of the second kind or its derivative . <EoL>
<BoL> r '' '' '' Spherical Bessel function of the second kind or its derivative . <EoL>
<BoL> Compute ` nt ` zeros and values of the Airy function Ai and its derivative . <EoL>
<BoL> Compute the generalized ( associated ) Laguerre polynomial of degree n and order k . <EoL>
<BoL> Product of a range of numbers . <EoL>
<BoL> Compute nt zeros of the Kelvin function bei ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function bei ' ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function ber ( x ) . <EoL>
<BoL> Bernoulli numbers B0..Bn ( inclusive ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function ber ' ( x ) . <EoL>
<BoL> Compute ` nt ` zeros and values of the Airy function Bi and its derivative . <EoL>
<BoL> Associated Legendre function of the first kind for complex arguments . <EoL>
<BoL> Periodic sinc function , also called the Dirichlet function . <EoL>
<BoL> r '' '' '' Complete elliptic integral of the first kind . <EoL>
<BoL> Compute nt complex zeros of error function erf ( z ) . <EoL>
<BoL> Inverse function for erfc . <EoL>
<BoL> Inverse function for erf . <EoL>
<BoL> Euler numbers E ( 0 ) , E ( 1 ) , ... , E ( n ) . <EoL>
<BoL> Compute nt complex zeros of sine and cosine Fresnel integrals S ( z ) and C ( z ) . <EoL>
<BoL> Compute nt complex zeros of cosine Fresnel integral C ( z ) . <EoL>
<BoL> Compute nt complex zeros of sine Fresnel integral S ( z ) . <EoL>
<BoL> Compute nth derivative of Hankel function H1v ( z ) with respect to ` z ` . <EoL>
<BoL> Compute nth derivative of Hankel function H2v ( z ) with respect to ` z ` . <EoL>
<BoL> Compute nth derivative of modified Bessel function Iv ( z ) with respect <EoL>
<BoL> Compute zeros of integer-order Bessel function Jn ( x ) . <EoL>
<BoL> Compute zeros of integer-order Bessel functions Jn and Jn ' . <EoL>
<BoL> Compute zeros of integer-order Bessel function derivative Jn ' ( x ) . <EoL>
<BoL> Compute nt zeros of Bessel functions Jn ( x ) , Jn ' ( x ) , Yn ( x ) , and Yn ' ( x ) . <EoL>
<BoL> Compute nth derivative of Bessel function Jv ( z ) with respect to ` z ` . <EoL>
<BoL> Compute nt zeros of the Kelvin function kei ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function kei ' ( x ) . <EoL>
<BoL> Compute nt zeros of all Kelvin functions . <EoL>
<BoL> Compute nt zeros of the Kelvin function ker ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function ker ' ( x ) . <EoL>
<BoL> Compute nth derivative of real-order modified Bessel function Kv ( z ) <EoL>
<BoL> r '' '' '' Jahnke-Emden Lambda function , Lambdav ( x ) . <EoL>
<BoL> Sequence of associated Legendre functions of the first kind . <EoL>
<BoL> Legendre function of the first kind . <EoL>
<BoL> Sequence of associated Legendre functions of the second kind . <EoL>
<BoL> Legendre function of the second kind . <EoL>
<BoL> r '' '' '' Fourier coefficients for even Mathieu and modified Mathieu functions . <EoL>
<BoL> r '' '' '' Fourier coefficients for even Mathieu and modified Mathieu functions . <EoL>
<BoL> Characteristic values for oblate spheroidal wave functions . <EoL>
<BoL> Parabolic cylinder functions Dn ( z ) and derivatives . <EoL>
<BoL> Parabolic cylinder functions Dv ( x ) and derivatives . <EoL>
<BoL> Parabolic cylinder functions Vv ( x ) and derivatives . <EoL>
<BoL> Permutations of N things taken k at a time , i.e. , k-permutations of N . <EoL>
<BoL> Polygamma function n . <EoL>
<BoL> Characteristic values for prolate spheroidal wave functions . <EoL>
<BoL> r '' '' '' Compute Ricatti-Bessel function of the first kind and its derivative . <EoL>
<BoL> Compute Ricatti-Bessel function of the second kind and its derivative . <EoL>
<BoL> Compute nt zeros of Bessel function Y0 ( z ) , and derivative at each zero . <EoL>
<BoL> Compute nt zeros of Bessel function Y1 ( z ) , and derivative at each zero . <EoL>
<BoL> Compute nt zeros of Bessel derivative Y1 ' ( z ) , and value at each zero . <EoL>
<BoL> Compute zeros of integer-order Bessel function Yn ( x ) . <EoL>
<BoL> Compute zeros of integer-order Bessel function derivative Yn ' ( x ) . <EoL>
<BoL> Compute nth derivative of Bessel function Yv ( z ) with respect to ` z ` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Gauss-Chebyshev ( first kind ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Gegenbauer quadrature . <EoL>
<BoL> r '' '' '' Chebyshev polynomial of the first kind on : math : ` [ -2 , 2 ] ` . <EoL>
<BoL> r '' '' '' Chebyshev polynomial of the second kind on : math : ` [ -2 , 2 ] ` . <EoL>
<BoL> r '' '' '' Chebyshev polynomial of the first kind . <EoL>
<BoL> r '' '' '' Chebyshev polynomial of the second kind . <EoL>
<BoL> r '' '' '' Gegenbauer ( ultraspherical ) polynomial . <EoL>
<BoL> r '' '' '' Generalized ( associated ) Laguerre polynomial . <EoL>
<BoL> r '' '' '' Gauss-Hermite ( physicst 's ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Hermite ( statistician 's ) quadrature . <EoL>
<BoL> r '' '' '' Physicist 's Hermite polynomial . <EoL>
<BoL> r '' '' '' Normalized ( probabilist 's ) Hermite polynomial . <EoL>
<BoL> r '' '' '' Gauss-Jacobi quadrature . <EoL>
<BoL> r '' '' '' Jacobi polynomial . <EoL>
<BoL> Gauss-Jacobi ( shifted ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Laguerre quadrature . <EoL>
<BoL> r '' '' '' Gauss-generalized Laguerre quadrature . <EoL>
<BoL> r '' '' '' Laguerre polynomial . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Legendre polynomial . <EoL>
<BoL> r '' '' '' Returns the log of multivariate gamma , also sometimes called the <EoL>
<BoL> Helper function for Tricomi initial guesses <EoL>
<BoL> [ x , w ] = gen_roots_and_weights ( n , an_func , sqrt_bn_func , mu ) <EoL>
<BoL> Initial guesses for the Hermite roots <EoL>
<BoL> r '' '' '' Tricomi initial guesses <EoL>
<BoL> r '' '' '' Gatteschi initial guesses <EoL>
<BoL> Newton iteration for polishing the asymptotic approximation <EoL>
<BoL> r '' '' '' Asymptotic series expansion of parabolic cylinder function <EoL>
<BoL> r '' '' '' Gauss-Hermite ( physicst 's ) quadrature for large n . <EoL>
<BoL> r '' '' '' Gauss-Legendre quadrature . <EoL>
<BoL> r '' '' '' Gauss-Legendre ( shifted ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Chebyshev ( second kind ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Chebyshev ( first kind ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Chebyshev ( second kind ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Chebyshev ( first kind , shifted ) quadrature . <EoL>
<BoL> r '' '' '' Gauss-Chebyshev ( second kind , shifted ) quadrature . <EoL>
<BoL> r '' '' '' Shifted Chebyshev polynomial of the first kind . <EoL>
<BoL> r '' '' '' Shifted Chebyshev polynomial of the second kind . <EoL>
<BoL> r '' '' '' Shifted Jacobi polynomial . <EoL>
<BoL> r '' '' '' Shifted Legendre polynomial . <EoL>
<BoL> Utility function for the argus distribution <EoL>
<BoL> kurtosis is fourth central moment / variance**2 - 3 <EoL>
<BoL> skew is third central moment / variance** ( 1.5 ) <EoL>
<BoL> Kurtosis of the Tukey Lambda distribution . <EoL>
<BoL> Variance of the Tukey Lambda distribution . <EoL>
<BoL> Default check for correct values on args and keywords . <EoL>
<BoL> Construct the instance docstring with string substitutions . <EoL>
<BoL> Estimate loc and scale parameters from data accounting for support . <EoL>
<BoL> Return penalized negative loglikelihood function , <EoL>
<BoL> Return the current version of _ctor_param , possibly updated by user . <EoL>
<BoL> Cumulative distribution function of the given RV . <EoL>
<BoL> Differential entropy of the RV . <EoL>
<BoL> Return MLEs for shape ( if applicable ) , location , and scale <EoL>
<BoL> Estimate loc and scale parameters from data using 1st and 2nd moments . <EoL>
<BoL> Freeze the distribution for the given arguments . <EoL>
<BoL> Confidence interval with equal areas around the median . <EoL>
<BoL> Inverse survival function ( inverse of ` sf ` ) at q of the given RV . <EoL>
<BoL> Log of the cumulative distribution function at x of the given RV . <EoL>
<BoL> Log of the probability density function at x of the given RV . <EoL>
<BoL> Log of the survival function of the given RV . <EoL>
<BoL> Mean of the distribution . <EoL>
<BoL> Median of the distribution . <EoL>
<BoL> n-th order non-central moment of distribution . <EoL>
<BoL> Return negative loglikelihood function . <EoL>
<BoL> Probability density function at x of the given RV . <EoL>
<BoL> Percent point function ( inverse of ` cdf ` ) at q of the given RV . <EoL>
<BoL> Random variates of given type . <EoL>
<BoL> Survival function ( 1 - ` cdf ` ) at x of the given RV . <EoL>
<BoL> Some statistics of the given RV . <EoL>
<BoL> Standard deviation of the distribution . <EoL>
<BoL> Variance of the distribution . <EoL>
<BoL> Return CDF of the argus function <EoL>
<BoL> Return PDF of the argus function <EoL>
<BoL> Return survival function of the argus function <EoL>
<BoL> In HEP crystal-ball is also defined for m = 1 ( see plot on wikipedia ) <EoL>
<BoL> Return CDF of the crystalball function <EoL>
<BoL> Returns the n-th non-central moment of the crystalball function.Returns n-th moment . Defined only if n+1 < m <EoL>
<BoL> Return PDF of the crystalball function . <EoL>
<BoL> Collect names of statistical distributions and their generators . <EoL>
<BoL> cdf = ( 1.0 - h* ( 1.0 - k*x ) ** ( 1.0/k ) ) ** ( 1.0/h ) cdf = np.exp ( - ( 1.0 - k*x ) ** ( 1.0/k ) ) cdf = ( 1.0 - h*np.exp ( -x ) ) ** ( 1.0/h ) cdf = np.exp ( -np.exp ( -x ) ) <EoL>
<BoL> pdf = ( 1.0 - k*x ) ** ( 1.0/k - 1.0 ) * ( pdf = ( 1.0 - k*x ) ** ( 1.0/k - 1.0 ) *np.exp ( - ( pdf = np.exp ( -x ) * ( 1.0 - h*np.exp ( -x ) ) ** ( 1.0/h - 1.0 ) pdf = np.exp ( -x-np.exp ( -x ) ) <EoL>
<BoL> ppf = -np.log ( ( 1.0 - ( q**h ) ) /h ) <EoL>
<BoL> Create a new distribution using the given histogram <EoL>
<BoL> CDF calculated from the histogram <EoL>
<BoL> Compute entropy of distribution <EoL>
<BoL> Compute the n-th non-central moment . <EoL>
<BoL> PDF of the histogram <EoL>
<BoL> Percentile function calculated from the histogram <EoL>
<BoL> Set the histogram as additional constructor argument <EoL>
<BoL> Maximum likelihood estimate for the location and scale parameters . <EoL>
<BoL> Return the current version of _ctor_param , possibly updated by user . <EoL>
<BoL> Cumulative distribution function of the given RV . <EoL>
<BoL> Inverse survival function ( inverse of ` sf ` ) at q of the given RV . <EoL>
<BoL> Log of the cumulative distribution function at k of the given RV . <EoL>
<BoL> Log of the probability mass function at k of the given RV . <EoL>
<BoL> Log of the survival function of the given RV . <EoL>
<BoL> Probability mass function at k of the given RV . <EoL>
<BoL> Percent point function ( inverse of ` cdf ` ) at q of the given RV . <EoL>
<BoL> Random variates of given type . <EoL>
<BoL> Survival function ( 1 - ` cdf ` ) at k of the given RV . <EoL>
<BoL> More precise calculation than log ( sf ) <EoL>
<BoL> More precise calculation , 1 - cdf does n't cut it . <EoL>
<BoL> An array of *size* random integers > = `` low `` and < `` high `` . <EoL>
<BoL> Non-central moment of discrete distribution . <EoL>
<BoL> Iterate from x0 to x1 in chunks of chunksize and steps inc . <EoL>
<BoL> Return the sequence of ravel ( args [ i ] ) where ravel ( condition ) is <EoL>
<BoL> Calculate the entropy of a distribution for given probability values . <EoL>
<BoL> Invert the matrices a_i , using a Cholesky factorization of A , where <EoL>
<BoL> Determine which eigenvalues are `` small '' given the spectrum . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> A helper function for computing the pseudoinverse . <EoL>
<BoL> Remove single-dimensional entries from array and convert to scalar , <EoL>
<BoL> Parameters <EoL>
<BoL> Compute the differential entropy of the dirichlet distribution . <EoL>
<BoL> Log of the Dirichlet probability density function . <EoL>
<BoL> Compute the mean of the dirichlet distribution . <EoL>
<BoL> The Dirichlet probability density function . <EoL>
<BoL> Draw random samples from a Dirichlet distribution . <EoL>
<BoL> Compute the variance of the dirichlet distribution . <EoL>
<BoL> Create a frozen inverse Wishart distribution . <EoL>
<BoL> Create a frozen inverse Wishart distribution . <EoL>
<BoL> Compute Cholesky decomposition and determine ( log ( det ( scale ) ) . <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Adjust quantiles array so that last axis labels the components of <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Log of the inverse Wishart probability density function . <EoL>
<BoL> Mean of the inverse Wishart distribution <EoL>
<BoL> Mode of the inverse Wishart distribution <EoL>
<BoL> Inverse Wishart probability density function . <EoL>
<BoL> Draw random samples from an inverse Wishart distribution . <EoL>
<BoL> Variance of the inverse Wishart distribution <EoL>
<BoL> Create a frozen matrix normal distribution . <EoL>
<BoL> Create a frozen matrix normal distribution . <EoL>
<BoL> Infer dimensionality from mean or covariance matrices . Handle <EoL>
<BoL> Adjust quantiles array so that last two axes labels the components of <EoL>
<BoL> Log of the matrix normal probability density function . <EoL>
<BoL> Matrix normal probability density function . <EoL>
<BoL> Draw random samples from a matrix normal distribution . <EoL>
<BoL> Draw random samples from a Multinomial distribution . <EoL>
<BoL> Create a frozen multinomial distribution . <EoL>
<BoL> Return : n_ , p_ , npcond . <EoL>
<BoL> Return : x_ , xcond . <EoL>
<BoL> Covariance matrix of the multinomial distribution . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Log of the Multinomial probability mass function . <EoL>
<BoL> Mean of the Multinomial distribution <EoL>
<BoL> Multinomial probability mass function . <EoL>
<BoL> Computes the differential entropy of the multivariate normal . <EoL>
<BoL> Create a frozen multivariate normal distribution . <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Infer dimensionality from mean or covariance matrix , ensure that <EoL>
<BoL> Adjust quantiles array so that last axis labels the components of <EoL>
<BoL> Compute the differential entropy of the multivariate normal . <EoL>
<BoL> Log of the multivariate normal probability density function . <EoL>
<BoL> Multivariate normal probability density function . <EoL>
<BoL> Draw random samples from a multivariate normal distribution . <EoL>
<BoL> Dimension N must be specified ; it can not be inferred . <EoL>
<BoL> Draw random samples from O ( N ) . <EoL>
<BoL> Computes a 2x2 Givens matrix to put 1 's on the diagonal for the input matrix . <EoL>
<BoL> Given a psd matrix m , rotate to put one 's on the diagonal , turning it <EoL>
<BoL> Draw random correlation matrices <EoL>
<BoL> Create a frozen SO ( N ) distribution . <EoL>
<BoL> Create a frozen SO ( N ) distribution . <EoL>
<BoL> Dimension N must be specified ; it can not be inferred . <EoL>
<BoL> Draw random samples from SO ( N ) . <EoL>
<BoL> Dimension N must be specified ; it can not be inferred . <EoL>
<BoL> Draw random samples from U ( N ) . <EoL>
<BoL> Create a frozen Wishart distribution . <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Compute the differential entropy of the Wishart . <EoL>
<BoL> Log of the Wishart probability density function . <EoL>
<BoL> Mean of the Wishart distribution <EoL>
<BoL> Mode of the Wishart distribution <EoL>
<BoL> Wishart probability density function . <EoL>
<BoL> Draw random samples from a Wishart distribution . <EoL>
<BoL> Variance of the Wishart distribution <EoL>
<BoL> Calculate a linear least-squares regression for two sets of measurements . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Anderson-Darling test for data coming from a particular distribution <EoL>
<BoL> The Anderson-Darling test for k-samples . <EoL>
<BoL> Perform the Ansari-Bradley test for equal scale parameters <EoL>
<BoL> Perform Bartlett 's test for equal variances <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Perform a test that the probability of success is p . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' The boxcox log-likelihood function . <EoL>
<BoL> Compute optimal Box-Cox transform parameter for input data . <EoL>
<BoL> Compute parameters for a Box-Cox normality plot , optionally show it . <EoL>
<BoL> Chi-square test of independence of variables in a contingency table . <EoL>
<BoL> Calculate a one-way chi square test . <EoL>
<BoL> Compute the circular mean for samples in a range . <EoL>
<BoL> Compute the circular standard deviation for samples assumed to be in the <EoL>
<BoL> Compute the circular variance for samples assumed to be in a range <EoL>
<BoL> Methods for combining the p-values of independent tests bearing upon the <EoL>
<BoL> Compute the expected frequencies from a contingency table . <EoL>
<BoL> Return a list of the marginal sums of the array ` a ` . <EoL>
<BoL> Cressie-Read power divergence statistic and goodness of fit test . <EoL>
<BoL> Return a cumulative frequency histogram , using the histogram function . <EoL>
<BoL> Compute several descriptive statistics of the passed array . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Performs a 1-way ANOVA . <EoL>
<BoL> Find repeats and repeat counts . <EoL>
<BoL> Performs a Fisher exact test on a 2x2 contingency table.Binary search for where to begin lower/upper halves in two-sided <EoL>
<BoL> Perform Fligner-Killeen test for equality of variance . <EoL>
<BoL> Compute the Friedman test for repeated measurements <EoL>
<BoL> Evaluate the estimated pdf on a set of points . <EoL>
<BoL> Computes the covariance matrix for each Gaussian kernel using <EoL>
<BoL> Computes the integral of a pdf over a rectangular interval . <EoL>
<BoL> Computes the integral of a 1D pdf between two bounds . <EoL>
<BoL> Multiply estimated density by a multivariate Gaussian and integrate <EoL>
<BoL> Computes the integral of the product of this kernel density estimate <EoL>
<BoL> Evaluate the log of the estimated pdf on a provided set of points . <EoL>
<BoL> Evaluate the estimated pdf on a provided set of points . <EoL>
<BoL> Randomly sample a dataset from the estimated pdf . <EoL>
<BoL> Compute the estimator bandwidth with given method . <EoL>
<BoL> Compute the geometric mean along the specified axis . <EoL>
<BoL> Calculate the harmonic mean along the specified axis . <EoL>
<BoL> Perform the Jarque-Bera goodness of fit test on sample data . <EoL>
<BoL> Calculate Kendall 's tau , a correlation measure for ordinal data . <EoL>
<BoL> Compute the Kruskal-Wallis H-test for independent samples <EoL>
<BoL> Compute the Kolmogorov-Smirnov statistic on 2 samples . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Perform the Kolmogorov-Smirnov test for goodness of fit . <EoL>
<BoL> Compute the kurtosis ( Fisher or Pearson ) of a dataset . <EoL>
<BoL> Test whether a dataset has normal kurtosis . <EoL>
<BoL> Perform Levene test for equal variances . <EoL>
<BoL> Compute the Mann-Whitney rank test on samples x and y . <EoL>
<BoL> Mood 's median test . <EoL>
<BoL> Return an array of the modal ( most common ) value in the passed array . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Perform Mood 's test for equal scale parameters . <EoL>
<BoL> Helper function to add axes labels and a title to stats plots <EoL>
<BoL> Compute A2akN equation 7 of Scholz and Stephens . <EoL>
<BoL> Compute A2akN equation 6 of Scholz & Stephens . <EoL>
<BoL> Approximations of uniform order statistic medians . <EoL>
<BoL> Parse ` dist ` keyword . <EoL>
<BoL> 'Frozen ' distributions for mean , variance , and standard deviation of data . <EoL>
<BoL> Calculate the shape parameter that maximizes the PPCC <EoL>
<BoL> Calculate and optionally plot probability plot correlation coefficient . <EoL>
<BoL> Calculate quantiles for a probability plot , and optionally show the plot . <EoL>
<BoL> Perform the Shapiro-Wilk test for normality . <EoL>
<BoL> Calculate the Wilcoxon signed-rank test . <EoL>
<BoL> Constructs a 2D array from a group of sequences . <EoL>
<BoL> Compares the medians from two independent groups along the given axis . <EoL>
<BoL> Counts the number of tied values . <EoL>
<BoL> Computes several descriptive statistics of the passed array . <EoL>
<BoL> Performs a 1-way ANOVA , returning an F-value and probability given <EoL>
<BoL> Find repeats in arr and return a tuple ( repeats , repeat_count ) . <EoL>
<BoL> Friedman Chi-Square is a non-parametric , one-way within-subjects ANOVA . <EoL>
<BoL> Returns the Harrell-Davis estimate of the median along the given axis . <EoL>
<BoL> Computes quantile estimates with the Harrell-Davis method . <EoL>
<BoL> The standard error of the Harrell-Davis quantile estimates by jackknife . <EoL>
<BoL> Returns an estimate of the lower and upper quartiles . <EoL>
<BoL> Computes Kendall 's rank correlation tau on two variables *x* and *y* . <EoL>
<BoL> Computes a multivariate Kendall 's rank correlation tau , for seasonal data . <EoL>
<BoL> Compute the Kruskal-Wallis H-test for independent samples <EoL>
<BoL> Computes the Kolmogorov-Smirnov test on two samples . <EoL>
<BoL> Computes the kurtosis ( Fisher or Pearson ) of a dataset . <EoL>
<BoL> Tests whether a dataset has normal kurtosis <EoL>
<BoL> Linear regression calculation <EoL>
<BoL> Computes the Mann-Whitney statistic <EoL>
<BoL> Computes the alpha-level confidence interval for the median of the data . <EoL>
<BoL> Returns plotting positions ( or empirical percentile points ) for the data . <EoL>
<BoL> Returns the Maritz-Jarrett estimators of the standard error of selected <EoL>
<BoL> Returns an array of the modal ( most common ) value in the passed array . <EoL>
<BoL> Calculates the nth moment about the mean for a sample . <EoL>
<BoL> Computes the alpha confidence interval for the selected quantiles of the <EoL>
<BoL> Returns the sign of x , or 0 if x is masked . <EoL>
<BoL> Tests whether a sample differs from a normal distribution . <EoL>
<BoL> Computes a transform on input data ( any number of columns ) . Used to <EoL>
<BoL> Calculates a Pearson correlation coefficient and the p-value for testing <EoL>
<BoL> Calculates a point biserial correlation coefficient and its p-value . <EoL>
<BoL> Returns the rank ( also known as order statistics ) of each data point <EoL>
<BoL> Evaluates Rosenblatt 's shifted histogram estimators for each data point . <EoL>
<BoL> Calculate the score at the given 'per ' percentile of the <EoL>
<BoL> Calculates the standard error of the mean of the input array . <EoL>
<BoL> Computes the skewness of a data set . <EoL>
<BoL> Tests whether the skew is different from the normal distribution . <EoL>
<BoL> Calculates a Spearman rank-order correlation coefficient and the p-value <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute the trimmed maximum <EoL>
<BoL> Compute the trimmed mean . <EoL>
<BoL> Compute the trimmed minimum <EoL>
<BoL> Trims an array by masking the data outside some given limits . <EoL>
<BoL> Trims an array by masking the data outside some given limits . <EoL>
<BoL> Trims the smallest and largest data values . <EoL>
<BoL> Returns the standard error of the trimmed mean along the given axis . <EoL>
<BoL> Trims an array by masking some proportion of the data on each end . <EoL>
<BoL> Compute the trimmed standard error of the mean . <EoL>
<BoL> Calculates the T-test for the mean of ONE group of scores . <EoL>
<BoL> Calculates the T-test for the means of TWO INDEPENDENT samples of scores . <EoL>
<BoL> Calculates the T-test on TWO RELATED samples of scores , a and b . <EoL>
<BoL> Compute the trimmed variance <EoL>
<BoL> Computes the coefficient of variation , the ratio of the biased standard <EoL>
<BoL> Calculate the relative z-scores . <EoL>
<BoL> Calculate the z score of each value in the sample , relative to the <EoL>
<BoL> Mask an array for values outside of given limits . <EoL>
<BoL> Returns the McKean-Schrader estimate of the standard error of the sample <EoL>
<BoL> Test whether a sample differs from a normal distribution . <EoL>
<BoL> Compute the O'Brien transform on input data ( any number of arrays ) . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> The percentile rank of a score relative to a list of scores . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute the Wilcoxon rank-sum statistic for two samples . <EoL>
<BoL> Return a relative frequency histogram , using the histogram function . <EoL>
<BoL> Calculate the standard error of the mean ( or standard error of <EoL>
<BoL> Iterative sigma-clipping of array elements . <EoL>
<BoL> Compute the skewness of a data set . <EoL>
<BoL> Test whether the skew is different from the normal distribution . <EoL>
<BoL> Calculate a Spearman rank-order correlation coefficient and the p-value <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Count the number of non-masked elements of an array . <EoL>
<BoL> Separate the range into several bins and return the number of instances <EoL>
<BoL> Private wrapper that works around older versions of ` numpy ` . <EoL>
<BoL> Mask an array for values outside of given limits . <EoL>
<BoL> Sum elements of the input array , and return the square ( s ) of that sum . <EoL>
<BoL> Square each element of the input array , and return the sum ( s ) of that . <EoL>
<BoL> Common code between all 3 t-test functions . <EoL>
<BoL> Validate the values and weights from a distribution input of ` cdf_distance ` <EoL>
<BoL> Tie correction factor for ties in the Mann-Whitney U and <EoL>
<BoL> Compute the trimmed maximum . <EoL>
<BoL> Compute the trimmed mean . <EoL>
<BoL> Compute the trimmed minimum . <EoL>
<BoL> Slices off a proportion from ONE end of the passed array distribution . <EoL>
<BoL> Return mean of array after trimming distribution from both tails . <EoL>
<BoL> Slices off a proportion of items from both ends of an array . <EoL>
<BoL> Compute the trimmed standard error of the mean . <EoL>
<BoL> Compute the trimmed sample standard deviation . <EoL>
<BoL> Calculate the T-test for the mean of ONE group of scores . <EoL>
<BoL> Calculate the T-test for the means of *two independent* samples of scores . <EoL>
<BoL> Calculate the T-test on TWO RELATED samples of scores , a and b . <EoL>
<BoL> Compute the trimmed variance . <EoL>
<BoL> Compute the coefficient of variation , the ratio of the biased standard <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return a boolean indicating whether a == b on the basis of <EoL>
<BoL> a ! = b - > Compare two symbolic trees and see whether they are different <EoL>
<BoL> Pickling support . <EoL>
<BoL> Method to return the string representation . <EoL>
<BoL> Stub that should be overridden by new Functions to return <EoL>
<BoL> Compute an asymptotic expansion around args0 , in terms of self.args . <EoL>
<BoL> Returns evaluation over an interval . For most functions this is : <EoL>
<BoL> Helper for evalf . Does the same thing but takes binary precision <EoL>
<BoL> Helper for `` expand ( ) `` . Recursively calls `` expr._eval_expand_hint ( ) `` . <EoL>
<BoL> Helper for .has ( ) <EoL>
<BoL> Helper for .has ( ) <EoL>
<BoL> Return a tuple of information about self that can be used to <EoL>
<BoL> Parse and configure the ordering of terms . <EoL>
<BoL> Return self evaluated , if possible , replacing free symbols with <EoL>
<BoL> Helper for rcall method . <EoL>
<BoL> Decide if the function should automatically evalf ( ) . <EoL>
<BoL> Substitutes an expression old - > new.Try to replace old with new in any of self 's arguments . <EoL>
<BoL> Helper for xreplace . Tracks whether a replacement actually occurred . <EoL>
<BoL> See the apart function in sympy.polys <EoL>
<BoL> Return [ commutative factors , non-commutative factors ] of self . <EoL>
<BoL> Returns the method as the 2-tuple ( base , exponent ) . <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Return the tuple ( c , args ) where self is written as an Add , `` a `` . <EoL>
<BoL> `` c*x**e - > c , e `` where x can be any symbolic expression . <EoL>
<BoL> Return the tuple ( c , args ) where self is written as a Mul , `` m `` . <EoL>
<BoL> Extracts symbolic coefficient at the given expression . In <EoL>
<BoL> Return a dictionary mapping terms to their Rational coefficient . <EoL>
<BoL> This method should recursively remove a Rational from all arguments <EoL>
<BoL> Convert a polynomial to a SymPy expression . <EoL>
<BoL> A mostly naive separation of a Mul or Add into arguments that are notreturn the standard has ( ) if there are no literal symbols , else <EoL>
<BoL> Returns the leading ( nonzero ) term of the series expansion of self . <EoL>
<BoL> expression - > a/b - > a , b <EoL>
<BoL> Return list of ordered factors ( if Mul ) else [ self ] . <EoL>
<BoL> Transform an expression to an ordered list of terms . <EoL>
<BoL> Converts `` self `` to a polynomial or returns `` None `` . <EoL>
<BoL> Return self as a dictionary of factors with each factor being <EoL>
<BoL> Performs complex expansion on 'self ' and returns a tuple <EoL>
<BoL> Transform an expression to a list of terms . <EoL>
<BoL> Returns the atoms that form the current object . <EoL>
<BoL> See the cancel function in sympy.polys <EoL>
<BoL> Returns the coefficient from the term ( s ) containing `` x**n `` . If `` n `` Find where list sub appears in list l. When `` first `` is True <EoL>
<BoL> See the collect function in sympy.simplify <EoL>
<BoL> See the combsimp function in sympy.simplify <EoL>
<BoL> Return -1 , 0 , 1 if the object is smaller , equal , or greater than other . <EoL>
<BoL> as_leading_term is only allowed for results of .series ( ) <EoL>
<BoL> Return True if self is not in a canonical form with respect <EoL>
<BoL> Count the number of matching subexpressions . <EoL>
<BoL> wrapper for count_ops that returns the operation count . <EoL>
<BoL> Evaluate objects that are not evaluated by default like limits , <EoL>
<BoL> Compare two expressions and handle dummy symbols . <EoL>
<BoL> Return True if self == other , False if it does n't , or None . If <EoL>
<BoL> Evaluate the given formula to an accuracy of n digits . <EoL>
<BoL> Make multinomial come before mul <EoL>
<BoL> Return self - c if it 's possible to subtract c from self and <EoL>
<BoL> Try to write self as `` exp_polar ( 2*pi*I*n ) *z `` in a nice way . <EoL>
<BoL> Return None if it 's not possible to make self in the form <EoL>
<BoL> See the factor ( ) function in sympy.polys.polytools <EoL>
<BoL> Get the first derivative of the argument to Abs ( ) . <EoL>
<BoL> Find all subexpressions matching a query . <EoL>
<BoL> Compute fourier sine/cosine series of self . <EoL>
<BoL> Create a new object from an iterable . <EoL>
<BoL> See the gammasimp function in sympy.simplify <EoL>
<BoL> Returns the additive O ( .. ) symbol if there is one , else None . <EoL>
<BoL> Returns the order of the expression . <EoL>
<BoL> Test whether any subexpression matches any of the patterns . <EoL>
<BoL> See the integrate function in sympy.integrals <EoL>
<BoL> Return the multiplicative inverse of `` self `` mod `` g `` <EoL>
<BoL> This tests whether a given expression is algebraic or not , in the <EoL>
<BoL> Return True if self is constant , False if not , or None if <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Test whether function is a ratio of two polynomials in the given <EoL>
<BoL> Returns the leading term a*x**b as a tuple ( a , b ) . <EoL>
<BoL> Compute limit x- > xlim . <EoL>
<BoL> Wrapper for series yielding an iterator of the terms of the series . <EoL>
<BoL> Pattern matching . <EoL>
<BoL> Helper method for match ( ) that looks for a match between Wild symbols <EoL>
<BoL> Wrapper to _eval_nseries if assumptions allow , else to series . <EoL>
<BoL> See the nsimplify function in sympy.simplify <EoL>
<BoL> See the powsimp function in sympy.simplify <EoL>
<BoL> Return the positive Rational that can be extracted non-recursively <EoL>
<BoL> See the radsimp function in sympy.simplify <EoL>
<BoL> See the ratsimp function in sympy.simplify <EoL>
<BoL> Apply on the argument recursively through the expression tree . <EoL>
<BoL> See the refine function in sympy.assumptions <EoL>
<BoL> Removes the additive O ( .. ) symbol if there is one <EoL>
<BoL> Replace matching subexpressions of `` self `` with `` value `` . <EoL>
<BoL> Rewrite functions in terms of other functions . <EoL>
<BoL> Return x rounded to the given decimal place . <EoL>
<BoL> See the separate function in sympy.simplify <EoL>
<BoL> Series expansion of `` self '' around `` x = x0 `` yielding either terms ofReturn terms of lseries one at a time . <EoL>
<BoL> See the simplify function in sympy.simplify <EoL>
<BoL> Substitutes old for new in an expression after sympifying args . <EoL>
<BoL> General method for the taylor term . <EoL>
<BoL> See the together function in sympy.polys <EoL>
<BoL> See the trigsimp function in sympy.simplify <EoL>
<BoL> Replace occurrences of objects within the expression . <EoL>
<BoL> Returns True if other is contained in self , where other <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds <EoL>
<BoL> Override this stub if you want to do anything more than <EoL>
<BoL> Returns the intersection of 'self ' and 'other ' . <EoL>
<BoL> Returns lhs - rhs , but treats oo like a symbol so oo - oo <EoL>
<BoL> Evaluate the parts of self that are numbers ; if the whole thing <EoL>
<BoL> Create new instance with already-processed args <EoL>
<BoL> Helper for .has ( ) <EoL>
<BoL> Matches Add/Mul `` pattern '' to an expression `` expr '' . <EoL>
<BoL> Create new instance of own class with args exactly as provided by <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Returns a tuple ( coeff , args ) where self is treated as an Add and coeff <EoL>
<BoL> Return a dictionary mapping terms to their Rational coefficient . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational <EoL>
<BoL> returns a tuple representing a complex number <EoL>
<BoL> Return head and tail of self . <EoL>
<BoL> Nice order of classes <EoL>
<BoL> Returns the leading term and its order . <EoL>
<BoL> Takes the sequence `` seq '' of nested Adds and returns a flatten list . <EoL>
<BoL> Return a sequence of elements ` args ` such that cls ( *args ) == expr <EoL>
<BoL> Return `` ( R , self/R ) `` where `` R `` ` is the Rational GCD of `` self `` ` . <EoL>
<BoL> Return terms of series for self up to O ( x**n ) at x=0 <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Returns a dense Matrix with elements represented explicitly <EoL>
<BoL> Returns a dense , mutable matrix with elements represented explicitly <EoL>
<BoL> Nice order of classes . <EoL>
<BoL> Test elementwise equality between matrices , potentially of different <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Construct an element of `` self `` domain from `` args `` . <EoL>
<BoL> Check if `` a `` belongs to this domain . <EoL>
<BoL> Returns `` True `` if two domains are equivalent . <EoL>
<BoL> The mathematical way to make a polynomial ring . <EoL>
<BoL> Returns `` False `` if two domains are equivalent . <EoL>
<BoL> Absolute value of `` a `` , implies `` __abs__ `` . <EoL>
<BoL> Sum of `` a `` and `` b `` , implies `` __add__ `` . <EoL>
<BoL> r '' '' '' Returns an algebraic field , i.e . ` \mathbb { Q } ( \alpha , \ldots ) ` . <EoL>
<BoL> Check if `` a `` and `` b `` are almost equal . <EoL>
<BoL> Return the characteristic of this domain . <EoL>
<BoL> Returns GCD and cofactors of `` a `` and `` b `` . <EoL>
<BoL> Convert `` element `` to `` self.dtype `` . <EoL>
<BoL> Convert `` element `` to `` self.dtype `` given the base domain . <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Division of `` a `` and `` b `` , implies `` __div__ `` . <EoL>
<BoL> Returns numerical approximation of `` a `` . <EoL>
<BoL> Exact quotient of `` a `` and `` b `` , implies `` __div__ `` . <EoL>
<BoL> Returns a fraction field , i.e . ` K ( X ) ` . <EoL>
<BoL> Generate a free module of rank `` rank `` over self . <EoL>
<BoL> Convert an algebraic number to `` dtype `` . <EoL>
<BoL> Convert a complex element to `` dtype `` . <EoL>
<BoL> Convert a `` EX `` object to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to `` dtype `` . <EoL>
<BoL> Convert a rational function to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpq `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` Fraction `` object to `` dtype `` . <EoL>
<BoL> Convert a mpmath `` mpf `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpz `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` int `` object to `` dtype `` . <EoL>
<BoL> Convert SymPy 's expression to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns an exact domain associated with `` self `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Half extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Generate an ideal of `` self `` . <EoL>
<BoL> Inject generators into this domain . <EoL>
<BoL> Returns inversion of `` a mod b `` . <EoL>
<BoL> Returns True if `` a `` is negative . <EoL>
<BoL> Returns True if `` a `` is non-negative . <EoL>
<BoL> Returns True if `` a `` is non-positive . <EoL>
<BoL> Returns True if `` a `` is one . <EoL>
<BoL> Returns True if `` a `` is positive . <EoL>
<BoL> Returns True if `` a `` is zero . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns b-base logarithm of `` a `` . <EoL>
<BoL> Rersively apply `` self `` to all elements of `` seq `` . <EoL>
<BoL> Product of `` a `` and `` b `` , implies `` __mul__ `` . <EoL>
<BoL> Returns `` a `` negated , implies `` __neg__ `` . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Check if `` a `` is of type `` dtype `` . <EoL>
<BoL> Returns a fraction field , i.e . ` K ( X ) ` . <EoL>
<BoL> Returns a polynomial ring , i.e . ` K [ X ] ` . <EoL>
<BoL> Returns a polynomial ring , i.e . ` K [ X ] ` . <EoL>
<BoL> Returns `` a `` positive , implies `` __pos__ `` . <EoL>
<BoL> Raise `` a `` to power `` b `` , implies `` __pow__ `` . <EoL>
<BoL> Quotient of `` a `` and `` b `` , implies `` __div__ `` . <EoL>
<BoL> Form a quotient ring of `` self `` . <EoL>
<BoL> Remainder of `` a `` and `` b `` , implies nothing . <EoL>
<BoL> Returns `` a** ( -1 ) `` if possible . <EoL>
<BoL> Returns square root of `` a `` . <EoL>
<BoL> Difference of `` a `` and `` b `` , implies `` __sub__ `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Construct a minimal domain that contains elements of `` K0 `` and `` K1 `` . <EoL>
<BoL> Construct a new algebraic number . <EoL>
<BoL> Create a Basic expression from `` self `` . <EoL>
<BoL> Create a Poly instance from `` self `` . <EoL>
<BoL> Returns all SymPy coefficients of an algebraic number . <EoL>
<BoL> Returns all native coefficients of an algebraic number . <EoL>
<BoL> Convert `` self `` to an algebraic integer . <EoL>
<BoL> Overloading for & operator <EoL>
<BoL> Overloading for ~ <EoL>
<BoL> Overloading for < < <EoL>
<BoL> Overloading for | <EoL>
<BoL> Overloading for > > <EoL>
<BoL> A stub to allow Basic args ( like Tuple ) to be skipped when computing <EoL>
<BoL> Rewrites Boolean expression in terms of real sets . <EoL>
<BoL> wrapper for count_ops that returns the operation count . <EoL>
<BoL> Returns True if the given formulas have the same truth table . <EoL>
<BoL> Returns a canonical form of cls applied to arguments args . <EoL>
<BoL> Return seq so that none of the elements are of type ` cls ` . This is <EoL>
<BoL> Return a set of args such that cls ( *arg_set ) == expr . <EoL>
<BoL> Return a sort key . <EoL>
<BoL> NDimArray instances can be compared to each other . <EoL>
<BoL> Allows to get items from N-dim array . <EoL>
<BoL> Overload common function len ( ) . Returns number of elements in array . <EoL>
<BoL> Returns string , allows to use standard functions print ( ) and str ( ) . <EoL>
<BoL> Apply a function to each element of the N-dim array . <EoL>
<BoL> Calculate the derivative of each element in the array . <EoL>
<BoL> Returns rank of array . <EoL>
<BoL> Returns MutableDenseNDimArray instance with new shape . Elements number <EoL>
<BoL> Converting MutableDenseNDimArray to one-dim list <EoL>
<BoL> Converts MutableDenseNDimArray to Matrix . Can convert only 2-dim array , else will raise error . <EoL>
<BoL> Add an assumption . <EoL>
<BoL> Return transpose of matrix . <EoL>
<BoL> Construct an indexed complex root of a polynomial . <EoL>
<BoL> Get real and complex roots of a composite polynomial . <EoL>
<BoL> Map initial complex root index to an index in a factor where <EoL>
<BoL> Make complex isolating intervals disjoint and sort roots . <EoL>
<BoL> Count the number of real or complex roots with multiplicities . <EoL>
<BoL> Evaluate this complex root to the given precision . <EoL>
<BoL> Return `` True `` if the root is imaginary . <EoL>
<BoL> Return `` True `` if the root is real . <EoL>
<BoL> Compute complex root isolating intervals for a list of factors . <EoL>
<BoL> Get complex root isolating intervals for a square-free factor . <EoL>
<BoL> Internal function for retrieving isolation interval from cache . <EoL>
<BoL> Compute real root isolating intervals for a list of factors . <EoL>
<BoL> Get real root isolating intervals for a square-free factor . <EoL>
<BoL> Return postprocessed roots of specified kind . <EoL>
<BoL> Get a root of a composite polynomial by index . <EoL>
<BoL> Construct new `` CRootOf `` object from raw data . <EoL>
<BoL> Return the root if it is trivial or a `` CRootOf `` object . <EoL>
<BoL> Take heroic measures to make `` poly `` compatible with `` CRootOf `` . <EoL>
<BoL> Get real roots of a composite polynomial . <EoL>
<BoL> Map initial real root index to an index in a factor where <EoL>
<BoL> Make real isolating intervals disjoint and sort roots . <EoL>
<BoL> return complexes such that no bounding rectangles of non-conjugate <EoL>
<BoL> Compute roots in linear , quadratic and binomial cases . <EoL>
<BoL> Internal function for updating isolation interval in cache . <EoL>
<BoL> Get real and complex roots of a polynomial . <EoL>
<BoL> Reset cache for reals and complexes . <EoL>
<BoL> Evaluate this complex root to the given precision . <EoL>
<BoL> Return a Rational approximation of `` self `` that has real <EoL>
<BoL> Get real roots of a polynomial . <EoL>
<BoL> Comparison of two GeometryEntities . <EoL>
<BoL> Is the other GeometryEntity the same as this ellipse ? <EoL>
<BoL> Returns a tuple that will be passed to __new__ on unpickling . <EoL>
<BoL> Test inequality of two geometrical entities . <EoL>
<BoL> Implementation of reverse add method . <EoL>
<BoL> Implementation of reverse division method . <EoL>
<BoL> String representation of a GeometryEntity that can be evaluated <EoL>
<BoL> Implementation of reverse multiplication method . <EoL>
<BoL> Implementation of reverse substraction method . <EoL>
<BoL> String representation of a GeometryEntity . <EoL>
<BoL> sympy.sets uses the _contains method , so include it for compatibility . <EoL>
<BoL> Return infimum ( if possible ) else S.Infinity . <EoL>
<BoL> SVG representation of a GeometryEntity suitable for IPython < svg xmlns= '' http : //www.w3.org/2000/svg '' <EoL>
<BoL> Returns SVG ellipse element for the Ellipse . <EoL>
<BoL> A parameterized point on the ellipse . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns True if 'other ' is contained in 'self ' as an element . <EoL>
<BoL> Return True if o is inside ( not on or outside ) the boundaries of self . <EoL>
<BoL> Return True if p is enclosed by ( is inside of ) self . <EoL>
<BoL> The equation of the circle . <EoL>
<BoL> The equation of evolute of the ellipse . <EoL>
<BoL> Returns the intersection of 'self ' and 'other ' . <EoL>
<BoL> The intersection of this circle with another geometrical entity . <EoL>
<BoL> Returns True if 'self ' and 'other ' are disjoint <EoL>
<BoL> Returns True if 'self ' is a proper subset of 'other ' . <EoL>
<BoL> Returns True if 'self ' is a proper superset of 'other ' . <EoL>
<BoL> Is this geometrical entity similar to another geometrical entity ? <EoL>
<BoL> Returns True if 'self ' is a subset of 'other ' . <EoL>
<BoL> Returns True if 'self ' is a superset of 'other ' . <EoL>
<BoL> Is ` o ` tangent to the ellipse ? <EoL>
<BoL> Alias for : meth : ` is_disjoint ( ) ` <EoL>
<BoL> Alias for : meth : ` is_subset ( ) ` <EoL>
<BoL> Alias for : meth : ` is_superset ( ) ` <EoL>
<BoL> Normal lines between ` p ` and the ellipse . <EoL>
<BoL> Return the parameter corresponding to the given point . <EoL>
<BoL> The plot interval for the default geometric plot of the Ellipse . <EoL>
<BoL> Find the Power set of 'self ' . <EoL>
<BoL> A random point on the ellipse . <EoL>
<BoL> Override GeometryEntity.reflect since the radius <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Override GeometryEntity.scale since the radius <EoL>
<BoL> Returns the second moment and product moment area of an ellipse . <EoL>
<BoL> Returns symmetric difference of ` self ` and ` other ` . <EoL>
<BoL> Tangent lines between ` p ` and the ellipse . <EoL>
<BoL> Shift the object by adding to the x , y-coordinates the values x and y . <EoL>
<BoL> Returns the union of 'self ' and 'other ' . <EoL>
<BoL> Alias for : meth : ` intersect ( ) ` <EoL>
<BoL> Simplify a : class : ` Complement ` . <EoL>
<BoL> r '' '' '' Returns an algebraic field , i.e . ` K ( \alpha , \ldots ) ` . <EoL>
<BoL> Check if `` a `` and `` b `` are almost equal . <EoL>
<BoL> Returns denominator of ` a ` . <EoL>
<BoL> Convert SymPy 's number to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns an exact domain associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Returns True if `` a `` is negative . <EoL>
<BoL> Returns True if `` a `` is non-negative . <EoL>
<BoL> Returns True if `` a `` is non-positive . <EoL>
<BoL> Returns True if `` a `` is positive . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Convert `` element `` to SymPy number . <EoL>
<BoL> Converts given subset of real numbers to a complex region . <EoL>
<BoL> This function does compute series for multivariate functions , <EoL>
<BoL> Try to evaluate the transform in closed form . <EoL>
<BoL> Returns the first derivative of the function . <EoL>
<BoL> Subclasses should implement this method for anything more complex than equality . <EoL>
<BoL> Returns SVG path element for the GeometryEntity . <EoL>
<BoL> A parameterized point on the curve . <EoL>
<BoL> Returns a list of all of the intersections of self with o . <EoL>
<BoL> The plot interval for the default geometric plot of the curve . <EoL>
<BoL> Reflects an object across a line . <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Override GeometryEntity.scale since Curve is not made up of Points . <EoL>
<BoL> Translate the Curve by ( x , y ) . <EoL>
<BoL> Symbols are identified by name and assumptions : : <EoL>
<BoL> Remove None , covert values to bool , check commutativity *in place* . <EoL>
<BoL> Return a Dummy having the same name and same assumptions as self . <EoL>
<BoL> Sort ( variable , count ) pairs by variable , but disallow sorting of non-symbols . <EoL>
<BoL> Expresses a Derivative instance as a finite difference . <EoL>
<BoL> Evaluate the derivative at z numerically . <EoL>
<BoL> D.__contains__ ( k ) - > True if D has a key k , else False <EoL>
<BoL> x.__getitem__ ( y ) < == > x [ y ] <EoL>
<BoL> x.__iter__ ( ) < == > iter ( x ) <EoL>
<BoL> x.__len__ ( ) < == > len ( x ) <EoL>
<BoL> D.get ( k [ , d ] ) - > D [ k ] if k in D , else d. d defaults to None . <EoL>
<BoL> D.items ( ) - > list of D 's ( key , value ) pairs , as 2-tuples <EoL>
<BoL> D.keys ( ) - > list of D 's keys <EoL>
<BoL> D.values ( ) - > list of D 's values <EoL>
<BoL> Compute a simplified representation of the function using <EoL>
<BoL> Represents DiracDelta in a Piecewise form <EoL>
<BoL> Returns the DiracDelta expression written in the form of Singularity Functions . <EoL>
<BoL> Returns a simplified form or a value of DiracDelta depending on the <EoL>
<BoL> Returns the first derivative of a DiracDelta Function . <EoL>
<BoL> is_simple ( self , x ) <EoL>
<BoL> Returns `` True `` if two domains are equivalent . <EoL>
<BoL> Return the characteristic of this domain . <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Division of `` a `` and `` b `` , implies something . <EoL>
<BoL> Exact quotient of `` a `` and `` b `` , implies something . <EoL>
<BoL> Convert a GMPY `` mpq `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` Fraction `` object to `` dtype `` . <EoL>
<BoL> Convert a real element object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpz `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` int `` object to `` dtype `` . <EoL>
<BoL> Convert a SymPy object to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Inject generators into this domain . <EoL>
<BoL> Returns inversion of `` a mod b `` , implies something . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Quotient of `` a `` and `` b `` , implies something . <EoL>
<BoL> Remainder of `` a `` and `` b `` , implies `` __mod__ `` . <EoL>
<BoL> Returns `` a** ( -1 ) `` if possible . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Classical case of the generalized exponential integral . <EoL>
<BoL> Construct new EPath . <EoL>
<BoL> Sort `` expr.args `` using printing order . <EoL>
<BoL> Apply `` _hasattrs `` and `` _hastypes `` to `` expr `` . <EoL>
<BoL> Check if `` expr `` has any of `` attrs `` . <EoL>
<BoL> Check if `` expr `` is any of `` types `` . <EoL>
<BoL> Modify parts of an expression selected by a path . <EoL>
<BoL> Retrieve parts of an expression selected by a path . <EoL>
<BoL> Represent the Levi-Civita symbol . <EoL>
<BoL> The equation of the ellipse . <EoL>
<BoL> The intersection of this ellipse and another geometrical entity <EoL>
<BoL> Override GeometryEntity.reflect since the radius <EoL>
<BoL> Override GeometryEntity.scale since it is the major and minor <EoL>
<BoL> Returns the term-wise addition of 'self ' and 'other ' . <EoL>
<BoL> Returns the term-wise multiplication of 'self ' and 'other ' . <EoL>
<BoL> Negates the sequence . <EoL>
<BoL> Returns the term-wise subtraction of 'self ' and 'other ' . <EoL>
<BoL> Should only be used internally . <EoL>
<BoL> Returns start and stop . <EoL>
<BoL> Returns the i'th point of a sequence . <EoL>
<BoL> Should only be used internally . <EoL>
<BoL> Return start ( if possible ) else S.Infinity . <EoL>
<BoL> Returns the coefficient at point pt <EoL>
<BoL> See docstring of SeqBase.coeff_mul <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return True if the sides of the relationship are mathematically <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Convert a `` EX `` object to `` dtype `` . <EoL>
<BoL> Convert a `` DMF `` object to `` dtype `` . <EoL>
<BoL> Convert a `` DMP `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpq `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` Fraction `` object to `` dtype `` . <EoL>
<BoL> Convert a mpmath `` mpf `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpz `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` int `` object to `` dtype `` . <EoL>
<BoL> Convert SymPy 's expression to `` dtype `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Returns True if `` a `` is negative . <EoL>
<BoL> Returns True if `` a `` is non-negative . <EoL>
<BoL> Returns True if `` a `` is non-positive . <EoL>
<BoL> Returns True if `` a `` is positive . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Returns `` True `` if two domains are equivalent . <EoL>
<BoL> Return the characteristic of this domain . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to `` dtype `` . <EoL>
<BoL> Convert GMPY 's `` mpq `` to `` dtype `` . <EoL>
<BoL> Convert Python 's `` Fraction `` to `` dtype `` . <EoL>
<BoL> Convert mpmath 's `` mpf `` to `` dtype `` . <EoL>
<BoL> Convert GMPY 's `` mpz `` to `` dtype `` . <EoL>
<BoL> Convert Python 's `` int `` to `` dtype `` . <EoL>
<BoL> Convert SymPy 's Integer to SymPy 's `` Integer `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Tests whether an element , other , is in the set . <EoL>
<BoL> Rewrite a FiniteSet in terms of equalities and logic operators . <EoL>
<BoL> expt is symbolic object but not equal to 0 , 1 <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Compute GCD and cofactors of ` self ` and ` other ` . <EoL>
<BoL> Compute GCD of ` self ` and ` other ` . <EoL>
<BoL> Compute LCM of ` self ` and ` other ` . <EoL>
<BoL> Returns ` True ` if two domains are equivalent . <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Returns factorial of ` a ` . <EoL>
<BoL> Convert an algebraic number to `` dtype `` . <EoL>
<BoL> Convert a rational function to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's expression to ` dtype ` . <EoL>
<BoL> Returns a field associated with ` self ` . <EoL>
<BoL> Inject generators into this domain . <EoL>
<BoL> Returns True if ` LC ( a ) ` is negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-positive . <EoL>
<BoL> Returns True if ` LC ( a ) ` is positive . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> Allow instantiation of this domain . <EoL>
<BoL> r '' '' '' Returns an algebraic field , i.e . ` \mathbb { Q } ( \alpha , \ldots ) ` . <EoL>
<BoL> Division of `` a `` and `` b `` , implies `` __divmod__ `` . <EoL>
<BoL> Exact quotient of `` a `` and `` b `` , implies `` __floordiv__ `` . <EoL>
<BoL> Compute factorial of `` a `` . <EoL>
<BoL> Convert a `` ANP `` object to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert GMPY `` mpq `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert Python 's `` Fraction `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert mpmath 's `` mpf `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert GMPY 's `` mpz `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert Python 's `` int `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert SymPy 's Integer to `` dtype `` . <EoL>
<BoL> Compute GCD of `` a `` and `` b `` . <EoL>
<BoL> Compute extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Compute LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns b-base logarithm of `` a `` . <EoL>
<BoL> Quotient of `` a `` and `` b `` , implies `` __floordiv__ `` . <EoL>
<BoL> Remainder of `` a `` and `` b `` , implies `` __mod__ `` . <EoL>
<BoL> Returns `` a** ( -1 ) `` if possible . <EoL>
<BoL> Compute square root of `` a `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> r '' '' '' Returns an algebraic field , i.e . ` \mathbb { Q } ( \alpha , \ldots ) ` . <EoL>
<BoL> Returns denominator of ` a ` . <EoL>
<BoL> Division of ` a ` and ` b ` , implies ` __div__ ` . <EoL>
<BoL> Exact quotient of ` a ` and ` b ` , implies ` __div__ ` . <EoL>
<BoL> Returns factorial of ` a ` . <EoL>
<BoL> Convert a `` ANP `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's Integer to ` dtype ` . <EoL>
<BoL> Returns ring associated with `` self `` . <EoL>
<BoL> Returns numerator of ` a ` . <EoL>
<BoL> Quotient of ` a ` and ` b ` , implies ` __div__ ` . <EoL>
<BoL> Remainder of ` a ` and ` b ` , implies nothing . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> Apply the Gram-Schmidt process to a set of vectors . <EoL>
<BoL> Compute a reduced Groebner basis for a system of polynomials . <EoL>
<BoL> Check if `` poly `` belongs the ideal generated by `` self `` . <EoL>
<BoL> Convert a Groebner basis from one ordering to another . <EoL>
<BoL> Reduces a polynomial modulo a Groebner basis . <EoL>
<BoL> Represents Heaviside in a Piecewise form <EoL>
<BoL> Returns the Heaviside expression written in the form of Singularity Functions . <EoL>
<BoL> Represents the Heaviside function in the form of sign function . <EoL>
<BoL> Returns a simplified form or a value of Heaviside depending on the <EoL>
<BoL> Returns the first derivative of a Heaviside Function . <EoL>
<BoL> Returns the LDL Decomposition ( L , D ) of matrix A , <EoL>
<BoL> Solves Ax = B using LDL decomposition , <EoL>
<BoL> Compute a fraction-free LU decomposition . <EoL>
<BoL> Solve the linear system Ax = rhs for x where A = self . <EoL>
<BoL> Return Q , R where A = Q*R , Q is orthogonal and R is upper triangular . <EoL>
<BoL> Solve the linear system 'Ax = b ' . <EoL>
<BoL> Helper function of LDLdecomposition . <EoL>
<BoL> Returns a new matrix with entry-wise absolute values . <EoL>
<BoL> Return self + other , raising ShapeError if shapes do n't match . <EoL>
<BoL> Return portion of self defined by key . If the key involves a slice <EoL>
<BoL> Return the number of elements of self . <EoL>
<BoL> Return self*other where other is either a scalar or a matrix <EoL>
<BoL> Helper function of cholesky . <EoL>
<BoL> Helper function of function diagonal_solve , <EoL>
<BoL> Helper method for Equality with matrices . <EoL>
<BoL> Return ( A , T ) where T the Toeplitz matrix used in the Berkowitz algorithm <EoL>
<BoL> Run the Berkowitz algorithm and return a vector whose entries <EoL>
<BoL> Compute matrix determinant using Bareiss ' fraction-free <EoL>
<BoL> Use the Berkowitz algorithm to compute the determinant . <EoL>
<BoL> Computes the determinant of a matrix from its LU decomposition . <EoL>
<BoL> Assumed to exist by matrix expressions ; If we subclass <EoL>
<BoL> diag_dict is a defaultdict containing <EoL>
<BoL> Returns ( mat , swaps ) where ` mat ` is a row-equivalent matrix <EoL>
<BoL> Return the matrix inverse using the method indicated ( default <EoL>
<BoL> Apply simplify to each element of the matrix . <EoL>
<BoL> Return the number of rows , cols and flat matrix elements . <EoL>
<BoL> Compatibility function for deprecated behavior of `` matrix.dot ( vector ) `` <EoL>
<BoL> Helper function of function lower_triangular_solve . <EoL>
<BoL> Validate the arguments for a row/column operation . ` error_str ` <EoL>
<BoL> Permute columns with complicated elements as <EoL>
<BoL> Does the row op row [ i ] = a*row [ i ] - b*row [ j ] <EoL>
<BoL> Helper to set value at location given by key . <EoL>
<BoL> Helper function of function upper_triangular_solve . <EoL>
<BoL> Return self + b <EoL>
<BoL> Conjugate transpose or Hermitian conjugation . <EoL>
<BoL> Returns the adjugate , or classical adjoint , of <EoL>
<BoL> Apply a function to each element of the matrix . <EoL>
<BoL> Returns an Immutable version of this Matrix <EoL>
<BoL> Returns a mutable version of this matrix <EoL>
<BoL> Returns a tuple containing the ( real , imaginary ) part of matrix . <EoL>
<BoL> Returns the atoms that form the current object . <EoL>
<BoL> Computes determinant using Berkowitz method . <EoL>
<BoL> Computes eigenvalues of a Matrix using Berkowitz method . <EoL>
<BoL> Computes principal minors using Berkowitz method . <EoL>
<BoL> Computes characteristic polynomial det ( x*I - self ) where I is <EoL>
<BoL> Returns the Cholesky decomposition L of a matrix A <EoL>
<BoL> Solves Ax = B using Cholesky decomposition , <EoL>
<BoL> Calculate the cofactor of an element . <EoL>
<BoL> Return a matrix containing the cofactor of each element . <EoL>
<BoL> Elementary column selector . <EoL>
<BoL> Delete the specified column . <EoL>
<BoL> Insert one or more columns at the given column position . <EoL>
<BoL> Concatenates two matrices along self 's last and other 's first row . <EoL>
<BoL> Returns a list of vectors ( Matrix objects ) that span columnspace of self <EoL>
<BoL> Returns the condition number of a matrix . <EoL>
<BoL> Return the by-element conjugation . <EoL>
<BoL> Returns the copy of a matrix . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Computes the determinant of a matrix . If the matrix <EoL>
<BoL> Compute matrix determinant using LU decomposition <EoL>
<BoL> Compute matrix determinant using Bareiss ' fraction-free <EoL>
<BoL> Returns a matrix with the specified diagonal.Compute the size of the diagonal block <EoL>
<BoL> Solves Ax = B efficiently , where A is a diagonal Matrix , <EoL>
<BoL> Return ( P , D ) , where D is diagonal and <EoL>
<BoL> Calculate the derivative of each element in the matrix . <EoL>
<BoL> Return the dot product of two vectors of equal length . `` self `` must <EoL>
<BoL> Returns the dual of a matrix , which is : <EoL>
<BoL> Returns a matrix row-equivalent to ` self ` that is <EoL>
<BoL> Return eigenvalues using the Berkowitz agorithm to compute <EoL>
<BoL> Return list of triples ( eigenval , multiplicity , basis ) .Get a basis for the eigenspace for a particular eigenvalue <EoL>
<BoL> Performs the elementary column operation ` op ` . <EoL>
<BoL> Performs the elementary row operation ` op ` . <EoL>
<BoL> Applies `` equals `` to corresponding elements of the matrices , <EoL>
<BoL> Apply evalf ( ) to each element of self . <EoL>
<BoL> Return the exponentiation of a square matrix . <EoL>
<BoL> Return a submatrix by specifying a list of rows and columns . <EoL>
<BoL> Returns an identity matrix . <EoL>
<BoL> Solves Ax = b using Gauss Jordan elimination . <EoL>
<BoL> Obtains the square sub-matrices on the main diagonal of a square matrix . <EoL>
<BoL> Test whether any subexpression matches any of the patterns . <EoL>
<BoL> Return a matrix formed by joining args horizontally ( i.e . <EoL>
<BoL> Integrate each element of the matrix . `` args `` will <EoL>
<BoL> Return the inverse of a matrix . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Calculates the inverse using the adjugate matrix and a determinant . <EoL>
<BoL> Calculates the inverse using Gaussian elimination . <EoL>
<BoL> Calculates the inverse using LU decomposition . <EoL>
<BoL> Check if matrix M is an antisymmetric matrix , <EoL>
<BoL> Check if matrix is diagonal , <EoL>
<BoL> Returns true if a matrix is diagonalizable.Clears any cached values if requested <EoL>
<BoL> Checks if a matrix is nilpotent . <EoL>
<BoL> Checks if any elements contain Symbols . <EoL>
<BoL> Check if matrix is symmetric matrix , <EoL>
<BoL> Calculates the Jacobian matrix ( derivative of a vector-valued function ) . <EoL>
<BoL> Returns a Jordan block with the specified size <EoL>
<BoL> Return ` ( P , J ) ` where ` J ` is a Jordan blockIf ` has_floats ` is ` True ` , cast all ` args ` asCache computations of ( self - val*I ) **pow for quickCalculate the sequence [ 0 , nullity ( E ) , nullity ( E**2 ) , ... ] Return a list of the size of each Jordan block.Picks a vector from big_basis that is n't in <EoL>
<BoL> Converts a key with potentially mixed types of keys ( integer and slice ) <EoL>
<BoL> Converts key into canonical form , converting integers or indexable <EoL>
<BoL> Returns left eigenvectors and eigenvalues . <EoL>
<BoL> Calculate the limit of each element in the matrix . <EoL>
<BoL> Solves Ax = B , where A is a lower triangular matrix . <EoL>
<BoL> Return the ( i , j ) minor of ` self ` . That is , <EoL>
<BoL> Return the submatrix obtained by removing the ` i ` th row <EoL>
<BoL> Returns self*b <EoL>
<BoL> Return the Hadamard product ( elementwise product ) of A and B <EoL>
<BoL> Return the Norm of a Matrix or Vector . <EoL>
<BoL> Return the normalized version of `` self `` . <EoL>
<BoL> Returns list of vectors ( Matrix objects ) that span nullspace of self <EoL>
<BoL> Returns a matrix of ones . <EoL>
<BoL> Apply the Gram-Schmidt orthogonalization procedureprojects vec onto the subspace given <EoL>
<BoL> Permute the rows or columns of a matrix by the given list of swaps . <EoL>
<BoL> Permute the rows of the matrix with the given permutation in reverse . <EoL>
<BoL> Permute the rows of the matrix with the given permutation . <EoL>
<BoL> Alias for ` self.permute ( swaps , orientation='cols ' , direction=direction ) ` <EoL>
<BoL> Alias for ` self.permute ( swaps , orientation='rows ' , direction=direction ) ` <EoL>
<BoL> Calculate the Moore-Penrose pseudoinverse of the matrix . <EoL>
<BoL> Solve Ax = B using the Moore-Penrose pseudoinverse . <EoL>
<BoL> Shows location of non-zero entries for fast shape lookup . <EoL>
<BoL> Return the projection of `` self `` onto the line containing `` v `` . <EoL>
<BoL> Returns the rank of a matrix <EoL>
<BoL> Apply refine to each element of the matrix . <EoL>
<BoL> Replaces Function F in Matrix entries with Function G . <EoL>
<BoL> Reshape the matrix . Total number of elements must remain the same . <EoL>
<BoL> Elementary row selector . <EoL>
<BoL> Delete the specified row . <EoL>
<BoL> Insert one or more rows at the given row position . <EoL>
<BoL> Concatenates two matrices along self 's last and rhs 's first column <EoL>
<BoL> Returns a list of vectors that span the row space of self . <EoL>
<BoL> Return reduced row-echelon form of matrix and indices of pivot vars . <EoL>
<BoL> Compute the singular values of a Matrix <EoL>
<BoL> Return solution to self*soln = rhs using given inversion method . <EoL>
<BoL> Return the least-square fit to the data . <EoL>
<BoL> Return a new matrix with subs applied to each entry . <EoL>
<BoL> Return the Matrix as a nested Python list . <EoL>
<BoL> Returns the trace of a square matrix i.e . the sum of the <EoL>
<BoL> Returns the transpose of the matrix . <EoL>
<BoL> Solves Ax = B , where A is an upper triangular matrix . <EoL>
<BoL> Return non-zero values of self . <EoL>
<BoL> Return the Matrix converted into a one column matrix by stacking columns <EoL>
<BoL> Return the unique elements of a symmetric Matrix as a one column matrix <EoL>
<BoL> Return a matrix formed by joining args vertically ( i.e . <EoL>
<BoL> Return a new matrix with xreplace applied to each entry . <EoL>
<BoL> Returns a matrix of zeros . <EoL>
<BoL> Returns the LDL Decomposition ( matrices `` L `` and `` D `` ) of matrix <EoL>
<BoL> Algorithm for numeric LDL factization , exploiting sparse structure . <EoL>
<BoL> Algorithm for numeric Cholesky factorization of a sparse matrix . <EoL>
<BoL> If ` other ` is a SparseMatrix , add efficiently . Otherwise , <EoL>
<BoL> Return the matrix inverse using Cholesky or LDL ( default ) <EoL>
<BoL> Fast multiplication exploiting the sparsity of the matrix . <EoL>
<BoL> Returns the transposed SparseMatrix of this SparseMatrix . <EoL>
<BoL> Fast algorithm for solving a lower-triangular system , <EoL>
<BoL> Fast algorithm for solving an upper-triangular system , <EoL>
<BoL> Apply a function to each element of the matrix . <EoL>
<BoL> Returns an Immutable version of this Matrix . <EoL>
<BoL> Returns a mutable version of this matrix . <EoL>
<BoL> Returns the Cholesky decomposition L of a matrix A <EoL>
<BoL> Returns a column-sorted list of non-zero elements of the matrix . <EoL>
<BoL> Liu 's algorithm , for pre-determination of the Elimination Tree of <EoL>
<BoL> Returns the number of non-zero elements in Matrix . <EoL>
<BoL> Returns a row-sorted list of non-zero elements of the matrix . <EoL>
<BoL> Symbolic cholesky factorization , for pre-determination of the <EoL>
<BoL> Return solution to self*soln = rhs using given inversion method . <EoL>
<BoL> Return the least-square fit to the data . <EoL>
<BoL> Get an element from a sparse N-dim array . <EoL>
<BoL> Converts MutableDenseNDimArray to Matrix . Can convert only 2-dim array , else will raise error . <EoL>
<BoL> Return a sparse N-dim array of zeros . <EoL>
<BoL> Tries to do some simplifications on self**expt <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational <EoL>
<BoL> Closest Rational to self with denominator at most max_denominator . <EoL>
<BoL> Create an unevaluated integral . <EoL>
<BoL> Evaluate the derivative of the current Integral object by <EoL>
<BoL> Perform substitutions over non-dummy variables <EoL>
<BoL> Replace instances of the given dummy variables with explicit dummy <EoL>
<BoL> Approximates a definite integral by a sum . <EoL>
<BoL> Perform the integration using any hints given . <EoL>
<BoL> Compute the Cauchy Principal Value of the definite integral of a real function in the given interval <EoL>
<BoL> r '' '' '' replace d with a , using subs if possible , otherwise limitreplace d with a , using subs if possible , otherwise limit <EoL>
<BoL> Rewrite an Intersection in terms of equalities and logic operators <EoL>
<BoL> Return an interval not including the left boundary . <EoL>
<BoL> Return an interval not including the right boundary . <EoL>
<BoL> Rewrite an interval in terms of inequalities and logic operators . <EoL>
<BoL> Return an interval including neither boundary . <EoL>
<BoL> Returns the index which is preferred to keep in the final expression . <EoL>
<BoL> Evaluates the discrete delta function . <EoL>
<BoL> Determine whether two matrices have the appropriate structure to bring matrix <EoL>
<BoL> Determine whether two matrices have the same Kronecker product structure <EoL>
<BoL> Return the leading coefficient of `` f `` . <EoL>
<BoL> Return the leading monomial of `` f `` . <EoL>
<BoL> Return the leading term of `` f `` . <EoL>
<BoL> Return the first derivative of this function . <EoL>
<BoL> Evaluates limit <EoL>
<BoL> Return a definitive answer or else raise an error if it can not <EoL>
<BoL> Test whether the point ` other ` lies in the positive span of ` self ` . <EoL>
<BoL> Return the non-reflex angle formed by rays emanating from <EoL>
<BoL> A parameterized point on the Line . <EoL>
<BoL> Is a sequence of linear entities concurrent ? <EoL>
<BoL> Return True if ` other ` is on this Line , or False otherwise . <EoL>
<BoL> Finds the shortest distance between a line and a point . <EoL>
<BoL> Returns True if self and other are the same mathematical entities <EoL>
<BoL> The intersection with another geometrical entity . <EoL>
<BoL> Are two linear entities parallel ? <EoL>
<BoL> Are two linear entities perpendicular ? <EoL>
<BoL> Return True if self and other are contained in the same line . <EoL>
<BoL> Create a new Line parallel to this linear entity which passes <EoL>
<BoL> Create a new Line perpendicular to this linear entity which passes <EoL>
<BoL> Create a perpendicular line segment from ` p ` to this line . <EoL>
<BoL> The plot interval for the default geometric plot of line . Gives <EoL>
<BoL> Project a point , line , ray , or segment onto this linear entity . <EoL>
<BoL> A random point on a LinearEntity . <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Scale the object by multiplying the x , y-coordinates by x and y . <EoL>
<BoL> Return the smallest angle formed at the intersection of the <EoL>
<BoL> Returns SVG path element for the LinearEntity . <EoL>
<BoL> The equation of the line : ax + by + c . <EoL>
<BoL> Create a new Line perpendicular to this linear entity which passes <EoL>
<BoL> Return the equations that define the line in 3D . <EoL>
<BoL> Examples <EoL>
<BoL> Delete the given column . <EoL>
<BoL> In-place operation on col j using two-arg functor whose args are <EoL>
<BoL> Swap the two given columns of the matrix in-place . <EoL>
<BoL> Copy in elements from a list . <EoL>
<BoL> Copy in values from a matrix into the given bounds . <EoL>
<BoL> Fill the matrix with the scalar value . <EoL>
<BoL> Delete the given row . <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are <EoL>
<BoL> Swap the two given rows of the matrix in-place . <EoL>
<BoL> Applies simplify to the elements of a matrix in place . <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are <EoL>
<BoL> Implementations of __getitem__ should accept ints , in which <EoL>
<BoL> ` _new ` must , at minimum , be callable as <EoL>
<BoL> Remove redundant args . <EoL>
<BoL> Sequentially allocate values to localzeros . <EoL>
<BoL> Check if x and y are connected somehow . <EoL>
<BoL> Generator filtering args . <EoL>
<BoL> Try to return p % q if both are numbers or +/-p is known <EoL>
<BoL> Convert a monomial instance to a SymPy expression . <EoL>
<BoL> Greatest common divisor of monomials . <EoL>
<BoL> Least common multiple of monomials . <EoL>
<BoL> Returns lhs/rhs , but treats arguments like symbols , so things like <EoL>
<BoL> Return True if self is positive , False if not , and None if it <EoL>
<BoL> break up powers of eq when treated as a Mul : Put rational back with exponent ; in general this is not ok , butif b divides a in an extractive way ( like 1/4 divides 1/2 <EoL>
<BoL> Helper function for _eval_expand_mul . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Return a dictionary mapping terms to their coefficient . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational <EoL>
<BoL> Transform an expression into an ordered list of factors . <EoL>
<BoL> Return head and tail of self . <EoL>
<BoL> Return commutative , noncommutative and order arguments by <EoL>
<BoL> Allows to set items to MutableDenseNDimArray . <EoL>
<BoL> Assign value to position designated by key . <EoL>
<BoL> Delete the given column of the matrix . <EoL>
<BoL> Returns B augmented beneath A ( row-wise joining ) : : <EoL>
<BoL> In-place operation on col j using two-arg functor whose args are <EoL>
<BoL> Swap , in place , columns i and j . <EoL>
<BoL> Fill self with the given value . <EoL>
<BoL> Delete the given row of the matrix . <EoL>
<BoL> Returns B appended after A ( column-wise augmenting ) : : <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are <EoL>
<BoL> Swap , in place , columns i and j . <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are <EoL>
<BoL> Allows to set items to MutableDenseNDimArray . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Rewrite logic operators and relationals in terms of real sets . <EoL>
<BoL> Evaluation of mpf tuple accurate to at least prec bits . <EoL>
<BoL> Return an interval with number_cls endpoints <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Resolve the order of options ' processing . <EoL>
<BoL> Clone `` self `` and update specified options . <EoL>
<BoL> The POSform function uses simplified_pairs and a redundant-group <EoL>
<BoL> The equation of the parabola . <EoL>
<BoL> The intersection of the parabola and another geometrical entity ` o ` . <EoL>
<BoL> Return the truth value of the condition . <EoL>
<BoL> Return the indefinite integral of the <EoL>
<BoL> Evaluates the function along the sym in a given interval [ a , b ] <EoL>
<BoL> Return either None ( if the conditions of self depend only on x ) else <EoL>
<BoL> Return a list of unique tuples , ( a , b , e , i ) , where a and b <EoL>
<BoL> Return tuples for each argument of self that give <EoL>
<BoL> Evaluate this piecewise function . <EoL>
<BoL> Either return a modified version of the args or , if no <EoL>
<BoL> Return the Piecewise with each expression being <EoL>
<BoL> Angle between the plane and other geometric entity . <EoL>
<BoL> Returns an arbitrary point on the Plane . If given two <EoL>
<BoL> Is a sequence of Planes concurrent ? <EoL>
<BoL> Distance between the plane and another geometric entity . <EoL>
<BoL> Returns True if self and o are the same mathematical entities . <EoL>
<BoL> The equation of the Plane . <EoL>
<BoL> The intersection with other geometrical entity . <EoL>
<BoL> Returns True if ` o ` is coplanar with self , else False . <EoL>
<BoL> Is the given geometric entity parallel to the plane ? <EoL>
<BoL> is the given geometric entity perpendicualar to the given plane ? <EoL>
<BoL> Plane parallel to the given plane and passing through the point pt . <EoL>
<BoL> Return the parameter ( s ) corresponding to the given point . <EoL>
<BoL> A line perpendicular to the given plane . <EoL>
<BoL> Return a perpendicular passing through the given points . If the <EoL>
<BoL> Project the given point onto the plane along the plane normal . <EoL>
<BoL> Project the given line onto the plane through the normal plane <EoL>
<BoL> Returns a random point on the Plane . <EoL>
<BoL> Returns the distance between this point and the origin . <EoL>
<BoL> Add other to self by incrementing self 's coordinates by <EoL>
<BoL> Divide point 's coordinates by a factor . <EoL>
<BoL> Multiply point 's coordinates by a factor . <EoL>
<BoL> Negate the point . <EoL>
<BoL> Subtract two points , or subtract a factor from this point 's <EoL>
<BoL> Ensure that points have the same dimension . <EoL>
<BoL> The affine rank of a set of points is the dimension <EoL>
<BoL> Return True if there exists a plane in which all the points <EoL>
<BoL> The Canberra Distance from self to point p . <EoL>
<BoL> The Euclidean distance from self to point p . <EoL>
<BoL> Return dot product of self with another Point . <EoL>
<BoL> Returns whether the coordinates of self and other agree . <EoL>
<BoL> Evaluate the coordinates of the point . <EoL>
<BoL> The intersection between this point and another GeometryEntity . <EoL>
<BoL> Returns ` True ` if there exists a line <EoL>
<BoL> Do ` self ` and the given sequence of points lie in a circle ? <EoL>
<BoL> Returns whether each coordinate of ` self ` is a scalar <EoL>
<BoL> The midpoint between self and point p . <EoL>
<BoL> Project the point ` a ` onto the line between the origin <EoL>
<BoL> The Taxicab Distance from self to point p . <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Scale the coordinates of the Point by multiplying by <EoL>
<BoL> Return the point after applying the transformation described <EoL>
<BoL> Shift the Point by adding x and y to the coordinates of the Point . <EoL>
<BoL> Is a sequence of points collinear ? <EoL>
<BoL> Gives the direction cosine between 2 points <EoL>
<BoL> Gives the direction ratio between 2 points <EoL>
<BoL> The intersection between this point and another point . <EoL>
<BoL> Scale the coordinates of the Point by multiplying by <EoL>
<BoL> Return the point after applying the transformation described <EoL>
<BoL> Shift the Point by adding x and y to the coordinates of the Point . <EoL>
<BoL> Returns the last non-zero coefficient of `` f `` . <EoL>
<BoL> Returns the last non-zero monomial of `` f `` . <EoL>
<BoL> Returns the last non-zero term of `` f `` . <EoL>
<BoL> Returns the leading coefficient of `` f `` . <EoL>
<BoL> Returns the leading monomial of `` f `` . <EoL>
<BoL> Returns the leading term of `` f `` . <EoL>
<BoL> Returns the trailing coefficient of `` f `` . <EoL>
<BoL> Evaluate `` f `` at the give values . <EoL>
<BoL> Create a new polynomial instance out of something useful . <EoL>
<BoL> Computes partial derivative of `` f `` . <EoL>
<BoL> Internal implementation of : func : ` subs ` . <EoL>
<BoL> Construct a polynomial from a `` dict `` . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Construct a polynomial from a `` list `` . <EoL>
<BoL> Construct a polynomial from a polynomial . <EoL>
<BoL> Returns level associated with the given generator . <EoL>
<BoL> Allow SymPy to hash Poly instances . <EoL>
<BoL> Make all coefficients in `` f `` positive . <EoL>
<BoL> Add two polynomials `` f `` and `` g `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns all coefficients from a univariate polynomial `` f `` . <EoL>
<BoL> Returns all monomials from a univariate polynomial `` f `` . <EoL>
<BoL> Return a list of real and complex roots with multiplicities . <EoL>
<BoL> Returns all terms from a univariate polynomial `` f `` . <EoL>
<BoL> Switch to a `` dict `` representation . <EoL>
<BoL> Convert a Poly instance to an Expr instance . <EoL>
<BoL> Switch to a `` list `` representation . <EoL>
<BoL> Cancel common factors in a rational function `` f/g `` . <EoL>
<BoL> Clear denominators , but keep the ground domain . <EoL>
<BoL> Returns the coefficient of `` monom `` in `` f `` if there , else None . <EoL>
<BoL> Returns all non-zero coefficients from `` f `` in lex order . <EoL>
<BoL> Returns the GCD of `` f `` and `` g `` and their cofactors . <EoL>
<BoL> Computes the functional composition of `` f `` and `` g `` . <EoL>
<BoL> Returns the GCD of polynomial coefficients . <EoL>
<BoL> Return the number of roots of `` f `` in `` [ inf , sup ] `` interval . <EoL>
<BoL> Computes a functional decomposition of `` f `` . <EoL>
<BoL> Reduce degree of `` f `` by mapping `` x_i**m `` to `` y_i `` . <EoL>
<BoL> Returns degree of `` f `` in `` x_j `` . <EoL>
<BoL> Returns a list of degrees of `` f `` . <EoL>
<BoL> Computes the discriminant of `` f `` . <EoL>
<BoL> r '' '' '' Compute the *dispersion* of polynomials . <EoL>
<BoL> r '' '' '' Compute the *dispersion set* of two polynomials . <EoL>
<BoL> Polynomial division with remainder of `` f `` by `` g `` . <EoL>
<BoL> Eject selected generators into the ground domain . <EoL>
<BoL> Evaluate `` f `` at `` a `` in the given variable . <EoL>
<BoL> Remove unnecessary generators from `` f `` . <EoL>
<BoL> Computes polynomial exact quotient of `` f `` by `` g `` . <EoL>
<BoL> Exact quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Construct a polynomial from a `` dict `` . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Construct a polynomial from a `` list `` . <EoL>
<BoL> Construct a polynomial from a polynomial . <EoL>
<BoL> Returns the polynomial GCD of `` f `` and `` g `` . <EoL>
<BoL> Extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> Get the ground domain of `` f `` . <EoL>
<BoL> Get the modulus of `` f `` . <EoL>
<BoL> Computes greatest factorial factorization of `` f `` . <EoL>
<BoL> Compute roots of `` f `` by factorization in the ground domain . <EoL>
<BoL> Half extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> Return `` True `` if `` Poly ( f , *gens ) `` retains ground domain . <EoL>
<BoL> Returns the homogeneous order of `` f `` . <EoL>
<BoL> Returns the homogeneous polynomial of `` f `` . <EoL>
<BoL> Inject ground domain generators into `` f `` . <EoL>
<BoL> Computes indefinite integral of `` f `` . <EoL>
<BoL> Compute isolating intervals for roots of `` f `` . <EoL>
<BoL> Invert `` f `` modulo `` g `` when possible . <EoL>
<BoL> Returns l1 norm of `` f `` . <EoL>
<BoL> Returns polynomial LCM of `` f `` and `` g `` . <EoL>
<BoL> Returns the number of non-zero terms in `` f `` . <EoL>
<BoL> Convert algebraic coefficients to rationals . <EoL>
<BoL> Remove dummy generators from `` f `` that are to the left of <EoL>
<BoL> Returns maximum norm of `` f `` . <EoL>
<BoL> Divides all coefficients by `` LC ( f ) `` . <EoL>
<BoL> Returns all non-zero monomials from `` f `` in lex order . <EoL>
<BoL> Multiply two polynomials `` f `` and `` g `` . <EoL>
<BoL> Multiply `` f `` by a an element of the ground domain . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Construct : class : ` Poly ` instance from raw representation . <EoL>
<BoL> Computes the product , `` Norm ( f ) `` , of the conjugates of <EoL>
<BoL> Compute numerical approximations of roots of `` f `` . <EoL>
<BoL> Returns the `` n `` -th coefficient of `` f `` where `` N `` are the <EoL>
<BoL> Construct a polynomial with n-th powers of roots of `` f `` . <EoL>
<BoL> Polynomial pseudo-division of `` f `` by `` g `` . <EoL>
<BoL> Create a Poly out of the given representation . <EoL>
<BoL> Polynomial exact pseudo-quotient of `` f `` by `` g `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Polynomial pseudo-quotient of `` f `` by `` g `` . <EoL>
<BoL> Polynomial pseudo-remainder of `` f `` by `` g `` . <EoL>
<BoL> Returns the content and a primitive form of `` f `` . <EoL>
<BoL> Computes polynomial quotient of `` f `` by `` g `` . <EoL>
<BoL> Quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Clear denominators in a rational function `` f/g `` . <EoL>
<BoL> Return a list of real roots with multiplicities . <EoL>
<BoL> Refine an isolating interval of a root to the given precision . <EoL>
<BoL> Computes the polynomial remainder of `` f `` by `` g `` . <EoL>
<BoL> Efficiently apply new order of generators . <EoL>
<BoL> Replace `` x `` with `` y `` in generators list . <EoL>
<BoL> Computes the resultant of `` f `` and `` g `` via PRS . <EoL>
<BoL> Recalculate the ground domain of a polynomial . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` . <EoL>
<BoL> Get an indexed root of a polynomial . <EoL>
<BoL> Set the ground domain of `` f `` . <EoL>
<BoL> Set the modulus of `` f `` . <EoL>
<BoL> Efficiently compute Taylor shift `` f ( x + a ) `` . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Computes square-free norm of `` f `` . <EoL>
<BoL> Computes square-free part of `` f `` . <EoL>
<BoL> Square a polynomial `` f `` . <EoL>
<BoL> Computes the Sturm sequence of `` f `` . <EoL>
<BoL> Subtract two polynomials `` f `` and `` g `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Computes the subresultant PRS of `` f `` and `` g `` . <EoL>
<BoL> Returns all non-zero terms from `` f `` in lex order . <EoL>
<BoL> Remove GCD of terms from the polynomial `` f `` . <EoL>
<BoL> Apply a function to all terms of `` f `` . <EoL>
<BoL> Make the ground domain exact . <EoL>
<BoL> Make the ground domain a field . <EoL>
<BoL> Make the ground domain a ring . <EoL>
<BoL> Returns the total degree of `` f `` . <EoL>
<BoL> Efficiently evaluate the functional transformation `` q**n * f ( p/q ) `` . <EoL>
<BoL> Reduce `` f `` modulo a constant `` p `` . <EoL>
<BoL> Make `` f `` and `` g `` belong to the same domain . <EoL>
<BoL> Return True if o is contained within the boundary lines of self.altitudes <EoL>
<BoL> Calculates the least distance between the exteriors of twoTests for a possible intersection between the polygons and outputs a warningFind the upper rightmost vertex of e1 and the lowest leftmost vertex of e2Produce a dictionary with vertices of e1 as the keys and , for each vertex , the pointsDetermine which point in e1 and e2 will be selected after e2_ymin and e1_ymax , Loop which determines the distance between anti-podal pairs and updates the <EoL>
<BoL> Return True/False for cw/ccw orientation . <EoL>
<BoL> Returns SVG path element for the Polygon . <EoL>
<BoL> A parameterized point on the polygon . <EoL>
<BoL> Returns the shortest distance between self and o . <EoL>
<BoL> Return True if p is enclosed by ( is inside of ) self . <EoL>
<BoL> The intersection of polygon and geometry entity . <EoL>
<BoL> Is the polygon convex ? <EoL>
<BoL> The plot interval for the default geometric plot of the polygon . <EoL>
<BoL> Returns the second moment and product moment of area of a two dimensional polygon . <EoL>
<BoL> Returns ` True ` if two domains are equivalent . <EoL>
<BoL> Returns factorial of ` a ` . <EoL>
<BoL> Convert an algebraic number to `` dtype `` . <EoL>
<BoL> Convert a rational function to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's expression to ` dtype ` . <EoL>
<BoL> Returns GCD of ` a ` and ` b ` . <EoL>
<BoL> Extended GCD of ` a ` and ` b ` . <EoL>
<BoL> Returns a field associated with ` self ` . <EoL>
<BoL> Returns True if ` LC ( a ) ` is negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-positive . <EoL>
<BoL> Returns True if ` LC ( a ) ` is positive . <EoL>
<BoL> Returns LCM of ` a ` and ` b ` . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> ( a + b + .. ) **n - > a**n + n*a** ( n-1 ) *b + .. , n is nonzero integer <EoL>
<BoL> ( a*b ) **n - > a**n * b**n <EoL>
<BoL> a** ( n + m ) - > a**n*a**m <EoL>
<BoL> A power is composite if both base and exponent are greater than 1 <EoL>
<BoL> An integer raised to the n ( > =2 ) -th power can not be a prime . <EoL>
<BoL> return the integer value ( if possible ) of e and a <EoL>
<BoL> Return True if the exponent has a literal 2 as theReturn `` e `` evaluated to a Number with 2 significant <EoL>
<BoL> Return ( bool , pow , remainder_pow ) where , if bool is True , then the <EoL>
<BoL> Return base and exp of self . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational <EoL>
<BoL> Evaluate self ( expr ) under the given assumptions . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return the index of a dummy variable in the list of limits . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Reorder limits in a expression containing a Sum or a Product . <EoL>
<BoL> Interchange two limit tuples of a Sum or Product expression . <EoL>
<BoL> Reverse the order of a limit in a Product . <EoL>
<BoL> A method which implements is_iterable property method . <EoL>
<BoL> 'in ' operator for ProductSets <EoL>
<BoL> Allow SymPy to hash Poly instances . <EoL>
<BoL> Allow instantiation of this domain . <EoL>
<BoL> Compute factorial of `` a `` . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to Python 's `` int `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to Python 's `` int `` . <EoL>
<BoL> Convert GMPY 's `` mpq `` to Python 's `` int `` . <EoL>
<BoL> Convert Python 's `` Fraction `` to Python 's `` int `` . <EoL>
<BoL> Convert mpmath 's `` mpf `` to Python 's `` int `` . <EoL>
<BoL> Convert GMPY 's `` mpz `` to Python 's `` int `` . <EoL>
<BoL> Convert Python 's `` int `` to Python 's `` int `` . <EoL>
<BoL> Convert SymPy 's Integer to `` dtype `` . <EoL>
<BoL> Compute GCD of `` a `` and `` b `` . <EoL>
<BoL> Compute extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Compute LCM of `` a `` and `` b `` . <EoL>
<BoL> Compute square root of `` a `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Returns denominator of ` a ` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's Rational to ` dtype ` . <EoL>
<BoL> Returns ring associated with `` self `` . <EoL>
<BoL> Returns numerator of ` a ` . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> Returns the conjugate of the quaternion . <EoL>
<BoL> Returns the natural logarithm of the quaternion ( _ln ( q ) ) . <EoL>
<BoL> Adds quaternions . <EoL>
<BoL> Returns the exponential of q ( e^q ) . <EoL>
<BoL> Returns a rotation quaternion given the axis and the angle of rotation . <EoL>
<BoL> Returns the equivalent quaternion of a matrix . The quaternion will be normalized <EoL>
<BoL> Returns the inverse of the quaternion . <EoL>
<BoL> Multiplies quaternions . <EoL>
<BoL> Returns the norm of the quaternion . <EoL>
<BoL> Returns the normalized form of the quaternion . <EoL>
<BoL> Finds the pth power of the quaternion . <EoL>
<BoL> Computes the pth power in the cos-sin form . <EoL>
<BoL> Returns the coordinates of the point pin ( a 3 tuple ) after rotation . <EoL>
<BoL> Returns the axis and angle of rotation of a quaternion <EoL>
<BoL> Returns the equivalent rotation transformation matrix of the quaternion <EoL>
<BoL> Returns SVG path element for the LinearEntity . <EoL>
<BoL> Is other GeometryEntity contained in this Ray ? <EoL>
<BoL> Finds the shortest distance between the ray and a point . <EoL>
<BoL> Returns True if self and other are the same mathematical entities <EoL>
<BoL> The plot interval for the default geometric plot of the Ray . Gives <EoL>
<BoL> Return the angle by which r2 must be rotated so it faces the same <EoL>
<BoL> Check if `` a `` and `` b `` are almost equal . <EoL>
<BoL> Convert SymPy 's number to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns an exact domain associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Convert a real number to rational number . <EoL>
<BoL> Convert `` element `` to SymPy number . <EoL>
<BoL> Return True if p is enclosed by ( is inside of ) self . <EoL>
<BoL> Override GeometryEntity.reflect since this is not made of only <EoL>
<BoL> Override GeometryEntity.rotate to first rotate the RegularPolygon <EoL>
<BoL> Override GeometryEntity.scale since it is the radius that must be <EoL>
<BoL> Increment *in place* the virtual Polygon 's rotation by ccw angle . <EoL>
<BoL> Construct a new `` CRootOf `` object for `` k `` -th root of `` f `` . <EoL>
<BoL> Construct a new `` RootSum `` instance of roots of a polynomial . <EoL>
<BoL> Check if a lambda is a rational function . <EoL>
<BoL> Construct new raw `` RootSum `` instance . <EoL>
<BoL> Handle the rational function case . <EoL>
<BoL> Transform an expression to a polynomial . <EoL>
<BoL> Construct new `` RootSum `` instance . <EoL>
<BoL> The SOPform function uses simplified_pairs and a redundant group- <EoL>
<BoL> Is the other GeometryEntity contained within this Segment ? <EoL>
<BoL> Finds the shortest distance between a line segment and a point . <EoL>
<BoL> Returns True if self and other are the same mathematical entities <EoL>
<BoL> The perpendicular bisector of this segment . <EoL>
<BoL> The plot interval for the default geometric plot of the Segment gives <EoL>
<BoL> Returns SVG path element for the LinearEntity . <EoL>
<BoL> adds up the coefficients of all the sequences at point pt <EoL>
<BoL> Should be used when `` other `` is not a sequence . Should be <EoL>
<BoL> Simplify : class : ` SeqAdd ` using known rules . <EoL>
<BoL> See docstring of SeqBase._add <EoL>
<BoL> See docstring of SeqBase._mul <EoL>
<BoL> See docstring of SeqBase.coeff_mul <EoL>
<BoL> multiplies the coefficients of all the sequences at point pt <EoL>
<BoL> Simplify a : class : ` SeqMul ` using known rules . <EoL>
<BoL> See docstring of SeqBase._add <EoL>
<BoL> See docstring of SeqBase._mul <EoL>
<BoL> See docstring of SeqBase.coeff_mul <EoL>
<BoL> Return the nth prime number <EoL>
<BoL> Reset all caches ( default ) . To reset one or more set the <EoL>
<BoL> Grow the sieve to cover all primes < = n ( a real number ) . <EoL>
<BoL> Extend to include the ith prime number . <EoL>
<BoL> Generate all mobius numbers for the range [ a , b ) . <EoL>
<BoL> Generate all prime numbers in the range [ a , b ) . <EoL>
<BoL> Return the indices i , j of the primes that bound n . <EoL>
<BoL> Generate all totient numbers for the range [ a , b ) . <EoL>
<BoL> Rewrites a Singularity Function expression using Heavisides and DiracDeltas . <EoL>
<BoL> Converts a Singularity Function expression into its Piecewise form . <EoL>
<BoL> Returns a simplified form or a value of Singularity Function depending on the <EoL>
<BoL> Returns the first derivative of a DiracDelta Function . <EoL>
<BoL> A compatibility function for ordering terms in Add . <EoL>
<BoL> Internal dispatcher <EoL>
<BoL> Returns printer 's representation for expr ( as a string ) <EoL>
<BoL> Set system-wide printing settings . <EoL>
<BoL> Differentiate wrt x as long as x is not in the free symbols of any of <EoL>
<BoL> Return an Euler-Maclaurin approximation of self , where m is the <EoL>
<BoL> Check whether the function matches with the zeta function . <EoL>
<BoL> Checks for the absolute convergence of an infinite series . <EoL>
<BoL> r '' '' '' Checks for the convergence of a Sum . <EoL>
<BoL> Reverse the order of a limit in a Sum . <EoL>
<BoL> Creates a TableForm . <EoL>
<BoL> Returns the string representation of 'self ' . <EoL>
<BoL> Returns the string representation of 'self ' . <EoL>
<BoL> Returns the data of the table in Matrix form . <EoL>
<BoL> The angle bisectors of the triangle . <EoL>
<BoL> Are all the sides the same length ? <EoL>
<BoL> Are two or more of the sides the same length ? <EoL>
<BoL> Is the triangle right-angled . <EoL>
<BoL> Are all the sides of the triangle of different lengths ? <EoL>
<BoL> Is another triangle similar to this one . <EoL>
<BoL> T.index ( value , [ start , [ stop ] ] ) - > integer -- return first index of value . <EoL>
<BoL> T.count ( value ) - > integer -- return number of occurrences of value <EoL>
<BoL> Rewrite a Union in terms of equalities and logic operators . <EoL>
<BoL> r '' '' '' Conjugate spherical harmonics defined as <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Return True if all args are True , None if there is any None else False <EoL>
<BoL> Return `` coeff*factors `` unevaluated if necessary . <EoL>
<BoL> Return a well-formed unevaluated Add : Numbers are collected and <EoL>
<BoL> Not in fuzzy logic <EoL>
<BoL> Or in fuzzy logic . Returns True ( any True ) , False ( all False ) , or None <EoL>
<BoL> Computes nonnegative integer greatest common divisor . <EoL>
<BoL> Computes integer least common multiple . <EoL>
<BoL> Return a boolean indicating whether `` i `` is a sequence in the SymPy <EoL>
<BoL> Return product of elements of a . Start with int 1 so if only <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Express cos ( pi/257 ) explicitly as a function of radicals <EoL>
<BoL> Differentiate f with respect to symbols . <EoL>
<BoL> exp ( arg ) **e - > exp ( arg*e ) if assumptions allow it . <EoL>
<BoL> Returns the 2-tuple ( base , exponent ) . <EoL>
<BoL> Returns this with a positive exponent as a 2-tuple ( a fraction ) . <EoL>
<BoL> Returns this function as a 2-tuple representing a complex number . <EoL>
<BoL> Returns the first derivative of this function . <EoL>
<BoL> Returns the inverse function of `` exp ( x ) `` . <EoL>
<BoL> Calculates the next term in the Taylor series expansion . <EoL>
<BoL> Return the imaginary part with a zero real part . <EoL>
<BoL> integrate ( f , var , ... ) <EoL>
<BoL> Returns this function in the form ( base , exponent ) . <EoL>
<BoL> Returns this function as a complex coordinate . <EoL>
<BoL> Returns the first derivative of the function . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns the real number with a zero imaginary part . <EoL>
<BoL> The square root function <EoL>
<BoL> r '' '' '' <EoL>
<BoL> reduces expression by using known trig identities <EoL>
<BoL> Compute partial fraction decomposition of a rational function . <EoL>
<BoL> Compute partial fraction decomposition of a rational function <EoL>
<BoL> Calculates the finite difference approximation of <EoL>
<BoL> Are two geometrical entities similar . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Permutes the indices of an array . <EoL>
<BoL> Contraction of an array-like object on the specified axes . <EoL>
<BoL> Tensor product among scalars or array-like objects . <EoL>
<BoL> Short version of sympify for internal usage for __add__ and __eq__ methods <EoL>
<BoL> Returns an approximation of a derivative of a function in <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Method for inferring properties about objects . <EoL>
<BoL> r '' '' '' Reassemble a full partial fraction decomposition <EoL>
<BoL> Context manager for assumptions <EoL>
<BoL> Convert a string version of a class name to the object . <EoL>
<BoL> Simplify an expression using assumptions . <EoL>
<BoL> Register a handler in the ask system . key must be a string and handler a <EoL>
<BoL> Removes a handler from the ask system . Same syntax as register_handler <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Return True if a and b are structurally the same , else False . <EoL>
<BoL> Return atom-like quantities as far as substitution is <EoL>
<BoL> Convert the argument of Basic.find ( ) into a callable <EoL>
<BoL> Return expr as a Basic instance using strict sympify <EoL>
<BoL> Return a boolean indicating whether `` i `` is SymPy iterable . <EoL>
<BoL> Return an iterator of the seq where keys are used to break ties in <EoL>
<BoL> Skip yielding current node 's ( last yielded node 's ) subtrees . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Simplify bessel-type functions . <EoL>
<BoL> Function to expand binomial ( n , k ) when m is positive integer <EoL>
<BoL> Return a dictionary containing pairs : math : ` { ( k1 , k2 ) : C_kn } ` where <EoL>
<BoL> Return a list of binomial coefficients as rows of the Pascal 's <EoL>
<BoL> process the generators of `` poly `` , returning the set of generators that <EoL>
<BoL> Return tuple ( i , d ) where `` i `` is independent of `` symbols `` and `` d `` <EoL>
<BoL> Given an expression assumed to be in the form <EoL>
<BoL> Return `` a , b , X `` assuming `` arg `` can be written as `` a*X + b `` <EoL>
<BoL> Returns the term in lhs which contains the most of the <EoL>
<BoL> Return solution to `` f `` if it is a Lambert-type expression <EoL>
<BoL> Given an expression , f , 3 tests will be done to see what type <EoL>
<BoL> Collect additive terms of an expression.Parses expression expr and outputs tuple ( sexpr , rat_expo , Parse terms searching for a pattern . <EoL>
<BoL> Wrapper around expand that only uses the log hint . See the expand <EoL>
<BoL> Compute the factorization of expression , `` f `` , into irreducibles . ( To <EoL>
<BoL> root ( x , n , k ) - > Returns the k-th n-th root of x , defaulting to the <EoL>
<BoL> Separates variables in an expression , if possible . By <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Evaluates a block matrix expression <EoL>
<BoL> Cut a matrix expression into Blocks <EoL>
<BoL> Return the simplified version of bool1 , and the mapping of variablesReturn the mapping that equates variables between two <EoL>
<BoL> Rewrite logic operators and relationals in terms of real sets . <EoL>
<BoL> Rewrite logic operators and relationals in terms of real sets . <EoL>
<BoL> Generator filtering args <EoL>
<BoL> Checks if a pair of minterms differs by only one bit . If yes , returns <EoL>
<BoL> Return True if a binary term is satisfied by the given term . Used <EoL>
<BoL> Converts a term in the expansion of a function from binary to its <EoL>
<BoL> Converts a term in the expansion of a function from binary to its <EoL>
<BoL> Distributes info [ 1 ] over info [ 2 ] with respect to info [ 0 ] . <EoL>
<BoL> Helper to find logical predicates in BooleanFunctions . <EoL>
<BoL> Assign a 5-item fingerprint to each symbol in the equation : <EoL>
<BoL> Test whether or not an expression is of the required form . <EoL>
<BoL> After the truth table has been sufficiently simplified , use the prime <EoL>
<BoL> Reduces a set of minterms , if possible , to a simplified set of minterms <EoL>
<BoL> Like bool , return the Boolean value of an expression , e , <EoL>
<BoL> Convert the argument to a builtin integer . <EoL>
<BoL> Return a list of the conjuncts in the expr s . <EoL>
<BoL> Return a list of the disjuncts in the sentence s . <EoL>
<BoL> Given a sentence s consisting of conjunctions and disjunctions <EoL>
<BoL> Given a sentence s consisting of conjunctions and disjunctions <EoL>
<BoL> Change > > , < < , and Equivalent into & , | , and ~ . That is , return an <EoL>
<BoL> Strips leading and trailing empty lines from a copy of ` s ` , then dedents , <EoL>
<BoL> Return a list of the base-2 digits in the integer , `` k `` . <EoL>
<BoL> Test whether or not an expression is in conjunctive normal form . <EoL>
<BoL> Test whether or not an expression is in disjunctive normal form . <EoL>
<BoL> Returns True if expr is a literal , else False . <EoL>
<BoL> Checks if expr is in Negation Normal Form . <EoL>
<BoL> This function simplifies a boolean function to its simplified version <EoL>
<BoL> Return an integer corresponding to the base-2 digits given by `` term `` . <EoL>
<BoL> Convert a propositional logical sentence s to conjunctive normal form . <EoL>
<BoL> Convert a propositional logical sentence s to disjunctive normal form . <EoL>
<BoL> Takes clauses in CNF format and puts them into an integer representation . <EoL>
<BoL> Converts expr to Negation Normal Form . <EoL>
<BoL> Return a generator of all possible configurations of the input variables , <EoL>
<BoL> Apply `` F `` to all expressions in an expression tree from the <EoL>
<BoL> The ` n ` -th B-spline at ` x ` of degree ` d ` with knots . <EoL>
<BoL> Return the `` len ( knots ) -d-1 `` B-splines at `` x `` of degree `` d `` <EoL>
<BoL> caching decorator . <EoL>
<BoL> cacheit + code to check cache consistency <EoL>
<BoL> clear cache content <EoL>
<BoL> print cache info <EoL>
<BoL> Least-recently-used cache decorator . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> This is a decorator which can be used to mark functions <EoL>
<BoL> Calculates the finite difference weights for an arbitrarily spaced <EoL>
<BoL> Return whether the function is decreasing in the given interval . <EoL>
<BoL> Return whether the function is increasing in the given interval . <EoL>
<BoL> Return whether the function is monotonic in the given interval . <EoL>
<BoL> Return whether the function is strictly decreasing in the given interval . <EoL>
<BoL> Return whether the function is strictly increasing in the given interval . <EoL>
<BoL> Finds the domain of the functions in ` finite_set ` in which theFinds the domain of an expression in any given interval <EoL>
<BoL> Tests the given function for periodicity in the given symbol.Return the checked period or raise an error . <EoL>
<BoL> Find singularities of a given function . <EoL>
<BoL> Helper for periodicity to find the period of a list of simpler <EoL>
<BoL> decorator to smartly _sympify function arguments <EoL>
<BoL> Returns the intervals in the given domain for which the function <EoL>
<BoL> Finds the range of a function in a given domain . <EoL>
<BoL> Returns the least common integral multiple of a list of numbers . <EoL>
<BoL> Compute LCM of a list of polynomials . <EoL>
<BoL> Compute the limit of `` e ( z ) `` at the point `` z0 `` . <EoL>
<BoL> Denest and combine rational expressions using symbolic methods . <EoL>
<BoL> Cancel common factors in a rational function `` f `` . <EoL>
<BoL> Return the printed output of func ( ) . <EoL>
<BoL> Given linear difference operator L of order 'k ' and homogeneous <EoL>
<BoL> This function computes the principal cube root of ` arg ` , so <EoL>
<BoL> Converts an expr to a string of c code <EoL>
<BoL> Find the centroid ( center of mass ) of the collection containing only Points , <EoL>
<BoL> Generates Chebyshev polynomial of the first kind of degree ` n ` in ` x ` . <EoL>
<BoL> Generates Chebyshev polynomial of the second kind of degree ` n ` in ` x ` . <EoL>
<BoL> Checks whether expression ` expr ` satisfies all assumptions . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Checks if the given solution satisfies the partial differential <EoL>
<BoL> Checks whether sol is a solution of equation f == 0 . <EoL>
<BoL> r '' '' '' r '' '' '' <EoL>
<BoL> Returns a tuple of possible pdsolve ( ) classifications for a PDE . <EoL>
<BoL> Return the subset of points from a set of points that were <EoL>
<BoL> Check arguments to __new__ and raise exception if any problems found . <EoL>
<BoL> Construct an attribute value from argument passed to `` __new__ ( ) `` . <EoL>
<BoL> Create a Sympy Tuple object from an iterable , converting Python strings to <EoL>
<BoL> Get the constructor function for an attribute by name . <EoL>
<BoL> Get instance 's attributes as dict of keyword arguments . <EoL>
<BoL> Return a CodeBlock with topologically sorted assignments so that <EoL>
<BoL> Returns the parameters of the Attribute with name `` looking_for `` in self.attrs <EoL>
<BoL> Convenience method for creating a Declaration instance . <EoL>
<BoL> Alt . constructor with type deduction from `` Type.from_expr `` . <EoL>
<BoL> Casts a value to the data type of the instance . <EoL>
<BoL> Casts without checking if out of bounds or subnormal . <EoL>
<BoL> Deduces type from an expression or a `` Symbol `` . <EoL>
<BoL> Casts without checking if out of bounds or subnormal . <EoL>
<BoL> Create 'lhs op= rhs ' . <EoL>
<BoL> Class decorator that fills in missing ordering methods <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` allocated ( ... ) '' <EoL>
<BoL> Convenience function for creating a Variable instance for a Fortran array <EoL>
<BoL> Creates an Attribute `` bind_C `` with a name <EoL>
<BoL> Creates a 'dimension ' Attribute with ( up to 7 ) extents . <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` lbound ( ... ) '' <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` reshape ( ... ) '' <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` shape ( ... ) '' <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` size ( ... ) '' <EoL>
<BoL> Compute GCD and cofactors of `` f `` and `` g `` . <EoL>
<BoL> A non-greedy collection of terms with similar number coefficients in <EoL>
<BoL> Return True ( all True ) , False ( any False ) or None . <EoL>
<BoL> for n = ( m1 , m2 , .. , mk ) return the coefficients of the polynomial , <EoL>
<BoL> Computes the nth Fibonacci number as an integer , for <EoL>
<BoL> Return tuple used in permutation and combination counting . Input <EoL>
<BoL> Return the partitions of `` n `` items into `` k `` parts . This <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Wrapper around expand that only uses the mul hint . See the expand <EoL>
<BoL> Return the number of combinations of `` n `` items taken `` k `` at a time . <EoL>
<BoL> Return the number of permutations of `` n `` items taken `` k `` at a time . <EoL>
<BoL> Return the number of `` k `` -sized partitions of `` n `` items . <EoL>
<BoL> Memo decorator for sequences defined by recurrence <EoL>
<BoL> r '' '' '' Return Stirling number ` S ( n , k ) ` of the first or second ( default ) kind . <EoL>
<BoL> The block <EoL>
<BoL> r '' '' '' <EoL>
<BoL> The total number of entries in the matrix . <EoL>
<BoL> Most attribute access is passed straight through <EoL>
<BoL> Ensure that row_slice and col_slice do n't haveReturn the index in _mat corresponding <EoL>
<BoL> If ` mat ` is a Matrix or is matrix-like , <EoL>
<BoL> Simplifies the given expression.Return the choice that has the fewest ops . In case of a tie , <EoL>
<BoL> Return integer after making positive and validating against n . <EoL>
<BoL> A decorator for binary special methods to handle _op_priority . <EoL>
<BoL> Get the type of the result when combining matrices of different types . <EoL>
<BoL> Return a representation ( integer or expression ) of the operations in expr . <EoL>
<BoL> Return a key that can be used for sorting . <EoL>
<BoL> Recursively denest iterable containers . <EoL>
<BoL> Make all Add sub-expressions canonical wrt sign . <EoL>
<BoL> Return a bool indicating whether the error between z1 and z2 is < = tol . <EoL>
<BoL> D.popitem ( ) - > ( k , v ) , remove and return some ( key , value ) pair <EoL>
<BoL> Construct an instance of the class from any iterable input . <EoL>
<BoL> Compute the hash value of a set . <EoL>
<BoL> Add an element . <EoL>
<BoL> This is slow ( creates N new iterators ! ) but effective . <EoL>
<BoL> Remove an element . Do not raise an exception if absent . <EoL>
<BoL> Return the popped value . Raise KeyError if empty . <EoL>
<BoL> Remove an element . If not a member , raise a KeyError . <EoL>
<BoL> A helper for ordered ( ) which returns the node count of `` e `` which <EoL>
<BoL> Get the object wrapped by *func* . <EoL>
<BoL> Compute functional composition `` f ( g ) `` . <EoL>
<BoL> Return the nth composite number , with the composite numbers indexed as <EoL>
<BoL> Return the number of positive composite numbers less than or equal to n . <EoL>
<BoL> Return either a special return value or the tuple , <EoL>
<BoL> Process the list of symbols and convert them to canonical limits , <EoL>
<BoL> Takes an expression containing a piecewise function and returns the <EoL>
<BoL> Sift the sequence , `` seq `` according to `` keyfunc `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Given combinatorial term f ( k ) simplify its consecutive term ratio <EoL>
<BoL> Construct polynomials from expressions . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Remove common factors from terms in all arguments without <EoL>
<BoL> reduces expression by combining powers with similar bases and exponents.Return Rational part of x 's exponent as it appears in the bkey.Return ( b**s , c.q ) , c.p where e - > c*s. If e is not given thenDecide what to do with base , b . If its exponent is now an <EoL>
<BoL> Compute polynomial quotient of `` f `` and `` g `` . <EoL>
<BoL> Computes symbolic roots of a univariate polynomial.Find roots using functional decomposition.Find roots using formulas and some tricks . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns ( res , cond ) . Sums from a to oo . <EoL>
<BoL> r '' '' '' Solves a given inequality or equation with set as output <EoL>
<BoL> Tries to perform the summation using the telescopic property <EoL>
<BoL> Returns the direct summation of the terms of a telescopic sum <EoL>
<BoL> Dispatch function on the types of the inputs <EoL>
<BoL> Return True , False or None according to x . <EoL>
<BoL> Construct a minimal domain for the list of coefficients . <EoL>
<BoL> Decorator that converts any tuple in the function arguments into a Tuple . <EoL>
<BoL> Compute GCD of coefficients of `` f `` . <EoL>
<BoL> Return an iterator over the convergents of a continued fraction ( cf ) . <EoL>
<BoL> Return continued fraction expansion of x as iterator . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Reduce a continued fraction to a rational or quadratic irrational . <EoL>
<BoL> The convex hull surrounding the Points contained in the list of entities.Return positive if p-q-r are clockwise , neg if ccw , zero if <EoL>
<BoL> Performs convolution by determining the type of desired <EoL>
<BoL> Performs linear convolution using Fast Fourier Transform . <EoL>
<BoL> Performs dyadic ( *bitwise-XOR* ) convolution using Fast Walsh Hadamard <EoL>
<BoL> Performs linear convolution using Number Theoretic Transform . <EoL>
<BoL> Performs Subset Convolution of given sequences . <EoL>
<BoL> Returns the covering product of given sequences . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns the intersecting product of given sequences . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Return the number of roots of `` f `` in `` [ inf , sup ] `` interval . <EoL>
<BoL> Returns the first derivative of this function <EoL>
<BoL> Returns the next term in the Taylor series expansion <EoL>
<BoL> Return the list of arguments in sorted order according to their value <EoL>
<BoL> Return a dict whose keys are function numbers . The entries of the dict are <EoL>
<BoL> Return the value number for the given argument . <EoL>
<BoL> Return a set of functions each of which whose argument list contains <EoL>
<BoL> Remove the function func_i from the argument to function mapping . <EoL>
<BoL> Update a function with a new set of arguments . <EoL>
<BoL> Return True if the leading Number is negative . <EoL>
<BoL> Move expressions that are in the form ( symbol , expr ) out of the <EoL>
<BoL> Only yield elements from ` iterator ` that do not occur in ` exclude ` . <EoL>
<BoL> Recognize and extract common subexpressions of function arguments within a <EoL>
<BoL> Generate an infinite stream of Symbols consisting of a prefix and <EoL>
<BoL> Find optimization opportunities in Adds , Muls , Pows and negative <EoL>
<BoL> Postprocess an expression after common subexpression elimination to <EoL>
<BoL> Preprocess an expression to optimize for common subexpression <EoL>
<BoL> Sort replacements ` r ` so ( k1 , v1 ) appears before ( k2 , v2 ) <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Perform raw CSE on expression tree , taking opt_subs into account . <EoL>
<BoL> Replace 1*-1*x with -x . <EoL>
<BoL> Replace y - x with - ( x - y ) if -1 can be extracted from y - x . <EoL>
<BoL> Return s if s is a Symbol , else if s is a string , return either <EoL>
<BoL> C++ equivalent of : func : ` sympy.ccode ` . <EoL>
<BoL> For a given iterated sequence , return a generator that gives <EoL>
<BoL> Generates cyclotomic polynomial of order ` n ` in ` x ` . <EoL>
<BoL> Computes General functional decomposition of `` f `` . <EoL>
<BoL> Compute functional decomposition of `` f `` . <EoL>
<BoL> After the function finishes , resets the value of mpmath.mp.dps to <EoL>
<BoL> Adds metadata about the dependencies which need to be met for doctesting <EoL>
<BoL> Create a property , where the lookup is stored in `` storage `` <EoL>
<BoL> Append `` obj `` 's name to global `` __all__ `` variable ( call site ) . <EoL>
<BoL> Apply `` func `` to sub -- elements of an object , including : class : ` Add ` . <EoL>
<BoL> A factory for `` threaded `` decorators . <EoL>
<BoL> Apply `` func `` to sub -- elements of an object , excluding : class : ` Add ` . <EoL>
<BoL> decorator to _sympify ` arg ` argument for function ` func ` <EoL>
<BoL> Return the degree value for the given radians ( pi = 180 degrees ) . <EoL>
<BoL> Return the degree of `` f `` in the given variable . <EoL>
<BoL> Return a list of degrees of `` f `` in all variables . <EoL>
<BoL> Compares the elements of a list/tuple ` a ` <EoL>
<BoL> Return a matrix as a Matrix , otherwise return x . <EoL>
<BoL> Returns True if x is zero . <EoL>
<BoL> Create a sparse , diagonal matrix from a list of diagonal values . <EoL>
<BoL> Create square identity matrix n x n <EoL>
<BoL> Compute Hessian matrix for a function f wrt parameters in varlist <EoL>
<BoL> Create a Jordan block : <EoL>
<BoL> Converts python list of SymPy expressions to a NumPy array . <EoL>
<BoL> Converts SymPy 's matrix to a NumPy array . <EoL>
<BoL> Return the Hadamard product ( elementwise product ) of A and B <EoL>
<BoL> Returns a matrix of ones with `` rows `` rows and `` cols `` columns ; <EoL>
<BoL> Returns a rotation matrix for a rotation of theta ( in radians ) about <EoL>
<BoL> Returns a rotation matrix for a rotation of theta ( in radians ) about <EoL>
<BoL> Returns a rotation matrix for a rotation of theta ( in radians ) about <EoL>
<BoL> r '' '' '' Create a numpy ndarray of symbols ( as an object array ) . <EoL>
<BoL> Compute Wronskian for [ ] of functions <EoL>
<BoL> Returns a matrix of zeros with `` rows `` rows and `` cols `` columns ; <EoL>
<BoL> Matrix Determinant <EoL>
<BoL> Return `` det ( M ) `` assuming that either <EoL>
<BoL> This is a helper function to dsolve and pdsolve in the ode <EoL>
<BoL> Prepare expr for solving by making sure that differentiation <EoL>
<BoL> Returns the order of a given differential <EoL>
<BoL> Merge dictionaries into a single dictionary . <EoL>
<BoL> Difference Operator . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Utility function for the Discrete Fourier Transform <EoL>
<BoL> r '' '' '' Utility function for performing Möbius Transform using <EoL>
<BoL> Utility function for the Number Theoretic Transform <EoL>
<BoL> Utility function for the Walsh Hadamard Transform <EoL>
<BoL> Return a list of length `` bits `` corresponding to the binary value <EoL>
<BoL> Test if n is a prime number ( True ) or not ( False ) . For n < 2^64 the <EoL>
<BoL> Returns the smallest primitive root or None <EoL>
<BoL> Compute the discrete logarithm of `` a `` to the base `` b `` modulo `` n `` . <EoL>
<BoL> Compute discriminant of `` f `` . <EoL>
<BoL> Compute polynomial division of `` f `` and `` g `` . <EoL>
<BoL> Return the number of divisors of `` n `` . If `` modulus `` is not 1 then only <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return the list of denominators of an Egyptian fraction <EoL>
<BoL> Careful ! any evalf of polar numbers is flaky <EoL>
<BoL> Careful ! any evalf of polar numbers is flaky <EoL>
<BoL> Turn all numbers in eq into their polar equivalents ( under the standard <EoL>
<BoL> If p denotes the projection from the Riemann surface of the logarithm to <EoL>
<BoL> Find the greatest integer m such that p**m divides n . <EoL>
<BoL> Return `` ( b , e ) `` such that `` n `` == `` b**e `` if `` n `` is a <EoL>
<BoL> Split ARG into two parts , a `` rest '' and a multiple of I*pi/2 . <EoL>
<BoL> Returns this function as a complex coordinate . <EoL>
<BoL> Returns the first derivative of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the next term in the Taylor series expansion . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> With no = 1 , computes ceiling ( expr ) <EoL>
<BoL> Return True if all args are True , False if they <EoL>
<BoL> Return the real nth-root of arg if possible . If n is omitted then <EoL>
<BoL> Return interval B as intervals that are covered by A ( keyed <EoL>
<BoL> Return function name of ` x ` ( if defined ) else the ` type ( x ) ` . <EoL>
<BoL> Yield unique elements from `` seq `` as an iterator . The second <EoL>
<BoL> Split ARG into two parts , a `` rest '' and a multiple of pi/2 . <EoL>
<BoL> When arg is a Number times pi ( e.g . 3*pi/2 ) then return the Number <EoL>
<BoL> Returns x , y , g such that g = x*a + y*b = gcd ( a , b ) . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Subclasses should implement this method and should return <EoL>
<BoL> Do not treat NaN and infinities as valid polynomial coefficients . <EoL>
<BoL> Sort the numerical roots putting the real roots first , then sorting <EoL>
<BoL> Return a symbol which , when printed , will have a name unique <EoL>
<BoL> Return `` dy/dx `` assuming that `` eq == 0 `` . <EoL>
<BoL> Return the matrix to rotate a 2-D point about the origin by `` angle `` . <EoL>
<BoL> Return the matrix to multiply a 2-D point 's coordinates by x and y . <EoL>
<BoL> Return the matrix to translate a 2-D point by x and y . <EoL>
<BoL> Allocates and initializes the partition stack . <EoL>
<BoL> Returns the number of partitions of a multiset whose components <EoL>
<BoL> Returns the number of partitions of a multiset whose elements <EoL>
<BoL> Useful for usderstanding/debugging the algorithms . Not <EoL>
<BoL> Decrements part ( a subrange of pstack ) , if possible , returning <EoL>
<BoL> Decrements part , while respecting size constraint . <EoL>
<BoL> Decrements part ( a subrange of pstack ) , if possible , returning <EoL>
<BoL> Decrements part ( a subrange of pstack ) , if possible , returning <EoL>
<BoL> Enumerate the partitions of a multiset . <EoL>
<BoL> Enumerate the partitions of a multiset with lb < num ( parts ) <EoL>
<BoL> Enumerate multiset partitions with no more than `` ub `` parts . <EoL>
<BoL> Returns True if a new part has been created , and <EoL>
<BoL> Return current top part on the stack , as a slice of pstack . <EoL>
<BoL> Define value oriented equality , which is useful for testers <EoL>
<BoL> Defined for consistency with __eq__ <EoL>
<BoL> Use with multiset_partitions_taocp to enumerate the ways a <EoL>
<BoL> Return a list of lists to represent the partition . <EoL>
<BoL> Enumerates partitions of a multiset . <EoL>
<BoL> Helper for MultisetPartitionTraverser.count_partitions that <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Helper for evalf_add . Adds a list of ( mpfval , accuracy ) terms . <EoL>
<BoL> Return smallest integer , b , such that |n|/2**b < 1 . <EoL>
<BoL> Returns ( h , g , p ) where <EoL>
<BoL> Chop off tiny real or complex parts . <EoL>
<BoL> Returns relative accuracy of a complex number with given accuracies <EoL>
<BoL> Return the number of bits required to represent n decimals <EoL>
<BoL> Change all Float entries in ` subs ` to have precision prec . <EoL>
<BoL> This function handles sin and cos of complex arguments . <EoL>
<BoL> Fast approximation of log2 ( x ) for an mpf value tuple x . <EoL>
<BoL> Create a raw mpf from an integer . If no precision is specified , <EoL>
<BoL> Create raw mpf from ( man , exp ) pair . The mantissa may be signed . <EoL>
<BoL> Create a raw mpf from a rational number p/q , round if <EoL>
<BoL> no = 0 for real part , no = 1 for imaginary part <EoL>
<BoL> Sum a rapidly convergent infinite hypergeometric series with <EoL>
<BoL> A new mpf can be created from a Python float , an int , a <EoL>
<BoL> Return abs ( s ) of the raw mpf s , rounded to the specified <EoL>
<BoL> Add the two raw mpf values s and t . <EoL>
<BoL> Computation of Bernoulli numbers ( numerically ) <EoL>
<BoL> Compare the raw mpfs s and t. Return -1 if s < t , 0 if s == t , <EoL>
<BoL> Compute the natural logarithm of the mpf value x . If x is negative , <EoL>
<BoL> Multiply two raw mpfs <EoL>
<BoL> Negate a raw mpf ( return -s ) , rounding the result to the <EoL>
<BoL> Compute s**t. Raises ComplexResult if s is negative and t is <EoL>
<BoL> Compute s**n , where s is a raw mpf and n is a Python integer . <EoL>
<BoL> Quickly multiply the raw mpf s by 2**n without rounding . <EoL>
<BoL> Compute the square root of a nonnegative mpf value . The <EoL>
<BoL> Calculate bit size of the nonnegative integer n . <EoL>
<BoL> Create a raw mpf tuple with value ( -1 ) **sign * man * 2**exp and <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return number of accurate decimals that can be represented <EoL>
<BoL> Return a and b if v matches a + I*b where b is not zero and <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Performs tanh-sinh quadrature . The call <EoL>
<BoL> Return an mpf representing a power of two with magnitude `` mag `` <EoL>
<BoL> Convert a raw mpf to the nearest int . Rounding is done down by <EoL>
<BoL> Control automatic evaluation <EoL>
<BoL> Wrapper around expand that only uses the complex hint . See the expand <EoL>
<BoL> Wrapper around expand that only uses the func hint . See the expand <EoL>
<BoL> Wrapper around expand that only uses the multinomial hint . See the expand <EoL>
<BoL> Wrapper around expand that only uses the power_base hint . <EoL>
<BoL> Wrapper around expand that only uses the power_exp hint . <EoL>
<BoL> Wrapper around expand that only uses the trig hint . See the expand <EoL>
<BoL> Return integer `` i `` such that .1 < = x/10**i < 1 <EoL>
<BoL> Return ( a - b ) .evalf ( 2 ) if a and b are comparable , else None . <EoL>
<BoL> Matrix transpose <EoL>
<BoL> Turn a* [ X , Y ] into [ a*X , a*Y ] <EoL>
<BoL> Apply a rule down a tree running it on the bottom nodes first . <EoL>
<BoL> Convert sequence of numbers into pairs of low-high pairs <EoL>
<BoL> Only apply rule if condition is true <EoL>
<BoL> Flatten a BlockMatrix of BlockMatrices <EoL>
<BoL> Try each of the rules until one works . Then stop . <EoL>
<BoL> Apply a rule repeatedly until it has no effect <EoL>
<BoL> Reblock a BlockMatrix so that it has 2x2 blocks of block matrices <EoL>
<BoL> Apply rules based on the expression type <EoL>
<BoL> Rule to unpack singleton args <EoL>
<BoL> Combine KronekeckerProduct with expression . <EoL>
<BoL> > > > from sympy import MatrixSymbol , Q , assuming , refine , det <EoL>
<BoL> Flatten T ( a , b , T ( c , d ) , T2 ( e ) ) to T ( a , b , c , d , T2 ( e ) ) <EoL>
<BoL> Return the elementwise ( aka Hadamard ) product of matrices . <EoL>
<BoL> > > > from sympy import MatrixSymbol , Q , assuming , refine <EoL>
<BoL> Strategy for canonicalization <EoL>
<BoL> Turns an A containing Bs into a B of As <EoL>
<BoL> The Kronecker product of two or more arguments . <EoL>
<BoL> Create a rule to conglomerate identical argsConglomerate together identical args x + x - > 2x <EoL>
<BoL> Merge explicit MatrixBase arguments <EoL>
<BoL> Create a rule to remove identitiesRemove identities <EoL>
<BoL> Create a rule to sort by a key function <EoL>
<BoL> Merge explicit MatrixBase arguments <EoL>
<BoL> factor matrices only if they are square <EoL>
<BoL> > > > from sympy import MatrixSymbol , Q , assuming , refine <EoL>
<BoL> Remove Identities from a MatMul <EoL>
<BoL> Checks for valid shapes for args of MatMul <EoL>
<BoL> Y * X * X.I - > Y <EoL>
<BoL> Collapse nested matrix slices <EoL>
<BoL> Trace of a Matrix . Sum of the diagonal elements <EoL>
<BoL> > > > from sympy import MatrixSymbol , Q , assuming , refine <EoL>
<BoL> Initialize Factors from dict or expr . <EoL>
<BoL> Return the underlying expression . <EoL>
<BoL> Return `` self `` and `` other `` with `` gcd `` removed from each . <EoL>
<BoL> Return Factors of `` gcd ( self , other ) `` . The keys are <EoL>
<BoL> Return Factors of `` lcm ( self , other ) `` which are <EoL>
<BoL> Return Factors of `` self * other `` . <EoL>
<BoL> Return `` self `` and `` other `` with `` gcd `` removed from each . <EoL>
<BoL> Return self raised to a non-negative integer power . <EoL>
<BoL> Return numerator Factor of `` self / other `` . <EoL>
<BoL> Return denominator Factors of `` self / other `` . <EoL>
<BoL> Helper function for : func : ` gcd_terms ` . <EoL>
<BoL> Return `` eq `` with non-commutative objects replaced with Dummy <EoL>
<BoL> Return the value closest to 0 that `` self `` may have if all symbols <EoL>
<BoL> Return the subsequence that is a common start of sequences in `` seqs `` . <EoL>
<BoL> Return the subsequence that is a common ending of sequences in `` seqs `` . <EoL>
<BoL> Decompose power into symbolic base and integer exponent . <EoL>
<BoL> Decompose power into symbolic base and rational exponent . <EoL>
<BoL> Return the factored form of `` expr `` while handling non-commutative <EoL>
<BoL> Compute the GCD of `` terms `` and put them together.replace nc portions of each term with a unique Dummy symbols <EoL>
<BoL> Returns a generator of the n-sized variations of `` seq `` ( size N ) . <EoL>
<BoL> Simplifies exponential / trigonometric / hyperbolic functions . <EoL>
<BoL> Compute polynomial exact quotient of `` f `` and `` g `` . <EoL>
<BoL> Helper function for antidivisors which generates the antidivisors . <EoL>
<BoL> Helper function for divisors which generates the divisors . <EoL>
<BoL> Return the value of n and either a 0 ( indicating that factorization upreturn n , d if the sqrt ( n ) was n't reached yet , else <EoL>
<BoL> Helper function for integer factorization . Trial factors `` n ` <EoL>
<BoL> Helper function for udivisors which generates the unitary divisors . <EoL>
<BoL> Return the number of antidivisors [ 1 ] _ of `` n `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return a list of the digits of n in base b . The first element in the list <EoL>
<BoL> Return a tuple containing x = floor ( y** ( 1/n ) ) <EoL>
<BoL> Return the ith prime greater than n . <EoL>
<BoL> Use Pollard 's p-1 method to try to extract a nontrivial factor <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return a sorted list of n 's prime factors , ignoring multiplicity <EoL>
<BoL> Generate a list of all prime numbers in the range [ a , b ) . <EoL>
<BoL> Return the B-smooth and B-power smooth values of n . <EoL>
<BoL> Return a list of [ m , ( p , ( M , sm ( p + m ) , psm ( p + m ) ) ) ... ] <EoL>
<BoL> Count the number of trailing zero digits in the binary <EoL>
<BoL> Return the number of unitary divisors of `` n `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute a list of irreducible factors of `` f `` . <EoL>
<BoL> Add fact k=v to the knowledge base . <EoL>
<BoL> Update the KB with all the implications of a list of facts . <EoL>
<BoL> Compile rules into internal lookup tables <EoL>
<BoL> Logic from string with space around & and | but none after ! . <EoL>
<BoL> split proved rules into alpha and beta chains <EoL>
<BoL> Return the literal fact of an atom . <EoL>
<BoL> apply additional beta-rules ( And conditions ) to already-built <EoL>
<BoL> deduce all implications <EoL>
<BoL> build prerequisites table from rules <EoL>
<BoL> Computes the transitive closure of a list of implications <EoL>
<BoL> Return a dictionary containing assumptions with values not <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Normalize a Real Set ` theta ` in the Interval [ 0 , 2*pi ) . It returns <EoL>
<BoL> Return the subset of points from a set of points that were <EoL>
<BoL> Converts an expr to a string of fortran code <EoL>
<BoL> Construct new rational function field returning ( field , x1 , ... , xn ) . <EoL>
<BoL> Construct an isomorphism between two number fields . <EoL>
<BoL> Computes Fourier sine/cosine series expansion . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Generates Formal Power Series of f . <EoL>
<BoL> Returns a pair with expression 's numerator and denominator . <EoL>
<BoL> Attempt to simplify expression by using transformation rules given <EoL>
<BoL> Add counts from two counters . <EoL>
<BoL> Intersection is the minimum of corresponding counts . <EoL>
<BoL> Inplace add from another counter , keeping only positive counts . <EoL>
<BoL> Inplace intersection is the minimum of corresponding counts . <EoL>
<BoL> Create a new , empty Counter object . And if given , count elements <EoL>
<BoL> Inplace union is the maximum of value from either counter . <EoL>
<BoL> Inplace subtract counter , but keep only results with positive counts . <EoL>
<BoL> Subtracts from an empty counter . Strips positive and zero counts , <EoL>
<BoL> Union is the maximum of value in either of the input counters . <EoL>
<BoL> Subtract count , but keep only results with positive counts . <EoL>
<BoL> Internal method to strip elements with a negative or zero count <EoL>
<BoL> Iterator over elements repeating each as many times as its count . <EoL>
<BoL> List the n most common elements and their counts from the most <EoL>
<BoL> Like dict.update ( ) but subtracts counts instead of replacing them . <EoL>
<BoL> Like dict.update ( ) but add counts instead of replacing them . <EoL>
<BoL> Make all Rationals in expr Floats except those in exponents <EoL>
<BoL> Generates Hermite polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Return spline of degree `` d `` , passing through the given `` X `` <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Zeros of the spherical Bessel function of the first kind . <EoL>
<BoL> Generates Laguerre polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Generates Legendre polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Return a number P such that G ( x*exp ( I*P ) ) == G ( x ) . <EoL>
<BoL> Get the defining integrand D ( s ) . <EoL>
<BoL> Expand self into a polynomial . Nu is guaranteed to be Integer . <EoL>
<BoL> Rewrite self in terms of ordinary Bessel functions . <EoL>
<BoL> Coefficients for the spherical Bessel functions . <EoL>
<BoL> Construct c*b1 + d*b2 . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> An expression for F ( exp_polar ( 2*I*pi*n ) *x ) , |x| > 1 . <EoL>
<BoL> An expression for F ( exp_polar ( 2*I*pi*n + pi*I ) *x ) , |x| > 1 . <EoL>
<BoL> An expression for F ( x ) which holds for |x| < 1 . <EoL>
<BoL> An expression for F ( -x ) which holds for |x| < 1 . <EoL>
<BoL> Compute limit x- > xlim . <EoL>
<BoL> Turn an iterable argument V into a Tuple and unpolarify , since both <EoL>
<BoL> Generates Gegenbauer polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Generates Jacobi polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Evaluate Levi-Civita symbol . <EoL>
<BoL> Return True if there are any duplicate elements in `` seq `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute GCD of `` f `` and `` g `` . <EoL>
<BoL> Compute GCD of a list of polynomials . <EoL>
<BoL> Extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> Return the largest prime smaller than n . <EoL>
<BoL> Return the nth prime , with the primes indexed as prime ( 1 ) = 2 , <EoL>
<BoL> Return the value of the prime counting function pi ( n ) = the number <EoL>
<BoL> Returns the product of the first n primes ( default ) or <EoL>
<BoL> Return a random prime number in the range [ a , b ) . <EoL>
<BoL> The intersection of a collection of GeometryEntity instances . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return triangle having side with length l on the x-axis . <EoL>
<BoL> Return triangle having side with length l2 on the x-axis . <EoL>
<BoL> Return triangle having side of length l1 on the x-axis . <EoL>
<BoL> Return True if there are any different elements in `` seq `` . <EoL>
<BoL> Return the radian value for the given degrees ( pi = 180 degrees ) . <EoL>
<BoL> Return the tuple of points sorted numerically according to args <EoL>
<BoL> Returns True if the given entities are coplanar otherwise False <EoL>
<BoL> Determine dummy indices of `` expr `` and describe its structure <EoL>
<BoL> Determine the outer indices of expression `` expr `` <EoL>
<BoL> Compute greatest factorial factorization of `` f `` . <EoL>
<BoL> Compute a list of greatest factorial factors of `` f `` . <EoL>
<BoL> Converts an expr to a string of GLSL code <EoL>
<BoL> Computes the reduced Groebner basis for a set of polynomials . <EoL>
<BoL> Compute roots of `` f `` by factorization in the ground domain . <EoL>
<BoL> Splits a sequence into a list of lists of equal , adjacent elements . <EoL>
<BoL> Compute the limit of e ( z ) at the point z0 using the Gruntz algorithm . <EoL>
<BoL> Half extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Rewrite a polynomial in Horner form . <EoL>
<BoL> Expand hypergeometric functions . If allow_hyper is True , allow partial <EoL>
<BoL> Returns True if 'f ' and 'g ' are hyper-similar . <EoL>
<BoL> Determine outer indices of an Add object . <EoL>
<BoL> Determine the outer indices of a Mul object . <EoL>
<BoL> Determine outer indices of a power or an exponential . <EoL>
<BoL> Removes repeated objects from sequences <EoL>
<BoL> Returns the unique and repeated indices . Also note , from the examples given below <EoL>
<BoL> Return a point between start and end <EoL>
<BoL> Return the inequality with s isolated on the left , if possible . <EoL>
<BoL> Reduce a system of inequalities with nested absolute values . <EoL>
<BoL> Reduce an inequality with nested absolute values . <EoL>
<BoL> Reduce a system of inequalities with rational coefficients . <EoL>
<BoL> Reduce a system of rational inequalities with rational coefficients . <EoL>
<BoL> Solve polynomial inequalities with rational coefficients . <EoL>
<BoL> Solve a polynomial inequality with rational coefficients . <EoL>
<BoL> Solve a system of rational inequalities with rational coefficients . <EoL>
<BoL> Solves a real univariate inequality . <EoL>
<BoL> Checks if the query is true given the set of clauses . <EoL>
<BoL> Remove the sentence 's clauses from the KB <EoL>
<BoL> Add the sentence 's clauses to the KB <EoL>
<BoL> Check whether the given expr_set entail an expr . <EoL>
<BoL> The symbol in this literal ( without the negation ) . <EoL>
<BoL> Returns whether the given assignment is a model or not . <EoL>
<BoL> Check satisfiability of a propositional sentence . <EoL>
<BoL> Check validity of a propositional sentence . <EoL>
<BoL> Returns ( e , bool ) where e is the largest nonnegative integer <EoL>
<BoL> Returns the power of x in a term . <EoL>
<BoL> Returns the i'th point of a series <EoL>
<BoL> Integrate Formal Power Series . <EoL>
<BoL> Truncated series as polynomial . <EoL>
<BoL> Term at point pt of a series <EoL>
<BoL> Truncated series . <EoL>
<BoL> line_integrate ( field , Curve , variables ) <EoL>
<BoL> manualintegrate ( f , var ) <EoL>
<BoL> Integrate `` f `` over the interval [ `` a `` , `` b `` ] , by rewriting it as a product <EoL>
<BoL> Compute an indefinite integral of `` f `` by rewriting it as a G function . <EoL>
<BoL> Convert products and powers of sin and cos to sums . <EoL>
<BoL> Integrate f = Mul ( trig ) over x <EoL>
<BoL> caller for pretty , for use in IPython 0.11Return True if type o can be printed with LaTeX.A function that returns a png rendered by an external latexA function that returns a png rendered by mathtextA function to generate the latex representation of sympy expressions.IPython 's pretty-printer display hook , for use in IPython 0.10 <EoL>
<BoL> Setup printing in Python interactive session.Python 's pretty-printer display hook . <EoL>
<BoL> Is a shell instance an IPython shell ? <EoL>
<BoL> Print `` *args `` if SYMPY_DEBUG is True , else do nothing . <EoL>
<BoL> Create a banner for an interactive session . <EoL>
<BoL> Allow IPython to automatically convert integer literals to Integer . <EoL>
<BoL> Allow IPython to automatially create symbols ( `` isympy -a `` ) .Handle : exc : ` NameError ` exception and allow injection of missing symbols . <EoL>
<BoL> Construct new IPython session . <EoL>
<BoL> Construct new Python session.An interactive console with readline support . <EoL>
<BoL> Wrap integer literals with Integer.Returns true if string value num ( with token NUMBER ) represents an integer . <EoL>
<BoL> Traverse a tree asking a user which branch to choose . <EoL>
<BoL> Construct an interpolating polynomial for the data points . <EoL>
<BoL> Construct Lagrange interpolating polynomial for `` n `` data points . <EoL>
<BoL> Compute isolating intervals for roots of `` f `` . <EoL>
<BoL> Return the inverse of `` M `` , assuming that either <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Invert `` f `` modulo `` g `` when possible . <EoL>
<BoL> Returns True if `` x**n == a ( mod m ) `` has solutions . <EoL>
<BoL> Returns True if `` a `` is a primitive root of `` p `` <EoL>
<BoL> Returns True if `` a `` ( mod `` p `` ) is in the set of squares mod `` p `` , <EoL>
<BoL> Checks if the ideal generated by a Groebner basis is zero-dimensional . <EoL>
<BoL> Give a rational isolating interval for an algebraic number . <EoL>
<BoL> Return the partition of seq as specified by the partition vector . <EoL>
<BoL> Cycle through all partions of n elements , yielding the <EoL>
<BoL> Generates the binary partition of n . <EoL>
<BoL> Wrapper to necklaces to return a free ( unrestricted ) necklace . <EoL>
<BoL> Return permutations of [ 0 , 1 , ... , n - 1 ] such that each permutation <EoL>
<BoL> Routine to generate unique derangements . <EoL>
<BoL> Generates involutions . <EoL>
<BoL> This algorithm generates oriented forests . <EoL>
<BoL> Return sequence `` l `` partitioned into `` k `` bins . <EoL>
<BoL> Return a tuple where the smallest element appears first ; if <EoL>
<BoL> Return the hashable sequence in multiset form with values being the <EoL>
<BoL> Return the unique combinations of size `` n `` from multiset `` m `` . <EoL>
<BoL> Return unique partitions of the given multiset ( in list form ) . <EoL>
<BoL> Return the unique permutations of multiset `` m `` . <EoL>
<BoL> A routine to generate necklaces that may ( free=True ) or may not <EoL>
<BoL> Generates ordered partitions of integer `` n `` . <EoL>
<BoL> Generate all partitions of positive integer , n . <EoL>
<BoL> Return iterator in which the signs of non-zero elements <EoL>
<BoL> Generate all postfixes of a sequence . <EoL>
<BoL> Do a postorder traversal of a tree . <EoL>
<BoL> Generate all prefixes of a sequence . <EoL>
<BoL> Reshape the sequence according to the template in `` how `` . <EoL>
<BoL> Left rotates a list x by the number of steps specified <EoL>
<BoL> Right rotates a list x by the number of steps specified <EoL>
<BoL> Group the sequence into lists in which successive elements <EoL>
<BoL> Return iterator in which the signs of non-zero elements <EoL>
<BoL> Generates all k-subsets ( combinations ) from an n-element set , seq . <EoL>
<BoL> Return `` n `` items from `` iter `` iterator . <EoL>
<BoL> Group `` iter `` into tuples of length `` n `` . Raise an error if <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Converts an expr to a string of javascript code <EoL>
<BoL> r '' '' '' Converts ` expr ` to a string of Julia code . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute LCM of `` f `` and `` g `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Finds limits of terms having sequences at infinity . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Takes logarithms and combines them using the following rules : <EoL>
<BoL> Pollute the global namespace with symbols - > objects mapping . <EoL>
<BoL> Strategy that makes an AlternativeRule out of multiple possible results . <EoL>
<BoL> Returns the steps needed to compute an integral . <EoL>
<BoL> Derivative of f in form expected by find_substitutions <EoL>
<BoL> Apply the rule that matches the condition , else None <EoL>
<BoL> Return original expr if rule returns None <EoL>
<BoL> Strategy that rewrites an integrand based on some other criteria . <EoL>
<BoL> Strategy that rewrites an integrand . <EoL>
<BoL> Select a rule based on the result of key called on the function <EoL>
<BoL> r '' '' '' Converts an expr to a string of the Wolfram Mathematica code <EoL>
<BoL> Returns the MathML representation of expr . If printer is presentation then <EoL>
<BoL> Find the lowest index of an item in ` col ` that is <EoL>
<BoL> Helper that computes the pivot value and location from a <EoL>
<BoL> Tests by expand_mul only , suitable for polynomials and rational <EoL>
<BoL> Returns True if x is zero . <EoL>
<BoL> Return the number c such that , ( a * c ) = 1 ( mod m ) <EoL>
<BoL> Returns the expression as a string . <EoL>
<BoL> Return a condition under which the integral theorem applies.Returns True if abs ( arg ( 1-z ) ) < pi , avoiding arg ( 0 ) .When ` c15 ` is NaN ( e.g . from ` psi ` being NaN as happens during <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Check antecedents for the laplace inversion integral.Provide a convergence statement for z**a * exp ( b*z**c ) , <EoL>
<BoL> Do naive simplifications on `` cond `` . <EoL>
<BoL> Add formulae for the function - > meijerg lookup table . <EoL>
<BoL> Return a dummy . This will return the same dummy if the same token+name is <EoL>
<BoL> Return a dummy associated to name and token . Same effect as declaring <EoL>
<BoL> Re-evaluate the conditions . <EoL>
<BoL> Find the exponents of `` x `` ( not including zero ) in `` expr `` . <EoL>
<BoL> Find numbers a such that a linear substitution x - > x + a would <EoL>
<BoL> Turn the G function into one of inverse argument <EoL>
<BoL> Find the types of functions in expr , to estimate the complexity . <EoL>
<BoL> When expr is known to be of the form c*x**b , with c and/or b possibly 1 , <EoL>
<BoL> Try to guess sensible rewritings for integrand f ( x ) . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return C , h such that h is a G function of argument z**n and ( a1 , .. , ak ) - > ( a1/n , ( a1+1 ) /n , ... , ( ak + n-1 ) /n ) <EoL>
<BoL> Express integral from zero to infinity g1*g2 using a G function , <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute the laplace inversion integral , assuming the formula applies . <EoL>
<BoL> Check if f ( x ) , when expressed using G functions on the positive reals , <EoL>
<BoL> Try to integrate f dx from zero to infinty . <EoL>
<BoL> Try to integrate f dx from zero to infinity . <EoL>
<BoL> Try to integrate f dx from zero to infinity . <EoL>
<BoL> Helper that does not attempt any substitution.This multiplies out superfluous powers of x we created , and chops off <EoL>
<BoL> Return a list `` L `` such that Mul ( *L ) == f . <EoL>
<BoL> Find all the ways to split f into a product of two terms . <EoL>
<BoL> Bring expr nearer to its principal branch by removing superfluous <EoL>
<BoL> Create a hashable entity describing the type of f . <EoL>
<BoL> Try to rewrite f using a ( sum of ) single G functions with argument a*x**b . <EoL>
<BoL> Try to rewrite f as a product of two G functions of arguments a*x**b . <EoL>
<BoL> Absorb `` po `` == x**s into g . <EoL>
<BoL> Rewrite the integral fac*po*g1*g2 from 0 to oo in terms of G functions <EoL>
<BoL> Rewrite the integral fac*po*g dx , from zero to infinity , as <EoL>
<BoL> Try to rewrite f as a sum of single G functions of the formCalling simplify ( ) all the time is slow and not helpful , since <EoL>
<BoL> Split expression `` f `` into fac , po , g , where fac is a constant factor , <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Memo decorator for associated sequences defined by recurrence starting from base <EoL>
<BoL> Computes the minimal polynomial of an algebraic element . <EoL>
<BoL> Return a function that can make the replacements , given in <EoL>
<BoL> If SYMPY_DEBUG is True , it will print a nice execution tree with <EoL>
<BoL> Remove any common leading whitespace from every line in ` text ` . <EoL>
<BoL> Fill a single paragraph of text , returning a new string . <EoL>
<BoL> Try to find 'executable ' in the directories listed in 'path ' ( a <EoL>
<BoL> Return a cut-and-pastable string that , when printed , is equivalent <EoL>
<BoL> Return `` string `` with all keys in `` reps `` replaced with <EoL>
<BoL> Return `` s `` where characters have been replaced or deleted . <EoL>
<BoL> Divide all coefficients of `` f `` by `` LC ( f ) `` . <EoL>
<BoL> Return a well-formed unevaluated Mul : Numbers are collected and <EoL>
<BoL> Returns a structure with the same dimension as the specified argument , <EoL>
<BoL> Returns a copy of an iterable object ( also copying all embedded iterables ) . <EoL>
<BoL> Returns a copy of the given structure ( numpy-array , list , iterable , .. ) . <EoL>
<BoL> Returns a wrapper for the one-dimensional function that can handle <EoL>
<BoL> The given numbers and strings characterize the arguments that will be <EoL>
<BoL> r '' '' '' Return a dictionary containing pairs `` { ( k1 , k2 , .. , km ) : C_kn } `` <EoL>
<BoL> Return a dictionary containing pairs `` { ( k1 , k2 , .. , km ) : C_kn } `` <EoL>
<BoL> multinomial coefficient iterator <EoL>
<BoL> Add new types/method pair to dispatcher <EoL>
<BoL> Deterimine appropriate implementation for this type signature <EoL>
<BoL> Get annotations of function positional parameters <EoL>
<BoL> Print docstring for the function corresponding to inputs <EoL>
<BoL> Register dispatcher with new implementation <EoL>
<BoL> Deterimine appropriate implementation for this type signature <EoL>
<BoL> Print source code for the function corresponding to inputs <EoL>
<BoL> Topological sort algorithm by Kahn [ 1 ] - O ( nodes + vertices ) <EoL>
<BoL> All signature pairs such that A is ambiguous with B <EoL>
<BoL> A is consistent with B but neither is strictly more specific <EoL>
<BoL> It is possible for an argument list to satisfy both A and B <EoL>
<BoL> A should be checked before B <EoL>
<BoL> Group a collection by a key function <EoL>
<BoL> A sane ordering of signatures to check , first to last <EoL>
<BoL> A signature that would break ambiguities <EoL>
<BoL> A is consistent and strictly more specific than B <EoL>
<BoL> Raise warning when ambiguity is detected <EoL>
<BoL> Is func a method ? <EoL>
<BoL> > > > from sympy.multipledispatch.utils import expand_tuples <EoL>
<BoL> String representation of type signature <EoL>
<BoL> The text for ambiguity warnings <EoL>
<BoL> Reverses direction of dependence dict <EoL>
<BoL> Returns the order of `` a `` modulo `` n `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Calculate the partition function P ( n ) , i.e . the number of ways that <EoL>
<BoL> Compute numerical approximations of roots of `` f `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Construct a polynomial with n-th powers of roots of `` f `` . <EoL>
<BoL> Find the solutions to `` x**n = a mod p `` <EoL>
<BoL> Compute the inner sum in HRR formula [ 1 ] _ <EoL>
<BoL> Compute the sinh term in the outer sum of the HRR formula . <EoL>
<BoL> Find the solutions to `` x**2 = a mod p**k `` when `` a % p ! = 0 `` <EoL>
<BoL> Simultaneously compute ( cosh ( x ) , sinh ( x ) ) for real x <EoL>
<BoL> Floating-point division <EoL>
<BoL> Return the difference of two raw mpfs , s-t . This function is <EoL>
<BoL> Calculates the `` extra strong '' parameters ( D , P , Q ) for n . <EoL>
<BoL> Calculates the Selfridge parameters ( D , P , Q ) for n. This is <EoL>
<BoL> Return the modular Lucas sequence ( U_k , V_k , Q_k ) . <EoL>
<BoL> Miller-Rabin strong pseudoprime test for one base . <EoL>
<BoL> Extra Strong Lucas compositeness test . Returns False if n is <EoL>
<BoL> Standard Lucas compositeness test with Selfridge parameters . Returns <EoL>
<BoL> Return True if n == a * a for some integer a , else False . <EoL>
<BoL> Strong Lucas compositeness test with Selfridge parameters . Returns <EoL>
<BoL> Perform a Miller-Rabin strong pseudoprime test on n using a <EoL>
<BoL> Returns the list of quadratic residues . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Beta distribution . <EoL>
<BoL> Choose a random element from a non-empty sequence . <EoL>
<BoL> Return a k sized list of population elements chosen with replacement . <EoL>
<BoL> Exponential distribution . <EoL>
<BoL> Gamma distribution . Not the gamma function ! <EoL>
<BoL> Gaussian distribution . <EoL>
<BoL> Return internal state ; can be passed to setstate ( ) later . <EoL>
<BoL> Log normal distribution . <EoL>
<BoL> Normal distribution . <EoL>
<BoL> Pareto distribution . alpha is the shape parameter . <EoL>
<BoL> Return random integer in range [ a , b ] , including both end points . <EoL>
<BoL> Choose a random item from range ( start , stop [ , step ] ) . <EoL>
<BoL> Chooses k unique random elements from a population sequence or set . <EoL>
<BoL> Initialize internal state from hashable object . <EoL>
<BoL> Restore internal state from object returned by getstate ( ) . <EoL>
<BoL> Shuffle list x in place , and return None . <EoL>
<BoL> Triangular distribution . <EoL>
<BoL> Circular data distribution . <EoL>
<BoL> Weibull distribution . <EoL>
<BoL> Pohlig-Hellman algorithm for computing the discrete logarithm of `` a `` to <EoL>
<BoL> Pollard 's Rho algorithm for computing the discrete logarithm of `` a `` to <EoL>
<BoL> Baby-step giant-step algorithm for computing the discrete logarithm of <EoL>
<BoL> Trial multiplication algorithm for computing the discrete logarithm of <EoL>
<BoL> Returns True if `` x**n == a ( mod m ) `` has solutions for n > 2 . <EoL>
<BoL> Returns True/False if a solution for `` x**n == a ( mod ( p**k ) ) `` <EoL>
<BoL> Root of `` x**q = s mod p `` , `` p `` prime and `` q `` divides `` p - 1 `` <EoL>
<BoL> Generates the primitive roots for a prime `` p `` <EoL>
<BoL> Cartesian product generator <EoL>
<BoL> Find solution to `` x**2 == a mod p**n `` when `` a % p == 0 `` <EoL>
<BoL> Returns the square root in the case of `` p `` prime with `` p == 1 ( mod 8 ) `` <EoL>
<BoL> Return the largest integer less than or equal to sqrt ( n ) . <EoL>
<BoL> Find a root of `` x**2 = a mod p `` <EoL>
<BoL> Iterate over solutions to `` x**2 = a mod p `` <EoL>
<BoL> b is I = sqrt ( -1 ) <EoL>
<BoL> `` expt `` is symbolic object but not equal to 0 or 1 . <EoL>
<BoL> `` expt `` is symbolic object but not equal to 0 or 1 . <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Converts a numpy datatype input to an appropriate sympy type . <EoL>
<BoL> Convert an ordinary decimal instance to a Rational . <EoL>
<BoL> Return True if n can be interpreted as a floating point number . <EoL>
<BoL> Computes greatest common divisor of two integers . <EoL>
<BoL> Return the mpf tuple normalized appropriately for the indicated <EoL>
<BoL> Should sympy raise an exception on 0/0 or return a nan ? <EoL>
<BoL> r '' '' '' Converts ` expr ` to a string of Octave ( or Matlab ) code . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' r '' 'r '' ' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' r '' '' '' r '' '' '' r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns a list of constants that do not occur <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Solves any ( supported ) kind of partial differential equation . <EoL>
<BoL> Return eq ( with generic symbols made positive ) and a <EoL>
<BoL> An indexed root of a univariate polynomial . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Series expansion of expr around point ` x = x0 ` . <EoL>
<BoL> Solve for the constants given initial conditions <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Remove GCD of terms from `` f `` . <EoL>
<BoL> Prints expr using the pager , in pretty form . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Helper function of pdsolve that calls the respective <EoL>
<BoL> Separate expression into two parts based on dependencies of variables . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Separate variables in partial differential equation either by additive <EoL>
<BoL> Helper function for searching additive separable solutions . <EoL>
<BoL> Helper function for searching multiplicative separable solutions . <EoL>
<BoL> Compute polynomial pseudo-division of `` f `` and `` g `` . <EoL>
<BoL> Compute polynomial exact pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Plots a function of a single variable and returns an instance of <EoL>
<BoL> A plot function to plot implicit equations / inequalities.Recursively expands the arguments of an Boolean Function <EoL>
<BoL> Plot Examples <EoL>
<BoL> Converts an expression string to a tree . <EoL>
<BoL> For no real reason this function is separated from <EoL>
<BoL> Traverses the ( func , args ) tree of an expression and creates a sympy <EoL>
<BoL> Translate function names and the tree of arguments . <EoL>
<BoL> Translate substrings of estr using in order the dictionaries in <EoL>
<BoL> Converts a tree to string without translations . <EoL>
<BoL> Converts a tree to string with translations . <EoL>
<BoL> Defines the three valued `` And `` behaviour for a 2-tuple of <EoL>
<BoL> Defines the three valued `` Or `` behaviour for a 2-tuple of <EoL>
<BoL> Evaluates the inverse cos of an interval <EoL>
<BoL> Evaluates the inverse hyperbolic cosine of an interval <EoL>
<BoL> Evaluates the inverse sine of an interval <EoL>
<BoL> Evaluates the inverse hyperbolic sine of an interval <EoL>
<BoL> evaluates the tan inverse of an interval <EoL>
<BoL> Evaluates the inverse hyperbolic tangent of an interval <EoL>
<BoL> Evaluates the ceiling of an interval <EoL>
<BoL> Evaluates the cos of an interval <EoL>
<BoL> Evaluates the hyperbolic cos of an interval <EoL>
<BoL> evaluates the exponential of an interval <EoL>
<BoL> Evaluates the floor of an interval <EoL>
<BoL> Evaluates the maximum of a list of intervals <EoL>
<BoL> Evaluates the minimum of a list of intervals <EoL>
<BoL> Evaluates an interval raised to a floating point . <EoL>
<BoL> Evaluates an interval raised to an integer power <EoL>
<BoL> evaluates the natural logarithm of an interval <EoL>
<BoL> evaluates the logarithm to the base 10 of an interval <EoL>
<BoL> evaluates the sine of an interval <EoL>
<BoL> Evaluates the hyperbolic sine of an interval <EoL>
<BoL> Evaluates the square root of an interval <EoL>
<BoL> Evaluates the tan of an interval <EoL>
<BoL> Evaluates the hyperbolic tan of an interval <EoL>
<BoL> Plots a 3D surface plot . <EoL>
<BoL> Plots a 3D parametric line plot . <EoL>
<BoL> Plots a 3D parametric surface plot . <EoL>
<BoL> Plots a 2D parametric plot . <EoL>
<BoL> Print a crude ASCII art plot of the SymPy expression 'expr ' ( which <EoL>
<BoL> Efficiently transform an expression into a polynomial . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Return leading coefficient of `` f `` . <EoL>
<BoL> Return trailing coefficient of `` f `` . <EoL>
<BoL> Make all coefficients positive in `` K [ X ] `` . <EoL>
<BoL> Add dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns `` f + g*h `` where `` f , g , h `` are in `` K [ X ] `` . <EoL>
<BoL> Add `` c ( x_2..x_u ) *x_0**i `` to `` f `` in `` K [ X ] `` . <EoL>
<BoL> Cancel common factors in a rational function ` f/g ` . <EoL>
<BoL> Clear denominators , i.e . transform `` K_0 `` to `` K_1 `` . <EoL>
<BoL> Evaluate functional composition `` f ( g ) `` in `` K [ X ] `` . <EoL>
<BoL> Returns GCD of multivariate coefficients . <EoL>
<BoL> Return the leading degree of `` f `` in `` x_0 `` in `` K [ X ] `` . <EoL>
<BoL> Return the leading degree of `` f `` in `` x_j `` in `` K [ X ] `` . <EoL>
<BoL> `` m `` -th order derivative in `` x_0 `` of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Differentiate and evaluate a polynomial in `` x_j `` at `` a `` in `` K [ X ] `` . <EoL>
<BoL> `` m `` -th order derivative in `` x_j `` of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Computes discriminant of a polynomial in ` K [ X ] ` . <EoL>
<BoL> Polynomial division with remainder in `` K [ X ] `` . <EoL>
<BoL> Euclidean polynomial remainder sequence ( PRS ) in ` K [ X ] ` . <EoL>
<BoL> Evaluate a polynomial at `` x_0 = a `` in `` K [ X ] `` using the Horner scheme . <EoL>
<BoL> Evaluate a polynomial at `` x_j = a `` in `` K [ X ] `` using the Horner scheme . <EoL>
<BoL> Evaluate a polynomial at `` x_j = a_j , ... `` in `` K [ X ] `` . <EoL>
<BoL> Multiply together several polynomials in `` K [ X ] `` . <EoL>
<BoL> Returns polynomial quotient in `` K [ X ] `` . <EoL>
<BoL> Exact quotient by a constant in `` K [ X ] `` . <EoL>
<BoL> Factor multivariate polynomials over algebraic number fields . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ X ] ` . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ X ] ` . <EoL>
<BoL> Polynomial division with remainder over a field . <EoL>
<BoL> Computes polynomial LCM over a field in ` K [ X ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a field . <EoL>
<BoL> Computes polynomial GCD of ` f ` and ` g ` in ` K [ X ] ` . <EoL>
<BoL> Extended Euclidean algorithm in ` F [ X ] ` . <EoL>
<BoL> Factor multivariate polynomials over finite fields . <EoL>
<BoL> Compute square-free decomposition of `` f `` in `` GF ( p ) [ X ] `` . <EoL>
<BoL> Compute square-free part of `` f `` in `` GF ( p ) [ X ] `` . <EoL>
<BoL> Compute greatest factorial factorization of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Return the ground leading coefficient . <EoL>
<BoL> Return the ground trailing coefficient . <EoL>
<BoL> Compute the GCD of coefficients of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Extract common content from a pair of polynomials in `` K [ X ] `` . <EoL>
<BoL> Divide all coefficients by `` LC ( f ) `` in `` K [ X ] `` . <EoL>
<BoL> Compute content and the primitive form of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Reduce a `` K [ X ] `` polynomial modulo a constant `` p `` in `` K `` . <EoL>
<BoL> Half extended Euclidean algorithm in ` F [ X ] ` . <EoL>
<BoL> Computes polynomial GCD and cofactors of ` f ` and ` g ` in ` K [ X ] ` . <EoL>
<BoL> Subresultant PRS algorithm in ` K [ X ] ` . <EoL>
<BoL> Computes the indefinite integral of `` f `` in `` x_0 `` in `` K [ X ] `` . <EoL>
<BoL> Computes the indefinite integral of `` f `` in `` x_j `` in `` K [ X ] `` . <EoL>
<BoL> Compute multiplicative inverse of ` f ` modulo ` g ` in ` F [ X ] ` . <EoL>
<BoL> Returns `` True `` if `` f `` has no factors over its domain . <EoL>
<BoL> Returns l1 norm of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Computes polynomial LCM of ` f ` and ` g ` in ` K [ X ] ` . <EoL>
<BoL> Convert algebraic coefficients to integers in `` K [ X ] `` . <EoL>
<BoL> Returns maximum norm of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Multiply dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Multiply `` f `` by a constant value in `` K [ X ] `` . <EoL>
<BoL> Multiply `` f `` by `` c ( x_2..x_u ) *x_0**i `` in `` K [ X ] `` . <EoL>
<BoL> Negate a polynomial in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-division in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-quotient in `` K [ X ] `` . <EoL>
<BoL> Raise `` f `` to the `` n `` -th power in `` K [ X ] `` . <EoL>
<BoL> Polynomial exact pseudo-quotient in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-remainder in `` K [ X ] `` . <EoL>
<BoL> Returns multivariate content and a primitive polynomial . <EoL>
<BoL> Primitive polynomial remainder sequence ( PRS ) in ` K [ X ] ` . <EoL>
<BoL> Resultant algorithm in ` K [ X ] ` using subresultant PRS . <EoL>
<BoL> Collins 's modular resultant algorithm in ` Q [ X ] ` . <EoL>
<BoL> Heuristic polynomial GCD in ` Q [ X ] ` . <EoL>
<BoL> Returns exact polynomial quotient in `` K [ X ] `` . <EoL>
<BoL> Quotient by a constant in `` K [ X ] `` . <EoL>
<BoL> Returns polynomial remainder in `` K [ X ] `` . <EoL>
<BoL> Computes resultant of two polynomials in ` K [ X ] ` . <EoL>
<BoL> Multivariate division with remainder over a ring . <EoL>
<BoL> Computes polynomial LCM over a ring in ` K [ X ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a ring . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Square-free norm of `` f `` in `` K [ X ] `` , useful over algebraic domains . <EoL>
<BoL> Return `` True `` if `` f `` is a square-free polynomial in `` K [ X ] `` . <EoL>
<BoL> Returns square-free part of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Square dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Subtract dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Returns `` f - g*h `` where `` f , g , h `` are in `` K [ X ] `` . <EoL>
<BoL> Subtract `` c ( x_2..x_u ) *x_0**i `` from `` f `` in `` K [ X ] `` . <EoL>
<BoL> Computes subresultant PRS of two polynomials in ` K [ X ] ` . <EoL>
<BoL> Convert a `` K [ X ] `` polynomial to a `` dict `` `` . <EoL>
<BoL> Determine multiplicities of factors using trial division . <EoL>
<BoL> Reduce a `` K [ X ] `` polynomial modulo a polynomial `` p `` in `` K [ Y ] `` . <EoL>
<BoL> Collins 's modular resultant algorithm in ` Z [ X ] ` . <EoL>
<BoL> Wang/EEZ : Solve multivariate Diophantine equations . <EoL>
<BoL> Factor ( non square-free ) polynomials in ` Z [ X ] ` . <EoL>
<BoL> Heuristic polynomial GCD in ` Z [ X ] ` . <EoL>
<BoL> Mignotte bound for multivariate polynomials in ` K [ X ] ` . <EoL>
<BoL> Compute resultant of ` f ` and ` g ` modulo a prime ` p ` . <EoL>
<BoL> Factor primitive square-free polynomials in ` Z [ X ] ` . <EoL>
<BoL> Wang/EEZ : Parallel Hensel lifting algorithm . <EoL>
<BoL> Wang/EEZ : Compute correct leading coefficients . <EoL>
<BoL> Wang/EEZ : Compute a set of valid divisors . <EoL>
<BoL> Make all coefficients positive in `` K [ x ] `` . <EoL>
<BoL> Add dense polynomials in `` K [ x ] `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns `` f + g*h `` where `` f , g , h `` are in `` K [ x ] `` . <EoL>
<BoL> Add `` c*x**i `` to `` f `` in `` K [ x ] `` . <EoL>
<BoL> Cancel common factors in a rational function ` f/g ` . <EoL>
<BoL> Clear denominators , i.e . transform `` K_0 `` to `` K_1 `` . <EoL>
<BoL> Evaluate functional composition `` f ( g ) `` in `` K [ x ] `` . <EoL>
<BoL> Compute the GCD of coefficients of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Count all roots in [ u + v*I , s + t*I ] rectangle using Collins-Krandick algorithm . <EoL>
<BoL> Returns the number of distinct real roots of `` f `` in `` [ inf , sup ] `` . <EoL>
<BoL> Efficiently test if `` f `` is a cyclotomic polnomial . <EoL>
<BoL> Computes functional decomposition of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return the leading degree of `` f `` in `` K [ x ] `` . <EoL>
<BoL> `` m `` -th order derivative of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Computes discriminant of a polynomial in ` K [ x ] ` . <EoL>
<BoL> Polynomial division with remainder in `` K [ x ] `` . <EoL>
<BoL> Euclidean polynomial remainder sequence ( PRS ) in ` K [ x ] ` . <EoL>
<BoL> Evaluate a polynomial at `` x = a `` in `` K [ x ] `` using Horner scheme . <EoL>
<BoL> Multiply together several polynomials in `` K [ x ] `` . <EoL>
<BoL> Returns polynomial quotient in `` K [ x ] `` . <EoL>
<BoL> Exact quotient by a constant in `` K [ x ] `` . <EoL>
<BoL> Factor univariate polynomials over algebraic number fields . <EoL>
<BoL> Extract common content from a pair of polynomials in `` K [ x ] `` . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ x ] ` . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ x ] ` . <EoL>
<BoL> Polynomial division with remainder over a field . <EoL>
<BoL> Computes polynomial LCM over a field in ` K [ x ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a field . <EoL>
<BoL> Computes polynomial GCD of ` f ` and ` g ` in ` K [ x ] ` . <EoL>
<BoL> Extended Euclidean algorithm in ` F [ x ] ` . <EoL>
<BoL> Factor univariate polynomials over finite fields . <EoL>
<BoL> Compute square-free decomposition of `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute square-free part of `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute greatest factorial factorization of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Half extended Euclidean algorithm in ` F [ x ] ` . <EoL>
<BoL> Computes polynomial GCD and cofactors of ` f ` and ` g ` in ` K [ x ] ` . <EoL>
<BoL> Iteratively compute disjoint negative root isolation intervals . <EoL>
<BoL> Iteratively compute disjoint positive root isolation intervals . <EoL>
<BoL> Internal function for isolation positive roots up to given precision . <EoL>
<BoL> Refine a positive root of ` f ` given a Mobius transform or an interval . <EoL>
<BoL> Subresultant PRS algorithm in ` K [ x ] ` . <EoL>
<BoL> Computes the indefinite integral of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Compute multiplicative inverse of ` f ` modulo ` g ` in ` F [ x ] ` . <EoL>
<BoL> Returns `` True `` if `` f `` has no factors over its domain . <EoL>
<BoL> Isolate real and complex roots of a non-square-free polynomial `` f `` . <EoL>
<BoL> Isolate real and complex roots of a square-free polynomial `` f `` . <EoL>
<BoL> Isolate complex roots of a square-free polynomial using Collins-Krandick algorithm . <EoL>
<BoL> Isolate real roots using Vincent-Akritas-Strzebonski ( VAS ) continued fractions approach . <EoL>
<BoL> Isolate real roots of a list of square-free polynomial using Vincent-Akritas-Strzebonski ( VAS ) CF approach . <EoL>
<BoL> Isolate real roots of a square-free polynomial using the Vincent-Akritas-Strzebonski ( VAS ) CF approach . <EoL>
<BoL> Returns l1 norm of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Computes polynomial LCM of ` f ` and ` g ` in ` K [ x ] ` . <EoL>
<BoL> Efficiently multiply `` f `` by `` x**n `` in `` K [ x ] `` . <EoL>
<BoL> Returns maximum norm of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Evaluate efficiently the composition `` f ( -x ) `` in `` K [ x ] `` . <EoL>
<BoL> Divide all coefficients by `` LC ( f ) `` in `` K [ x ] `` . <EoL>
<BoL> Multiply dense polynomials in `` K [ x ] `` . <EoL>
<BoL> Multiply `` f `` by a constant value in `` K [ x ] `` . <EoL>
<BoL> Multiply `` f `` by `` c*x**i `` in `` K [ x ] `` . <EoL>
<BoL> Negate a polynomial in `` K [ x ] `` . <EoL>
<BoL> Refine a positive root of ` f ` given an interval ` ( s , t ) ` . <EoL>
<BoL> Polynomial pseudo-division in `` K [ x ] `` . <EoL>
<BoL> Polynomial pseudo-quotient in `` K [ x ] `` . <EoL>
<BoL> Raise `` f `` to the `` n `` -th power in `` K [ x ] `` . <EoL>
<BoL> Polynomial exact pseudo-quotient in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-remainder in `` K [ x ] `` . <EoL>
<BoL> Compute content and the primitive form of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Primitive polynomial remainder sequence ( PRS ) in ` K [ x ] ` . <EoL>
<BoL> Resultant algorithm in ` K [ x ] ` using subresultant PRS . <EoL>
<BoL> Heuristic polynomial GCD in ` Q [ x ] ` . <EoL>
<BoL> Returns exact polynomial quotient in `` K [ x ] `` . <EoL>
<BoL> Quotient by a constant in `` K [ x ] `` . <EoL>
<BoL> Return bivariate polynomials `` f1 `` and `` f2 `` , such that `` f = f1 + f2*I `` . <EoL>
<BoL> Refine real root 's approximating interval to the given precision . <EoL>
<BoL> Returns polynomial remainder in `` K [ x ] `` . <EoL>
<BoL> Computes resultant of two polynomials in ` K [ x ] ` . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` using Newton iteration . <EoL>
<BoL> Compute the LMQ lower bound for the positive roots of ` f ` ; <EoL>
<BoL> Compute the LMQ upper bound for the positive roots of ` f ` ; <EoL>
<BoL> Univariate division with remainder over a ring . <EoL>
<BoL> Computes polynomial LCM over a ring in ` K [ x ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a ring . <EoL>
<BoL> Efficiently divide `` f `` by `` x**n `` in `` K [ x ] `` . <EoL>
<BoL> Evaluate efficiently composition `` f ( a*x ) `` in `` K [ x ] `` . <EoL>
<BoL> Evaluate efficiently Taylor shift `` f ( x + a ) `` in `` K [ x ] `` . <EoL>
<BoL> Compute the number of sign variations of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Square-free norm of `` f `` in `` K [ x ] `` , useful over algebraic domains . <EoL>
<BoL> Return `` True `` if `` f `` is a square-free polynomial in `` K [ x ] `` . <EoL>
<BoL> Returns square-free part of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Square dense polynomials in `` K [ x ] `` . <EoL>
<BoL> One step of positive real root refinement algorithm . <EoL>
<BoL> Computes the Sturm sequence of `` f `` in `` F [ x ] `` . <EoL>
<BoL> Subtract dense polynomials in `` K [ x ] `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Returns `` f - g*h `` where `` f , g , h `` are in `` K [ x ] `` . <EoL>
<BoL> Subtract `` c*x**i `` from `` f `` in `` K [ x ] `` . <EoL>
<BoL> Computes subresultant PRS of two polynomials in ` K [ x ] ` . <EoL>
<BoL> Evaluate functional transformation `` q**n * f ( p/q ) `` in `` K [ x ] `` . <EoL>
<BoL> Determine multiplicities of factors using trial division . <EoL>
<BoL> Reduce a `` K [ x ] `` polynomial modulo a constant `` p `` in `` K `` . <EoL>
<BoL> Efficiently factor polynomials ` x**n - 1 ` and ` x**n + 1 ` in ` Z [ x ] ` . <EoL>
<BoL> Efficiently generate n-th cyclotomic polnomial . <EoL>
<BoL> Wang/EEZ : Solve univariate Diophantine equations . <EoL>
<BoL> Factor ( non square-free ) polynomials in ` Z [ x ] ` . <EoL>
<BoL> Factor square-free ( non-primitive ) polyomials in ` Z [ x ] ` . <EoL>
<BoL> Multifactor Hensel lifting in ` Z [ x ] ` . <EoL>
<BoL> One step in Hensel lifting in ` Z [ x ] ` . <EoL>
<BoL> Heuristic polynomial GCD in ` Z [ x ] ` . <EoL>
<BoL> Test irreducibility using Eisenstein 's criterion . <EoL>
<BoL> Mignotte bound for univariate polynomials in ` K [ x ] ` . <EoL>
<BoL> Factor primitive square-free polynomials in ` Z [ x ] ` . <EoL>
<BoL> Return the leading coefficient of `` f `` . <EoL>
<BoL> Calculate Berlekamp 's `` Q `` matrix . <EoL>
<BoL> Return the trailing coefficient of `` f `` . <EoL>
<BoL> Add polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f + a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Returns `` f + g*h `` where `` f `` , `` g `` , `` h `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Factor a square-free `` f `` in `` GF ( p ) [ x ] `` for small `` p `` . <EoL>
<BoL> Compute polynomial GCD and cofactors in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial composition `` f ( g ) `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial composition `` g ( h ) `` in `` GF ( p ) [ x ] / ( f ) `` . <EoL>
<BoL> Kaltofen-Shoup : Deterministic Distinct Degree Factorization <EoL>
<BoL> Cantor-Zassenhaus : Deterministic Distinct Degree Factorization <EoL>
<BoL> Return the leading degree of `` f `` . <EoL>
<BoL> Differentiate polynomial in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Division with remainder in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Gathen-Shoup : Probabilistic Equal Degree Factorization <EoL>
<BoL> Cantor-Zassenhaus : Probabilistic Equal Degree Factorization <EoL>
<BoL> Evaluate `` f ( a ) `` in `` GF ( p ) `` using Horner scheme . <EoL>
<BoL> Expand results of : func : ` factor ` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial quotient in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Factor ( non square-free ) polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Factor a square-free polynomial `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Create a `` GF ( p ) [ x ] `` polynomial from a dict . <EoL>
<BoL> Create a `` GF ( p ) [ x ] `` polynomial from `` Z [ x ] `` . <EoL>
<BoL> Euclidean Algorithm in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Extended Euclidean Algorithm in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Ben-Or 's polynomial irreducibility test over finite fields . <EoL>
<BoL> Rabin 's polynomial irreducibility test over finite fields . <EoL>
<BoL> Generate random irreducible polynomial of degree `` n `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Test irreducibility of a polynomial `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial LCM in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Efficiently multiply `` f `` by `` x**n `` . <EoL>
<BoL> Compute LC and a monic polynomial in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Multiply polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f * a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Evaluate `` f ( a ) `` for `` a `` in `` [ a_1 , ... , a_n ] `` . <EoL>
<BoL> Negate a polynomial in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f**n `` in `` GF ( p ) [ x ] `` using repeated squaring . <EoL>
<BoL> Compute `` f**n `` in `` GF ( p ) [ x ] / ( g ) `` using repeated squaring . <EoL>
<BoL> Compute exact quotient in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f/a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Generate a random polynomial in `` GF ( p ) [ x ] `` of degree `` n `` . <EoL>
<BoL> Compute polynomial remainder in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Efficiently divide `` f `` by `` x**n `` . <EoL>
<BoL> Factor a square-free `` f `` in `` GF ( p ) [ x ] `` for large `` p `` . <EoL>
<BoL> Return `` True `` if `` f `` is square-free in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Return square-free part of a `` GF ( p ) [ x ] `` polynomial . <EoL>
<BoL> Square polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Remove leading zeros from `` f `` . <EoL>
<BoL> Subtract polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f - a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Compute `` f - g*h `` where `` f `` , `` g `` , `` h `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Convert a `` GF ( p ) [ x ] `` polynomial to a dict . <EoL>
<BoL> Convert a `` GF ( p ) [ x ] `` polynomial to `` Z [ x ] `` . <EoL>
<BoL> Compute polynomial trace map in `` GF ( p ) [ x ] / ( f ) `` . <EoL>
<BoL> Factor a square-free `` f `` in `` GF ( p ) [ x ] `` for medium `` p `` . <EoL>
<BoL> We know that coefficients are algebraic so construct the extension . <EoL>
<BoL> Handle composite domains , e.g . : ZZ [ X ] , QQ [ X ] , ZZ ( X ) , QQ ( X ) . <EoL>
<BoL> The last resort case , i.e . use the expression domain . <EoL>
<BoL> Handle simple domains , e.g . : ZZ , QQ , RR and algebraic domains . <EoL>
<BoL> Construct options from keyword arguments or ... options . <EoL>
<BoL> Transform expressions into a multinomial form . <EoL>
<BoL> Return a multivariate constant . <EoL>
<BoL> Return a multivariate one over `` K `` . <EoL>
<BoL> Return `` True `` if `` f `` is one in `` K [ X ] `` . <EoL>
<BoL> Remove leading zeros from `` f `` in `` K [ X ] `` . <EoL>
<BoL> Return a multivariate zero . <EoL>
<BoL> Return `` True `` if `` f `` is zero in `` K [ X ] `` . <EoL>
<BoL> Return a list of multivariate zeros . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Remove leading zeros from `` f `` in `` K [ x ] `` . <EoL>
<BoL> Recursive helper function for : func : ` dmp_degree_in ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_degree_list ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_inflate ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_list_terms ` . <EoL>
<BoL> Recursive helper for : func : ` _rec_strip ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_validate ` . <EoL>
<BoL> Apply `` h `` to pairs of coefficients of `` f `` and `` g `` . <EoL>
<BoL> Convert the ground domain of `` f `` from `` K0 `` to `` K1 `` . <EoL>
<BoL> Create a new copy of a polynomial `` f `` in `` K [ X ] `` . <EoL>
<BoL> Map `` x_i**m_i `` to `` y_i `` in a polynomial in `` K [ X ] `` . <EoL>
<BoL> Return a list of degrees of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Convert `` f `` from `` K [ X , Y ] `` to `` K [ X ] [ Y ] `` . <EoL>
<BoL> Exclude useless levels from `` f `` . <EoL>
<BoL> Create a `` K [ X ] `` polynomial from a `` dict `` . <EoL>
<BoL> Convert the ground domain of `` f `` from SymPy to `` K `` . <EoL>
<BoL> Return the ground `` n `` -th coefficient of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return True if `` f `` is constant in `` K [ X ] `` . <EoL>
<BoL> Return a list of multivariate constants . <EoL>
<BoL> Include useless levels in `` f `` . <EoL>
<BoL> Map `` y_i `` to `` x_i**k_i `` in a polynomial in `` K [ X ] `` . <EoL>
<BoL> Convert `` f `` from `` K [ X ] [ Y ] `` to `` K [ X , Y ] `` . <EoL>
<BoL> List all non-zero terms from `` f `` in the given order `` order `` . <EoL>
<BoL> Map `` x_i**m_i `` to `` y_i `` in a set of polynomials in `` K [ X ] `` . <EoL>
<BoL> Return `` True `` if `` LC ( f ) `` is negative . <EoL>
<BoL> Return a multivariate value nested `` l `` -levels . <EoL>
<BoL> Normalize a multivariate polynomial in the given domain . <EoL>
<BoL> Return the `` n `` -th coefficient of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return a polynomial in `` K [ x_ { P ( 1 ) } , .. , x_ { P ( n ) } ] `` . <EoL>
<BoL> Return `` True `` if `` LC ( f ) `` is positive . <EoL>
<BoL> Return a multivariate polynomial raised `` l `` -levels . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` in `` x_j `` in `` K [ X ] `` . <EoL>
<BoL> Transform `` K [ ..x_i..x_j.. ] `` to `` K [ ..x_j..x_i.. ] `` . <EoL>
<BoL> Remove GCD of terms from `` f `` in `` K [ X ] `` . <EoL>
<BoL> Convert ` f ` into a nested tuple of tuples . <EoL>
<BoL> Return the leading term `` c * x_1**n_1 ... x_k**n_k `` . <EoL>
<BoL> Return the number of levels in `` f `` and recursively strip it . <EoL>
<BoL> Apply `` h `` to pairs of coefficients of `` f `` and `` g `` . <EoL>
<BoL> Convert the ground domain of `` f `` from `` K0 `` to `` K1 `` . <EoL>
<BoL> Create a new copy of a polynomial `` f `` in `` K [ x ] `` . <EoL>
<BoL> Map `` x**m `` to `` y `` in a polynomial in `` K [ x ] `` . <EoL>
<BoL> Create a `` K [ x ] `` polynomial from a `` dict `` . <EoL>
<BoL> Create a `` K [ x ] `` polynomial from a raw `` dict `` . <EoL>
<BoL> Convert the ground domain of `` f `` from SymPy to `` K `` . <EoL>
<BoL> Map `` y `` to `` x**m `` in a polynomial in `` K [ x ] `` . <EoL>
<BoL> Map `` x**m `` to `` y `` in a set of polynomials in `` K [ x ] `` . <EoL>
<BoL> Normalize univariate polynomial in the given domain . <EoL>
<BoL> Return the `` n `` -th coefficient of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return a polynomial of degree `` n `` with coefficients in `` [ a , b ] `` . <EoL>
<BoL> Compute `` x**n * f ( 1/x ) `` , i.e . : reverse `` f `` in `` K [ x ] `` . <EoL>
<BoL> Remove GCD of terms from `` f `` in `` K [ x ] `` . <EoL>
<BoL> Convert `` K [ x ] `` polynomial to a `` dict `` . <EoL>
<BoL> Convert a `` K [ x ] `` polynomial to a raw `` dict `` . <EoL>
<BoL> Convert ` f ` into a tuple . <EoL>
<BoL> Division of tuples representing monomials . <EoL>
<BoL> Return a function defining admissible order on monomials . <EoL>
<BoL> Returns minimal degree for each variable in a set of monomials . <EoL>
<BoL> Helper function for : func : ` dup_decompose ` . <EoL>
<BoL> Helper function for : func : ` _dup_decompose ` . <EoL>
<BoL> Helper function for : func : ` _dup_decompose ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_clear_denoms ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_diff_eval ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_diff_in ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_eval_in ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_eval_tail ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_integrate_in ` . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` using Newton iteration . <EoL>
<BoL> Returns the leading coefficient of `` f `` . <EoL>
<BoL> Returns the trailing coefficient of `` f `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Convert `` f `` to a dict representation with native coefficients . <EoL>
<BoL> Convert `` f `` to a list representation with native coefficients . <EoL>
<BoL> Convert `` f `` to a dict representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a list representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a tuple representation with native coefficients . <EoL>
<BoL> Unify representations of two algebraic numbers . <EoL>
<BoL> Given a low-level mpf_ function , and optionally similar functions <EoL>
<BoL> Converts *x* to an `` mpf `` or `` mpc `` . If *x* is of type `` mpf `` , <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Calculates a sum containing a finite number of terms ( for infinite <EoL>
<BoL> Return *True* if the absolute value of *x* is infinite ; <EoL>
<BoL> Return *True* if *x* is integer-valued ; otherwise return <EoL>
<BoL> Return *True* if *x* is a NaN ( not-a-number ) , or for a complex <EoL>
<BoL> Determine whether *x* is `` normal '' in the sense of floating-point <EoL>
<BoL> Quick logarithmic magnitude estimate of a number . Returns an <EoL>
<BoL> Unify generators in a reasonably intelligent way . <EoL>
<BoL> Create custom class for specific integer modulus . <EoL>
<BoL> Create a raw mpf from a Python float , rounding if necessary . <EoL>
<BoL> Create a raw mpf from a decimal literal , rounding in the <EoL>
<BoL> Absolute value of a complex number , |a+bi| . <EoL>
<BoL> Return the number of decimal digits required to represent <EoL>
<BoL> Convert a raw mpf to a rational number . Return integers ( p , q ) <EoL>
<BoL> Wrapper of CRT for Collins 's resultant algorithm . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a field . <EoL>
<BoL> Helper function for ` dmp_inner_gcd ( ) ` . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a ring . <EoL>
<BoL> Try to eliminate ` x_0 ` from GCD computation in ` K [ X ] ` . <EoL>
<BoL> Interpolate polynomial GCD from integer GCD . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a field . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a ring . <EoL>
<BoL> Interpolate polynomial GCD from integer GCD . <EoL>
<BoL> Chinese Remainder Theorem . <EoL>
<BoL> Coerce `` a mod p `` to an integer in the range `` [ -p/2 , p/2 ] `` . <EoL>
<BoL> Ask for a value of the given configuration item . <EoL>
<BoL> Sort low-level factors in increasing 'complexity ' order . <EoL>
<BoL> Wang/EEZ : Test evaluation points for suitability . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Update `` P `` such that for the updated ` P ' ` ` P ' v = e_ { s } ` . <EoL>
<BoL> Converts the reduced Groebner basis `` F `` of a zero-dimensional <EoL>
<BoL> Multiplication of tuples representing monomials . <EoL>
<BoL> Add rational functions `` f `` and `` g `` . <EoL>
<BoL> Computes quotient of fractions `` f `` and `` g `` . <EoL>
<BoL> Multiply rational functions `` f `` and `` g `` . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Subtract rational functions `` f `` and `` g `` . <EoL>
<BoL> Computes partial derivative in `` x `` . <EoL>
<BoL> Return a list of polynomial generators . <EoL>
<BoL> Add two polynomials . <EoL>
<BoL> Equality test for polynomials . <EoL>
<BoL> Multiply two polynomials . <EoL>
<BoL> raise polynomial to power ` n ` <EoL>
<BoL> p2 * p1 with p2 in the coefficient domain of p1 . <EoL>
<BoL> n - p1 with n convertible to the coefficient domain . <EoL>
<BoL> Subtract polynomial p2 from p1 . <EoL>
<BoL> add to self the monomial coeff*x0**i0*x1**i1* ... <EoL>
<BoL> add to self the product of ( p ) * ( coeff*x0**i0*x1**i1* ... ) <EoL>
<BoL> Approximate equality test for polynomials . <EoL>
<BoL> Cancel common factors in a rational function `` f/g `` . <EoL>
<BoL> Returns the coefficient that stands next to the given monomial . <EoL>
<BoL> Ordered list of polynomial coefficients . <EoL>
<BoL> Returns the constant coeffcient . <EoL>
<BoL> Returns GCD of polynomial 's coefficients . <EoL>
<BoL> Return a copy of polynomial self . <EoL>
<BoL> The leading degree in `` x `` or the main variable . <EoL>
<BoL> A tuple containing leading degrees in all variables . <EoL>
<BoL> Computes partial derivative in `` x `` . <EoL>
<BoL> Division algorithm , see [ CLO ] p64 . <EoL>
<BoL> multiply inplace the polynomial p by an element in the <EoL>
<BoL> Iterator over coefficients of a polynomial . <EoL>
<BoL> Iterator over monomials of a polynomial . <EoL>
<BoL> Iterator over terms of a polynomial . <EoL>
<BoL> Leading monomial tuple according to the monomial ordering . <EoL>
<BoL> Leading monomial as a polynomial element . <EoL>
<BoL> Leading term as a polynomial element . <EoL>
<BoL> Unordered list of polynomial coefficients . <EoL>
<BoL> Unordered list of polynomial monomials . <EoL>
<BoL> Unordered list of polynomial terms . <EoL>
<BoL> Divides all coefficients by the leading coefficient . <EoL>
<BoL> Ordered list of polynomial monomials . <EoL>
<BoL> Returns content and a primitive polynomial . <EoL>
<BoL> square of a polynomial <EoL>
<BoL> Eliminate monomials with zero coefficient . <EoL>
<BoL> The tail degree in `` x `` or the main variable . <EoL>
<BoL> A tuple containing tail degrees in all variables . <EoL>
<BoL> Ordered list of polynomial terms . <EoL>
<BoL> Transform expressions into a multinomial form . <EoL>
<BoL> Construct a field deriving generators and domain <EoL>
<BoL> Construct new rational function field and inject generators into global namespace . <EoL>
<BoL> Construct new rational function field returning ( field , ( x1 , ... , xn ) ) . <EoL>
<BoL> utility function for `` gf_edf_zassenhaus `` <EoL>
<BoL> utility for `` gf_edf_shoup `` <EoL>
<BoL> Used in gf_csolve to generate solutions of f ( x ) cong 0 mod ( p** ( s + 1 ) ) <EoL>
<BoL> Solutions of f ( x ) congruent 0 mod ( p**e ) . <EoL>
<BoL> Compute a basis of the kernel of `` Q `` . <EoL>
<BoL> First part of the Chinese Remainder Theorem . <EoL>
<BoL> Second part of the Chinese Remainder Theorem . <EoL>
<BoL> To solve f ( x ) congruent 0 mod ( n ) . <EoL>
<BoL> compute gf_pow_mod ( f , p , g , p , K ) using the Frobenius map <EoL>
<BoL> return the list of `` x** ( i*p ) mod g in Z_p `` for `` i = 0 , .. , n - 1 `` <EoL>
<BoL> Normalize all coefficients in `` K `` . <EoL>
<BoL> Return the square-free decomposition of a `` GF ( p ) [ x ] `` polynomial . <EoL>
<BoL> Reduce all coefficients modulo `` p `` . <EoL>
<BoL> Value of polynomial 'f ' at 'a ' in field R . <EoL>
<BoL> Returns the values of x satisfying a*x congruent b mod ( m ) <EoL>
<BoL> Computes Groebner basis for a set of polynomials in ` K [ X ] ` . <EoL>
<BoL> Computes a reduced Groebner basis for the ideal generated by F . <EoL>
<BoL> Compare two critical pairs c and d . <EoL>
<BoL> Key for comparing critical pairs . <EoL>
<BoL> Compute the critical pair corresponding to two labeled polynomials . <EoL>
<BoL> F5-reduce a labeled polynomial f by B . <EoL>
<BoL> Computes Groebner basis for a set of polynomials in ` K [ X ] ` . <EoL>
<BoL> Computes GCD of two polynomials using Groebner bases . <EoL>
<BoL> Computes LCM of two polynomials using Groebner bases . <EoL>
<BoL> Check if G is a Groebner basis . <EoL>
<BoL> Checks if G is a minimal Groebner basis . <EoL>
<BoL> Checks if G is a reduced Groebner basis . <EoL>
<BoL> Check if a labeled polynomial is redundant by checking if its <EoL>
<BoL> Compare two labeled polynomials . <EoL>
<BoL> Key for comparing two labeled polynomials . <EoL>
<BoL> Multiply a labeled polynomial with a term . <EoL>
<BoL> Subtract labeled polynomial g from f . <EoL>
<BoL> Does there exist a monomial X such that XA == B ? <EoL>
<BoL> Least common multiple of tuples representing monomials . <EoL>
<BoL> Compute reduced Groebner basis , from BeckerWeispfenning93 , p. 216The actual reduction algorithm . <EoL>
<BoL> Compute the S-polynomial of a critical pair . <EoL>
<BoL> Compare two signatures by extending the term order to K [ X ] ^n . <EoL>
<BoL> Key for comparing two signatures . <EoL>
<BoL> Multiply a signature by a monomial . <EoL>
<BoL> Compute LCM ( LM ( p1 ) , LM ( p2 ) ) /LM ( p1 ) *p1 - LCM ( LM ( p1 ) , LM ( p2 ) ) /LM ( p2 ) *p2 <EoL>
<BoL> Division of two terms in over a ring/field . <EoL>
<BoL> Interpolate polynomial GCD from integer GCD . <EoL>
<BoL> Heuristic polynomial GCD in `` Z [ X ] `` . <EoL>
<BoL> Transform an expression into a multinomial form . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Returns the total degree of a monomial . <EoL>
<BoL> Greatest common divisor of tuples representing monomials . <EoL>
<BoL> Division of tuples representing monomials . <EoL>
<BoL> Returns maximal degree for each variable in a set of monomials . <EoL>
<BoL> Return the n-th pow of the monomial . <EoL>
<BoL> Returns a tuple ( open_lines , close_lines ) containing lists <EoL>
<BoL> function to calculate score based on position among indices <EoL>
<BoL> Print the expression as code . <EoL>
<BoL> Return a factor having root `` v `` <EoL>
<BoL> Generate coefficients for ` primitive_element ( ) ` . <EoL>
<BoL> Returns `` expand_mul ( x**degree ( p , x ) *p.subs ( x , 1/x ) ) `` <EoL>
<BoL> Returns the minimal polynomial for the `` nth-root `` of a sum of surds <EoL>
<BoL> returns `` minpoly ( Add ( *a ) , dom , x ) `` <EoL>
<BoL> Computes the minimal polynomial of an algebraic element <EoL>
<BoL> Returns the minimal polynomial of `` cos ( ex ) `` <EoL>
<BoL> Returns the minimal polynomial of `` exp ( ex ) `` <EoL>
<BoL> Computes the minimal polynomial of an algebraic numberReturns True if it is more likely that the minimal polynomial <EoL>
<BoL> returns `` minpoly ( Mul ( *a ) , dom , x ) `` <EoL>
<BoL> return the minimal polynomial for `` op ( ex1 , ex2 ) `` <EoL>
<BoL> Returns `` minpoly ( ex**pw , x ) `` <EoL>
<BoL> Returns the minimal polynomial of a `` CRootOf `` object . <EoL>
<BoL> Returns the minimal polynomial of `` sin ( ex ) `` <EoL>
<BoL> Returns `` _mexpand ( y**deg*p.subs ( { x : x / y } ) ) `` <EoL>
<BoL> helper function for `` _minimal_polynomial_sq `` <EoL>
<BoL> split the list of integers `` a `` into a list of integers , `` a1 `` having <EoL>
<BoL> Low-level implementation of Chebyshev polynomials of the 1st kind . <EoL>
<BoL> Convert a multinomial form into an expression . <EoL>
<BoL> Construct field isomorphism via factorization . <EoL>
<BoL> Construct field isomorphism using PSLQ algorithm . <EoL>
<BoL> Returns ` True ` if there is a chance for isomorphism . <EoL>
<BoL> Construct a common number field for all extensions . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute resultant of `` f `` and `` g `` . <EoL>
<BoL> Construct a polynomial ring returning `` ( ring , x_1 , ... , x_n ) `` . <EoL>
<BoL> compute the composed sum `` prod ( p2 ( x - beta ) for beta root of p1 ) `` <EoL>
<BoL> Compute square-free norm of `` f `` . <EoL>
<BoL> Express ` extension ` in the field generated by ` theta ` . <EoL>
<BoL> Build a monomial order on `` gens `` . <EoL>
<BoL> Returns the leading coefficient of `` f `` . <EoL>
<BoL> Returns the trailing coefficient of `` f `` . <EoL>
<BoL> Make all coefficients in `` f `` positive . <EoL>
<BoL> Add two multivariate polynomials `` f `` and `` g `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns all coefficients from `` f `` . <EoL>
<BoL> Returns all monomials from `` f `` . <EoL>
<BoL> Returns all terms from a `` f `` . <EoL>
<BoL> Cancel common factors in a rational function `` f/g `` . <EoL>
<BoL> Clear denominators , but keep the ground domain . <EoL>
<BoL> Returns all non-zero coefficients from `` f `` in lex order . <EoL>
<BoL> Returns GCD of `` f `` and `` g `` and their cofactors . <EoL>
<BoL> Computes functional composition of `` f `` and `` g `` . <EoL>
<BoL> Returns GCD of polynomial coefficients . <EoL>
<BoL> Convert the ground domain of `` f `` . <EoL>
<BoL> Return the number of complex roots of `` f `` in `` [ inf , sup ] `` . <EoL>
<BoL> Return the number of real roots of `` f `` in `` [ inf , sup ] `` . <EoL>
<BoL> Computes functional decomposition of `` f `` . <EoL>
<BoL> Reduce degree of ` f ` by mapping ` x_i^m ` to ` y_i ` . <EoL>
<BoL> Returns the leading degree of `` f `` in `` x_j `` . <EoL>
<BoL> Returns a list of degrees of `` f `` . <EoL>
<BoL> Computes the `` m `` -th order derivative of `` f `` in `` x_j `` . <EoL>
<BoL> Computes discriminant of `` f `` . <EoL>
<BoL> Polynomial division with remainder of `` f `` and `` g `` . <EoL>
<BoL> Eject selected generators into the ground domain . <EoL>
<BoL> Evaluates `` f `` at the given point `` a `` in `` x_j `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Computes polynomial exact quotient of `` f `` and `` g `` . <EoL>
<BoL> Exact quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Construct and instance of `` cls `` from a `` dict `` representation . <EoL>
<BoL> Create an instance of `` cls `` given a list of native coefficients . <EoL>
<BoL> Create an instance of `` cls `` given a list of SymPy coefficients . <EoL>
<BoL> Returns polynomial GCD of `` f `` and `` g `` . <EoL>
<BoL> Extended Euclidean algorithm , if univariate . <EoL>
<BoL> Computes greatest factorial factorization of `` f `` . <EoL>
<BoL> Half extended Euclidean algorithm , if univariate . <EoL>
<BoL> Returns the homogeneous order of `` f `` . <EoL>
<BoL> Return homogeneous polynomial of `` f `` <EoL>
<BoL> Inject ground domain generators into `` f `` . <EoL>
<BoL> Computes the `` m `` -th order indefinite integral of `` f `` in `` x_j `` . <EoL>
<BoL> Compute isolating intervals for roots of `` f `` . <EoL>
<BoL> Invert `` f `` modulo `` g `` , if possible . <EoL>
<BoL> Returns l1 norm of `` f `` . <EoL>
<BoL> Returns polynomial LCM of `` f `` and `` g `` . <EoL>
<BoL> Convert algebraic coefficients to rationals . <EoL>
<BoL> Returns maximum norm of `` f `` . <EoL>
<BoL> Divides all coefficients by `` LC ( f ) `` . <EoL>
<BoL> Returns all non-zero monomials from `` f `` in lex order . <EoL>
<BoL> Multiply two multivariate polynomials `` f `` and `` g `` . <EoL>
<BoL> Multiply `` f `` by a an element of the ground domain . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Computes `` Norm ( f ) `` . <EoL>
<BoL> Returns the `` n `` -th coefficient of `` f `` . <EoL>
<BoL> Polynomial pseudo-division of `` f `` and `` g `` . <EoL>
<BoL> Create a DMP out of the given representation . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Polynomial exact pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Polynomial pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Polynomial pseudo-remainder of `` f `` and `` g `` . <EoL>
<BoL> Returns content and a primitive form of `` f `` . <EoL>
<BoL> Computes polynomial quotient of `` f `` and `` g `` . <EoL>
<BoL> Quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Refine an isolating interval to the given precision . <EoL>
<BoL> Computes polynomial remainder of `` f `` and `` g `` . <EoL>
<BoL> Computes resultant of `` f `` and `` g `` via PRS . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` . <EoL>
<BoL> Efficiently compute Taylor shift `` f ( x + a ) `` . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Computes square-free norm of `` f `` . <EoL>
<BoL> Computes square-free part of `` f `` . <EoL>
<BoL> Square a multivariate polynomial `` f `` . <EoL>
<BoL> Computes the Sturm sequence of `` f `` . <EoL>
<BoL> Subtract two multivariate polynomials `` f `` and `` g `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Computes subresultant PRS sequence of `` f `` and `` g `` . <EoL>
<BoL> Returns all non-zero terms from `` f `` in lex order . <EoL>
<BoL> Remove GCD of terms from the polynomial `` f `` . <EoL>
<BoL> Convert `` f `` to a dict representation with native coefficients . <EoL>
<BoL> Make the ground domain exact . <EoL>
<BoL> Make the ground domain a field . <EoL>
<BoL> Convert `` f `` to a list representation with native coefficients . <EoL>
<BoL> Make the ground domain a ring . <EoL>
<BoL> Convert `` f `` to a dict representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a list representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a tuple representation with native coefficients . <EoL>
<BoL> Returns the total degree of `` f `` . <EoL>
<BoL> Evaluate functional transformation `` q**n * f ( p/q ) `` . <EoL>
<BoL> Reduce `` f `` modulo a constant `` p `` . <EoL>
<BoL> Unify representations of two multivariate polynomials . <EoL>
<BoL> Low-level implementation of Chebyshev polynomials of the 2nd kind . <EoL>
<BoL> Low-level implementation of Gegenbauer polynomials . <EoL>
<BoL> Low-level implementation of Hermite polynomials . <EoL>
<BoL> Low-level implementation of Jacobi polynomials . <EoL>
<BoL> Low-level implementation of Laguerre polynomials . <EoL>
<BoL> Low-level implementation of Legendre polynomials . <EoL>
<BoL> Low-level implementation of fn ( n , x ) <EoL>
<BoL> Low-level implementation of fn ( -n , x ) <EoL>
<BoL> Allow specified flags to be used in the given context . <EoL>
<BoL> Bronstein 's full partial fraction decomposition algorithm . <EoL>
<BoL> Bronstein 's full partial fraction decomposition algorithm . <EoL>
<BoL> Partial fractions via method of undetermined coefficients . <EoL>
<BoL> Update options with default values . <EoL>
<BoL> Add two multivariate fractions `` f `` and `` g `` . <EoL>
<BoL> Remove common factors from `` f.num `` and `` f.den `` . <EoL>
<BoL> Returns the denominator of `` f `` . <EoL>
<BoL> Computes quotient of fractions `` f `` and `` g `` . <EoL>
<BoL> Unify representations of two multivariate fractions . <EoL>
<BoL> Create a DMP out of the given representation . <EoL>
<BoL> Computes inverse of a fraction `` f `` . <EoL>
<BoL> Multiply two multivariate fractions `` f `` and `` g `` . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Returns the numerator of `` f `` . <EoL>
<BoL> Create a DMF out of the given representation . <EoL>
<BoL> Unify a multivariate fraction and a polynomial . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Subtract two multivariate fractions `` f `` and `` g `` . <EoL>
<BoL> Make the ground domain exact . <EoL>
<BoL> Make the ground domain a field . <EoL>
<BoL> Make the ground domain a ring . <EoL>
<BoL> Norm of `` f `` in `` K [ X1 , ... , Xn ] `` , often not square-free . <EoL>
<BoL> Initialized configuration of polys module . <EoL>
<BoL> Assign a value to ( or reset ) a configuration item . <EoL>
<BoL> Returns a rational interpolation , where the data points are element of <EoL>
<BoL> Generates symmetric polynomial of order ` n ` . <EoL>
<BoL> Rewrite a polynomial in terms of elementary symmetric polynomials . <EoL>
<BoL> Generate Viete 's formulas for `` f `` . <EoL>
<BoL> Compute coefficient basis for a polynomial over integers . <EoL>
<BoL> Find `` ( L , U ) `` such that `` L < = phi^-1 ( m ) < = U `` . <EoL>
<BoL> Descartes-Euler solution of the quartic equation <EoL>
<BoL> Try to get rid of symbolic coefficients from `` poly `` . <EoL>
<BoL> Returns all factors of a univariate polynomial . <EoL>
<BoL> Returns a list of roots of a binomial polynomial . If the domain is ZZ <EoL>
<BoL> Returns a list of roots of a cubic polynomial . <EoL>
<BoL> Compute roots of cyclotomic polynomials . <EoL>
<BoL> Returns a list of roots of a linear polynomial . <EoL>
<BoL> Returns a list of roots of a quadratic polynomial . If the domain is ZZ <EoL>
<BoL> Calculate exact roots of a solvable quintic <EoL>
<BoL> Transform an expression into a multinomial form . <EoL>
<BoL> Reorder levels using dict representation . <EoL>
<BoL> Multiply a list of `` ( expr , exp ) `` pairs . <EoL>
<BoL> Helper function for : func : ` sqf ` and : func : ` factor ` . <EoL>
<BoL> Helper function for : func : ` sqf_list ` and : func : ` factor_list ` . <EoL>
<BoL> Construct polynomials from expressions . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Sort generators in a reasonably intelligent way . <EoL>
<BoL> Sort a list of `` ( expr , exp ) `` pairs . <EoL>
<BoL> Helper function for : func : ` _factor ` . <EoL>
<BoL> Helper function for : func : ` _symbolic_factor ` . <EoL>
<BoL> helper function to factor polynomial using to_rational_coeffs <EoL>
<BoL> Add a new `` ( key , value ) `` pair to arguments `` dict `` . <EoL>
<BoL> Compute polynomial pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Compute polynomial pseudo-remainder of `` f `` and `` g `` . <EoL>
<BoL> Compute content and the primitive form of `` f `` . <EoL>
<BoL> Return a list of real roots with multiplicities of `` f `` . <EoL>
<BoL> Reduces a polynomial `` f `` modulo a set of polynomials `` G `` . <EoL>
<BoL> Refine an isolating interval of a root to the given precision . <EoL>
<BoL> Compute polynomial remainder of `` f `` and `` g `` . <EoL>
<BoL> Compute square-free factorization of `` f `` . <EoL>
<BoL> Compute a list of square-free factors of `` f `` . <EoL>
<BoL> Compute square-free part of `` f `` . <EoL>
<BoL> Compute Sturm sequence of `` f `` . <EoL>
<BoL> Compute subresultant PRS of `` f `` and `` g `` . <EoL>
<BoL> try to transform a polynomial to have rational coefficientstry rescaling `` x - > alpha*x `` to convert f to a polynomialtry translating `` x - > x + alpha `` to convert f to a polynomialReturn True if `` f `` is a sum with square roots but no other root <EoL>
<BoL> Return the total_degree of `` f `` in the given variables . <EoL>
<BoL> Reduce `` f `` modulo a constant `` p `` . <EoL>
<BoL> Support for passing generators as ` *gens ` and ` [ gens ] ` . <EoL>
<BoL> Transform an expression into a multinomial form given generators . <EoL>
<BoL> Transform an expression into a multinomial form and figure out generators . <EoL>
<BoL> Transform expressions into a multinomial form given generators . <EoL>
<BoL> Transform expressions into a multinomial form and figure out generators . <EoL>
<BoL> Generates a polynomial of degree `` n `` with coefficients in <EoL>
<BoL> Expansion using formula . <EoL>
<BoL> Expansion using formula <EoL>
<BoL> r '' '' '' Coefficient of ` x\_i**j ` in p , where `` t `` = ( i , j ) <EoL>
<BoL> r '' '' '' Helper function for ` rs\_exp ` . <EoL>
<BoL> Return constant term in p with respect to x <EoL>
<BoL> Return a list of precision steps for the Newton 's method <EoL>
<BoL> Check if `` p `` has a constant term in `` x `` <EoL>
<BoL> Compute `` x**n * p1 ( 1/x ) `` for a univariate polynomial `` p1 `` in `` x `` . <EoL>
<BoL> Univariate series expansion of the nth root of `` p `` . <EoL>
<BoL> Univariate series inversion `` 1/p `` modulo `` O ( x**prec ) `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return a list of integers ~= <EoL>
<BoL> Return n factorial ( for integers n > = 0 only ) . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> > > > from sympy.polys.domains import QQ <EoL>
<BoL> Calculate the series expansion of the principal branch of the Lambert W <EoL>
<BoL> Arcsine of a series <EoL>
<BoL> The arctangent of a series <EoL>
<BoL> Hyperbolic arctangent of a series <EoL>
<BoL> Cosine of a series <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Hyperbolic cosine of a series <EoL>
<BoL> Cotangent of a series <EoL>
<BoL> Return partial derivative of `` p `` with respect to `` x `` . <EoL>
<BoL> Exponentiation of a series modulo `` O ( x**prec ) `` <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return `` sum f_i/i ! *x**i `` from `` sum f_i*x**i `` , <EoL>
<BoL> Integrate `` p `` with respect to `` x `` . <EoL>
<BoL> Test if `` p `` is Puiseux series in `` x `` . <EoL>
<BoL> The Logarithm of `` p `` modulo `` O ( x**prec ) `` . <EoL>
<BoL> Find the minimum power of ` a ` in the series expansion of expr <EoL>
<BoL> Return the product of the given two series , modulo `` O ( x**prec ) `` . <EoL>
<BoL> Compute the truncated Newton sum of the polynomial `` p `` <EoL>
<BoL> Multivariate series expansion of the nth root of `` p `` . <EoL>
<BoL> Return `` p1**n `` modulo `` O ( x**prec ) `` <EoL>
<BoL> Return the puiseux series for ` f ( p , x , prec ) ` . <EoL>
<BoL> Return the puiseux series for ` f ( p , q , x , prec ) ` . <EoL>
<BoL> Return the series expansion of an expression about 0 . <EoL>
<BoL> Return a series ` sum c [ n ] *p**n ` modulo ` O ( x**prec ) ` . <EoL>
<BoL> Multivariate series inversion `` 1/p `` modulo `` O ( x**prec ) `` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Sine of a series <EoL>
<BoL> Hyperbolic sine of a series <EoL>
<BoL> Square the series modulo `` O ( x**prec ) `` <EoL>
<BoL> Substitution with truncation according to the mapping in `` rules `` . <EoL>
<BoL> Tangent of a series . <EoL>
<BoL> Hyperbolic tangent of a series <EoL>
<BoL> Truncate the series in the `` x `` variable with precision `` prec `` , <EoL>
<BoL> Construct a ring deriving generators and domain from options and input expressions . <EoL>
<BoL> Return a list of polynomial generators . <EoL>
<BoL> Add a sequence of polynomials or containers of polynomials . <EoL>
<BoL> Add the elements of `` symbols `` as generators to `` self `` <EoL>
<BoL> Add the generators of `` other `` to `` self `` <EoL>
<BoL> Remove specified generators from this ring . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute index of `` gen `` in `` self.gens `` . <EoL>
<BoL> Return the ith-basis element . <EoL>
<BoL> Multiply a sequence of polynomials or containers of polynomials . <EoL>
<BoL> Construct a polynomial ring and inject `` x_1 , ... , x_n `` into the global namespace . <EoL>
<BoL> Construct a polynomial ring returning `` ( ring , ( x_1 , ... , x_n ) ) `` . <EoL>
<BoL> Initialize new complex interval with complete information . <EoL>
<BoL> Internal one step complex root refinement procedure . <EoL>
<BoL> Return tuple representation of the complex isolating <EoL>
<BoL> This complex interval really is located in lower half-plane . <EoL>
<BoL> Return `` True `` if two isolation intervals are disjoint . <EoL>
<BoL> Perform one step of complex root refinement algorithm . <EoL>
<BoL> Refine an isolating interval until it is disjoint with another one . <EoL>
<BoL> Refine an isolating interval until it is of sufficiently small size . <EoL>
<BoL> Perform several steps of complex root refinement algorithm . <EoL>
<BoL> Initialize new real interval with complete information . <EoL>
<BoL> Internal one step real root refinement procedure . <EoL>
<BoL> Return tuple representation of real isolating interval . <EoL>
<BoL> Return `` True `` if two isolation intervals are disjoint . <EoL>
<BoL> Perform one step of real root refinement algorithm . <EoL>
<BoL> Refine an isolating interval until it is disjoint with another one . <EoL>
<BoL> Refine an isolating interval until it is of sufficiently small size . <EoL>
<BoL> Perform several steps of real root refinement algorithm . <EoL>
<BoL> Return the half-axis ( or origin ) on which ( re , im ) point is located . <EoL>
<BoL> Find a rectangle of minimum area for bisection . <EoL>
<BoL> Discard an isolating interval if outside `` ( inf , sup ) `` . <EoL>
<BoL> Check if Mobius transforms define disjoint intervals . <EoL>
<BoL> Horizontal bisection step in Collins-Krandick root isolation algorithm . <EoL>
<BoL> Generate a sequence of extended quadrants from a list of critical points . <EoL>
<BoL> Handle special case of CF algorithm when `` f `` is homogeneous . <EoL>
<BoL> Convert an open interval to a Mobius transform . <EoL>
<BoL> Convert a Mobius transform to an open interval . <EoL>
<BoL> Isolate real roots of a list of polynomials and disjoin intervals . <EoL>
<BoL> Return `` True `` if the given rectangle is small enough . <EoL>
<BoL> Reverse intervals for traversal from right to left and from top to bottom . <EoL>
<BoL> Transform sequences of quadrants to a sequence of rules . <EoL>
<BoL> Vertical bisection step in Collins-Krandick root isolation algorithm . <EoL>
<BoL> Compute the winding number of the input polynomial , i.e . the number of roots . <EoL>
<BoL> Return the number of imaginary roots for irreducible <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Fateman 's GCD benchmark : trivial GCD <EoL>
<BoL> Fateman 's GCD benchmark : linearly dense quartic inputs <EoL>
<BoL> Fateman 's GCD benchmark : sparse inputs ( deg f ~ vars f ) <EoL>
<BoL> Fateman 's GCD benchmark : trivial GCD <EoL>
<BoL> Fateman 's GCD benchmark : linearly dense quartic inputs <EoL>
<BoL> Fateman 's GCD benchmark : sparse inputs ( deg f ~ vars f ) <EoL>
<BoL> Generates n-th Swinnerton-Dyer polynomial in ` x ` . <EoL>
<BoL> Recursively collect sums in an expression . <EoL>
<BoL> Solve a system of two bivariate quadratic polynomial equations . <EoL>
<BoL> Solve a generic system of polynomial equations.Returns True if 'f ' is univariate in its last variable.Replace generator with a root so that the result is nice.Recursively solves reduced polynomial systems . <EoL>
<BoL> Solve a system of polynomial equations . <EoL>
<BoL> Solve a polynomial system using Gianni-Kalkbrenner algorithm . <EoL>
<BoL> Correctly rounded integer ( floor ) square root with remainder . <EoL>
<BoL> See if unicode output is available and leverage it if possible <EoL>
<BoL> Set whether pretty-printer should use unicode by default <EoL>
<BoL> Returns a string containing the prettified form of expr . <EoL>
<BoL> Prints C representation of the given expression . <EoL>
<BoL> Prints the Fortran representation of the given expression . <EoL>
<BoL> Prints the GLSL representation of the given expression . <EoL>
<BoL> Print to Gtkmathview , a gtk widget capable of rendering MathML . <EoL>
<BoL> Prints the Javascript representation of the given expression . <EoL>
<BoL> Prints LaTeX representation of the given expression . Takes the same <EoL>
<BoL> Prints a pretty representation of the MathML code for expr . If printer is <EoL>
<BoL> Print output of python ( ) function <EoL>
<BoL> Prints R representation of the given expression . <EoL>
<BoL> Prints a tree representation of `` node '' . <EoL>
<BoL> Declare a numeric constant at the top of a function <EoL>
<BoL> Take in a list of lines of code , and format them accordingly . <EoL>
<BoL> Formats a text string as a comment . <EoL>
<BoL> Formats a codestring with the proper line ending . <EoL>
<BoL> Returns the precedence of a given object . <EoL>
<BoL> Return whether a partial derivative symbol is required for printing <EoL>
<BoL> Split a symbol name into a name , superscripts and subscripts <EoL>
<BoL> Print a dictionary of attributes <EoL>
<BoL> List of strings for all expr- > expr.arg pairs <EoL>
<BoL> String defining a node <EoL>
<BoL> A string that follows obj = type ( obj ) ( *obj.args ) exactly <EoL>
<BoL> Merge style dictionaries in order <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Prints the Julia representation of the given expression . <EoL>
<BoL> Scan through string looking for a match to the pattern , returning <EoL>
<BoL> Returns a string usable for lambdifying . <EoL>
<BoL> Register function mappings supplied by user <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Prints the Octave ( or Matlab ) representation of the given expression . <EoL>
<BoL> Returns the precedence of a given object according to the traditional rules <EoL>
<BoL> Converts an expr to a string of Python code <EoL>
<BoL> Return Python interpretation of passed expression <EoL>
<BoL> Converts an expr to a string of r code <EoL>
<BoL> The fallback printer . <EoL>
<BoL> Prints each item in ` args ` and joins them with ` sep ` . <EoL>
<BoL> return expr in repr form <EoL>
<BoL> basic function for printing ` Function ` <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Prints Rust representation of the given expression . <EoL>
<BoL> Converts an expr to a string of Rust code <EoL>
<BoL> return expr in mixed str/repr form <EoL>
<BoL> Prettyprints systems of nodes . <EoL>
<BoL> Returns information about the `` node '' . <EoL>
<BoL> Returns a tree representation of `` node '' as a string . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Put an expression over a common denominator , cancel and reduce . <EoL>
<BoL> Simplifies a rational expression `` expr `` modulo the prime idealCompute all monomials with degree less than `` n `` that arer '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Solve equation of a type p ( x ; a_1 , ... , a_k ) == q ( x ) where both <EoL>
<BoL> Finds the residue of `` expr `` at the point x=x0 . <EoL>
<BoL> Find tests for the given object and any contained objects , and <EoL>
<BoL> Return a line number of the given object 's docstring . Note : <EoL>
<BoL> Return true if the given object is defined in the given <EoL>
<BoL> Return a DocTest for the given object , if it defines a docstring ; <EoL>
<BoL> Return a list of the DocTests that are defined by the given <EoL>
<BoL> Record the fact that the given DocTest ( ` test ` ) generated ` f ` <EoL>
<BoL> Run the examples in ` test ` . Write the outcome of each example <EoL>
<BoL> Create a new test runner . <EoL>
<BoL> Report that the given example failed . <EoL>
<BoL> Report that the test runner is about to process the given <EoL>
<BoL> Report that the given example ran successfully . ( Only <EoL>
<BoL> Report that the given example raised an unexpected exception . <EoL>
<BoL> Run the examples in ` test ` , and display the results using the <EoL>
<BoL> Print a summary of all the test cases that have been run by <EoL>
<BoL> Find tests for the given object and any contained objects , and <EoL>
<BoL> Return a DocTest for the given object , if it defines a docstring ; <EoL>
<BoL> Run the examples in `` test `` , and display the results using the <EoL>
<BoL> r '' '' '' Checks if given pathname x is an importable module by checking for <EoL>
<BoL> Runs the tests and returns True if all tests pass , otherwise False . <EoL>
<BoL> Convert string to hex-escaped ASCII string . <EoL>
<BoL> Return True iff the actual output from an example ( ` got ` ) <EoL>
<BoL> Return a string describing the differences between the <EoL>
<BoL> Returns the list of test_*.py ( default ) files at or below directory <EoL>
<BoL> Does the keyword expression self._kw match `` x '' ? Returns True/False . <EoL>
<BoL> Internal function that actually runs the doctests . <EoL>
<BoL> Add the given number of space characters to the beginning of <EoL>
<BoL> Report that the given example failed . <EoL>
<BoL> Internal function that actually runs the tests . <EoL>
<BoL> Converts a list of '/ ' separated paths into a list of <EoL>
<BoL> Test whether FILENAME matches PATTERN . <EoL>
<BoL> Returns the root sympy directory and set the global value <EoL>
<BoL> Splits a list into part a of bInterpolate the inverse to the cumulative <EoL>
<BoL> Run tests in the specified test_*.py files . <EoL>
<BoL> Returns appropriate sequence object . <EoL>
<BoL> Checks whether function `` func `` is invertible when the domain is <EoL>
<BoL> Simplify an intersection using known rules <EoL>
<BoL> Simplify a : class : ` Union ` using known rules <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Python calls __getattr__ if no attribute of that name was installed <EoL>
<BoL> This function handles the indefinite integrations of Singularity functions . <EoL>
<BoL> r '' '' '' Return a tuple derived from f = lhs - rhs that is one of <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Solves the augmented matrix system using LUsolve and returns a dictionary <EoL>
<BoL> Replace sec , csc with 1/cos , 1/sin <EoL>
<BoL> Return True if e is a Pow or is exp . <EoL>
<BoL> Return a checked solution for f in terms of one or more of theReturn ( b**e , q ) for x = b** ( p*e/q ) where p/q is the leading <EoL>
<BoL> Helper for _solve that solves a transcendental equation with respect <EoL>
<BoL> Return ( recursively ) set of all denominators that appear in eq <EoL>
<BoL> Return the `` det ( M ) `` computed from minors without <EoL>
<BoL> Return the det ( `` M `` ) by using permutations to select factors . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return ( e , s , d ) where e and s are versions of eqs and <EoL>
<BoL> Return the maximum depth of any square root argument of p . <EoL>
<BoL> Remove radicals with symbolic arguments and return ( eq , cov ) , <EoL>
<BoL> Prints the source code of a given object . <EoL>
<BoL> Denests sqrts in an expression that contain other square roots <EoL>
<BoL> Strategy for canonicalization <EoL>
<BoL> Compose a sequence of brules so that they apply to the expr sequentially <EoL>
<BoL> Only apply branching rule if condition is true <EoL>
<BoL> Print the input and output expressions at each rule application <EoL>
<BoL> Execute one of the branching rules <EoL>
<BoL> Apply a branching rule repeatedly until it has no effect <EoL>
<BoL> Multiplex many branching rules into one <EoL>
<BoL> Yield only those results which satisfy the predicate <EoL>
<BoL> Turn a rule into a branching rule <EoL>
<BoL> Apply a rule down a tree running it on the top nodes first <EoL>
<BoL> Strategic all - apply rule to args <EoL>
<BoL> Compose a sequence of rules so that they apply to the expr sequentially <EoL>
<BoL> Print out before and after expressions each time rule is used <EoL>
<BoL> Memoized version of a rule <EoL>
<BoL> Select result of rules that minimizes objective <EoL>
<BoL> Return original expr if rule raises exception <EoL>
<BoL> Rebuild a SymPy tree <EoL>
<BoL> Replace expressions exactly <EoL>
<BoL> Full simultaneous exact substitution <EoL>
<BoL> Apply a rule down a tree running it on the top nodes first . <EoL>
<BoL> Apply a rule up a tree - stop on success . <EoL>
<BoL> Strategic all - apply rule to args . <EoL>
<BoL> Apply a rule down a tree - stop on success . <EoL>
<BoL> Execute a strategic tree . Return all possibilities . <EoL>
<BoL> Execute a strategic tree . Select alternatives greedily <EoL>
<BoL> Apply functions onto recursive containers ( tree ) <EoL>
<BoL> Returns the unsolved symbol presentseparate the Complements , Intersections , ImageSet lambda exprIf ` rnew ` ( A dict < symbol : soln > ) contains valid solnSolves the system using already known solution <EoL>
<BoL> Return a Tuple containing the passed expressions with symbols <EoL>
<BoL> Create symbols and inject them into the global namespace.Recursively inject symbols to the global namespace . <EoL>
<BoL> Adaptively measure execution time of a function . <EoL>
<BoL> Compute a general Fourier-type transform <EoL>
<BoL> r '' '' '' <EoL>
<BoL> The backend function for inverse Laplace transforms.Simplify a piecewise expression from hyperexpand . <EoL>
<BoL> A helper for the real inverse_mellin_transform function , this one here <EoL>
<BoL> The backend function for Laplace transforms.Turn `` conds `` into a strip and auxiliary conditions . <EoL>
<BoL> Backend function to compute Mellin transforms.Turn `` cond `` into a strip ( a , b ) , and auxiliary conditions . <EoL>
<BoL> This is a decorator generator for dropping convergence conditions . <EoL>
<BoL> Try to rewrite the product f ( s ) as a product of gamma functions , Decide whether pole at c lies to the left of the fundamental strip.Test if arg is of form a*s+b , raise exception if not . <EoL>
<BoL> Re-write the sine function `` sin ( m*s + n ) `` as gamma functions , compatible <EoL>
<BoL> r '' '' '' Return True only if |ex1| > |ex2| , False only if |ex1| < |ex2|.simplify x < y <EoL>
<BoL> Compute a general sine or cosine-type transform <EoL>
<BoL> Use `` func `` to transform `` expr `` at the given level . <EoL>
<BoL> Creates a customized copy of the Parameter . <EoL>
<BoL> Yield sorted list of keys . <EoL>
<BoL> Return the subset of this RcParams dictionary whose keys match , <EoL>
<BoL> print message s to self.fileo if self.level > =level . Return <EoL>
<BoL> return a callable function that wraps func and reports it <EoL>
<BoL> Add documentation for a *data* field to the given docstring . <EoL>
<BoL> Return custom data dictionary of ( r , g , b ) conversion functions , which <EoL>
<BoL> Parameters <EoL>
<BoL> Create new object with the same class , update attributes <EoL>
<BoL> Make a colormap from a list of colors . <EoL>
<BoL> Return a new color map with *lutsize* entries . <EoL>
<BoL> Make a reversed instance of the Colormap . <EoL>
<BoL> Set color to be used for masked values . <EoL>
<BoL> Set color to be used for high out-of-range values . <EoL>
<BoL> Set color to be used for low out-of-range values . <EoL>
<BoL> Return the approximate height of the text . This is used to place <EoL>
<BoL> Returns list of vertices and extents covered by the plot . <EoL>
<BoL> Determine the best location to place the legend . <EoL>
<BoL> Place the *bbox* inside the *parentbbox* according to a given <EoL>
<BoL> Initialize the legend_box . The legend_box is an instance of <EoL>
<BoL> Set the boilerplate props for artists added to axes . <EoL>
<BoL> Adds a callback function that will be called whenever one of <EoL>
<BoL> For artists in an axes , if the xaxis has units support , <EoL>
<BoL> For artists in an axes , if the yaxis has units support , <EoL>
<BoL> Set the draggable state -- if state is <EoL>
<BoL> Set draw frame to b . <EoL>
<BoL> Find artist objects . <EoL>
<BoL> Return *cursor data* string formatted . <EoL>
<BoL> Return filter function to be used for agg filter . <EoL>
<BoL> Return the alpha value used for blending - not supported on all <EoL>
<BoL> Return the bbox that the legend will be anchored to . <EoL>
<BoL> Return the _contains test used by the artist , or *None* for default . <EoL>
<BoL> Get the cursor data for a given event . <EoL>
<BoL> A class method that returns the default handler map . <EoL>
<BoL> Return `` True `` if the legend is draggable , `` False `` otherwise . <EoL>
<BoL> Return the ` .Figure ` instance the artist belongs to . <EoL>
<BoL> Return the ` ~.patches.Rectangle ` instances used to frame the legend . <EoL>
<BoL> Get whether the legend box patch is drawn . <EoL>
<BoL> Returns the group id . <EoL>
<BoL> Return boolean flag , `` True `` if artist is included in layout <EoL>
<BoL> Get the label used for this artist in the legend . <EoL>
<BoL> Return a legend handler from *legend_handler_map* that <EoL>
<BoL> Return the handler map . <EoL>
<BoL> Return the picker object used by this artist . <EoL>
<BoL> Return whether the artist is to be rasterized . <EoL>
<BoL> Returns the sketch parameters for the artist . <EoL>
<BoL> Returns the snap setting which may be : <EoL>
<BoL> Like ` .Legend.get_window_extent ` , but uses the box for the legend . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` <EoL>
<BoL> Return the clip path with the non-affine part of its <EoL>
<BoL> Returns the url . <EoL>
<BoL> Return the artist 's zorder . <EoL>
<BoL> List the children of the artist which contain the mouse event *event* . <EoL>
<BoL> Returns whether the artist is assigned to a ` .Figure ` . <EoL>
<BoL> Returns *True* if : class : ` Artist ` has a transform explicitly <EoL>
<BoL> Fire an event when property changed , calling all of the <EoL>
<BoL> Process pick event <EoL>
<BoL> return a dictionary mapping property name - > value for all Artist props <EoL>
<BoL> Remove the artist from the figure if possible . The effect <EoL>
<BoL> Remove a callback based on its *id* . <EoL>
<BoL> A property batch setter . Pass *kwargs* to set properties . <EoL>
<BoL> Set the agg filter . <EoL>
<BoL> Set the alpha value used for blending - not supported on all backends . <EoL>
<BoL> Set the artist 's animation state . <EoL>
<BoL> Set the bbox that the legend will be anchored to . <EoL>
<BoL> Set the artist 's clip ` .Bbox ` . <EoL>
<BoL> Set whether artist uses clipping . <EoL>
<BoL> Set the artist 's clip path , which may be : <EoL>
<BoL> Replace the contains test used by this artist . The new picker <EoL>
<BoL> A class method to set the default handler map . <EoL>
<BoL> Enable or disable mouse dragging support of the legend . <EoL>
<BoL> Set the ` .Figure ` instance the artist belongs to . <EoL>
<BoL> Set whether the legend box patch is drawn . <EoL>
<BoL> Sets the ( group ) id for the artist . <EoL>
<BoL> Set if artist is to be included in layout calculations , <EoL>
<BoL> Set the label to *s* for auto legend . <EoL>
<BoL> Set the path effects . <EoL>
<BoL> Set the epsilon for picking used by this artist <EoL>
<BoL> Force rasterized ( bitmap ) drawing in vector backend output . <EoL>
<BoL> Sets the sketch parameters . <EoL>
<BoL> Sets the snap setting which may be : <EoL>
<BoL> Set the legend title . Fontproperties can be optionally set <EoL>
<BoL> Set the artist transform . <EoL>
<BoL> Sets the url for the artist . <EoL>
<BoL> Set the artist 's visibility . <EoL>
<BoL> Set the zorder for the artist . Artists with lower zorder <EoL>
<BoL> Update this artist 's properties from the dictionary *prop*.Sorting out how to update property ( setter or setattr ) . <EoL>
<BoL> A class method to update the default handler map . <EoL>
<BoL> - Align right/left and bottom/top spines of appropriate subplots . <EoL>
<BoL> arrange the subplotspec children of this gridspec , and then recursively <EoL>
<BoL> helper function to make sure all axes in the <EoL>
<BoL> Check for unoccupied gridspec slots and make ghost axes for these <EoL>
<BoL> For each axes , make a margin between the *pos* layoutbox and the <EoL>
<BoL> Do the layout for a colorbar , to not oeverly pollute colorbar.py <EoL>
<BoL> Do the layout for a colorbar , to not oeverly pollute colorbar.py <EoL>
<BoL> If the config directory can not be created , create a temporary directory . <EoL>
<BoL> Returns the XDG cache directory , according to the ` XDG <EoL>
<BoL> Returns the XDG configuration directory , according to the ` XDG <EoL>
<BoL> Helper to check if this layoutbox is the layoutbox of a <EoL>
<BoL> Helper to check if this layoutbox is the layoutbox of a <EoL>
<BoL> Constrain the height of the layout box . height is <EoL>
<BoL> Only do this for pos . This sets a variable distance <EoL>
<BoL> Make the layoutbox have same position as other layoutbox <EoL>
<BoL> Constrain the width of the layout box . ` width ` is <EoL>
<BoL> Set the height of the layout box . <EoL>
<BoL> Find children of this layout box that are subplots . We want to line <EoL>
<BoL> replace the parent of this with the new parent <EoL>
<BoL> Update *all* the variables that are part of the solver this LayoutBox <EoL>
<BoL> Stack LayoutBox instances from left to right . <EoL>
<BoL> Stack LayoutBox instances from left to right . <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Make all elements in this tree none ... This signals not to do any more <EoL>
<BoL> Simple plotting to show where boxes are <EoL>
<BoL> Print the children of the layoutbox <EoL>
<BoL> Print the tree of layoutboxes <EoL>
<BoL> Generate a short sequential id for layoutbox objects ... <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Decorator that logs a function 's return value , and memoizes that value . <EoL>
<BoL> Check for -- verbose-LEVEL type command line arguments and <EoL>
<BoL> Try to remove all traces of figure *num* . <EoL>
<BoL> Redraw all figures registered with the pyplot <EoL>
<BoL> Return the manager of the active figure , or *None* . <EoL>
<BoL> Return a list of figure managers . <EoL>
<BoL> If figure manager *num* exists , make it the active <EoL>
<BoL> Return the number of figures being managed . <EoL>
<BoL> Return *True* if figure *num* exists . <EoL>
<BoL> Make the figure corresponding to *manager* the active one . <EoL>
<BoL> Return : class : ` matplotlib.RcParams ` from the contents of the given file . <EoL>
<BoL> Either returns data [ key ] or passes data back . Also <EoL>
<BoL> Use a -- verbose-LEVEL level to set the logging level : <EoL>
<BoL> Parse the AFM file in file object *fh* . <EoL>
<BoL> Return the fontangle as float . <EoL>
<BoL> Return the cap height as float . <EoL>
<BoL> Return the font family name , e.g. , 'Times ' . <EoL>
<BoL> Return the font name , e.g. , 'Times-Roman ' . <EoL>
<BoL> Return the font full name , e.g. , 'Times-Roman ' . <EoL>
<BoL> Get the bounding box ( ink ) height of character *c* ( space is 0 ) . <EoL>
<BoL> Return the standard horizontal stem width as float , or *None* if <EoL>
<BoL> Return the kerning pair distance ( possibly 0 ) for chars *c1* and *c2* . <EoL>
<BoL> Return the kerning pair distance ( possibly 0 ) for chars <EoL>
<BoL> Get the name of the character , i.e. , ' ; ' is 'semicolon ' . <EoL>
<BoL> Return the string bounding box . <EoL>
<BoL> Return the string bounding box and the maximal descent . <EoL>
<BoL> Return the underline thickness as float . <EoL>
<BoL> Return the standard vertical stem width as float , or *None* if <EoL>
<BoL> Return the font weight , e.g. , 'Bold ' or 'Roman ' . <EoL>
<BoL> Get the width of the character from the character metric WX field . <EoL>
<BoL> Get the width of the character from a type1 character name . <EoL>
<BoL> Return the xheight as float . <EoL>
<BoL> Return the string width ( including kerning ) and string height <EoL>
<BoL> Parse the Adobe Font Metrics file in file handle *fh* . <EoL>
<BoL> Parse the given filehandle for character metrics information and return <EoL>
<BoL> Parse the given filehandle for composites information return them as a <EoL>
<BoL> Reads the font metrics header ( up to the char metrics ) and returns <EoL>
<BoL> Return a kern pairs dictionary ; keys are ( *char1* , *char2* ) tuples and <EoL>
<BoL> Parse the optional fields for kern pair data and composites . <EoL>
<BoL> Check if the file at least looks like AFM . <EoL>
<BoL> Test whether the artist contains the mouse event . <EoL>
<BoL> Return a list of the child : class : ` Artist ` s this <EoL>
<BoL> Like ` Artist.get_window_extent ` , but includes any clipping . <EoL>
<BoL> Get the axes bounding box in display space . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Get the attribute strings and a full path to where the setter <EoL>
<BoL> Changes the full path to the public API path that is used <EoL>
<BoL> return 'PROPNAME or alias ' if *s* has an alias , else return <EoL>
<BoL> return 'PROPNAME or alias ' if *s* has an alias , else return <EoL>
<BoL> Get a dict mapping property fullnames to sets of aliases for each alias <EoL>
<BoL> Get the attribute strings with setters for object . e.g. , for a line , <EoL>
<BoL> Get the legal arguments for the setter associated with *attr* . <EoL>
<BoL> Return *True* if method object *o* is an alias for another <EoL>
<BoL> Return the getters and actual values as list of strings . <EoL>
<BoL> If *prop* is *None* , return a list of strings of all settable <EoL>
<BoL> If *prop* is *None* , return a list of strings of all settable <EoL>
<BoL> return a dictionary mapping property name - > value <EoL>
<BoL> Parameters <EoL>
<BoL> Called by : meth : ` invalidate ` and subsequently ascends the transform <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , shifted to position *c* <EoL>
<BoL> Returns whether `` ( x , y ) `` is in the bounding box or on its edge . <EoL>
<BoL> Returns whether *x* is in the closed ( : attr : ` x0 ` , : attr : ` x1 ` ) interval . <EoL>
<BoL> Returns whether *y* is in the closed ( : attr : ` y0 ` , : attr : ` y1 ` ) interval . <EoL>
<BoL> Return an array of points which are the four corners of this <EoL>
<BoL> Count the number of vertices contained in the : class : ` Bbox ` . <EoL>
<BoL> Count the number of bounding boxes that overlap this one . <EoL>
<BoL> Return a new : class : ` Bbox ` which is this : class : ` Bbox ` <EoL>
<BoL> ( staticmethod ) Create a new : class : ` Bbox ` from *x0* , *y0* , <EoL>
<BoL> ( staticmethod ) Create a new Bbox from *left* , *bottom* , <EoL>
<BoL> Returns whether `` x , y `` is in the bounding box , but not on its edge . <EoL>
<BoL> Returns whether *x* is in the open ( : attr : ` x0 ` , : attr : ` x1 ` ) interval . <EoL>
<BoL> Returns whether *y* is in the open ( : attr : ` y0 ` , : attr : ` y1 ` ) interval . <EoL>
<BoL> Returns whether this bounding box overlaps with the other bounding box , <EoL>
<BoL> Get the points of the bounding box directly as a numpy array <EoL>
<BoL> Set whether the existing bounds of the box should be ignored <EoL>
<BoL> Return the intersection of the two bboxes or None <EoL>
<BoL> Invalidate this : class : ` TransformNode ` and triggers an <EoL>
<BoL> Return a new : class : ` Bbox ` object , statically transformed by <EoL>
<BoL> Returns True if the : class : ` Bbox ` is the unit bounding box <EoL>
<BoL> ( staticmethod ) Create a new null : class : ` Bbox ` from ( inf , inf ) to <EoL>
<BoL> Returns whether this bounding box overlaps with the other bounding box . <EoL>
<BoL> Return a new : class : ` Bbox ` that is padded on all four sides by <EoL>
<BoL> Return a new bounding box that bounds a rotated version of <EoL>
<BoL> Set this bounding box from the `` frozen '' bounds of another <EoL>
<BoL> Set the children of the transform , to let the invalidation <EoL>
<BoL> Set the points of the bounding box directly from a numpy array <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , shrunk by the factor *mx* <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , shrunk so that it is as <EoL>
<BoL> e.g. , `` bbox.splitx ( f1 , f2 , ... ) `` <EoL>
<BoL> e.g. , `` bbox.splitx ( f1 , f2 , ... ) `` <EoL>
<BoL> Return a new : class : ` Bbox ` object , statically transformed by <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , statically translated by <EoL>
<BoL> Return a : class : ` Bbox ` that contains all of the given bboxes . <EoL>
<BoL> ( staticmethod ) Create a new unit : class : ` Bbox ` from ( 0 , 0 ) to <EoL>
<BoL> Update the bounds of the : class : ` Bbox ` based on the passed in <EoL>
<BoL> Update the bounds of the : class : ` Bbox ` based on the passed in <EoL>
<BoL> Composes two transforms together such that *self* is followed <EoL>
<BoL> Composes two transforms together such that *self* is followed <EoL>
<BoL> Returns a transform stack which goes all the way down self 's transform <EoL>
<BoL> Concatenates two transformation matrices ( represented as numpy <EoL>
<BoL> Returns an iterator breaking down this transform stack from left to <EoL>
<BoL> Return whether the given transform is a sub-tree of this transform . <EoL>
<BoL> Returns whether the given branch is a sub-tree of this transform on <EoL>
<BoL> ( staticmethod ) Create a new transformation matrix as a 3x3 <EoL>
<BoL> Return the values of the matrix as a sequence ( a , b , c , d , e , f ) <EoL>
<BoL> Performs transformation on a set of angles anchored at <EoL>
<BoL> Transform the given bounding box . <EoL>
<BoL> Array interface to get at this Transform 's affine matrix . <EoL>
<BoL> Creates a new : class : ` TransformNode ` . <EoL>
<BoL> Returns a frozen copy of this transform node . The frozen copy <EoL>
<BoL> Get the affine part of this transform . <EoL>
<BoL> Get the Affine transformation array for the affine part <EoL>
<BoL> Return the corresponding inverse transformation . <EoL>
<BoL> Performs the transformation on the given array of values . <EoL>
<BoL> Performs only the affine part of this transformation on the <EoL>
<BoL> Performs only the non-affine part of the transformation . <EoL>
<BoL> Returns a transformed path . <EoL>
<BoL> Returns a path , transformed only by the affine part of <EoL>
<BoL> Returns a path , transformed only by the non-affine <EoL>
<BoL> A convenience function that returns the transformed copy of a <EoL>
<BoL> Parameters <EoL>
<BoL> Create a new : class : ` TransformedPatchPath ` from the given <EoL>
<BoL> Return a fully-transformed copy of the child path . <EoL>
<BoL> Return a copy of the child path , with the non-affine part of <EoL>
<BoL> Return a copy of the child path , with the non-affine part of <EoL>
<BoL> Create a new : class : ` TransformedPath ` from the given <EoL>
<BoL> Decorator for Artist.draw method . Provides routines <EoL>
<BoL> Return the value of object 's property . *property* is an optional string <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Set a property on an artist object . <EoL>
<BoL> <EoL>
<BoL> Helper for : func : ` ~matplotlib.pyplot.gci ` ; <EoL>
<BoL> Returns the patch used to draw the background of the axes . It <EoL>
<BoL> Returns a dict whose keys are spine names and values are <EoL>
<BoL> Save information required to reproduce the current view . <EoL>
<BoL> Make a twinx axes of self . This is used for twinx and twiny . <EoL>
<BoL> Callback for processing changes to axis units . <EoL>
<BoL> Look for unit *kwargs* and update the axis instances as necessary <EoL>
<BoL> Set the current image . <EoL>
<BoL> set the boilerplate props for artists added to axes <EoL>
<BoL> set the *_xaxis_transform* , *_yaxis_transform* , <EoL>
<BoL> private version of set_position . Call this internally <EoL>
<BoL> Set the offset for the title either from rcParams [ 'axes.titlepad ' ] <EoL>
<BoL> Apply a previously saved view . <EoL>
<BoL> Figures out the data limit of the given line , updating self.dataLim . <EoL>
<BoL> update the data limits for patch *p* <EoL>
<BoL> Update the title position based on the bounding box enclosing <EoL>
<BoL> Raise ValueError if converted limits are non-finite . <EoL>
<BoL> Plot the autocorrelation of *x* . <EoL>
<BoL> Add any : class : ` ~matplotlib.artist.Artist ` to the axes . <EoL>
<BoL> Add a : class : ` ~matplotlib.axes.Axesbase ` instance <EoL>
<BoL> Add a : class : ` ~matplotlib.collections.Collection ` instance <EoL>
<BoL> Add a : class : ` ~matplotlib.container.Container ` instance <EoL>
<BoL> Add a : class : ` ~matplotlib.image.AxesImage ` to the axes . <EoL>
<BoL> Add a : class : ` ~matplotlib.lines.Line2D ` to the list of plot <EoL>
<BoL> Add a : class : ` ~matplotlib.patches.Patch ` *p* to the list of <EoL>
<BoL> Add a : class : ` ~matplotlib.table.Table ` instance to the <EoL>
<BoL> Adjust the Axes for a specified data aspect ratio . <EoL>
<BoL> Add an arrow to the axes . <EoL>
<BoL> Autoscale the axis view to the data ( toggle ) . <EoL>
<BoL> Autoscale the view limits using the data limits . <EoL>
<BoL> Add a horizontal line across the axis . <EoL>
<BoL> Add a horizontal span ( rectangle ) across the axis . <EoL>
<BoL> Convenience method to get or set some axis properties . <EoL>
<BoL> Add a vertical line across the axes . <EoL>
<BoL> Add a vertical span ( rectangle ) across the axes . <EoL>
<BoL> % ( barbs_doc ) s <EoL>
<BoL> Loads properties in the dictionary from rc file if not already <EoL>
<BoL> Plot a horizontal sequence of rectangles . <EoL>
<BoL> Return *True* if this axes supports any pan/zoom button functionality . <EoL>
<BoL> Return *True* if this axes supports the zoom box button functionality . <EoL>
<BoL> Clear the current axes . <EoL>
<BoL> Clear the axes . <EoL>
<BoL> Plot the coherence between *x* and *y* . <EoL>
<BoL> Test whether the mouse event occurred in the axes . <EoL>
<BoL> Returns *True* if the point ( tuple of x , y ) is inside the axes <EoL>
<BoL> Called when the mouse moves during a pan operation . <EoL>
<BoL> Draw everything ( plot lines , axes , labels ) <EoL>
<BoL> This method can only be used after an initial draw which <EoL>
<BoL> Called when a pan operation completes ( when the mouse button <EoL>
<BoL> return xs [ mask ] , ys [ mask ] where mask is True but xs andprivate function to compute error bars <EoL>
<BoL> Plot filled polygons . <EoL>
<BoL> Return a format string formatting the *x* , *y* coord <EoL>
<BoL> Return *x* string formatted . This function will use the attribute <EoL>
<BoL> Return y string formatted . This function will use the <EoL>
<BoL> Get the anchor location . <EoL>
<BoL> Get whether autoscaling is applied for both axes on plot commands <EoL>
<BoL> Get whether autoscaling for the x-axis is applied on plot commands <EoL>
<BoL> Get whether autoscaling for the y-axis is applied on plot commands <EoL>
<BoL> Return the axes_locator . <EoL>
<BoL> Get whether axis ticks and gridlines are above or below most artists . <EoL>
<BoL> return a list of child artists <EoL>
<BoL> Returns the aspect ratio of the raw data . <EoL>
<BoL> Returns the aspect ratio of the raw data in log scale . <EoL>
<BoL> Return a default list of artists that are used for the bounding box <EoL>
<BoL> Get the Axes facecolor . <EoL>
<BoL> Get whether the axes rectangle patch is drawn . <EoL>
<BoL> return a list of Axes images contained by the Axes <EoL>
<BoL> Return the ` Legend ` instance , or None if no legend is defined . <EoL>
<BoL> Return handles and labels for legend <EoL>
<BoL> Return a list of lines contained by the Axes <EoL>
<BoL> Get whether the axes responds to navigation commands <EoL>
<BoL> Get the navigation toolbar button status : 'PAN ' , 'ZOOM ' , or None <EoL>
<BoL> Get a copy of the axes rectangle as a ` .Bbox ` . <EoL>
<BoL> Return the zorder value below which artists will be rasterized . <EoL>
<BoL> Return a reference to the shared axes Grouper object for x axes . <EoL>
<BoL> Return a reference to the shared axes Grouper object for y axes . <EoL>
<BoL> Get an axes title . <EoL>
<BoL> get the axes bounding box in display space ; *args* and <EoL>
<BoL> Return the XAxis instance . <EoL>
<BoL> Get the transformation used for drawing x-axis labels , which <EoL>
<BoL> Get the transformation used for drawing the secondary x-axis <EoL>
<BoL> Get the transformation used for drawing x-axis labels , ticks <EoL>
<BoL> Return the lower and upper x-axis bounds , in increasing order . <EoL>
<BoL> Get the x grid lines as a list of ` Line2D ` instances . <EoL>
<BoL> Get the xlabel text string . <EoL>
<BoL> Get the x-axis range <EoL>
<BoL> Get the major x tick labels . <EoL>
<BoL> Get the minor x tick labels . <EoL>
<BoL> Get the x tick labels as a list of : class : ` ~matplotlib.text.Text ` <EoL>
<BoL> Get the x tick lines as a list of ` Line2D ` instances . <EoL>
<BoL> Return the x ticks as a list of locations <EoL>
<BoL> Return the YAxis instance . <EoL>
<BoL> Get the transformation used for drawing y-axis labels , which <EoL>
<BoL> Get the transformation used for drawing the secondary y-axis <EoL>
<BoL> Get the transformation used for drawing y-axis labels , ticks <EoL>
<BoL> Return the lower and upper y-axis bounds , in increasing order . <EoL>
<BoL> Get the y grid lines as a list of ` Line2D ` instances . <EoL>
<BoL> Get the ylabel text string . <EoL>
<BoL> Get the y-axis range <EoL>
<BoL> Get the major y tick labels . <EoL>
<BoL> Get the minor y tick labels . <EoL>
<BoL> Get the y tick labels as a list of : class : ` ~matplotlib.text.Text ` <EoL>
<BoL> Get the y tick lines as a list of ` Line2D ` instances . <EoL>
<BoL> Return the y ticks as a list of locations <EoL>
<BoL> Configure the grid lines . <EoL>
<BoL> Return *True* if any artists have been added to axes . <EoL>
<BoL> Return *True* if the given *mouseevent* ( in display coords ) <EoL>
<BoL> Add an inset indicator rectangle to the axes based on the axis <EoL>
<BoL> Invert the x-axis . <EoL>
<BoL> Invert the y-axis . <EoL>
<BoL> Place a legend on the axes . <EoL>
<BoL> Control behavior of tick locators . <EoL>
<BoL> Make a plot with log scaling on both the x and y axis . <EoL>
<BoL> Set or retrieve autoscaling margins . <EoL>
<BoL> Plot the values of a 2D matrix or array as color-coded image . <EoL>
<BoL> Remove minor ticks from the axes . <EoL>
<BoL> Display minor ticks on the axes . <EoL>
<BoL> Trigger pick event <EoL>
<BoL> Plot y versus x as lines and/or markers . <EoL>
<BoL> This method can only be used after an initial draw which <EoL>
<BoL> Recompute the data limits based on current artists . If you want to <EoL>
<BoL> Reset the active position to the original position . <EoL>
<BoL> Make a plot with log scaling on the x axis . <EoL>
<BoL> Make a plot with log scaling on the y axis . <EoL>
<BoL> Define which parameter the Axes will change to achieve a given aspect . <EoL>
<BoL> Define the anchor location . <EoL>
<BoL> Set the aspect of the axis scaling , i.e . the ratio of y-unit to x-unit . <EoL>
<BoL> Set whether autoscaling is applied on plot commands <EoL>
<BoL> Set whether autoscaling for the x-axis is applied on plot commands <EoL>
<BoL> Set whether autoscaling for the y-axis is applied on plot commands <EoL>
<BoL> Set the axes locator . <EoL>
<BoL> Turn off the axis . <EoL>
<BoL> Turn on the axis . <EoL>
<BoL> Set the zorder for the axes ticks and gridlines . <EoL>
<BoL> Set the Axes facecolor . <EoL>
<BoL> Set the ` .Figure ` for this ` .Axes ` . <EoL>
<BoL> Set whether the axes rectangle patch is drawn . <EoL>
<BoL> Set whether the axes responds to navigation toolbar commands <EoL>
<BoL> Set the navigation toolbar button status ; <EoL>
<BoL> Set the axes position . <EoL>
<BoL> Set the property cycle of the Axes . <EoL>
<BoL> Parameters <EoL>
<BoL> Set the lower and upper numerical bounds of the x-axis . <EoL>
<BoL> Set the label for the x-axis . <EoL>
<BoL> Set padding of X data limits prior to autoscaling . <EoL>
<BoL> Set the x-axis scale . <EoL>
<BoL> Set the x-tick labels with list of string labels . <EoL>
<BoL> Set the x ticks with list of *ticks* <EoL>
<BoL> Set the lower and upper numerical bounds of the y-axis . <EoL>
<BoL> Set the label for the y-axis . <EoL>
<BoL> Set padding of Y data limits prior to autoscaling . <EoL>
<BoL> Set the y-axis scale . <EoL>
<BoL> Set the y-tick labels with list of strings labels . <EoL>
<BoL> Set the y ticks with list of *ticks* <EoL>
<BoL> Called when a pan operation has started . <EoL>
<BoL> Make a step plot . <EoL>
<BoL> Add a table to the current axes . <EoL>
<BoL> Add text to the axes . <EoL>
<BoL> Change the appearance of ticks , tick labels , and gridlines . <EoL>
<BoL> Create a twin Axes sharing the xaxis <EoL>
<BoL> Create a twin Axes sharing the yaxis <EoL>
<BoL> Update the data lim bbox with seq of xy tups or equiv . 2-D array <EoL>
<BoL> Update the datalim to include the given <EoL>
<BoL> Sets up x-axis ticks and labels that treat the x data as dates . <EoL>
<BoL> Return whether the x-axis is inverted . <EoL>
<BoL> Sets up y-axis ticks and labels that treat the y data as dates . <EoL>
<BoL> Return whether the y-axis is inverted . <EoL>
<BoL> Adds a callback function that will be called whenever one of <EoL>
<BoL> Get the label used for this artist in the legend . <EoL>
<BoL> Fire an event when property changed , calling all of the <EoL>
<BoL> Remove a callback based on its *id* . <EoL>
<BoL> Set the label to *s* for auto legend . <EoL>
<BoL> Create and return a SuplotSpec instance . <EoL>
<BoL> return lists of bottom and top position of rows , left and <EoL>
<BoL> Return a dictionary of subplot layout parameters . The default <EoL>
<BoL> create and return a SuplotSpec instance . <EoL>
<BoL> Update the current values . If any kwarg is None , default to <EoL>
<BoL> *fig* is a : class : ` matplotlib.figure.Figure ` instance . <EoL>
<BoL> Make a twinx axes of self . This is used for twinx and twiny . <EoL>
<BoL> change subplot geometry , e.g. , from 1,1,1 to 2,2,3 <EoL>
<BoL> get the subplot geometry , e.g. , 2,2,3 <EoL>
<BoL> get the GridSpec instance associated with the subplot <EoL>
<BoL> get the SubplotSpec instance associated with the subplot <EoL>
<BoL> Only show `` outer '' labels and tick labels . <EoL>
<BoL> set the SubplotSpec instance associated with the subplot <EoL>
<BoL> update the subplot position from fig.subplotpars <EoL>
<BoL> The subplot will occupy the num1-th cell of the given <EoL>
<BoL> Get the subplot geometry ( `` n_rows , n_cols , start , stop `` ) . <EoL>
<BoL> Update the subplot position from `` figure.subplotpars `` . <EoL>
<BoL> Get the subplot row and column numbers : <EoL>
<BoL> Return a ` .GridSpecFromSubplotSpec ` that has this subplotspec as <EoL>
<BoL> Return whether *data* can be item-accessed with *name* . <EoL>
<BoL> Helper function to locate inset axes , used in <EoL>
<BoL> Process a MATLAB style color/line style format string . Return a <EoL>
<BoL> return true if *obj* is iterable <EoL>
<BoL> Update the location of children if necessary and draw them <EoL>
<BoL> Return a list of artists it contains . <EoL>
<BoL> Return with , height , xdescent , ydescent of box <EoL>
<BoL> Get the offset <EoL>
<BoL> Return a list of visible artists it contains . <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set the figure <EoL>
<BoL> Set the height <EoL>
<BoL> Set the offset . <EoL>
<BoL> Set the width <EoL>
<BoL> Any Real can be converted to a native float object . <EoL>
<BoL> self**exponent ; should promote to float or complex when necessary . <EoL>
<BoL> Converts a sequence of less than 1 dimension , to an array of 1 <EoL>
<BoL> Only advance the cycler if the cycler has information that <EoL>
<BoL> Given a defaults dictionary , and any other dictionaries , <EoL>
<BoL> Return the next color in the cycle . <EoL>
<BoL> Parses the string argument as a boolean <EoL>
<BoL> Creates a ` ~cycler.Cycler ` object much like : func : ` cycler.cycler ` , <EoL>
<BoL> A helper function to get the index of an input to plot <EoL>
<BoL> This stub class exists to return the appropriate subplot class when called <EoL>
<BoL> Init the axis with the parent Axes instance <EoL>
<BoL> Given the list of ticks , return two lists of bboxes . One for <EoL>
<BoL> Get the bounding boxes for this ` .axis ` and its siblings <EoL>
<BoL> check the axis converter for the stored units to see if the <EoL>
<BoL> Update the label position based on the bounding box enclosing <EoL>
<BoL> Update the label position based on the sequence of bounding <EoL>
<BoL> Update ticks ( position and labels ) using the current data <EoL>
<BoL> Sets up x-axis ticks and labels that treat the x data as dates . <EoL>
<BoL> Return the label position ( top or bottom ) <EoL>
<BoL> get whether the axis has smart bounds <EoL>
<BoL> Return the estimated number of ticks that can fit on the axis . <EoL>
<BoL> Get the extents of the tick labels on either side <EoL>
<BoL> Get the tick labels as a list of : class : ` ~matplotlib.text.Text ` <EoL>
<BoL> Get the tick directions as a numpy array <EoL>
<BoL> Return a bounding box that encloses the axis . It only accounts <EoL>
<BoL> Configure the grid lines . <EoL>
<BoL> Iterate through all of the major and minor ticks . <EoL>
<BoL> Re-initialize the major and minor Tick lists . <EoL>
<BoL> set the axis data limits <EoL>
<BoL> set the default limits for the axis data and view interval if they <EoL>
<BoL> Set the coordinates of the label . By default , the x <EoL>
<BoL> Set the label position ( top or bottom ) <EoL>
<BoL> Set the text value of the axis label . <EoL>
<BoL> Set the formatter of the major ticker . <EoL>
<BoL> Set the locator of the major ticker . <EoL>
<BoL> Set the formatter of the minor ticker . <EoL>
<BoL> Set the locator of the minor ticker . <EoL>
<BoL> Set the depth of the axis used by the picker . <EoL>
<BoL> set the axis to have smart bounds <EoL>
<BoL> Set appearance parameters for ticks , ticklabels , and gridlines . <EoL>
<BoL> Set the text values of the tick labels . Return a list of Text <EoL>
<BoL> Set the locations of the tick marks from sequence ticks <EoL>
<BoL> set the units for axis <EoL>
<BoL> introspect *data* for units converter and update the <EoL>
<BoL> Calculate self._pad and self._tickmarkers <EoL>
<BoL> Test whether the mouse event occurred in the Tick marks . <EoL>
<BoL> Get the length of the tick outside of the axes . <EoL>
<BoL> Set the label1 text . <EoL>
<BoL> Set the label2 text . <EoL>
<BoL> Set the tick label pad in points <EoL>
<BoL> Returns the amount , in data coordinates , that a single pixel <EoL>
<BoL> Get the bounding boxes for this ` .axis ` and its siblings <EoL>
<BoL> Update the label position based on the bounding box enclosing <EoL>
<BoL> Update the offset_text position based on the sequence of bounding <EoL>
<BoL> Test whether the mouse event occurred in the x axis . <EoL>
<BoL> Returns the amount of space one should reserve for text <EoL>
<BoL> Return the ticks position ( top , bottom , default or unknown ) <EoL>
<BoL> Set the label position ( top or bottom ) <EoL>
<BoL> Set the ticks position ( top , bottom , both , default or none ) <EoL>
<BoL> If *ignore* is *False* , the order of vmin , vmax <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the bottom of the axes . <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the top of the axes . <EoL>
<BoL> Returns the amount , in data coordinates , that a single pixel <EoL>
<BoL> Get the bounding boxes for this ` .axis ` and its siblings <EoL>
<BoL> Update the label position based on the bounding box enclosing <EoL>
<BoL> Update the offset_text position based on the sequence of bounding <EoL>
<BoL> Test whether the mouse event occurred in the y axis . <EoL>
<BoL> Return the ticks position ( left , right , both or unknown ) <EoL>
<BoL> Set the label position ( left or right ) <EoL>
<BoL> Parameters <EoL>
<BoL> Set the ticks position ( left , right , both , default or none ) <EoL>
<BoL> If *ignore* is *False* , the order of vmin , vmax <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the left of the axes . <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the right of the axes . <EoL>
<BoL> Initialize an Affine transform from a 3x3 numpy float array : : <EoL>
<BoL> Reset the underlying matrix to the identity transform . <EoL>
<BoL> ( staticmethod ) Create a new Affine2D instance from the given <EoL>
<BoL> Get the underlying transformation matrix as a 3x3 numpy array : : <EoL>
<BoL> ( staticmethod ) Return a new : class : ` Affine2D ` object that is <EoL>
<BoL> Add a rotation ( in radians ) to this transform in place . <EoL>
<BoL> Add a rotation ( in radians ) around the point ( x , y ) in place . <EoL>
<BoL> Add a rotation ( in degrees ) to this transform in place . <EoL>
<BoL> Add a rotation ( in degrees ) around the point ( x , y ) in place . <EoL>
<BoL> Adds a scale in place . <EoL>
<BoL> Set this transformation from the frozen copy of another <EoL>
<BoL> Set the underlying transformation matrix from a 3x3 numpy array : : <EoL>
<BoL> Adds a skew in place . <EoL>
<BoL> Adds a skew in place . <EoL>
<BoL> Adds a translation in place . <EoL>
<BoL> Return a canvas suitable for saving figures to a specified file format . <EoL>
<BoL> Blit the canvas in bbox ( default entire canvas ) . <EoL>
<BoL> Backend derived classes should call this function on any mouse <EoL>
<BoL> Backend derived classes should call this function on any mouse <EoL>
<BoL> Pass a ` CloseEvent ` to all functions connected to `` close_event `` . <EoL>
<BoL> Render the : class : ` ~matplotlib.figure.Figure ` . <EoL>
<BoL> Draw a cursor in the event.axes if inaxes is not None . Use <EoL>
<BoL> Pass a ` DrawEvent ` to all functions connected to `` draw_event `` . <EoL>
<BoL> : meth : ` draw ` only if idle ; defaults to draw but backends can override <EoL>
<BoL> Backend derived classes should call this function when entering <EoL>
<BoL> Flush the GUI events for the figure . <EoL>
<BoL> Return a string , which includes extension , suitable for use as <EoL>
<BoL> Get the default savefig file format as specified in rcParam <EoL>
<BoL> Return dict of savefig file formats supported by this backend <EoL>
<BoL> Return a dict of savefig file formats supported by this backend , <EoL>
<BoL> Return the figure width and height in points or pixels <EoL>
<BoL> Get the title text of the window containing the figure . <EoL>
<BoL> Set the child axes which are currently grabbing the mouse events . <EoL>
<BoL> Returns whether the renderer is in the process of saving <EoL>
<BoL> Pass a ` KeyEvent ` to all functions connected to `` key_press_event `` . <EoL>
<BoL> Pass a ` KeyEvent ` to all functions connected to `` key_release_event `` . <EoL>
<BoL> Backend derived classes should call this function when leaving <EoL>
<BoL> Backend derived classes should call this function on any <EoL>
<BoL> Connect event with string *s* to *func* . The signature of *func* is : : <EoL>
<BoL> Disconnect callback id cid <EoL>
<BoL> Creates a new backend-specific subclass of <EoL>
<BoL> Mouse event processor which removes the top artist <EoL>
<BoL> This method will be called by artists who are picked and will <EoL>
<BoL> Release the mouse grab held by the axes , ax . <EoL>
<BoL> Set the canvas size in pixels . <EoL>
<BoL> Pass a ` ResizeEvent ` to all functions connected to `` resize_event `` . <EoL>
<BoL> Backend derived classes should call this function on any <EoL>
<BoL> Set the title text of the window containing the figure . Note that <EoL>
<BoL> Start a blocking event loop . <EoL>
<BoL> Stop the current blocking event loop . <EoL>
<BoL> Instantiate an instance of FigureCanvasClass <EoL>
<BoL> Get the title text of the window containing the figure . <EoL>
<BoL> Implement the default mpl key bindings defined at <EoL>
<BoL> For GUI backends , resize the window ( in pixels ) . <EoL>
<BoL> Set the title text of the window containing the figure . <EoL>
<BoL> For GUI backends , show the figure window and redraw . <EoL>
<BoL> Display message in a popup -- GUI only . <EoL>
<BoL> Return the alpha value used for blending - not supported on <EoL>
<BoL> Return the capstyle as a string in ( 'butt ' , 'round ' , 'projecting ' ) <EoL>
<BoL> Return the clip path in the form ( path , transform ) , where path <EoL>
<BoL> Return the clip rectangle as a : class : ` ~matplotlib.transforms.Bbox ` <EoL>
<BoL> Return the dash information as an offset dashlist tuple . <EoL>
<BoL> Return whether the value given by get_alpha ( ) should be used to <EoL>
<BoL> Return the object identifier if one is set , None otherwise . <EoL>
<BoL> Gets the current hatch style <EoL>
<BoL> Gets the color to use for hatching . <EoL>
<BoL> Gets the linewidth to use for hatching . <EoL>
<BoL> Returns a Path for the current hatch . <EoL>
<BoL> Return the line join style as one of ( 'miter ' , 'round ' , 'bevel ' ) <EoL>
<BoL> Return the line width in points as a scalar <EoL>
<BoL> returns a tuple of three or four floats from 0-1 . <EoL>
<BoL> Returns the sketch parameters for the artist . <EoL>
<BoL> returns the snap setting which may be : <EoL>
<BoL> returns a url if one is set , None otherwise <EoL>
<BoL> Restore the graphics context from the stack - needed only <EoL>
<BoL> Set the alpha value used for blending - not supported on all backends . <EoL>
<BoL> True if object should be drawn with antialiased rendering <EoL>
<BoL> Set the capstyle as a string in ( 'butt ' , 'round ' , 'projecting ' ) <EoL>
<BoL> Set the clip path and transformation . Path should be a <EoL>
<BoL> Set the clip rectangle with sequence ( left , bottom , width , height ) <EoL>
<BoL> Set the dash style for the gc . <EoL>
<BoL> Set the foreground color . fg can be a MATLAB format string , a <EoL>
<BoL> Sets the id . <EoL>
<BoL> Sets the hatch style for filling <EoL>
<BoL> sets the color to use for hatching . <EoL>
<BoL> Set the join style to be one of ( 'miter ' , 'round ' , 'bevel ' ) <EoL>
<BoL> Set the linewidth in points <EoL>
<BoL> Sets the sketch parameters . <EoL>
<BoL> Sets the snap setting which may be : <EoL>
<BoL> Sets the url for links in compatible backends <EoL>
<BoL> *x* , *y* in figure coords , 0,0 = bottom , left <EoL>
<BoL> This is where you actually build the GUI widgets ( called by <EoL>
<BoL> Update the viewlim and position from the view and <EoL>
<BoL> move back up the view lim stack <EoL>
<BoL> Callback for dragging in pan/zoom mode . <EoL>
<BoL> Callback for dragging in zoom mode . <EoL>
<BoL> Redraw the canvases , update the locators . <EoL>
<BoL> Draw a rectangle rubberband to indicate zoom limits . <EoL>
<BoL> Move forward in the view lim stack . <EoL>
<BoL> Restore the original view . <EoL>
<BoL> Activate the pan/zoom tool . pan with left button , zoom with right <EoL>
<BoL> Called whenever a mouse button is pressed . <EoL>
<BoL> Callback for mouse button press in pan/zoom mode . <EoL>
<BoL> Callback for mouse button press in zoom to rect mode . <EoL>
<BoL> Push the current view limits and position onto the stack . <EoL>
<BoL> Callback for mouse button release . <EoL>
<BoL> Callback for mouse button release in pan/zoom mode . <EoL>
<BoL> Callback for mouse button release in zoom to rect mode . <EoL>
<BoL> Remove the rubberband . <EoL>
<BoL> Save the current figure . <EoL>
<BoL> Set the current cursor to one of the : class : ` Cursors ` enums values . <EoL>
<BoL> Enable or disable the back/forward button . <EoL>
<BoL> Display a message on toolbar or in status bar . <EoL>
<BoL> Reset the axes stack . <EoL>
<BoL> Activate zoom to rect mode . <EoL>
<BoL> draw the text by converting them to paths using textpath module . <EoL>
<BoL> return the text path and transform <EoL>
<BoL> Close a grouping element with label *s* <EoL>
<BoL> Draw a Gouraud-shaded triangle . <EoL>
<BoL> Draw an RGBA image . <EoL>
<BoL> Draws a : class : ` ~matplotlib.path.Path ` instance using the <EoL>
<BoL> <EoL>
<BoL> Draw the text instance <EoL>
<BoL> Return true if y small numbers are top for renderer Is used <EoL>
<BoL> Get the factor by which to magnify images passed to : meth : ` draw_image ` . <EoL>
<BoL> return the : class : ` matplotlib.texmanager.TexManager ` instance <EoL>
<BoL> Get the width , height , and descent ( offset from the bottom <EoL>
<BoL> Return an instance of a : class : ` GraphicsContextBase ` <EoL>
<BoL> Open a grouping element with label *s* . If *gid* is given , use <EoL>
<BoL> override this method for renderers that do not necessarily always <EoL>
<BoL> override this method for renderers that support arbitrary affine <EoL>
<BoL> Convert points to display units <EoL>
<BoL> Used in AggRenderer . Switch to a temporary renderer for image <EoL>
<BoL> Used in MixedModeRenderer . Switch to the raster renderer . <EoL>
<BoL> Used in AggRenderer . Switch back to the original renderer . <EoL>
<BoL> Used in MixedModeRenderer . Switch back to the vector renderer <EoL>
<BoL> Create a new figure manager instance . <EoL>
<BoL> Create a new figure manager instance for the given figure . <EoL>
<BoL> Show all figures . <EoL>
<BoL> Captures the 'tool_message_event ' and set the message <EoL>
<BoL> Display a message on toolbar or in status bar <EoL>
<BoL> Runs all function that have been registered as callbacks . Functions <EoL>
<BoL> Used to set interval on underlying timer object . <EoL>
<BoL> Used to set single shot on underlying timer object . <EoL>
<BoL> Register ` func ` to be called by timer when the event fires . Any <EoL>
<BoL> Remove ` func ` from list of callbacks . ` args ` and ` kwargs ` are optional <EoL>
<BoL> Start the timer object . ` interval ` is optional and will be used <EoL>
<BoL> Stop the timer . <EoL>
<BoL> Find the image based on its name . <EoL>
<BoL> Captures the 'tool_removed_event ' signal and removes the tool . <EoL>
<BoL> Captures the 'tool_trigger_ [ name ] ' <EoL>
<BoL> Adds a tool to this container <EoL>
<BoL> Add a toolitem to the container <EoL>
<BoL> Remove a toolitem from the ` ToolContainer ` <EoL>
<BoL> Toggle the toolitem without firing event <EoL>
<BoL> Trigger the tool <EoL>
<BoL> Return a list of weak references to the keys . <EoL>
<BoL> Return the name of the current backend . <EoL>
<BoL> Return the registered default canvas for given file format . <EoL>
<BoL> Implement the default mpl key bindings for the canvas and toolbar <EoL>
<BoL> Register a backend for saving to a given file format . <EoL>
<BoL> Toggle tools , need to untoggle prior to using other Toggle tool <EoL>
<BoL> Trigger on a tool <EoL>
<BoL> Add *tool* to ` ToolManager ` <EoL>
<BoL> Return the tool object , also accepts the actual tool for convenience <EoL>
<BoL> Get the keymap associated with the specified tool <EoL>
<BoL> Emit a ` ToolManagerMessageEvent ` <EoL>
<BoL> Remove tool from ` ToolManager ` <EoL>
<BoL> Bind the given figure to the tools . <EoL>
<BoL> Connect event with string *s* to *func* . <EoL>
<BoL> Disconnect callback id *cid* <EoL>
<BoL> Set the keymap to associate with the specified tool <EoL>
<BoL> Destroy the tool <EoL>
<BoL> Assign a figure to the tool <EoL>
<BoL> Called when this tool gets used <EoL>
<BoL> Draw rubberband <EoL>
<BoL> Remove rubberband <EoL>
<BoL> Call ` draw_rubberband ` or ` remove_rubberband ` based on data <EoL>
<BoL> set the cursor when the tool is triggered <EoL>
<BoL> Process every newly added tool <EoL>
<BoL> Set the cursor <EoL>
<BoL> Call ` matplotlib.backend_managers.ToolManager.message_event ` <EoL>
<BoL> Calls ` enable ` or ` disable ` based on ` toggled ` value <EoL>
<BoL> Check whether all grid lines are in the same visibility state . <EoL>
<BoL> Converts a shortcut string from the notation used in rc config to the <EoL>
<BoL> Release the canvas and disconnect press/release events <EoL>
<BoL> Connect press/release events and lock the canvas <EoL>
<BoL> Disable the toggle tool <EoL>
<BoL> Enable the toggle tool <EoL>
<BoL> Return the original and modified positions for the specified axes <EoL>
<BoL> Add the current figure to the stack of views and positions <EoL>
<BoL> Back one step in the stack of views and positions <EoL>
<BoL> Reset the axes stack <EoL>
<BoL> Forward one step in the stack of views and positions <EoL>
<BoL> Recall the first view and position from the stack <EoL>
<BoL> Push the current view limits and position onto their respective stacks <EoL>
<BoL> Redraw the canvases , update the locators <EoL>
<BoL> Make sure that self.home_views has an entry for all axes present in the <EoL>
<BoL> Update the view limits and position for each axes from the current <EoL>
<BoL> the drag callback in zoom mode <EoL>
<BoL> the _press mouse button in zoom to rect mode callback <EoL>
<BoL> the release mouse button callback in zoom to rect mode <EoL>
<BoL> Add multiple tools to the container . <EoL>
<BoL> Add multiple tools to ` ToolManager ` <EoL>
<BoL> Helper for : func : ` ~matplotlib.pyplot.gci ` . Do not use elsewhere . <EoL>
<BoL> Make a hashable key out of args and kwargs . <EoL>
<BoL> Parameters <EoL>
<BoL> Add any : class : ` ~matplotlib.artist.Artist ` to the figure . <EoL>
<BoL> Add an axes to the figure . <EoL>
<BoL> Whenever the axes state change , `` func ( self ) `` will be called . <EoL>
<BoL> Return a ` .GridSpec ` that has this figure as a parent . This allows <EoL>
<BoL> Add an ` ~.axes.Axes ` to the figure as part of a subplot arrangement . <EoL>
<BoL> Align the xlabels and ylabels of subplots with the same subplots <EoL>
<BoL> Align the ylabels of subplots in the same subplot column if label <EoL>
<BoL> Align the ylabels of subplots in the same subplot column if label <EoL>
<BoL> Date ticklabels often overlap , so it is useful to rotate them <EoL>
<BoL> Clear the figure -- synonym for : meth : ` clf ` . <EoL>
<BoL> Clear the figure . <EoL>
<BoL> Create a colorbar for a ScalarMappable instance , *mappable* . <EoL>
<BoL> Test whether the mouse event occurred on the figure . <EoL>
<BoL> Remove the ` ~matplotlib.axes.Axes ` *ax* from the figure and update the <EoL>
<BoL> Render the figure using : class : ` matplotlib.backend_bases.RendererBase ` <EoL>
<BoL> Draw : class : ` matplotlib.artist.Artist ` instance *a* only . <EoL>
<BoL> Use `` layoutbox `` to determine pos positions within axes . <EoL>
<BoL> Get the current axes , creating one if necessary . <EoL>
<BoL> Return a list of axes in the Figure . You can access and modify the <EoL>
<BoL> Get a list of artists contained in the figure . <EoL>
<BoL> Return a boolean : True means constrained layout is being used . <EoL>
<BoL> Get padding for `` constrained_layout `` . <EoL>
<BoL> Return the resolution in dots per inch as a float . <EoL>
<BoL> Get the edge color of the Figure rectangle . <EoL>
<BoL> Get the face color of the Figure rectangle . <EoL>
<BoL> Return the figure height as a float . <EoL>
<BoL> Return the figure width as a float . <EoL>
<BoL> Return whether the figure frame will be drawn . <EoL>
<BoL> Returns the current size of the figure in inches . <EoL>
<BoL> Return whether ` .tight_layout ` is called when drawing . <EoL>
<BoL> Return a ( tight ) bounding box of the figure in inches . <EoL>
<BoL> Return the figure bounding box in display space . Arguments are ignored . <EoL>
<BoL> Initialize the layoutbox for use in constrained_layout . <EoL>
<BoL> Place a legend on the figure . <EoL>
<BoL> Save the current figure . <EoL>
<BoL> Set the current axes to be a and return a . <EoL>
<BoL> Set the canvas that contains the figure <EoL>
<BoL> Set whether `` constrained_layout `` is used upon drawing . If None , <EoL>
<BoL> Set padding for `` constrained_layout `` . Note the kwargs can be passed <EoL>
<BoL> Set the resolution of the figure in dots-per-inch . <EoL>
<BoL> Set the edge color of the Figure rectangle . <EoL>
<BoL> Set the face color of the Figure rectangle . <EoL>
<BoL> Set the height of the figure in inches . <EoL>
<BoL> Set the width of the figure in inches . <EoL>
<BoL> Set whether the figure frame ( background ) is displayed or invisible . <EoL>
<BoL> Set the figure size in inches . <EoL>
<BoL> Set whether and how ` .tight_layout ` is called when drawing . <EoL>
<BoL> If using a GUI backend with pyplot , display the figure window . <EoL>
<BoL> Add a centered title to the figure . <EoL>
<BoL> Add text to figure . <EoL>
<BoL> Blocking call to interact with the figure . <EoL>
<BoL> Figure out if we are inside the canvas or not and update the <EoL>
<BoL> returns the Tk widget used to implement FigureCanvasTkAgg . <EoL>
<BoL> Creates a new backend-specific subclass of : class : ` backend_bases.Timer ` . <EoL>
<BoL> MouseWheel event processor <EoL>
<BoL> this function does n't segfault but causes the <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return the resource value for a KEY given as string . <EoL>
<BoL> Return the window path name of this widget . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Call Tcl configure command and return the result as a dict . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return the Tkinter instance of a widget identified by <EoL>
<BoL> Internal function . <EoL>
<BoL> Return a newly created Tcl function . If this <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . Sets up information about children . <EoL>
<BoL> Internal function.Tk changed behavior in 8.4.2 , returning `` ? ? '' rather more often . <EoL>
<BoL> Call function once after given time . <EoL>
<BoL> Cancel scheduling of function identified with ID . <EoL>
<BoL> Call FUNC once if the Tcl main loop has no event to <EoL>
<BoL> The anchor value controls how to place the grid within the <EoL>
<BoL> Return a tuple of integer coordinates for the bounding <EoL>
<BoL> Ring a display 's bell . <EoL>
<BoL> Bind to this widget at event SEQUENCE a call to function FUNC . <EoL>
<BoL> Bind to all widgets at an event SEQUENCE a call to function FUNC . <EoL>
<BoL> Set or get the list of bindtags for this widget . <EoL>
<BoL> Append STRING to the Tk clipboard . <EoL>
<BoL> Clear the data in the Tk clipboard . <EoL>
<BoL> Retrieve data from the clipboard on window 's display . <EoL>
<BoL> Configure column INDEX of a grid . <EoL>
<BoL> Configure resources of a widget . <EoL>
<BoL> Internal function . <EoL>
<BoL> Bind a virtual event VIRTUAL ( of the form < < Name > > ) <EoL>
<BoL> Unbind a virtual event VIRTUAL from SEQUENCE . <EoL>
<BoL> Generate an event SEQUENCE . Additional <EoL>
<BoL> Return a list of all virtual events or the information <EoL>
<BoL> Direct input focus to this widget . <EoL>
<BoL> Return the widget which has currently the focus on the <EoL>
<BoL> Direct input focus to this widget even if the <EoL>
<BoL> Return the widget which has currently the focus in the <EoL>
<BoL> Return the widget which would have the focus if top level <EoL>
<BoL> Unmap this widget and do not use it for the packing order . <EoL>
<BoL> Return a boolean value for Tcl boolean values true and false given as parameter . <EoL>
<BoL> Return value of Tcl variable NAME . <EoL>
<BoL> Return widget which has currently the grab in this application <EoL>
<BoL> Release grab for this widget if currently set . <EoL>
<BoL> Set grab for this widget . <EoL>
<BoL> Set global grab for this widget . <EoL>
<BoL> Return None , `` local '' or `` global '' if this widget has <EoL>
<BoL> Position a widget in the parent widget in a grid . Use as options : <EoL>
<BoL> Unmap this widget . <EoL>
<BoL> Return information about the options <EoL>
<BoL> Return a tuple of column and row which identify the cell <EoL>
<BoL> Set or get the status for propagation of geometry information . <EoL>
<BoL> Unmap this widget but remember the grid options . <EoL>
<BoL> Configure row INDEX of a grid . <EoL>
<BoL> Return a tuple of the number of column and rows in the grid . <EoL>
<BoL> Return a list of all slaves of this widget <EoL>
<BoL> Return a list of all existing image names . <EoL>
<BoL> Return a list of all available image types ( e.g . photo bitmap ) . <EoL>
<BoL> Return information about the packing options <EoL>
<BoL> Return a list of all resource names of this widget . <EoL>
<BoL> Raise this widget in the stacking order . <EoL>
<BoL> Lower this widget in the stacking order . <EoL>
<BoL> Call the mainloop of Tk . <EoL>
<BoL> Set a VALUE ( second parameter ) for an option <EoL>
<BoL> Clear the option database . <EoL>
<BoL> Return the value for an option NAME for this widget <EoL>
<BoL> Read file FILENAME into the option database . <EoL>
<BoL> Pack a widget in the parent widget . Use as options : <EoL>
<BoL> Set or get the status for propagation of geometry information . <EoL>
<BoL> Return a list of all slaves of this widget <EoL>
<BoL> Place a widget in the parent widget . Use as options : <EoL>
<BoL> Unmap this widget . <EoL>
<BoL> Return information about the placing options <EoL>
<BoL> Return a list of all slaves of this widget <EoL>
<BoL> Quit the Tcl interpreter . All widgets will be destroyed . <EoL>
<BoL> Clear the current X selection . <EoL>
<BoL> Return the contents of the current X selection . <EoL>
<BoL> Specify a function COMMAND to call if the X <EoL>
<BoL> Become owner of X selection . <EoL>
<BoL> Return owner of X selection . <EoL>
<BoL> Send Tcl command CMD to different interpreter INTERP to be executed . <EoL>
<BoL> Set Tcl variable NAME to VALUE . <EoL>
<BoL> Change the color scheme to light brown as used in Tk 3.6 and before . <EoL>
<BoL> The widget under mouse will get automatically focus . Can not <EoL>
<BoL> Return the next widget in the focus order which follows <EoL>
<BoL> Return previous widget in the focus order . See tk_focusNext for details . <EoL>
<BoL> Set a new color scheme for all widget elements . <EoL>
<BoL> Set Tcl internal variable , whether the look and feel <EoL>
<BoL> Unbind for this widget for event SEQUENCE the <EoL>
<BoL> Unbind for all widgets for event SEQUENCE all functions . <EoL>
<BoL> Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE <EoL>
<BoL> Enter event loop until all idle callbacks have been called . This <EoL>
<BoL> Wait until the variable is modified . <EoL>
<BoL> Wait until the visibility of a WIDGET changes <EoL>
<BoL> Wait until a WIDGET is destroyed . <EoL>
<BoL> Return integer which represents atom NAME . <EoL>
<BoL> Return name of atom with identifier ID . <EoL>
<BoL> Return number of cells in the colormap for this widget . <EoL>
<BoL> Return a list of all widgets which are children of this widget . <EoL>
<BoL> Return window class name of this widget . <EoL>
<BoL> Return true if at the last color request the colormap was full . <EoL>
<BoL> Return the widget which is at the root coordinates ROOTX , ROOTY . <EoL>
<BoL> Return the number of bits per pixel . <EoL>
<BoL> Return true if this widget exists . <EoL>
<BoL> Return the number of pixels for the given distance NUMBER <EoL>
<BoL> Return geometry string for this widget in the form `` widthxheight+X+Y '' . <EoL>
<BoL> Return height of this widget . <EoL>
<BoL> Return identifier ID for this widget . <EoL>
<BoL> Return the name of all Tcl interpreters for this display . <EoL>
<BoL> Return true if this widget is mapped . <EoL>
<BoL> Return the window manager name for this widget . <EoL>
<BoL> Return the name of this widget . <EoL>
<BoL> Return the name of the parent of this widget . <EoL>
<BoL> Return the pathname of the widget given by ID . <EoL>
<BoL> Rounded integer value of winfo_fpixels . <EoL>
<BoL> Return the x coordinate of the pointer on the root window . <EoL>
<BoL> Return a tuple of x and y coordinates of the pointer on the root window . <EoL>
<BoL> Return the y coordinate of the pointer on the root window . <EoL>
<BoL> Return requested height of this widget . <EoL>
<BoL> Return requested width of this widget . <EoL>
<BoL> Return tuple of decimal values for red , green , blue for <EoL>
<BoL> Return x coordinate of upper left corner of this widget on the <EoL>
<BoL> Return y coordinate of upper left corner of this widget on the <EoL>
<BoL> Return the screen name of this widget . <EoL>
<BoL> Return the number of the cells in the colormap of the screen <EoL>
<BoL> Return the number of bits per pixel of the root window of the <EoL>
<BoL> Return the number of pixels of the height of the screen of this widget <EoL>
<BoL> Return the number of pixels of the height of the screen of <EoL>
<BoL> Return the number of pixels of the width of the screen of <EoL>
<BoL> Return one of the strings directcolor , grayscale , pseudocolor , <EoL>
<BoL> Return the number of pixels of the width of the screen of <EoL>
<BoL> Return information of the X-Server of the screen of this widget in <EoL>
<BoL> Return the toplevel widget of this widget . <EoL>
<BoL> Return true if the widget and all its higher ancestors are mapped . <EoL>
<BoL> Return one of the strings directcolor , grayscale , pseudocolor , <EoL>
<BoL> Return the X identifier for the visual for this widget . <EoL>
<BoL> Return a list of all visuals available for the screen <EoL>
<BoL> Return the height of the virtual root window associated with this <EoL>
<BoL> Return the width of the virtual root window associated with this <EoL>
<BoL> Return the x offset of the virtual root relative to the root <EoL>
<BoL> Return the y offset of the virtual root relative to the root <EoL>
<BoL> Return the width of this widget . <EoL>
<BoL> Return the x coordinate of the upper left corner of this widget <EoL>
<BoL> Return the y coordinate of the upper left corner of this widget <EoL>
<BoL> Destroy this and all descendants widgets . <EoL>
<BoL> Enter event loop until all pending events have been processed by Tcl . <EoL>
<BoL> *targetfig* <EoL>
<BoL> Get whether the widget is active . <EoL>
<BoL> Return True if event should be ignored . <EoL>
<BoL> Set whether the widget is active . <EoL>
<BoL> Create a new figure manager instance for the given figure . <EoL>
<BoL> Blit *aggimage* to *photoimage* . <EoL>
<BoL> msg is a return arg from a raise . Join with new lines <EoL>
<BoL> Return the interactive framework whose event loop is currently running , if <EoL>
<BoL> Get the image as an RGBA byte string . <EoL>
<BoL> Draw the figure using the renderer . <EoL>
<BoL> Write the figure to a JPEG file . <EoL>
<BoL> Write the figure to a PNG file . <EoL>
<BoL> Get the image as an ARGB byte string <EoL>
<BoL> Get the image as an RGB byte string . <EoL>
<BoL> Create a MathTextParser for the given backend *output* . <EoL>
<BoL> Returns the offset of the baseline from the bottom of the <EoL>
<BoL> *texstr* <EoL>
<BoL> Writes a tex expression to a PNG file . <EoL>
<BoL> *texstr* <EoL>
<BoL> Return new_figure_manager , draw_if_interactive and show for pyplot . <EoL>
<BoL> *control_points* : location of contol points . It needs have a <EoL>
<BoL> returns <EoL>
<BoL> concatenate list of paths into a single path . <EoL>
<BoL> Find control points of the bezier line through c1 , mm , c2 . We <EoL>
<BoL> For a line passing through ( *cx* , *cy* ) and having a angle *t* , return <EoL>
<BoL> Given the quadratic bezier control points *bezier2* , returns <EoL>
<BoL> fill in the codes if None . <EoL>
<BoL> Being similar to get_parallels , returns control points of two quadrativ <EoL>
<BoL> split a bezier segment defined by its controlpoints *beta* <EoL>
<BoL> divide a path into two segment at the point where inside ( x , y ) <EoL>
<BoL> For base class , this just appends an event to events . <EoL>
<BoL> Process an button-1 event ( add a label to a contour ) . <EoL>
<BoL> Process an button-3 event ( remove a label if not in inline mode ) . <EoL>
<BoL> Parameters <EoL>
<BoL> Process a key press event , mapping keys to appropriate mouse clicks . <EoL>
<BoL> Process a mouse click event . <EoL>
<BoL> Process an button-1 event ( add a click if inside axes ) . <EoL>
<BoL> Process an button-3 event ( remove the last click ) . <EoL>
<BoL> Process an button-2 event ( end blocking input ) . <EoL>
<BoL> Event handler ; will be passed to the current figure to retrieve events . <EoL>
<BoL> Removes a click and the associated event from the list of clicks . <EoL>
<BoL> Remove an event from the event list -- by default , the last . <EoL>
<BoL> Process an event . <EoL>
<BoL> Blocking call to retrieve *n* events . <EoL>
<BoL> Disconnect all callbacks . <EoL>
<BoL> For baseclass , do nothing but collect events . <EoL>
<BoL> Blocking call to retrieve a single mouse click or key press . <EoL>
<BoL> Determine if it is a key event . <EoL>
<BoL> Blocking call to retrieve *n* coordinate pairs through mouse clicks . <EoL>
<BoL> Add the coordinates of an event to the list of clicks . <EoL>
<BoL> Remove a click ( by default , the last ) from the list of clicks . <EoL>
<BoL> Sets the default axis ticks and labels <EoL>
<BoL> Converts strings in value to floats using <EoL>
<BoL> Sets and updates the : class : ` ~matplotlib.Axis.axis ` units . <EoL>
<BoL> The Matplotlib datalim , autoscaling , locators etc work with <EoL>
<BoL> Parameters <EoL>
<BoL> Converts text values into utf-8 or ascii strings . <EoL>
<BoL> Some classes may want to replace a hyphen for minus with the <EoL>
<BoL> Returns the full string representation of the value with the <EoL>
<BoL> Return a short string version of the tick value . <EoL>
<BoL> Parameters <EoL>
<BoL> autoscale the view limits <EoL>
<BoL> Pan numticks ( can be positive or negative ) <EoL>
<BoL> raise a RuntimeError if Locator attempts to create more than <EoL>
<BoL> refresh internal information based on current lim <EoL>
<BoL> Do nothing , and rase a warning . Any locator class not supporting the <EoL>
<BoL> select a scale for the range from vmin to vmax <EoL>
<BoL> Create mapping between unique categorical values and integer ids . <EoL>
<BoL> Maps new values to integer identifiers . <EoL>
<BoL> Register *func* to be called when signal *s* is generated . <EoL>
<BoL> Disconnect the callback registered with callback id *cid* . <EoL>
<BoL> Process signal *s* . <EoL>
<BoL> Iterate over each of the disjoint sets as a list . <EoL>
<BoL> Clean dead weak references from the dictionary . <EoL>
<BoL> Returns all of the items joined with *a* , including itself . <EoL>
<BoL> Join given arguments into the same set . Accepts one or more arguments . <EoL>
<BoL> Returns True if *a* and *b* are members of the same set . <EoL>
<BoL> Return the current element , or None . <EoL>
<BoL> Move the position back and return the current element . <EoL>
<BoL> Raise *o* to the top of the stack . *o* must be present in the stack . <EoL>
<BoL> Empty the stack . <EoL>
<BoL> Return whether the stack is empty . <EoL>
<BoL> Move the position forward and return the current element . <EoL>
<BoL> Push the first element onto the top of the stack . <EoL>
<BoL> Push *o* to the stack at current position . Discard all later elements . <EoL>
<BoL> Remove *o* from the stack . <EoL>
<BoL> Get the elements on the perimeter of `` arr `` , <EoL>
<BoL> Class decorator for defining property aliases . <EoL>
<BoL> Context manager for locking a path . <EoL>
<BoL> Convert a premultiplied ARGB32 buffer to an unmultiplied RGBA8888 buffer . <EoL>
<BoL> Use Fortran ordering to convert ndarrays and lists of iterables to lists of <EoL>
<BoL> Temporarily set some attributes ; restore original state at context exit . <EoL>
<BoL> Return whether *obj* is a string equal to string *s* . <EoL>
<BoL> Return whether *obj* is a string equal , when lowercased , to string *s* . <EoL>
<BoL> Convert a sequence to a float array ; if input was a masked array , masked <EoL>
<BoL> Convert an unmultiplied RGBA8888 buffer to a premultiplied ARGB32 buffer . <EoL>
<BoL> ` warnings.warn ` wrapper that sets *stacklevel* to `` outside Matplotlib '' . <EoL>
<BoL> This generator takes a bunch of iterables that are ordered by func <EoL>
<BoL> Return a list of ( ind0 , ind1 ) such that mask [ ind0 : ind1 ] .all ( ) is <EoL>
<BoL> Remove excess indentation from docstring *s* . <EoL>
<BoL> Find all masked and/or non-finite points in a set of arguments , <EoL>
<BoL> Returns ` True ` if the given writable file-like object requires Unicode <EoL>
<BoL> Returns a generator of flattened nested containers <EoL>
<BoL> Return a sample data file . *fname* is a path relative to the <EoL>
<BoL> Returns true if *obj* can be hashed <EoL>
<BoL> return true if *obj* looks like a number <EoL>
<BoL> Return whether the given object is a scalar or string like . <EoL>
<BoL> return true if *obj* looks like a file object with a *write* method <EoL>
<BoL> Recursively list files <EoL>
<BoL> Enforces the priority of a local variable over potentially conflicting <EoL>
<BoL> make directory *newdir* recursively , and set *mode* . Equivalent to : : <EoL>
<BoL> r '' '' '' Pass through file objects and context-manage ` .PathLike ` \s . <EoL>
<BoL> *objects* <EoL>
<BoL> Convert continuous line to mid-steps . <EoL>
<BoL> Convert continuous line to post-steps . <EoL>
<BoL> Convert continuous line to pre-steps . <EoL>
<BoL> return the memory consumed by process <EoL>
<BoL> make sure *args* are equal len before zipping <EoL>
<BoL> Converts dictview object to list <EoL>
<BoL> Resample an array with `` steps - 1 `` points between original point pairs . <EoL>
<BoL> remove latex formatting from mathtext <EoL>
<BoL> *fname* can be an ` os.PathLike ` or a file handle . Support for gzipped <EoL>
<BoL> Returns a list of dictionaries of data which can be used to draw a series <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Add an entry to a dictionary of boolean flags <EoL>
<BoL> Autoscale the scalar limits on the norm instance using the <EoL>
<BoL> Autoscale the scalar limits on the norm instance using the <EoL>
<BoL> Call this whenever the mappable is changed to notify all the <EoL>
<BoL> If mappable has changed since the last check , <EoL>
<BoL> Set the image array from numpy array *A* . <EoL>
<BoL> set the norm limits for image scaling ; if *vmin* is a length2 <EoL>
<BoL> set the colormap for luminance data <EoL>
<BoL> Set the normalization instance . <EoL>
<BoL> Return a normalized rgba array corresponding to *x* . <EoL>
<BoL> Generates the requested cmap from its *name* . The lut size is <EoL>
<BoL> Reverses cmap specification *spec* , can handle both dict and tuple <EoL>
<BoL> Helper such that `` _reverser ( f ) ( x ) == f ( 1 - x ) `` . <EoL>
<BoL> Get a colormap instance , defaulting to rc values if *name* is None . <EoL>
<BoL> Add a colormap to the set recognized by : func : ` get_cmap ` . <EoL>
<BoL> Can only handle specification *data* in dictionary format . <EoL>
<BoL> Internal helper function to broadcast + scale ls/lw <EoL>
<BoL> Return a : class : ` Path ` for a unit regular asterisk with the given <EoL>
<BoL> Point prep for drawing and hit testing <EoL>
<BoL> Test whether the mouse event occurred in the collection . <EoL>
<BoL> Return the current hatching pattern . <EoL>
<BoL> Returns how offsets are applied for the collection . If <EoL>
<BoL> Return the offsets for the collection . <EoL>
<BoL> Returns the sizes of the elements in the collection . The <EoL>
<BoL> Set the alpha tranparencies of the collection . *alpha* must be <EoL>
<BoL> Set the antialiasing state for rendering . <EoL>
<BoL> Set the capstyle for the collection . The capstyle can <EoL>
<BoL> Set both the edgecolor and the facecolor . <EoL>
<BoL> Set the edgecolor ( s ) of the collection . *c* can be a <EoL>
<BoL> Set the facecolor ( s ) of the collection . *c* can be a <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Set the joinstyle for the collection . The joinstyle can only be <EoL>
<BoL> Set the linestyle ( s ) for the collection . <EoL>
<BoL> Set the linewidth ( s ) for the collection . *lw* can be a scalar <EoL>
<BoL> Set how offsets are applied . If *offset_position* is 'screen ' <EoL>
<BoL> Set the offsets for the collection . *offsets* can be a scalar <EoL>
<BoL> Set the pick radius used for containment tests . <EoL>
<BoL> Set the sizes of each member of the collection . <EoL>
<BoL> Parameters <EoL>
<BoL> If the scalar mappable array is not none , update colors <EoL>
<BoL> *xranges* <EoL>
<BoL> This allows one to delay initialization of the vertices . <EoL>
<BoL> This allows one to initialize vertices with path codes . <EoL>
<BoL> Create a BrokenBarHCollection to plot horizontal bars from <EoL>
<BoL> *sizes* <EoL>
<BoL> Parameters <EoL>
<BoL> Calculate transforms immediately before drawing . <EoL>
<BoL> add one or more events at the specified positions <EoL>
<BoL> get the color of the lines used to mark each event <EoL>
<BoL> get the length of the lines used to mark each event <EoL>
<BoL> get the offset of the lines used to mark each event <EoL>
<BoL> Get the width of the lines used to mark each event . <EoL>
<BoL> get the orientation of the event line , may be : <EoL>
<BoL> return an array containing the floating-point values of the positions <EoL>
<BoL> Returns <EoL>
<BoL> True if the eventcollection is horizontal , False if vertical <EoL>
<BoL> Set the color ( s ) of the LineCollection . <EoL>
<BoL> set the length of the lines used to mark each event <EoL>
<BoL> set the offset of the lines used to mark each event <EoL>
<BoL> set the orientation of the event line <EoL>
<BoL> set the positions of the events to the specified value <EoL>
<BoL> switch the orientation of the event line , either from vertical to <EoL>
<BoL> *patches* <EoL>
<BoL> *paths* is a sequence of : class : ` matplotlib.path.Path ` <EoL>
<BoL> *verts* is a sequence of ( *verts0* , *verts1* , ... ) where <EoL>
<BoL> Converts a given mesh into a sequence of <EoL>
<BoL> Converts a given mesh into a sequence of triangles , each point <EoL>
<BoL> Return a : class : ` Path ` instance for a unit regular polygon with the <EoL>
<BoL> Return a : class : ` Path ` for a unit regular star with the given <EoL>
<BoL> Converts a given mesh into a sequence of <EoL>
<BoL> Draw the colors using : meth : ` ~matplotlib.axes.Axes.pcolormesh ` ; <EoL>
<BoL> number of boundaries **before** extension of ends <EoL>
<BoL> Make an axes patch and outline . <EoL>
<BoL> Return the separator line segments ; helper for _add_solids . <EoL>
<BoL> Returns whether the lower limit is open ended . <EoL>
<BoL> Returns whether the uper limit is open ended . <EoL>
<BoL> Based on the colormap and extend variable , return the <EoL>
<BoL> Set : attr : ` vmin ` and : attr : ` vmax ` attributes to the first and <EoL>
<BoL> Get the lengths of colorbar extensions . <EoL>
<BoL> This code looks at the norm being used by the colorbar <EoL>
<BoL> Given a set of color data values , return their <EoL>
<BoL> Return X , Y , the coordinate arrays for the colorbar pcolormesh . <EoL>
<BoL> Return *x* , *y* arrays of colorbar bounding polygon , <EoL>
<BoL> Set the : attr : ` _boundaries ` and : attr : ` _values ` attributes <EoL>
<BoL> Return colorbar data coordinates for the boundaries of <EoL>
<BoL> Return the sequence of ticks ( colorbar data locations ) , <EoL>
<BoL> Return colorbar data coordinates for *N* uniformly <EoL>
<BoL> Return if we should use an adjustable tick locator or a fixed <EoL>
<BoL> Add the lines from a non-filled <EoL>
<BoL> Calculate any free parameters based on the current cmap and norm , <EoL>
<BoL> Return the x ticks as a list of locations <EoL>
<BoL> Turns off the minor ticks on the colorbar . <EoL>
<BoL> Turns on the minor ticks on the colorbar without extruding <EoL>
<BoL> Updates this colorbar to match the mappable 's properties . <EoL>
<BoL> Remove this colorbar from the figure . If the colorbar was created with <EoL>
<BoL> Label the long axis of the colorbar <EoL>
<BoL> set tick labels . Tick labels are updated immediately unless <EoL>
<BoL> Set tick locations . <EoL>
<BoL> Destroy and rebuild the colorbar . This is <EoL>
<BoL> update solid , lines , etc . Unlike update_bruteforce , it does <EoL>
<BoL> Force the update of the ticks and ticklabels . This must be <EoL>
<BoL> Draw lines on the colorbar . <EoL>
<BoL> Remove this colorbar from the figure <EoL>
<BoL> Draw the colors using : class : ` ~matplotlib.patches.Patch ` ; <EoL>
<BoL> This ticker needs to know the *colorbar* so that it can access <EoL>
<BoL> Generate a list of tick locations including the range *vmin* to <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> This ticker needs to know the *colorbar* so that it can access <EoL>
<BoL> _ColorbarLogLocator ( colorbar , *args , **kwargs ) <EoL>
<BoL> set the base of the log scaling ( major tick every base**i , i integer ) <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> set the minor ticks for the log scaling every base**i*subs [ j ] <EoL>
<BoL> Creates a colorbar on the given axes for the given mappable . <EoL>
<BoL> Resize and reposition a parent axes , and return a child axes <EoL>
<BoL> Parameters <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Raises <EoL>
<BoL> Homogenize the input *value* for easy and efficient normalization . <EoL>
<BoL> Returns an *RGB* tuple of three floats from 0-1 . <EoL>
<BoL> Returns an *RGBA* tuple of four floats from 0-1 . <EoL>
<BoL> Returns a numpy array of *RGBA* tuples . <EoL>
<BoL> Parameters <EoL>
<BoL> Generate the lookup table , self._lut <EoL>
<BoL> Return a new color map with *lutsize* entries . <EoL>
<BoL> Make a reversed instance of the Colormap . <EoL>
<BoL> Combines an rgb image with an intensity map using `` overlay '' blending . <EoL>
<BoL> Combines an rgb image with an intensity map using `` soft light '' <EoL>
<BoL> Calculates the illumination intensity for a surface using the defined <EoL>
<BoL> Calculates the illumination intensity for the normal vectors of a <EoL>
<BoL> Create color map from linear mapping segments <EoL>
<BoL> Return a new color map with *lutsize* entries . <EoL>
<BoL> Make a linear segmented colormap with *name* from a sequence <EoL>
<BoL> Make a reversed instance of the Colormap . <EoL>
<BoL> Set a new gamma value and regenerate color map . <EoL>
<BoL> If *vmin* or *vmax* is not given , they are initialized from the <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Normalize *value* data in the `` [ vmin , vmax ] `` interval into <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Inverse inplace Transformation . <EoL>
<BoL> Inplace transformation . <EoL>
<BoL> Calculates vmin and vmax in the transformed system . <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Return whether *c* can be interpreted as an item in the color cycle . <EoL>
<BoL> Convert *c* to an RGBA color , with no support for color-cycle syntax . <EoL>
<BoL> A helper routine to generate a cmap and a norm instance which <EoL>
<BoL> Return the global mapping of names to named colors . <EoL>
<BoL> Convert *c* to an RGB color , silently dropping the alpha channel . <EoL>
<BoL> convert hsv values in a numpy array to rgb values <EoL>
<BoL> Return whether *c* can be interpreted as an RGB ( A ) color . <EoL>
<BoL> Create an *N* -element 1-d lookup table <EoL>
<BoL> Convert *c* to a hex color . <EoL>
<BoL> convert float rgb values ( in the range [ 0 , 1 ] ) , in a numpy array to hsv <EoL>
<BoL> Compare two colors to see if they are the same . <EoL>
<BoL> Convert *c* to an RGBA color . <EoL>
<BoL> Convert *c* to a ( n , 4 ) array of RGBA colors . <EoL>
<BoL> Update the location and size of the bbox ( ` .patches.FancyBboxPatch ` ) , <EoL>
<BoL> Return the distance from the given points to the boundaries of a <EoL>
<BoL> return the extent ( bbox ) of the text together with <EoL>
<BoL> Return the width of a given text string , in pixels . <EoL>
<BoL> Return the maximum line width for wrapping text based on the current <EoL>
<BoL> Return a copy of the text with new lines added , so that <EoL>
<BoL> Get the ( possibly unit converted ) transformed x , y in display coords . <EoL>
<BoL> Test whether the mouse event occurred in the patch . <EoL>
<BoL> Draws the ` .Text ` object to the given *renderer* . <EoL>
<BoL> Return the bbox Patch , or None if the ` .patches.FancyBboxPatch ` <EoL>
<BoL> Return the list of font families used for font lookup <EoL>
<BoL> Return the font name as string <EoL>
<BoL> Return the font size as integer <EoL>
<BoL> Return the font style as string <EoL>
<BoL> Return the font variant as a string <EoL>
<BoL> Get the font weight as string or number <EoL>
<BoL> Return the horizontal alignment as string . Will be one of <EoL>
<BoL> Return a hashable tuple of properties . <EoL>
<BoL> Get the text rotation mode . <EoL>
<BoL> Get the font stretch as a string or number <EoL>
<BoL> Return whether this ` Text ` object uses TeX for rendering . <EoL>
<BoL> Return the vertical alignment as string . Will be one of <EoL>
<BoL> Return the ` Bbox ` bounding the text , in display units . <EoL>
<BoL> Return the wrapping state for the text . <EoL>
<BoL> Returns a cleaned string and a boolean flag . <EoL>
<BoL> Set the background color of the text by updating the bbox . <EoL>
<BoL> Draw a bounding box around self . <EoL>
<BoL> Set the artist 's clip ` ~.transforms.Bbox ` . <EoL>
<BoL> Set whether artist uses clipping . <EoL>
<BoL> Set the artist 's clip path , which may be : <EoL>
<BoL> Set the foreground color of the text <EoL>
<BoL> Set the font family . May be either a single string , or a list of <EoL>
<BoL> alias for ` .set_family ` <EoL>
<BoL> Set the font properties that control the text . <EoL>
<BoL> Set the font size . May be either a size string , relative to <EoL>
<BoL> Set the font stretch ( horizontal condensation or expansion ) . <EoL>
<BoL> Set the font style . <EoL>
<BoL> Set the font variant , either 'normal ' or 'small-caps ' . <EoL>
<BoL> Set the font weight . <EoL>
<BoL> Set the horizontal alignment to one of <EoL>
<BoL> Set the line spacing as a multiple of the font size . <EoL>
<BoL> Set the alignment for multiple lines layout . The layout of the <EoL>
<BoL> Set the ( *x* , *y* ) position of the text . <EoL>
<BoL> Set the rotation of the text . <EoL>
<BoL> Set text rotation mode . <EoL>
<BoL> Set the text string *s* . <EoL>
<BoL> Parameters <EoL>
<BoL> Set the vertical alignment <EoL>
<BoL> Set the wrapping state for the text . <EoL>
<BoL> Set the *x* position of the text . <EoL>
<BoL> Set the *y* position of the text . <EoL>
<BoL> Update properties from a dictionary . <EoL>
<BoL> Update the location and the size of the bbox . <EoL>
<BoL> Copy properties from other to self . <EoL>
<BoL> Add contour label using : class : ` ~matplotlib.text.Text ` class . <EoL>
<BoL> Add contour label using : class : ` ClabelText ` class . <EoL>
<BoL> This function calculates the appropriate label rotation given <EoL>
<BoL> Return x , y , and the index of a label location . <EoL>
<BoL> Return the width of the label in points . <EoL>
<BoL> This computes actual onscreen label width . <EoL>
<BoL> Get the text of the label . <EoL>
<BoL> Find good place to draw a label ( relatively flat part of the contour ) . <EoL>
<BoL> Defaults to removing last label , but any index can be supplied <EoL>
<BoL> Set the label properties - color , fontsize , text . <EoL>
<BoL> Select contour levels to span the data . <EoL>
<BoL> Determine the contour levels and store in self.levels . <EoL>
<BoL> Override in derived classes to create and return allsegs and allkinds . <EoL>
<BoL> Return ( lowers , uppers ) for filled contours . <EoL>
<BoL> Process *args* and *kwargs* ; override in derived classes . <EoL>
<BoL> Color argument processing for contouring . <EoL>
<BoL> Assign values to : attr : ` layers ` based on : attr : ` levels ` , <EoL>
<BoL> Finds contour that is closest to a point . Defaults to <EoL>
<BoL> returns alpha to be applied to all ContourSet artists <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` <EoL>
<BoL> Return a list of artists and labels suitable for passing through <EoL>
<BoL> Set the alpha blending value for all ContourSet artists . <EoL>
<BoL> For functions like contour , check that the dimensions <EoL>
<BoL> Compute `` allsegs `` and `` allkinds `` using C extension . <EoL>
<BoL> Return X , Y arrays such that contour ( Z ) will match imshow ( Z ) <EoL>
<BoL> Process args and kwargs . <EoL>
<BoL> Find the closest point to p0 on line segment connecting p1 and p2 . <EoL>
<BoL> lc : coordinates of vertices <EoL>
<BoL> Return whether first and last object in a sequence are the same . These are <EoL>
<BoL> Autoformat the date labels . The default format is the one to use <EoL>
<BoL> Return the number of units for each tick . <EoL>
<BoL> Convert axis data interval to datetime objects . <EoL>
<BoL> Set time zone info . <EoL>
<BoL> Converts the view interval to datetime objects . <EoL>
<BoL> Return the : class : ` ~matplotlib.units.AxisInfo ` for *unit* . <EoL>
<BoL> If *value* is not already a number or sequence of numbers , <EoL>
<BoL> Return the tzinfo instance of *x* or of its first element , or None <EoL>
<BoL> *fmt* is a : func : ` strftime ` format string ; *tz* is the <EoL>
<BoL> Helper function for replacing substrings sub1 and sub2 <EoL>
<BoL> Refer to documentation for : meth : ` datetime.datetime.strftime ` <EoL>
<BoL> Call time.strftime for years before 1900 by rolling <EoL>
<BoL> Return the locations of the ticks <EoL>
<BoL> *tz* is a : class : ` tzinfo ` instance . <EoL>
<BoL> Return how many days a unit of the locator is ; used for <EoL>
<BoL> Given the proposed upper and lower extent , adjust the range <EoL>
<BoL> Return the values of the located ticks given **vmin** and **vmax** . <EoL>
<BoL> Mark every day in *bymonthday* ; *bymonthday* can be an int or <EoL>
<BoL> Return how many days a unit of the locator is ; used for <EoL>
<BoL> Set the view limits to include the data range . <EoL>
<BoL> Mark every hour in *byhour* ; *byhour* can be an int or sequence . <EoL>
<BoL> *t* is a sequence of dates ( floating point days ) . *fmt* is a <EoL>
<BoL> *interval* is the interval between each iteration . For <EoL>
<BoL> Return the number of units for each tick . <EoL>
<BoL> Return how many days a unit of the locator is ; used for <EoL>
<BoL> Mark every minute in *byminute* ; *byminute* can be an int or <EoL>
<BoL> Mark every month in *bymonth* ; *bymonth* can be an int or <EoL>
<BoL> Mark every second in *bysecond* ; *bysecond* can be an int or <EoL>
<BoL> Mark every weekday in *byweekday* ; *byweekday* can be a number or <EoL>
<BoL> Mark years that are multiple of base on a given month and day <EoL>
<BoL> Set the view limits to include the data range . <EoL>
<BoL> Assert that datetimes *d1* and *d2* are within *epsilon* microseconds . <EoL>
<BoL> Assert that float ordinals *o1* and *o2* are within *epsilon* <EoL>
<BoL> Convert ` numpy.datetime64 ` or an ndarray of those types to Gregorian <EoL>
<BoL> Convert Gregorian float of the date , preserving hours , minutes , <EoL>
<BoL> Retrieve the preferred timeszone from the rcParams dictionary . <EoL>
<BoL> Convert : mod : ` datetime ` or : mod : ` date ` to the Gregorian date as UTC float <EoL>
<BoL> Args : <EoL>
<BoL> Args : <EoL>
<BoL> Convert datetime objects to Matplotlib dates . <EoL>
<BoL> Create a date locator with *numticks* ( approx ) and a date formatter <EoL>
<BoL> Convert a date string to a datenum using <EoL>
<BoL> Return a sequence of equally spaced Matplotlib dates . <EoL>
<BoL> Convert an epoch or sequence of epochs to the new date format , <EoL>
<BoL> Return hours as days . <EoL>
<BoL> Convert a Julian date ( or sequence ) to a Matplotlib date ( or sequence ) . <EoL>
<BoL> Return minutes as days . <EoL>
<BoL> Convert mx : class : ` datetime ` instance ( or sequence of mx <EoL>
<BoL> Convert Matplotlib dates to ` ~datetime.datetime ` objects . <EoL>
<BoL> Convert days since 0001 to epoch . *d* can be a number or sequence . <EoL>
<BoL> Convert a Matplotlib date ( or sequence ) to a Julian date ( or sequence ) . <EoL>
<BoL> Convert number of days to a ` ~datetime.timedelta ` object . <EoL>
<BoL> Return a version of this object represented entirely using integer <EoL>
<BoL> Output a string that would generate this RRULE if passed to rrulestr . <EoL>
<BoL> If a ` BYXXX ` sequence is passed to the constructor at the same level as <EoL>
<BoL> Calculates the next value in a sequence where the ` FREQ ` parameter is <EoL>
<BoL> Returns the first recurrence after the given datetime instance . The <EoL>
<BoL> Returns the last recurrence before the given datetime instance . The <EoL>
<BoL> Returns all the occurrences of the rrule between after and before . <EoL>
<BoL> Returns the number of recurrences in this set . It will have go <EoL>
<BoL> Return new rrule with same attributes except for those attributes given new <EoL>
<BoL> Generator which yields up to ` count ` recurrences after the given <EoL>
<BoL> Decorator function that allows rrule methods to handle tzinfo . <EoL>
<BoL> Return seconds as days . <EoL>
<BoL> s : string to be converted <EoL>
<BoL> fmt : any valid strptime format is supported <EoL>
<BoL> Return weeks as days . <EoL>
<BoL> In the case where the params is a mutable sequence ( list or <EoL>
<BoL> A decorator that will copy the docstring from the source and <EoL>
<BoL> A special case of the interpd that first performs a dedent on <EoL>
<BoL> Context manager enter method , does nothing . <EoL>
<BoL> Context manager exit method , closes the underlying file if it is open . <EoL>
<BoL> Read the data from the file named *filename* and convert <EoL>
<BoL> Iterate through the pages of the file . <EoL>
<BoL> Read and return an integer argument *nbytes* long . <EoL>
<BoL> Output the text and boxes belonging to the most recent page . <EoL>
<BoL> Read one page from the file . Return True if successful , <EoL>
<BoL> Close the underlying file if it is open . <EoL>
<BoL> Height and depth of char in dvi units . For internal use by dviread.py . <EoL>
<BoL> Width of char in dvi units . For internal use by dviread.py . <EoL>
<BoL> Parse the font mapping file . <EoL>
<BoL> Read one page from the file . Return True if successful , <EoL>
<BoL> Read *bytes* bytes , returning the bytes interpreted as a <EoL>
<BoL> Optionally signed , length *delta*+1 <EoL>
<BoL> Return *delta* without reading anything more from the dvi file <EoL>
<BoL> Signed , length *delta* <EoL>
<BoL> Signed , length *delta*+1 <EoL>
<BoL> Unsigned length *delta*+1 <EoL>
<BoL> Decorator for dispatch by opcode . Sets the values in *table* <EoL>
<BoL> Convert from two 's complement to negative . <EoL>
<BoL> Multiply two numbers in 20.12 fixed point format . <EoL>
<BoL> Add Axes *a* , with key *key* , to the stack , and return the stack . <EoL>
<BoL> Return a list of the Axes instances that have been added to the figure . <EoL>
<BoL> Move the given axes , which must already exist in the <EoL>
<BoL> Return a tuple of `` ( key , axes ) `` for the active axes . <EoL>
<BoL> Return the Axes instance that was added with *key* . <EoL>
<BoL> Remove the axes from the stack . <EoL>
<BoL> Create a new : class : ` BboxTransformTo ` that linearly transforms <EoL>
<BoL> return True if the image is better to be drawn unsampled . <EoL>
<BoL> draw unsampled image . The renderer should support a draw_image method <EoL>
<BoL> Returns ` True ` if the image can be composited with its neighbors . <EoL>
<BoL> Call this whenever the mappable is changed so observers can <EoL>
<BoL> Test whether the mouse event occurred within the image . <EoL>
<BoL> Get the image extent : left , right , bottom , top <EoL>
<BoL> Return whether the resize filter normalizes the weights . <EoL>
<BoL> Return the filterrad setting . <EoL>
<BoL> Return the interpolation method the image uses when resizing . <EoL>
<BoL> Return the image resample boolean . <EoL>
<BoL> Get the numrows , numcols of the input image <EoL>
<BoL> Set the alpha value used for blending - not supported on all backends . <EoL>
<BoL> Retained for backwards compatibility - use set_data instead . <EoL>
<BoL> Set the image array . <EoL>
<BoL> Set whether the resize filter normalizes the weights . <EoL>
<BoL> Set the resize filter radius only applicable to some <EoL>
<BoL> Set the interpolation method the image uses when resizing . <EoL>
<BoL> Set whether or not image resampling is used . <EoL>
<BoL> Write the image to png file with fname <EoL>
<BoL> Parameters <EoL>
<BoL> Convert bounds of the rectangle . <EoL>
<BoL> NOTE : This can not be called until after this has been added <EoL>
<BoL> Test whether the mouse event occurred in the patch . <EoL>
<BoL> Returns `` True `` if the given *point* is inside the path <EoL>
<BoL> Returns a bool array which is `` True `` if the ( closed ) path <EoL>
<BoL> Returns True if the : class : ` Patch ` is to be drawn with antialiasing . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` instance which <EoL>
<BoL> Return the edge color of the : class : ` Patch ` . <EoL>
<BoL> Return a : class : ` ~matplotlib.transforms.Bbox ` object defining <EoL>
<BoL> Return the face color of the : class : ` Patch ` . <EoL>
<BoL> Return the linestyle . <EoL>
<BoL> Return the line width in points . <EoL>
<BoL> Return the vertices of the rectangle . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` applied <EoL>
<BoL> Return a copy of the vertices used in this patch <EoL>
<BoL> Set the alpha transparency of the patch . <EoL>
<BoL> Set whether to use antialiased rendering . <EoL>
<BoL> Set the bounds of the rectangle : l , b , w , h <EoL>
<BoL> Set the patch capstyle <EoL>
<BoL> Set both the edgecolor and the facecolor . <EoL>
<BoL> Set the patch edge color . <EoL>
<BoL> Set the patch face color . <EoL>
<BoL> Set whether to fill the patch . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Set the patch joinstyle <EoL>
<BoL> Set the patch linestyle . <EoL>
<BoL> Set the patch linewidth in points <EoL>
<BoL> Set the left and bottom coords of the rectangle . <EoL>
<BoL> Updates this : class : ` Patch ` from the properties of *other* . <EoL>
<BoL> Draw the : class : ` TextWithDash ` object to the given *renderer* . <EoL>
<BoL> Get the direction dash . 1 is before the text and 0 is after . <EoL>
<BoL> Get the length of the dash . <EoL>
<BoL> Get the extra spacing between the dash and the text , in canvas units . <EoL>
<BoL> Get the extra spacing between the dash and the specified text <EoL>
<BoL> Get the rotation of the dash in degrees . <EoL>
<BoL> Return a hashable tuple of properties . <EoL>
<BoL> Return the text angle as float in degrees . <EoL>
<BoL> Return a : class : ` ~matplotlib.transforms.Bbox ` object bounding <EoL>
<BoL> Set the direction of the dash following the text . 1 is before the text <EoL>
<BoL> Set the length of the dash , in canvas units . <EoL>
<BoL> Set the `` pad '' of the TextWithDash , which is the extra spacing <EoL>
<BoL> Set the `` push '' of the TextWithDash , which is the extra spacing between <EoL>
<BoL> Set the rotation of the dash , in degrees . <EoL>
<BoL> Set the figure instance the artist belongs to . <EoL>
<BoL> Set the ( *x* , *y* ) position of the : class : ` TextWithDash ` . <EoL>
<BoL> Set the : class : ` matplotlib.transforms.Transform ` instance used <EoL>
<BoL> Set the *x* position of the : class : ` TextWithDash ` . <EoL>
<BoL> Set the *y* position of the : class : ` TextWithDash ` . <EoL>
<BoL> Computes the actual *x* , *y* coordinates for text based on the <EoL>
<BoL> Calculate the width and height for a figure with a specified aspect ratio . <EoL>
<BoL> Get a list of acceptable projection names . <EoL>
<BoL> Search the font list for the font that most closely matches <EoL>
<BoL> Return the default font size . <EoL>
<BoL> Return the default font weight . <EoL>
<BoL> Returns a match score between the list of font families in <EoL>
<BoL> Returns a match score between *size1* and *size2* . <EoL>
<BoL> Returns a match score between *stretch1* and *stretch2* . <EoL>
<BoL> Returns a match score between *style1* and *style2* . <EoL>
<BoL> Returns a match score between *variant1* and *variant2* . <EoL>
<BoL> Returns a match score between *weight1* and *weight2* . <EoL>
<BoL> Set the default font weight . The initial value is 'normal ' . <EoL>
<BoL> Update the font dictionary with new font files . <EoL>
<BoL> Return a deep copy of self <EoL>
<BoL> Return a list of font names that comprise the font family . <EoL>
<BoL> Return the filename of the associated font . <EoL>
<BoL> Get a fontconfig pattern suitable for looking up the font as <EoL>
<BoL> Return the name of the font that best matches the font properties . <EoL>
<BoL> Return the font size . <EoL>
<BoL> Return the font style . Values are : 'normal ' , 'italic ' or 'oblique ' . <EoL>
<BoL> Return the font stretch or width . Options are : 'ultra-condensed ' , <EoL>
<BoL> Return the font variant . Values are : 'normal ' or 'small-caps ' . <EoL>
<BoL> Set the font weight . Options are : A numeric value in the <EoL>
<BoL> Change the font family . May be either an alias ( generic name <EoL>
<BoL> Set the filename of the fontfile to use . In this case , all <EoL>
<BoL> Set the properties by parsing a fontconfig *pattern* . <EoL>
<BoL> Set the font size . Either an relative value of 'xx-small ' , <EoL>
<BoL> Set the font style . Values are : 'normal ' , 'italic ' or 'oblique ' . <EoL>
<BoL> Set the font stretch or width . Options are : 'ultra-condensed ' , <EoL>
<BoL> Set the font variant . Values are : 'normal ' or 'small-caps ' . <EoL>
<BoL> Set the font weight . May be either a numeric value in the <EoL>
<BoL> Constructor for JSONEncoder , with sensible defaults . <EoL>
<BoL> Return a JSON string representation of a Python data structure . <EoL>
<BoL> Encode the given object and yield each string <EoL>
<BoL> Get list of font files on OS X . <EoL>
<BoL> Set a lock object which will be released by the interpreter when <EoL>
<BoL> Stop the timer if it has n't finished yet . <EoL>
<BoL> Return whether the thread is alive . <EoL>
<BoL> Wait until the thread terminates . <EoL>
<BoL> Start the thread 's activity . <EoL>
<BoL> Extract information from an AFM font file . <EoL>
<BoL> A function to create a font lookup list . The default is to create <EoL>
<BoL> Search for fonts in the specified font paths . If no paths are <EoL>
<BoL> Given a dictionary of key/value pairs , generates a fontconfig <EoL>
<BoL> Return the location of the cache directory . <EoL>
<BoL> List the font filenames known to ` fc-list ` having the given extension . <EoL>
<BoL> Return a list of file extensions extensions that are synonyms for <EoL>
<BoL> Dumps a data structure as JSON in the named file . <EoL>
<BoL> Loads a data structure as JSON from the named file . <EoL>
<BoL> Return a list of all fonts matching any of the extensions , found <EoL>
<BoL> Extract information from a TrueType font file . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Search for fonts in the specified font directory , or use the <EoL>
<BoL> Parse the given fontconfig *pattern* and return a dictionary <EoL>
<BoL> Implementation of + operator - returns C { L { And } } . Adding strings to a ParserElement <EoL>
<BoL> Implementation of & operator - returns C { L { Each } } <EoL>
<BoL> Shortcut for C { L { setResultsName } } , with C { listAllMatches=False } . <EoL>
<BoL> Implementation of ~ operator - returns C { L { NotAny } } <EoL>
<BoL> Implementation of * operator , allows use of C { expr * 3 } in place of <EoL>
<BoL> Implementation of | operator - returns C { L { MatchFirst } } <EoL>
<BoL> Implementation of + operator when left operand is not a C { L { ParserElement } } <EoL>
<BoL> Implementation of & operator when left operand is not a C { L { ParserElement } } <EoL>
<BoL> Implementation of | operator when left operand is not a C { L { ParserElement } } <EoL>
<BoL> Implementation of - operator when left operand is not a C { L { ParserElement } } <EoL>
<BoL> Implementation of ^ operator when left operand is not a C { L { ParserElement } } <EoL>
<BoL> Implementation of - operator , returns C { L { And } } with error stop <EoL>
<BoL> Implementation of ^ operator - returns C { L { Or } } <EoL>
<BoL> Add a boolean predicate function to expression 's list of parse actions . See <EoL>
<BoL> Add one or more parse actions to expression 's list of parse actions . See L { I { setParseAction } < setParseAction > } . <EoL>
<BoL> Make a copy of this C { ParserElement } . Useful for defining different parse actions <EoL>
<BoL> Enables `` packrat '' parsing , which adds memoizing to the parsing logic . <EoL>
<BoL> Define expression to be ignored ( e.g. , comments ) while doing pattern <EoL>
<BoL> Set class to be used for inclusion of string literals into a parser . <EoL>
<BoL> Disables the skipping of whitespace before matching the characters in the <EoL>
<BoL> Method for quick testing of a parser against a test string . Good for simple <EoL>
<BoL> Execute the parse expression on the given file or filename . <EoL>
<BoL> Execute the parse expression with the given string . <EoL>
<BoL> Overrides default behavior to expand C { < TAB > } s to spaces before parsing the input string . <EoL>
<BoL> Execute the parse expression on a series of test strings , showing each <EoL>
<BoL> Scan the input string for expression matches . Each match will return the <EoL>
<BoL> Another extension to C { L { scanString } } , simplifying the access to the tokens found <EoL>
<BoL> Method to invoke the Python pdb debugger when this element is <EoL>
<BoL> Enable display of debugging messages while doing pattern matching . <EoL>
<BoL> Enable display of debugging messages while doing pattern matching . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Define action to perform if parsing fails at this expression . <EoL>
<BoL> Define name for this expression , makes debugging and exception messages clearer . <EoL>
<BoL> Define one or more actions to perform when successfully matching parse element definition . <EoL>
<BoL> Define name for referencing matching tokens as a nested attribute <EoL>
<BoL> Overrides the default whitespace chars <EoL>
<BoL> Generator method to split a string using the given expression as a separator . <EoL>
<BoL> Suppresses the output of this C { ParserElement } ; useful to keep punctuation from <EoL>
<BoL> Extension to C { L { scanString } } , to modify matching text with modified tokens that may <EoL>
<BoL> Check defined expressions for valid structure , check for infinite recursive definitions . <EoL>
<BoL> supported attributes by name are : <EoL>
<BoL> internal factory method to simplify creating one type of ParseException <EoL>
<BoL> Extracts the exception line from the input string , and marks <EoL>
<BoL> The parameters C { pattern } and C { flags } are passed to the C { re.compile ( ) } function as-is . See the Python C { re } module for an explanation of the acceptable patterns and flags . <EoL>
<BoL> Return Regex with an attached parse action to transform the parsed <EoL>
<BoL> Return the string representing the configuration directory . <EoL>
<BoL> Return the user 's home directory . <EoL>
<BoL> The number of rows and number of columns of the grid need to <EoL>
<BoL> Return a dictionary of subplot layout parameters . <EoL>
<BoL> Get the topmost SubplotSpec instance associated with the subplot . <EoL>
<BoL> Return whether the image would be better drawn unsampled . <EoL>
<BoL> Get the cursor data for a given event <EoL>
<BoL> Get the image extent : left , right , bottom , top <EoL>
<BoL> Set the image array . <EoL>
<BoL> extent is data axes ( left , right , bottom , top ) for making image plots <EoL>
<BoL> Test whether the mouse event occurred within the image . <EoL>
<BoL> Create a new : class : ` BboxTransform ` that linearly transforms <EoL>
<BoL> kwargs are identical to those for AxesImage , except <EoL>
<BoL> return False . Do not use unsampled image . <EoL>
<BoL> Set the grid for the pixel centers , and the pixel values . <EoL>
<BoL> Parameters <EoL>
<BoL> Get the cursor data for a given event <EoL>
<BoL> Set the grid for the rectangle boundaries , and the data values . <EoL>
<BoL> Convert an RGB image to RGBA , as required by the image resample C++ <EoL>
<BoL> Composite a number of RGBA images into one . The images are <EoL>
<BoL> Read an image from a file into an array . <EoL>
<BoL> Load a ` PIL image ` _ and return it as a numpy array . <EoL>
<BoL> Set interactive mode to boolean b . <EoL>
<BoL> Return True if string is an http , ftp , or file URL path . <EoL>
<BoL> Wrapper around a ` .Legend ` to support mouse dragging . <EoL>
<BoL> disconnect the callbacks <EoL>
<BoL> Draw the children <EoL>
<BoL> Return with , height , xdescent , ydescent of box <EoL>
<BoL> return offset of the container . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` applied <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set the offset of the container . <EoL>
<BoL> set_transform is ignored . <EoL>
<BoL> Return the aspect ratio of the bbox mutation . <EoL>
<BoL> Return the mutation scale . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` instance which <EoL>
<BoL> Return the mutated path of the rectangle <EoL>
<BoL> Set the bounds of the rectangle : l , b , w , h <EoL>
<BoL> Set the box style . <EoL>
<BoL> Set the rectangle height . <EoL>
<BoL> Set the aspect ratio of the bbox mutation . <EoL>
<BoL> Set the mutation scale . <EoL>
<BoL> Set the rectangle width . <EoL>
<BoL> Set the left coord of the rectangle . <EoL>
<BoL> Set the bottom coord of the rectangle . <EoL>
<BoL> update offset of children and return the extents of the box <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.TransformedPath ` instance <EoL>
<BoL> return True if x is sorted in ascending order <EoL>
<BoL> Split drawstyle from linestyle string <EoL>
<BoL> Puts a TransformedPath instance at self._transformed_path ; <EoL>
<BoL> Test whether the mouse event occurred on the line . The pick <EoL>
<BoL> draw the Line with ` renderer ` unless visibility is False <EoL>
<BoL> Get the cap style for dashed linestyles <EoL>
<BoL> Get the join style for dashed linestyles <EoL>
<BoL> Return the xdata , ydata . <EoL>
<BoL> return the marker fillstyle <EoL>
<BoL> return the markevery setting <EoL>
<BoL> Return the : class : ` ~matplotlib.path.Path ` object associated <EoL>
<BoL> return the pick radius used for containment tests <EoL>
<BoL> Get the cap style for solid linestyles <EoL>
<BoL> Get the join style for solid linestyles <EoL>
<BoL> Return the xdata . <EoL>
<BoL> Return the *xy* data as a Nx2 numpy array . <EoL>
<BoL> Return the ydata . <EoL>
<BoL> Set whether to use antialiased rendering . <EoL>
<BoL> Set the color of the line <EoL>
<BoL> Set the cap style for dashed linestyles . <EoL>
<BoL> Set the join style for dashed linestyles . <EoL>
<BoL> Set the dash sequence , sequence of dashes with on off ink in <EoL>
<BoL> Set the x and y data <EoL>
<BoL> Set the drawstyle of the plot <EoL>
<BoL> Set the marker fill style ; 'full ' means fill the whole marker . <EoL>
<BoL> Set the linestyle of the line ( also accepts drawstyles , <EoL>
<BoL> Set the line width in points <EoL>
<BoL> Set the line marker . <EoL>
<BoL> Set the marker edge color . <EoL>
<BoL> Set the marker edge width in points . <EoL>
<BoL> Set the marker face color . <EoL>
<BoL> Set the alternate marker face color . <EoL>
<BoL> Set the marker size in points . <EoL>
<BoL> Set the markevery property to subsample the plot when using markers . <EoL>
<BoL> Sets the event picker details for the line . <EoL>
<BoL> Set the pick radius used for containment tests . <EoL>
<BoL> Set the cap style for solid linestyles . <EoL>
<BoL> Set the join style for solid linestyles . <EoL>
<BoL> set the Transformation instance used by this artist <EoL>
<BoL> Set the data array for x . <EoL>
<BoL> Set the data array for y . <EoL>
<BoL> copy properties from other to self <EoL>
<BoL> Return the path of this patch <EoL>
<BoL> Create a shadow of the given *patch* offset by *ox* , *oy* . <EoL>
<BoL> Draw the children <EoL>
<BoL> get minimumdescent . <EoL>
<BoL> get multilinebaseline . <EoL>
<BoL> return offset of the container . <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set minimumdescent . <EoL>
<BoL> Set multilinebaseline . <EoL>
<BoL> Set the offset of the container . <EoL>
<BoL> set_transform is ignored . <EoL>
<BoL> update offset of childrens and return the extents of the box <EoL>
<BoL> Return a generator of artists that can be used as handles in <EoL>
<BoL> Return handles and labels for legend , internal method . <EoL>
<BoL> Get the handles and labels from the calls to either `` figure.legend `` <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> MarkerStyle <EoL>
<BoL> Draws mathtext markers ' $ ... $ ' using TextPath object . <EoL>
<BoL> Sets fillstyle <EoL>
<BoL> Initialize the class with a : class : ` matplotlib.lines.Line2D ` <EoL>
<BoL> When the line is picked , update the set of selected indices . <EoL>
<BoL> Default `` do nothing '' implementation of the <EoL>
<BoL> Convert linestyle - > dash pattern <EoL>
<BoL> Helper function that sorts out how to deal the inputHelper function to cope with ` codes ` being an <EoL>
<BoL> Determine if any line segments are within radius of a <EoL>
<BoL> Return the amount of kerning between this and the given <EoL>
<BoL> Render the character to the canvas . <EoL>
<BoL> Determine the highest order of glue used by the members of this list . <EoL>
<BoL> The main duty of : meth : ` hpack ` is to compute the dimensions of <EoL>
<BoL> Insert : class : ` Kern ` nodes between : class : ` Char ` nodes to set <EoL>
<BoL> *font* : one of the TeX font names : : <EoL>
<BoL> Get the data needed by the backend to render the math <EoL>
<BoL> Get the set of characters that were used in the math <EoL>
<BoL> Draw a glyph at <EoL>
<BoL> Draw a filled rectangle from ( *x1* , *y1* ) to ( *x2* , *y2* ) . <EoL>
<BoL> Set the size of the buffer used to render the math expression . <EoL>
<BoL> Render the character to the canvas <EoL>
<BoL> Override prime symbol to use Bakoma <EoL>
<BoL> Helper class to raise parser errors . <EoL>
<BoL> *default_font_prop* : A <EoL>
<BoL> Fix any cyclical references before the object is about <EoL>
<BoL> Override if your font provides multiple sizes of the same <EoL>
<BoL> Get the line thickness that matches the given font . Used as a <EoL>
<BoL> Get the xheight for the given *font* and *fontsize* . <EoL>
<BoL> Get the FreeType hinting type to use with this particular <EoL>
<BoL> Return a backend-specific tuple to return to the backend after <EoL>
<BoL> Draw a glyph described by *info* to the reference point ( *ox* , <EoL>
<BoL> Draw a filled black rectangle from ( *x1* , *y1* ) to ( *x2* , *y2* ) . <EoL>
<BoL> Grows one level larger . There is no limit to how big <EoL>
<BoL> Shrinks one level smaller . There are only three levels of <EoL>
<BoL> Get the current : class : ` State ` of the parser . <EoL>
<BoL> Parse expression *s* using the given *fonts_object* for <EoL>
<BoL> Pop a : class : ` State ` off of the stack . <EoL>
<BoL> Push a new : class : ` State ` onto the stack which is just a copy <EoL>
<BoL> The main duty of : meth : ` vpack ` is to compute the dimensions of <EoL>
<BoL> get_unicode_index ( symbol , [ bool ] ) - > integer <EoL>
<BoL> Given a math expression , renders it in a closely-clipped bounding <EoL>
<BoL> Helper to quickly define a set of alternative Literals , and makes sure to do <EoL>
<BoL> Get the location of the config file . <EoL>
<BoL> override the hash function of any of the formatters , so that we do n't <EoL>
<BoL> Evaluate the estimated pdf on a set of points . <EoL>
<BoL> center and optionally standardize the data using the mean and sigma <EoL>
<BoL> project x onto the principle axes , dropping any axes where fraction <EoL>
<BoL> amap ( function , sequence [ , sequence , ... ] ) - > array . <EoL>
<BoL> Apply the given window to the given 1D or 2D array along the given axis . <EoL>
<BoL> Return the representation of a *number* in any given *base* . <EoL>
<BoL> Return the binary representation of the input *number* as a <EoL>
<BoL> Return the matrix *M* with each row having zero mean and unit std . <EoL>
<BoL> The coherence between *x* and *y* . Coherence is the normalized <EoL>
<BoL> return a list of ( ind0 , ind1 ) such that mask [ ind0 : ind1 ] .all ( ) is <EoL>
<BoL> return the indices into *x* where *x* crosses some threshold from <EoL>
<BoL> return the indices into *x* where *x* crosses some threshold from <EoL>
<BoL> Return x minus its mean along the specified axis . <EoL>
<BoL> Return x with its trend removed . <EoL>
<BoL> Return x minus best fit line ; 'linear ' detrending . <EoL>
<BoL> Return x minus the mean ( x ) . <EoL>
<BoL> Return x : no detrending . <EoL>
<BoL> Return the distance between two points . <EoL>
<BoL> Get the distance of a point to a segment . <EoL>
<BoL> Computes the distance between a set of successive points in *N* dimensions . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Compute exponentials which safely underflow to zero . <EoL>
<BoL> Compute an FFT phase randomized surrogate of *x* . <EoL>
<BoL> frange ( [ start , ] stop [ , step , keywords ] ) - > array of floats <EoL>
<BoL> Return a *M* x *N* sparse matrix with *frac* elements randomly <EoL>
<BoL> *Z* and *Cond* are *M* x *N* matrices . *Z* are data and *Cond* is <EoL>
<BoL> Interpolates from a nonuniformly spaced grid to some other grid . <EoL>
<BoL> Returns the identity matrix of shape ( *n* , *n* , ... , *n* ) ( rank *r* ) . <EoL>
<BoL> *points* is a sequence of *x* , *y* points . <EoL>
<BoL> Tests whether first and last object in a sequence are the same . These are <EoL>
<BoL> Returns the log base 2 of *n* if *n* is a power of 2 , zero otherwise . <EoL>
<BoL> Like the MATLAB function with the same name , returns *True* <EoL>
<BoL> Return the *l1* norm of *a* , flattened out . <EoL>
<BoL> Return the *l2* norm of *a* , flattened out . <EoL>
<BoL> This function provides simple ( but somewhat less so than <EoL>
<BoL> Return the log ( *x* ) in base 2 . <EoL>
<BoL> Return N values logarithmically spaced between xmin and xmax . <EoL>
<BoL> Return the indices of the longest stretch of contiguous ones in *x* , <EoL>
<BoL> alias for longest_contiguous_ones <EoL>
<BoL> Compute the len ( *n* ) moving average of *x* . <EoL>
<BoL> norm ( a , p=2 ) - > l-p norm of a.flat <EoL>
<BoL> Offsets an array *y* by +/- an error and returns a tuple <EoL>
<BoL> Computes the distance travelled along a polygonal curve in *N* dimensions . <EoL>
<BoL> Given a sequence of *xs* and *ys* , return the vertices of a <EoL>
<BoL> Given a sequence of *x* , *ylower* and *yupper* , return the polygon <EoL>
<BoL> Return the percentiles of *x* . *p* can either be a sequence ofReturns the point at the given fraction between a and b , where <EoL>
<BoL> Return the rank for each element in *x* , return the rank <EoL>
<BoL> Converts a quadratic Bezier curve to a cubic approximation . <EoL>
<BoL> Returns a textual representation of a record array . <EoL>
<BoL> Return a new record array with field names populated with data <EoL>
<BoL> Return a new numpy record array with fields in *names* dropped . <EoL>
<BoL> *r* is a numpy record array <EoL>
<BoL> if name is a string key , use the larger size of r1 or r2 beforeThe column name in *newrec* that corresponds to the column in *r1*.The column name in *newrec* that corresponds to the column in *r2* . <EoL>
<BoL> Return a new numpy record array with only fields listed in names <EoL>
<BoL> *r* is a numpy record array <EoL>
<BoL> Join a sequence of record arrays on single column key . <EoL>
<BoL> Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta . <EoL>
<BoL> Return the root mean square of all the elements of *a* , flattened out . <EoL>
<BoL> Return *True* if *s1* and *s2* intersect . <EoL>
<BoL> : func : ` slopes ` calculates the slope *y* ' ( *x* ) <EoL>
<BoL> Given data vectors *x* and *y* , the slope vector *yp* and a new <EoL>
<BoL> Repeat the values in an array in a memory-efficient manner . Array x is <EoL>
<BoL> Get all windows of x with length n as a single array , <EoL>
<BoL> Finds the length of a set of vectors in *n* dimensions . This is <EoL>
<BoL> Return x times the hanning window of len ( x ) . <EoL>
<BoL> No window function ; simply return x . <EoL>
<BoL> return the position of the bbox anchored at the parentbbox <EoL>
<BoL> Update the offset func which depends on the dpi of the <EoL>
<BoL> return the bbox that the legend will be anchored <EoL>
<BoL> return the extent of the artist . The extent of the child <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> set the bbox that the child will be anchored . <EoL>
<BoL> Parameters <EoL>
<BoL> given the xy pixel coordinate , check if the annotation need to <EoL>
<BoL> return x , y ( in display coordinate ) that is to be used for a reference <EoL>
<BoL> Update the pixel positions of the annotation text and the arrow <EoL>
<BoL> Set the draggable state -- if state is <EoL>
<BoL> Draw the : class : ` Annotation ` object to the given *renderer* . <EoL>
<BoL> Return *annotation_clip* attribute . <EoL>
<BoL> return fontsize in points <EoL>
<BoL> set *annotation_clip* attribute . <EoL>
<BoL> set fontsize in points <EoL>
<BoL> Update the pixel positions of the annotated point and the text . <EoL>
<BoL> Draw the children <EoL>
<BoL> return offset of the container . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` applied <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set the offset of the container . <EoL>
<BoL> set_transform is ignored . <EoL>
<BoL> Return the arrowstyle object . <EoL>
<BoL> Return the : class : ` ConnectionStyle ` instance . <EoL>
<BoL> dpi_cor is currently used for linewidth-related things and <EoL>
<BoL> Return the aspect ratio of the bbox mutation . <EoL>
<BoL> Return the mutation scale . <EoL>
<BoL> Return the path of the arrow in the data coordinates . Use <EoL>
<BoL> Return the mutated path of the arrow in display coordinates . <EoL>
<BoL> Set the arrow style . Old attributes are forgotten . Without arguments <EoL>
<BoL> Set the connection style . Old attributes are forgotten . <EoL>
<BoL> dpi_cor is currently used for linewidth-related things and <EoL>
<BoL> Set the aspect ratio of the bbox mutation . <EoL>
<BoL> Set the mutation scale . <EoL>
<BoL> Set the tail patch . <EoL>
<BoL> Set the head patch . <EoL>
<BoL> Set the begin and end positions of the connecting path . <EoL>
<BoL> Draw the children <EoL>
<BoL> return offset of the container . <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> *pad* : boundary pad <EoL>
<BoL> Update the location of children if necessary and draw them <EoL>
<BoL> update offset of childrens and return the extents of the box <EoL>
<BoL> Given a list of ( height , descent ) of each boxes , align the boxes <EoL>
<BoL> Geiven a list of ( width , xdescent ) of each boxes , calculate the <EoL>
<BoL> This is a debug function to draw a rectangle around the bounding <EoL>
<BoL> NOTE : This can not be called until after this has been added <EoL>
<BoL> Ellipses are normally drawn using an approximation that uses <EoL>
<BoL> Return the center of the ellipse <EoL>
<BoL> Return the vertices of the rectangle <EoL>
<BoL> Set the center of the ellipse . <EoL>
<BoL> Draws an arrow from ( *x* , *y* ) to ( *x* + *dx* , *y* + *dy* ) . <EoL>
<BoL> return the instance of the subclass with the given style name . <EoL>
<BoL> A class method which returns a dictionary of available styles . <EoL>
<BoL> A class method which returns a string of the available styles . <EoL>
<BoL> Register a new style . <EoL>
<BoL> Create true circle at center *xy* = ( *x* , *y* ) with given <EoL>
<BoL> Return the radius of the circle <EoL>
<BoL> Set the radius of the circle <EoL>
<BoL> Check whether the annotation needs to be drawn . <EoL>
<BoL> calculate the pixel position of given point <EoL>
<BoL> Return *annotation_clip* attribute . <EoL>
<BoL> Return the mutated path of the arrow in the display coord <EoL>
<BoL> set *annotation_clip* attribute . <EoL>
<BoL> Parameters <EoL>
<BoL> Get the vertices of the path . <EoL>
<BoL> Set the vertices of the polygon . <EoL>
<BoL> Returns if the polygon is closed <EoL>
<BoL> Get the path of the polygon <EoL>
<BoL> Set if the polygon is closed <EoL>
<BoL> *path* is a : class : ` matplotlib.path.Path ` object . <EoL>
<BoL> *xy* is a numpy array with shape Nx2 . <EoL>
<BoL> Draw a wedge centered at *x* , *y* center with radius *r* that <EoL>
<BoL> For line segment defined by ( *x1* , *y1* ) and ( *x2* , *y2* ) <EoL>
<BoL> find a point along a line connecting ( x0 , y0 ) -- ( x1 , y1 ) whose <EoL>
<BoL> A helper function for the _Style class . Given the dictionary of <EoL>
<BoL> Given the list of list of strings , return a string of REST table format . <EoL>
<BoL> Class decorator that stashes a class in a ( style ) dictionary . <EoL>
<BoL> A helper function for the _Style class . Given the dictionary of <EoL>
<BoL> This is a debug function to draw a rectangle around the bounding <EoL>
<BoL> Return an iterator that yields the weak references to the values . <EoL>
<BoL> Return a list of weak references to the values . <EoL>
<BoL> Given a sequence of : class : ` Path ` objects and optional <EoL>
<BoL> Return *True* if this axes supports the pan/zoom button functionality . <EoL>
<BoL> Return *True* if this axes supports the zoom box button functionality . <EoL>
<BoL> Return the aspect ratio of the data itself . <EoL>
<BoL> Set the number of degrees between each latitude grid . <EoL>
<BoL> Set the number of degrees between each longitude grid . <EoL>
<BoL> Set the latitude ( s ) at which to stop drawing the longitude grids . <EoL>
<BoL> Return *True* if this axes supports the pan/zoom button functionality . <EoL>
<BoL> Return *True* if this axes supports the zoom box button functionality . <EoL>
<BoL> Return a format string formatting the coordinate using Unicode <EoL>
<BoL> Return the aspect ratio of the data itself . For a polar plot , <EoL>
<BoL> Returns <EoL>
<BoL> Get the direction in which theta increases . <EoL>
<BoL> Get the offset for the location of 0 in radians . <EoL>
<BoL> Updates the theta position of the radius labels . <EoL>
<BoL> Set the direction in which theta increases . <EoL>
<BoL> Set the offset for the location of 0 in radians . <EoL>
<BoL> Sets the location of theta 's zero . ( Calls set_theta_offset <EoL>
<BoL> Set the theta gridlines in a polar plot . <EoL>
<BoL> Get a projection class from its *name* . <EoL>
<BoL> Get a list of the names of all projections currently registered . <EoL>
<BoL> Register a new set of projections . <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> Return the locations of the ticks . <EoL>
<BoL> Return the format for tick value *x* at position pos . <EoL>
<BoL> Returns an empty string for all inputs . <EoL>
<BoL> Return the locations of the ticks . <EoL>
<BoL> Create a new geographical transform . <EoL>
<BoL> Get a projection class from its name . <EoL>
<BoL> *limits* is the view limit of the data . The only part of <EoL>
<BoL> Determine if a wedge ( in degrees ) spans the full circle . <EoL>
<BoL> Determine if a wedge ( in radians ) spans the full circle . <EoL>
<BoL> Update the pixel positions of the annotation text and the arrow patch . <EoL>
<BoL> Draw the : class : ` Annotation ` object to the given *renderer* . <EoL>
<BoL> The coordinate system to use for ` .Annotation.xyann ` . <EoL>
<BoL> Return the ` Bbox ` bounding the text and arrow , in display units . <EoL>
<BoL> Update the pixel positions of the annotated point and the text . <EoL>
<BoL> To know the values of the non-public parameters , please have a <EoL>
<BoL> Connect callback with an event . <EoL>
<BoL> remove the observer with connection id *cid* <EoL>
<BoL> Disconnect all events created by this widget . <EoL>
<BoL> When the button is clicked , call this *func* with event . <EoL>
<BoL> Returns the label that matches the position regardless of the <EoL>
<BoL> Set the sequence of strings that will be used for labels . <EoL>
<BoL> Return the formatted label string . <EoL>
<BoL> Return the value of the user defined function . <EoL>
<BoL> Return the locations of the ticks <EoL>
<BoL> Set parameters within this locator <EoL>
<BoL> Use presets to set locs based on lom . A dict mapping vmin , vmax- > locs <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> Return the format for tick val *x* . <EoL>
<BoL> Change the *base* for labeling . <EoL>
<BoL> Return a short formatted string representation of a number . <EoL>
<BoL> Switch minor tick labeling on or off . <EoL>
<BoL> Use axis view limits to control which ticks are labeled . <EoL>
<BoL> Return the format for tick value *x* . <EoL>
<BoL> Place ticks on the locations : subs [ j ] * base**i <EoL>
<BoL> Keyword args : <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> Set the view limits to the nearest multiples of base that <EoL>
<BoL> Return the format for tick value ` x ` at position ` pos ` . <EoL>
<BoL> Replace hyphens with a unicode minus . <EoL>
<BoL> Return a formatted string representation of a number . <EoL>
<BoL> Return a short formatted string representation of a number . <EoL>
<BoL> Return scientific notation , plus offset . <EoL>
<BoL> Set the locations of the ticks . <EoL>
<BoL> Sets size thresholds for scientific notation . <EoL>
<BoL> Turn scientific notation on or off . <EoL>
<BoL> update the slider position <EoL>
<BoL> Makes sure self.val is with given bounds . <EoL>
<BoL> Remove the observer with connection id *cid* <EoL>
<BoL> When the slider value is changed call *func* with the new <EoL>
<BoL> Reset the slider to the initial value <EoL>
<BoL> Set slider value to *val* <EoL>
<BoL> This is an internal helper function for making sure that auto-redrawing <EoL>
<BoL> Autogenerated wrappers will get their docstring from a base function <EoL>
<BoL> Generates the plotting docstring . <EoL>
<BoL> Set the colormap to `` autumn '' . <EoL>
<BoL> Add an axes to the current figure and make it the current axes . <EoL>
<BoL> Set the colormap to `` bone '' . <EoL>
<BoL> Turn the axes box on or off on the current axes . <EoL>
<BoL> Clear the current figure . <EoL>
<BoL> Set the color limits of the current image . <EoL>
<BoL> Close a figure window . <EoL>
<BoL> Matplotlib provides a number of colormaps , and others can be added using <EoL>
<BoL> Set the colormap to `` cool '' . <EoL>
<BoL> Set the colormap to `` copper '' . <EoL>
<BoL> Create a new ` Cycler ` object from a single positional argument , <EoL>
<BoL> Remove the ` Axes ` *ax* ( defaulting to the current axes ) from its figure . <EoL>
<BoL> Redraw the current figure . <EoL>
<BoL> Place a legend in the figure . <EoL>
<BoL> Return whether the figure with the given id exists . <EoL>
<BoL> Set the colormap to `` flag '' . <EoL>
<BoL> Get the current : class : ` ~matplotlib.axes.Axes ` instance on the <EoL>
<BoL> Get a reference to the current figure . <EoL>
<BoL> Get the current colorable artist . Specifically , returns the <EoL>
<BoL> Return the figure manager of the active figure . <EoL>
<BoL> Return a list of existing figure labels . <EoL>
<BoL> Return a list of existing figure numbers . <EoL>
<BoL> Get a sorted list of all of the plotting commands . <EoL>
<BoL> Helper function for generating docstrings related to scales . <EoL>
<BoL> Blocking call to interact with the figure . <EoL>
<BoL> Set the colormap to `` gray '' . <EoL>
<BoL> Set the colormap to `` hot '' . <EoL>
<BoL> Set the colormap to `` hsv '' . <EoL>
<BoL> Set the colormap to `` inferno '' . <EoL>
<BoL> Install a repl display hook so that any stale figure are automatically <EoL>
<BoL> Turn the interactive mode off . <EoL>
<BoL> Turn the interactive mode on . <EoL>
<BoL> Return the status of interactive mode . <EoL>
<BoL> Set the colormap to `` jet '' . <EoL>
<BoL> Set the colormap to `` magma '' . <EoL>
<BoL> Display an array as a matrix in a new figure window . <EoL>
<BoL> Set the colormap to `` nipy_spectral '' . <EoL>
<BoL> Pause for *interval* seconds . <EoL>
<BoL> Set the colormap to `` pink '' . <EoL>
<BoL> Set the colormap to `` plasma '' . <EoL>
<BoL> Make a polar plot . <EoL>
<BoL> Set the colormap to `` prism '' . <EoL>
<BoL> Get or set the radial gridlines on the current polar plot . <EoL>
<BoL> Set the current Axes instance to *ax* . <EoL>
<BoL> Set the default colormap . Applies to the current image if any . <EoL>
<BoL> Display a figure . <EoL>
<BoL> Set the colormap to `` spring '' . <EoL>
<BoL> Add a subplot to the current figure . <EoL>
<BoL> Create an axis at specific location inside a regular grid . <EoL>
<BoL> Launch a subplot tool window for a figure . <EoL>
<BoL> Set the colormap to `` summer '' . <EoL>
<BoL> Close all open figures and set the Matplotlib backend . <EoL>
<BoL> Get or set the theta gridlines on the current polar plot . <EoL>
<BoL> Automatically adjust subplot parameters to give specified padding . <EoL>
<BoL> Make a second axes that shares the *x*-axis . The new axes will <EoL>
<BoL> Make a second axes that shares the *y*-axis . The new axis will <EoL>
<BoL> Uninstall the matplotlib display hook . <EoL>
<BoL> Set the colormap to `` viridis '' . <EoL>
<BoL> Blocking call to interact with the figure . <EoL>
<BoL> Set the colormap to `` winter '' . <EoL>
<BoL> Turn on ` xkcd < https : //xkcd.com/ > ` _ sketch-style drawing mode . <EoL>
<BoL> Get or set the x limits of the current axes . <EoL>
<BoL> Get or set the current tick locations and labels of the x-axis . <EoL>
<BoL> Get or set the y-limits of the current axes . <EoL>
<BoL> Get or set the current tick locations and labels of the y-axis . <EoL>
<BoL> Find how many of each of the tail pieces is necessary . Flag <EoL>
<BoL> Set the offsets for the barb polygons . This saves the offsets passed <EoL>
<BoL> Return a scale factor for converting from units to pixels <EoL>
<BoL> length is in arrow width units <EoL>
<BoL> Initialization delayed until first draw ; <EoL>
<BoL> Sets the PolygonCollection transform to go <EoL>
<BoL> Overload the remove method <EoL>
<BoL> Overload the remove method <EoL>
<BoL> Set the current rc params . *group* is the grouping for the rc , e.g. , <EoL>
<BoL> Update rc params from file . <EoL>
<BoL> Restore the rc params from the original rc file loaded by Matplotlib . <EoL>
<BoL> Return a : class : ` matplotlib.RcParams ` instance from the <EoL>
<BoL> Return : class : ` matplotlib.RcParams ` from the contents of the given file . <EoL>
<BoL> Restore the rc params from Matplotlib 's internal default style . <EoL>
<BoL> Pair-wise combine two equal length cycles ( zip ) <EoL>
<BoL> Check equality <EoL>
<BoL> In-place pair-wise combine two equal length cycles ( zip ) <EoL>
<BoL> In-place outer product of two cycles ( ` itertools.product ` ) <EoL>
<BoL> Semi-private init <EoL>
<BoL> Outer product of two cycles ( ` itertools.product ` ) or integer <EoL>
<BoL> Compose the 'left ' and 'right ' components of this cycle <EoL>
<BoL> Class method to create 'base ' Cycler objects <EoL>
<BoL> Values by key <EoL>
<BoL> Change a key in this cycler to a new name . <EoL>
<BoL> Concatenate this cycler and an other . <EoL>
<BoL> Simplify the Cycler <EoL>
<BoL> A validator for all possible line styles , the named ones *and* <EoL>
<BoL> Convert b to a boolean or raise <EoL>
<BoL> confirm s is string 'figure ' or convert s to float or raise <EoL>
<BoL> convert s to float or raise <EoL>
<BoL> convert s to float , None or raise <EoL>
<BoL> confirm that this is a Postscript of PDF font type that we know how to <EoL>
<BoL> Validate a hatch pattern . <EoL>
<BoL> convert s to int or raise <EoL>
<BoL> if not None , tries to validate as an int <EoL>
<BoL> Validate the markevery property of a Line2D object . <EoL>
<BoL> return a seq of n floats or raise <EoL>
<BoL> return a seq of n ints or raise <EoL>
<BoL> If s is a path , return s , else False <EoL>
<BoL> convert s to string or raise <EoL>
<BoL> *n* is the number of subdivisions of the interval between <EoL>
<BoL> The transform for linear scaling is just the <EoL>
<BoL> Returns the range *vmin* , *vmax* , possibly limited to the <EoL>
<BoL> Set the locators and formatters to reasonable defaults for <EoL>
<BoL> *basex*/*basey* : <EoL>
<BoL> Return a : class : ` ~matplotlib.transforms.Transform ` instance <EoL>
<BoL> Limit the domain to positive values . <EoL>
<BoL> Set the locators and formatters to specialized versions for <EoL>
<BoL> logistic transform ( base 10 ) <EoL>
<BoL> place ticks on the logit locations <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> *nonpos* : { 'mask ' , 'clip ' } <EoL>
<BoL> Return a : class : ` LogitTransform ` instance . <EoL>
<BoL> Limit the domain to values between 0 and 1 ( excluded ) . <EoL>
<BoL> logit transform ( base 10 ) , masked or clipped <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` object <EoL>
<BoL> Set the : class : ` ~matplotlib.ticker.Locator ` and <EoL>
<BoL> place ticks on the location= base**i*subs [ j ] <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> *basex*/*basey* : <EoL>
<BoL> Return a : class : ` SymmetricalLogTransform ` instance . <EoL>
<BoL> Set the locators and formatters to specialized versions for <EoL>
<BoL> Register a new kind of scale . <EoL>
<BoL> Return a scale class by name . <EoL>
<BoL> - *axes* : the Axes instance containing the spine <EoL>
<BoL> automatically set spine bounds to the view interval <EoL>
<BoL> calculate the offset transform performed by the spine <EoL>
<BoL> NOTE : This can not be called until after this has been added <EoL>
<BoL> ( staticmethod ) Returns a circular : class : ` Spine ` . <EoL>
<BoL> Clear the current spine <EoL>
<BoL> Get the bounds of the spine . <EoL>
<BoL> get the spine position <EoL>
<BoL> get whether the spine has smart bounds <EoL>
<BoL> get the spine transform <EoL>
<BoL> return True if directly on axes frame <EoL>
<BoL> ( staticmethod ) Returns a linear : class : ` Spine ` . <EoL>
<BoL> register an axis <EoL>
<BoL> Set the bounds of the spine . <EoL>
<BoL> Set the edgecolor . <EoL>
<BoL> set the spine to be arc-like <EoL>
<BoL> set the spine to be circular <EoL>
<BoL> set the spine to be linear <EoL>
<BoL> set the position of the spine <EoL>
<BoL> set the spine and associated axis to have smart bounds <EoL>
<BoL> Return nearest space in mask-coords from given grid-coords . <EoL>
<BoL> Return True if point is a valid index of grid . <EoL>
<BoL> Start recording streamline trajectory <EoL>
<BoL> Remove current trajectory from mask <EoL>
<BoL> Update current trajectory position in mask . <EoL>
<BoL> Simple Euler integration step that extends streamline to boundary . <EoL>
<BoL> Yield starting points for streamlines . <EoL>
<BoL> 2nd-order Runge-Kutta algorithm with adaptive step size . <EoL>
<BoL> Return x , y grid-coordinates of trajectory based on starting point . <EoL>
<BoL> Fast 2D , linear interpolation on an integer grid <EoL>
<BoL> Context manager for using style settings temporarily . <EoL>
<BoL> Return True if the filename looks like a style file . <EoL>
<BoL> Yield file path and name of styles in the given directory . <EoL>
<BoL> Load style library defined in this package . <EoL>
<BoL> Return dictionary of styles defined in ` style_dir ` . <EoL>
<BoL> Reload style library . <EoL>
<BoL> Update nested dict ( only level of nesting ) with new values . <EoL>
<BoL> Update style library with user-defined rc files <EoL>
<BoL> Use matplotlib style settings from a style specification . <EoL>
<BoL> Set text up so it draws in the right place . <EoL>
<BoL> Shrink font size until text fits . <EoL>
<BoL> Return the cell fontsize . <EoL>
<BoL> Get width required for this cell . <EoL>
<BoL> Return the cell ` .Text ` instance . <EoL>
<BoL> Get text bounds in axes co-ordinates . <EoL>
<BoL> Return a path where the edges specified by _visible_edges are drawn . <EoL>
<BoL> Retrieve a custom cell from a given position . <EoL>
<BoL> Set a custom cell in a given position . <EoL>
<BoL> Automatically set width for column . <EoL>
<BoL> Calculate row heights and column widths . <EoL>
<BoL> Get a bbox , in axes co-ordinates for the cells . <EoL>
<BoL> Move all the artists by ox , oy ( axes coords ) . <EoL>
<BoL> Add a cell to the table . <EoL>
<BoL> Given column indexs in either List , Tuple or int . Will be able to <EoL>
<BoL> Automatically set font size . <EoL>
<BoL> Test whether the mouse event occurred in the table . <EoL>
<BoL> Return a dict of cells in the table . <EoL>
<BoL> Return the Artists contained by the table . <EoL>
<BoL> Return the bounding box of the table in window coords . <EoL>
<BoL> Scale column widths by xscale and row heights by yscale . <EoL>
<BoL> Set the font size , in points , of the cell text . <EoL>
<BoL> Return a filename based on a hash of the string , fontsize , and dpi . <EoL>
<BoL> Return a string containing user additions to the tex preamble . <EoL>
<BoL> Reinitializes self if relevant rcParams on have changed . <EoL>
<BoL> Return a string containing font configuration for the tex preamble . <EoL>
<BoL> Return the alpha channel . <EoL>
<BoL> Return a list of PS bboxes for latex 's rendering of the tex string . <EoL>
<BoL> Return latex 's rendering of the tex string as an rgba array . <EoL>
<BoL> Return width , height and descent of the text . <EoL>
<BoL> Generate a dvi file containing latex 's layout of tex string . <EoL>
<BoL> Generate a dvi file containing latex 's layout of tex string . <EoL>
<BoL> Generate a png file containing latex 's rendering of tex string . <EoL>
<BoL> Generate a postscript file containing latex 's rendering of tex string . <EoL>
<BoL> Generate a tex file to render the tex string at a specific font size.r '' '' '' <EoL>
<BoL> Generate a tex file to render the tex string at a specific font size.r '' '' '' <EoL>
<BoL> Return the offset transform . <EoL>
<BoL> Parameters <EoL>
<BoL> The unit for input to the transform used by `` __call__ `` <EoL>
<BoL> Returns a shallow copy of the ` Path ` , which will share the <EoL>
<BoL> Returns a deepcopy of the ` Path ` . The ` Path ` will not be <EoL>
<BoL> Creates a Path instance without the expense of calling the constructor <EoL>
<BoL> Return the codes <EoL>
<BoL> Return the cached path after updating it if necessary . <EoL>
<BoL> update the path if necessary . <EoL>
<BoL> Return an arc on the unit circle from angle <EoL>
<BoL> Return a Path representing a circle of a given radius and center . <EoL>
<BoL> Clip the path to the given bounding box . <EoL>
<BoL> Returns whether this ( closed ) path completely contains the given path . <EoL>
<BoL> Returns whether the ( closed ) path contains the given point . <EoL>
<BoL> Returns a bool array which is `` True `` if the ( closed ) path contains <EoL>
<BoL> Returns the extents ( *xmin* , *ymin* , *xmax* , *ymax* ) of the <EoL>
<BoL> get the size of the text <EoL>
<BoL> Returns a new path resampled to length N x steps . Does not <EoL>
<BoL> Returns *True* if this path intersects a given <EoL>
<BoL> Returns *True* if this path intersects another given path . <EoL>
<BoL> Returns True if the given string *s* contains any mathtext . <EoL>
<BoL> Make a compound path from a list of Path objects . <EoL>
<BoL> Make a compound path object to draw a number <EoL>
<BoL> set the size of the text <EoL>
<BoL> convert the string *s* to vertices and codes using the <EoL>
<BoL> Convert this path to a list of polygons or polylines . Each <EoL>
<BoL> Return a transformed copy of the path . <EoL>
<BoL> Return the readonly : class : ` Path ` of the unit circle . <EoL>
<BoL> Return a : class : ` Path ` of the right half <EoL>
<BoL> Return a : class : ` Path ` instance of the unit rectangle <EoL>
<BoL> Return a wedge of the unit circle from angle <EoL>
<BoL> Calculate the bounding box of the text . Unlike <EoL>
<BoL> Return an override dict . See ` ~pyplot.text ' docstring for info . <EoL>
<BoL> Temporarily inserts newlines to the text if the wrap option is enabled . <EoL>
<BoL> Return the text angle as float between 0 and 360 degrees . <EoL>
<BoL> Return a unique id for the given font and character-code set . <EoL>
<BoL> Return a unique id for the given font and character-code set ( for tex ) . <EoL>
<BoL> find a ttf font . <EoL>
<BoL> return the : class : ` matplotlib.texmanager.TexManager ` instance <EoL>
<BoL> convert text *s* to path ( a tuple of vertices and codes for <EoL>
<BoL> convert the ft2font glyph to vertices and codes . <EoL>
<BoL> Parameters <EoL>
<BoL> Formats a number in engineering notation , appending a letter <EoL>
<BoL> Return the format for tick value ` x ` at position pos . <EoL>
<BoL> Return the format for tick val ` x ` based on the width of the <EoL>
<BoL> Formats the value ` x ` based on the size of the axis range ` d ` . <EoL>
<BoL> Formats the tick as a percentage with the appropriate scaling . <EoL>
<BoL> Formats the number as a percentage number with the correct <EoL>
<BoL> Return the formatted label string . <EoL>
<BoL> *step* is a positive floating-point interval between ticks . <EoL>
<BoL> Temporarily adjust the figure so that only the specified area <EoL>
<BoL> This need to be called when figure dpi changes during the drawing <EoL>
<BoL> Return a list of subplotspec from the given list of axes . <EoL>
<BoL> Return true if focus maintenance under TkAgg on win32 is on . <EoL>
<BoL> Create a new `` blended '' transform using *x_transform* to <EoL>
<BoL> Create a new `` blended '' transform using *x_transform* to <EoL>
<BoL> Create a new composite transform that is the result of <EoL>
<BoL> Create a new composite transform that is the result of <EoL>
<BoL> Parameters <EoL>
<BoL> *child* : A class : ` Transform ` instance . This child may later <EoL>
<BoL> Replace the current child of this transform with another one . <EoL>
<BoL> Create a new `` blended '' transform using *x_transform* to transform <EoL>
<BoL> Create a new composite transform that is the result of applying <EoL>
<BoL> Check , inclusively , whether an interval includes a given value . <EoL>
<BoL> Check , excluding endpoints , whether an interval includes a given value . <EoL>
<BoL> Modify the endpoints of a range as needed to avoid singularities . <EoL>
<BoL> Return a new transform with an added offset . <EoL>
<BoL> Computes and returns nodal dofs according to kind <EoL>
<BoL> Computes triangle eccentricities <EoL>
<BoL> Fast ( vectorized ) function to compute barycentric coordinates alpha . <EoL>
<BoL> Fast ( vectorized ) function to compute triangle jacobian matrix . <EoL>
<BoL> Parameters <EoL>
<BoL> Returns a measure of the triangulation triangles flatness . <EoL>
<BoL> Eliminates excessively flat border triangles from the triangulation . <EoL>
<BoL> Draw triangular grid contour lines or filled regions , <EoL>
<BoL> Create and return allsegs and allkinds by calling underlying C code . <EoL>
<BoL> Process args and kwargs . <EoL>
<BoL> Performs the interpolation at points belonging to the triangulation <EoL>
<BoL> This function refines a matplotlib.tri *triangulation* by splitting <EoL>
<BoL> Refines a field defined on the encapsulated triangulation . <EoL>
<BoL> Computes an uniformly refined triangulation *refi_triangulation* of <EoL>
<BoL> Draw contours on an unstructured triangular grid . <EoL>
<BoL> Computes reduced-HCT elements degrees of freedom , knowing the <EoL>
<BoL> Computes the dof vector of a triangle , knowing the value of f , df and <EoL>
<BoL> self.df is computed as weighted average of _triangles sharing a common <EoL>
<BoL> Compute the ( global ) gradient component of f assumed linear ( ~f ) . <EoL>
<BoL> Builds the ( nelems x 3 ) weights coeffs of _triangles angles , <EoL>
<BoL> Elliptic solver for bending energy minimization . <EoL>
<BoL> Parameters <EoL>
<BoL> Builds K and F for the following elliptic formulation : <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Creates a sparse matrix in coo format <EoL>
<BoL> Compress rows , cols , vals / summing duplicates . Sort for csc format . <EoL>
<BoL> Compress rows , cols , vals / summing duplicates . Sort for csr format . <EoL>
<BoL> Dot product of self by a vector *V* in sparse-dense to dense format <EoL>
<BoL> Returns a dense matrix representing self . <EoL>
<BoL> Use Preconditioned Conjugate Gradient iteration to solve A x = b <EoL>
<BoL> Extracts selected blocks of a matrices *M* depending on parameters <EoL>
<BoL> Matrix product between arrays of matrices , or a matrix and an array of <EoL>
<BoL> Inversion of arrays of ( 2,2 ) SYMMETRIC matrices ; returns the <EoL>
<BoL> Rolls an array of matrices along an axis according to an array of indices <EoL>
<BoL> Inversion of arrays of ( 2,2 ) matrices , returns 0 for rank-deficient <EoL>
<BoL> Scalar product between scalars and matrices . <EoL>
<BoL> Builds an array of matrices from individuals np.arrays of identical <EoL>
<BoL> Transposition of an array of matrices *M* . <EoL>
<BoL> Draw a unstructured triangular grid as lines and/or markers . <EoL>
<BoL> Parameters <EoL>
<BoL> Return an ` ~units.AxisInfo ` instance for the axis with the <EoL>
<BoL> Convert *obj* using *unit* for the specified *axis* . <EoL>
<BoL> Return the default unit for *x* or `` None `` for the given axis . <EoL>
<BoL> Get the converter for data that has the same type as *x* . If no <EoL>
<BoL> Set the matplotlib backend to one of the known backends . <EoL>
<BoL> Add check buttons to : class : ` matplotlib.axes.Axes ` instance *ax* <EoL>
<BoL> remove the observer with connection id *cid* <EoL>
<BoL> returns a tuple of the status ( True/False ) of all of the check buttons <EoL>
<BoL> When the button is clicked , call *func* with button label <EoL>
<BoL> Directly ( de ) activate a check button by index . <EoL>
<BoL> clear the cursor <EoL>
<BoL> on mouse motion draw the cursor if visible <EoL>
<BoL> Clean up an event <EoL>
<BoL> Get the xdata and ydata for event , with limits <EoL>
<BoL> Key press event handler - use for widget-specific key press actions . <EoL>
<BoL> Key release event handler <EoL>
<BoL> Mouse scroll event handler <EoL>
<BoL> on motion notify event if box/line is wanted <EoL>
<BoL> on button press event <EoL>
<BoL> on button release event <EoL>
<BoL> Set active handle based on the location of the mouse event <EoL>
<BoL> Connect the major canvas events to methods . <EoL>
<BoL> return *True* if *event* should be ignored <EoL>
<BoL> Key press event handler and validator for all selection widgets <EoL>
<BoL> Key release event handler and validator <EoL>
<BoL> Mouse scroll event handler and validator <EoL>
<BoL> Cursor move event handler and validator <EoL>
<BoL> Button press handler and validator <EoL>
<BoL> Button release event handler and validator <EoL>
<BoL> Set the visibility of our artists <EoL>
<BoL> draw using newfangled blit or oldfangled draw depending on <EoL>
<BoL> force an update of the background <EoL>
<BoL> Reserve the lock for *o* . <EoL>
<BoL> Return whether drawing is available to *o* . <EoL>
<BoL> Return whether *o* owns this lock . <EoL>
<BoL> Return whether the lock is currently held by an owner . <EoL>
<BoL> Release the lock from *o* . <EoL>
<BoL> clear the cursor <EoL>
<BoL> connect events <EoL>
<BoL> disconnect events <EoL>
<BoL> Redraw the polygon based on the new vertex positions . <EoL>
<BoL> Key press event handler <EoL>
<BoL> Key release event handler <EoL>
<BoL> Cursor move event handler <EoL>
<BoL> Button press event handler <EoL>
<BoL> Button release event handler <EoL>
<BoL> Cursor move event handler and validator <EoL>
<BoL> Add radio buttons to : class : ` matplotlib.axes.Axes ` instance *ax* <EoL>
<BoL> remove the observer with connection id *cid* <EoL>
<BoL> When the button is clicked , call *func* with button label <EoL>
<BoL> Trigger which radio button to make active . <EoL>
<BoL> on motion notify event <EoL>
<BoL> on button press event <EoL>
<BoL> on button release event <EoL>
<BoL> Setting the span coordinates <EoL>
<BoL> return *True* if *event* should be ignored <EoL>
<BoL> Set SpanSelector to operate on a new Axes <EoL>
<BoL> Remove the observer with connection id *cid* . <EoL>
<BoL> When the user hits enter or leaves the submission box , call this <EoL>
<BoL> When the text changes , call this *func* with event . <EoL>
<BoL> Return index and pixel distance to closest index . <EoL>
<BoL> Set x and y positions of handles <EoL>
<BoL> Cursor move event handler <EoL>
<BoL> Button press handler <EoL>
<BoL> Button release event handler <EoL>
<BoL> pygame._numpysndarray.array ( Sound ) : return array <EoL>
<BoL> pygame._numpysndarray.make_sound ( array ) : return Sound <EoL>
<BoL> pygame._numpysndarray.samples ( Sound ) : return array <EoL>
<BoL> pygame.numpyarray.array2d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array3d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_alpha ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_blue ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_colorkey ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_green ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_red ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.blit_array ( Surface , array ) : return None <EoL>
<BoL> pygame.surfarray.make_surface ( array ) : return Surface <EoL>
<BoL> pygame.numpyarray.map_array ( Surface , array3d ) : return array2d <EoL>
<BoL> pygame.numpyarray.pixels2d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.pixels3d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.pixels_alpha ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_blue ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_green ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_red ( Surface ) : return array <EoL>
<BoL> ' < binary literal > ' = > b ' < binary literal > ' <EoL>
<BoL> r ' < Unicode literal > ' = > ' < Unicode literal > ' <EoL>
<BoL> pygame.cursors.compile ( strings , black , white , xor ) - > data , mask <EoL>
<BoL> pygame.cursors.load_xbm ( cursorfile , maskfile ) - > cursor_args <EoL>
<BoL> pygame.font.SysFont ( name , size , bold=False , italic=False , constructor=None ) - > Font <EoL>
<BoL> pygame.font.get_fonts ( ) - > list <EoL>
<BoL> pygame.font.match_font ( name , bold=0 , italic=0 ) - > name <EoL>
<BoL> some additional imports that py2app/py2exe will want to see <EoL>
<BoL> pygame.sndarray.array ( Sound ) : return array <EoL>
<BoL> pygame.sndarray.get_arraytype ( ) : return str <EoL>
<BoL> pygame.sndarray.get_arraytypes ( ) : return tuple <EoL>
<BoL> pygame.sndarray.make_sound ( array ) : return Sound <EoL>
<BoL> pygame.sndarray.samples ( Sound ) : return array <EoL>
<BoL> pygame.sndarray.use_arraytype ( arraytype ) : return None <EoL>
<BoL> return number of sprites in group <EoL>
<BoL> add sprite ( s ) to group <EoL>
<BoL> erase the previous position of all sprites <EoL>
<BoL> copy a group with all the same sprites <EoL>
<BoL> draw all sprites onto the surface <EoL>
<BoL> remove all sprites <EoL>
<BoL> ask if group has a sprite or sprites <EoL>
<BoL> remove sprite ( s ) from group <EoL>
<BoL> get a list of sprites in the group <EoL>
<BoL> call the update method of every member sprite <EoL>
<BoL> return the visible value of that sprite <EoL>
<BoL> set the visible value ( 0 or 1 ) and makes the sprite dirty <EoL>
<BoL> add the sprite to groups <EoL>
<BoL> does the sprite belong to any groups <EoL>
<BoL> list of Groups that contain this Sprite <EoL>
<BoL> remove the Sprite from all Groups <EoL>
<BoL> remove the sprite from groups <EoL>
<BoL> method to control sprite behavior <EoL>
<BoL> initialize group . <EoL>
<BoL> add a sprite or sequence of sprites to a group <EoL>
<BoL> Do not use this method directly . <EoL>
<BoL> change the layer of the sprite <EoL>
<BoL> use to set background <EoL>
<BoL> draw all sprites in the right order onto the given surface <EoL>
<BoL> return the bottom layer <EoL>
<BoL> get the area where drawing will occur <EoL>
<BoL> return the layer that sprite is currently in <EoL>
<BoL> return the sprite at the index idx from the groups sprites <EoL>
<BoL> return a list with all sprites at that position <EoL>
<BoL> return all sprites from a layer ordered as they where added <EoL>
<BoL> return the top layer <EoL>
<BoL> return the topmost sprite <EoL>
<BoL> return a list of unique defined layers defined . <EoL>
<BoL> move the sprite to the bottom layer <EoL>
<BoL> bring the sprite to front layer <EoL>
<BoL> Do not use this method directly . <EoL>
<BoL> remove all sprites from a layer and return them as a list <EoL>
<BoL> repaint the given area <EoL>
<BoL> clip the area where to draw ; pass None ( default ) to reset the clip <EoL>
<BoL> set the treshold in milliseconds <EoL>
<BoL> return a ordered list of sprites ( first back , last top ) . <EoL>
<BoL> switch the sprites from layer1_nr to layer2_nr <EoL>
<BoL> initialize an instance of LayeredUpdates with the given attributes <EoL>
<BoL> Do not use this method directly . <EoL>
<BoL> change the layer of the sprite <EoL>
<BoL> draw all sprites in the right order onto the passed surface <EoL>
<BoL> detect collision between two sprites using circles <EoL>
<BoL> detect collision between two sprites using scaled circles <EoL>
<BoL> creates a new collide_circle_ratio callable instance <EoL>
<BoL> collision detection between two sprites , using masks . <EoL>
<BoL> collision detection between two sprites , using rects . <EoL>
<BoL> detect collision between two sprites using scaled rects <EoL>
<BoL> create a new collide_rect_ratio callable <EoL>
<BoL> detect collision between a group and another group <EoL>
<BoL> find Sprites in a Group that intersect another Sprite <EoL>
<BoL> finds any sprites in a group that collide with the given sprite <EoL>
<BoL> pygame.surfarray.array2d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.array3d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.array_alpha ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.array_colorkey ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.blit_array ( Surface , array ) : return None <EoL>
<BoL> pygame.surfarray.get_arraytype ( ) : return str <EoL>
<BoL> pygame.surfarray.get_arraytypes ( ) : return tuple <EoL>
<BoL> pygame.surfarray.make_surface ( array ) : return Surface <EoL>
<BoL> pygame.surfarray.map_array ( Surface , array3d ) : return array2d <EoL>
<BoL> pygame.surfarray.pixels2d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels3d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_alpha ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_blue ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_green ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_red ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.use_arraytype ( arraytype ) : return None <EoL>
<BoL> insert a font and style into the font dictionary <EoL>
<BoL> create simple version of the font name <EoL>
<BoL> Returns the final component of a pathname <EoL>
<BoL> map common fonts that are absent from the system to similar fonts that are installed in the system <EoL>
<BoL> read the fonts on OS X. X11 is required for this to work . <EoL>
<BoL> use the fc-list from fontconfig to get a list of fonts <EoL>
<BoL> initialize fonts dictionary on Windows <EoL>
<BoL> convert bytes to ASCII-only string <EoL>
<BoL> f - is the function we that we call <EoL>
<BoL> Return True if the queue is empty , False otherwise ( not reliable ! ) . <EoL>
<BoL> Return True if the queue is full , False otherwise ( not reliable ! ) . <EoL>
<BoL> Remove and return an item from the queue . <EoL>
<BoL> Remove and return an item from the queue without blocking . <EoL>
<BoL> Blocks until all items in the Queue have been gotten and processed . <EoL>
<BoL> Put an item into the queue . <EoL>
<BoL> Put an item into the queue without blocking . <EoL>
<BoL> Return the approximate size of the queue ( not reliable ! ) . <EoL>
<BoL> Indicate that a formerly enqueued task is complete . <EoL>
<BoL> Method representing the thread 's activity . <EoL>
<BoL> Sets up the worker threads <EoL>
<BoL> puts a function on a queue for running later . <EoL>
<BoL> Stops the WorkerQueue , waits for all of the threads to finish up . <EoL>
<BoL> Loops until all of the tasks are finished . <EoL>
<BoL> waits until all tasks are complete . <EoL>
<BoL> does a little test to see if workers are at all faster . <EoL>
<BoL> Does a little test to see if threading is worth it . <EoL>
<BoL> cleans up everything . <EoL>
<BoL> like map , but uses a thread pool to execute . <EoL>
<BoL> warn about unneeded old files <EoL>
<BoL> Return a dialect-specific bind processor for this type . <EoL>
<BoL> Return a dialect-specific literal processor for this type . <EoL>
<BoL> Return a dialect-specific result processor for this type . <EoL>
<BoL> Return a dialect-specific registry which <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Return the 'unwrapped ' dialect impl for this type . <EoL>
<BoL> Produce an `` adapted '' form of this type , given an `` impl '' class <EoL>
<BoL> Given a bind value ( i.e . a : class : ` .BindParameter ` instance ) , <EoL>
<BoL> Return a conversion function for processing bind values . <EoL>
<BoL> Suggest a type for a 'coerced ' Python value in an expression . <EoL>
<BoL> Given a SELECT column expression , return a wrapping SQL expression . <EoL>
<BoL> Compare this type against the given backend type . <EoL>
<BoL> Produce a string-compiled form of this : class : ` .TypeEngine ` . <EoL>
<BoL> Return a dialect-specific implementation for this <EoL>
<BoL> Return a copy of this type which has the : attr : ` .should_evaluate_none ` <EoL>
<BoL> Return the corresponding type object from the underlying DB-API , if <EoL>
<BoL> Return a conversion function for processing literal values that are <EoL>
<BoL> Return a conversion function for processing result row values . <EoL>
<BoL> Produce a new type object that will utilize the given <EoL>
<BoL> Compare two values for equality . <EoL>
<BoL> See : meth : ` .TypeEngine.coerce_compared_value ` for a description . <EoL>
<BoL> Construct a LargeBinary type . <EoL>
<BoL> Given an impl class , adapt this type to the impl assuming `` emulated '' . <EoL>
<BoL> Issue CREATE ddl for this type , if applicable . <EoL>
<BoL> Issue DROP ddl for this type , if applicable . <EoL>
<BoL> Initialize the list of child items for this SchemaItem . <EoL>
<BoL> Add a new kind of dialect-specific keyword argument for this class . <EoL>
<BoL> Return True if this constraint contains the given column . <EoL>
<BoL> used to allow SchemaVisitor access <EoL>
<BoL> Implement the `` + `` operator . <EoL>
<BoL> Implement the `` & `` operator . <EoL>
<BoL> Implement the `` / `` operator . <EoL>
<BoL> Implement the `` == `` operator . <EoL>
<BoL> Implement the `` > = `` operator . <EoL>
<BoL> Implement the [ ] operator . <EoL>
<BoL> Implement the `` > `` operator . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Implement the `` ~ `` operator . <EoL>
<BoL> Implement the `` < = `` operator . <EoL>
<BoL> implement the < < operator . <EoL>
<BoL> Implement the `` < `` operator . <EoL>
<BoL> Implement the `` % `` operator . <EoL>
<BoL> Implement the `` * `` operator . <EoL>
<BoL> Implement the `` ! = `` operator . <EoL>
<BoL> Implement the `` - `` operator . <EoL>
<BoL> Implement the `` | `` operator . <EoL>
<BoL> Implement the `` + `` operator in reverse . <EoL>
<BoL> Implement the `` / `` operator in reverse . <EoL>
<BoL> Implement the `` % `` operator in reverse . <EoL>
<BoL> Implement the `` * `` operator in reverse . <EoL>
<BoL> implement the > > operator . <EoL>
<BoL> Implement the `` - `` operator in reverse . <EoL>
<BoL> Implement the `` // `` operator in reverse . <EoL>
<BoL> Implement the `` - `` operator . <EoL>
<BoL> Implement the `` // `` operator . <EoL>
<BoL> return a copy of this ClauseElement with annotations <EoL>
<BoL> Return a compiler appropriate for this ClauseElement , given a <EoL>
<BoL> Reassign internal elements to be clones of themselves . <EoL>
<BoL> return a copy of this : class : ` .ClauseElement ` with annotations <EoL>
<BoL> return a copy of this ClauseElement with annotations <EoL>
<BoL> Produce a : func : ` ~.expression.all_ ` clause against the <EoL>
<BoL> Produce a : func : ` ~.expression.any_ ` clause against the <EoL>
<BoL> Produce a : func : ` ~.expression.asc ` clause against the <EoL>
<BoL> Produce a : func : ` ~.expression.between ` clause against <EoL>
<BoL> Return a custom boolean operator . <EoL>
<BoL> Produce a type cast , i.e . `` CAST ( < expression > AS < type > ) `` . <EoL>
<BoL> Produce a : func : ` ~.expression.collate ` clause against <EoL>
<BoL> Compare this ColumnElement to another . <EoL>
<BoL> Compile this SQL expression . <EoL>
<BoL> Implement the 'concat ' operator . <EoL>
<BoL> r '' '' '' Implement the 'contains ' operator . <EoL>
<BoL> Create a copy of this `` Column `` , unitialized . <EoL>
<BoL> Produce a : func : ` ~.expression.desc ` clause against the <EoL>
<BoL> Produce a : func : ` ~.expression.distinct ` clause against the <EoL>
<BoL> r '' '' '' Implement the 'endswith ' operator . <EoL>
<BoL> r '' '' '' Implement the `` ilike `` operator , e.g . case insensitive LIKE . <EoL>
<BoL> Implement the `` in `` operator . <EoL>
<BoL> Implement the `` IS `` operator . <EoL>
<BoL> Implement the `` IS DISTINCT FROM `` operator . <EoL>
<BoL> Implement the `` IS NOT `` operator . <EoL>
<BoL> Implement the `` IS NOT DISTINCT FROM `` operator . <EoL>
<BoL> Produce a column label , i.e . `` < columnname > AS < name > `` . <EoL>
<BoL> r '' '' '' Implement the `` like `` operator . <EoL>
<BoL> Implements a database-specific 'match ' operator . <EoL>
<BoL> implement the `` NOT ILIKE `` operator . <EoL>
<BoL> implement the `` NOT IN `` operator . <EoL>
<BoL> implement the `` NOT LIKE `` operator . <EoL>
<BoL> Produce a : func : ` ~.expression.nullsfirst ` clause against the <EoL>
<BoL> Produce a : func : ` ~.expression.nullslast ` clause against the <EoL>
<BoL> Return True if this Column references the given column via foreign <EoL>
<BoL> Return True if the given : class : ` .ColumnElement ` <EoL>
<BoL> r '' '' '' Implement the `` startswith `` operator . <EoL>
<BoL> Construct a new : class : ` .ColumnDefault ` . <EoL>
<BoL> Wrap callables that do n't accept a context . <EoL>
<BoL> Construct a new : class : ` .DateTime ` . <EoL>
<BoL> and ' at the ClauseElement level . <EoL>
<BoL> Execute the DDL as a ddl_listener . <EoL>
<BoL> Create a DDL statement . <EoL>
<BoL> or ' at the ClauseElement level . <EoL>
<BoL> Create a shallow copy of this ClauseElement . <EoL>
<BoL> Return a compiler appropriate for this ClauseElement , given a <EoL>
<BoL> Return a copy of this DDL against a specific schema item . <EoL>
<BoL> r '' '' '' Compare this ClauseElement to the given ClauseElement . <EoL>
<BoL> Execute this DDL immediately . <EoL>
<BoL> Link execution of this DDL to the DDL lifecycle of a SchemaItem . <EoL>
<BoL> r '' '' '' Return a callable that will execute this <EoL>
<BoL> Set non-SQL options for the statement which take effect during <EoL>
<BoL> r '' '' '' Return immediate child elements of this : class : ` .ClauseElement ` . <EoL>
<BoL> Return a copy with : func : ` bindparam ( ) ` elements replaced . <EoL>
<BoL> Compile and execute this : class : ` .Executable ` , returning the <EoL>
<BoL> Apply a 'grouping ' to this : class : ` .ClauseElement ` . <EoL>
<BoL> Return a copy with : func : ` bindparam ( ) ` elements replaced . <EoL>
<BoL> r '' '' '' Construct an enum . <EoL>
<BoL> internal init for : class : ` .Enum ` and subclasses . <EoL>
<BoL> Return a string based 'column specification ' for this <EoL>
<BoL> Produce a copy of this : class : ` .ForeignKey ` object . <EoL>
<BoL> Return the : class : ` .Column ` in the given : class : ` .Table ` <EoL>
<BoL> Return True if the given : class : ` .Table ` is referenced by this <EoL>
<BoL> r '' '' '' Construct an index object . <EoL>
<BoL> Issue a `` CREATE `` statement for this <EoL>
<BoL> Issue a `` DROP `` statement for this <EoL>
<BoL> Proxy all other undefined accessors to the underlying <EoL>
<BoL> # todo <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Return the 'unwrapped ' dialect impl for this type . <EoL>
<BoL> See : meth : ` .TypeEngine.coerce_compared_value ` for a description . <EoL>
<BoL> Given two values , compare them for equality . <EoL>
<BoL> Produce a copy of this : class : ` .TypeDecorator ` instance . <EoL>
<BoL> Return the DBAPI type object represented by this <EoL>
<BoL> Provide a literal processing function for the given <EoL>
<BoL> Return a : class : ` .TypeEngine ` object corresponding to a dialect . <EoL>
<BoL> Receive a bound parameter value to be converted . <EoL>
<BoL> Receive a literal parameter value to be rendered inline within <EoL>
<BoL> Receive a result-row column value to be converted . <EoL>
<BoL> Return a dialect-specific : class : ` .TypeEngine ` instance <EoL>
<BoL> Construct a : class : ` .types.JSON ` type . <EoL>
<BoL> Bind this MetaData to an Engine , Connection , string or URL . <EoL>
<BoL> Associate with this SchemaEvent 's parent object . <EoL>
<BoL> Append a DDL event listener to this `` MetaData `` . <EoL>
<BoL> Clear all Table objects from this MetaData . <EoL>
<BoL> Create all tables stored in this metadata . <EoL>
<BoL> Drop all tables stored in this metadata . <EoL>
<BoL> True if this MetaData is bound to an Engine or Connection . <EoL>
<BoL> Remove the given Table object from this MetaData . <EoL>
<BoL> Create a : class : ` .Unicode ` object . <EoL>
<BoL> Suggest a type for a 'coerced ' Python value in an expression . <EoL>
<BoL> repopulate this : class : ` .PrimaryKeyConstraint ` given <EoL>
<BoL> Creates this sequence in the database . <EoL>
<BoL> Drops this sequence from the database . <EoL>
<BoL> Return a : class : ` .next_value ` function element <EoL>
<BoL> Construct a new : class : ` .TIMESTAMP ` . <EoL>
<BoL> Constructor for : class : ` ~.schema.Table ` . <EoL>
<BoL> Return True if this FromClause and the other represent <EoL>
<BoL> Called on subclasses to establish the .c collection . <EoL>
<BoL> Given a column added to the .c collection of an underlying <EoL>
<BoL> Add a 'dependency ' for this Table . <EoL>
<BoL> return an alias of this : class : ` .FromClause ` . <EoL>
<BoL> Append a : class : ` ~.schema.Column ` to this : class : ` ~.schema.Table ` . <EoL>
<BoL> Append a : class : ` ~.schema.Constraint ` to this <EoL>
<BoL> Append a DDL event listener to this `` Table `` . <EoL>
<BoL> Return corresponding_column for the given column , or if None <EoL>
<BoL> Given a : class : ` .ColumnElement ` , return the exported <EoL>
<BoL> return a SELECT COUNT generated against this <EoL>
<BoL> Issue a `` CREATE `` statement for this <EoL>
<BoL> Generate a : func : ` .delete ` construct against this <EoL>
<BoL> Issue a `` DROP `` statement for this <EoL>
<BoL> Return True if this table exists . <EoL>
<BoL> Generate an : func : ` .insert ` construct against this <EoL>
<BoL> Return True if this FromClause is 'derived ' from the given <EoL>
<BoL> Return a : class : ` .Join ` from this : class : ` .FromClause ` <EoL>
<BoL> Return a LATERAL alias of this : class : ` .FromClause ` . <EoL>
<BoL> Return a : class : ` .Join ` from this : class : ` .FromClause ` <EoL>
<BoL> replace all occurrences of FromClause 'old ' with the given Alias <EoL>
<BoL> return a SELECT of this : class : ` .FromClause ` . <EoL>
<BoL> Return a TABLESAMPLE alias of this : class : ` .FromClause ` . <EoL>
<BoL> Construct a ThreadLocalMetaData . <EoL>
<BoL> Bind to a Connectable in the caller 's thread . <EoL>
<BoL> Dispose all bound engines , in all thread contexts . <EoL>
<BoL> True if there is a bind for this thread . <EoL>
<BoL> Construct a : class : ` .TypeDecorator ` . <EoL>
<BoL> Provide a bound value processing function for the <EoL>
<BoL> Provide a result value processing function for the given <EoL>
<BoL> Create a Unicode-converting Text type . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return an : class : ` .Alias ` object . <EoL>
<BoL> Produce a `` BETWEEN `` predicate clause . <EoL>
<BoL> Return the clause `` expression COLLATE collation `` . <EoL>
<BoL> Create a new : class : ` .Engine ` instance . <EoL>
<BoL> default dialect importer . <EoL>
<BoL> Implement iteration protocol . <EoL>
<BoL> Implement the next ( ) protocol . <EoL>
<BoL> May be overridden by subclasses . <EoL>
<BoL> Soft close this : class : ` .ResultProxy ` . <EoL>
<BoL> Close this ResultProxy . <EoL>
<BoL> Fetch one row , just like DB-API `` cursor.fetchone ( ) `` . <EoL>
<BoL> Fetch the first row and then close the result set unconditionally . <EoL>
<BoL> Return the current set of string keys for rows . <EoL>
<BoL> Return the collection of inserted parameters from this <EoL>
<BoL> Return the collection of updated parameters from this <EoL>
<BoL> Return `` lastrow_has_defaults ( ) `` from the underlying <EoL>
<BoL> Return `` postfetch_cols ( ) `` from the underlying <EoL>
<BoL> Return `` prefetch_cols ( ) `` from the underlying <EoL>
<BoL> Fetch the first column of the first row , and close the result set . <EoL>
<BoL> Return `` supports_sane_multi_rowcount `` from the dialect . <EoL>
<BoL> Return `` supports_sane_rowcount `` from the dialect . <EoL>
<BoL> Return True if this RowProxy contains the given key . <EoL>
<BoL> Return a list of tuples , each tuple containing a key/value pair . <EoL>
<BoL> Return the list of keys as strings represented by this RowProxy . <EoL>
<BoL> Fetch all rows , just like DB-API `` cursor.fetchall ( ) `` . <EoL>
<BoL> Fetch many rows , just like DB-API <EoL>
<BoL> Return the string text of the generated SQL or DDL . <EoL>
<BoL> Produce the internal string representation of this element . <EoL>
<BoL> Return the bind params for this compiled object . <EoL>
<BoL> Execute this compiled object . <EoL>
<BoL> Execute this compiled object and return the result 's <EoL>
<BoL> Return a : class : ` .Connection ` object . <EoL>
<BoL> Return a : class : ` .Connection ` object which may be part of an ongoing <EoL>
<BoL> Emit CREATE statements for the given schema entity . <EoL>
<BoL> Emit DROP statements for the given schema entity . <EoL>
<BoL> Executes the given construct and returns a : class : ` .ResultProxy ` . <EoL>
<BoL> Executes and returns the first column of the first row . <EoL>
<BoL> Return a new Connection which references this Connection 's <EoL>
<BoL> Create a shallow copy of this Connection . <EoL>
<BoL> Execute a statement + params on the given cursor . <EoL>
<BoL> Execute a sql.ClauseElement object . <EoL>
<BoL> Execute a sql.Compiled object . <EoL>
<BoL> Execute a schema.DDL object . <EoL>
<BoL> Execute a schema.ColumnDefault object . <EoL>
<BoL> Execute a sql.FunctionElement object . <EoL>
<BoL> Execute a string SQL statement . <EoL>
<BoL> Close the given cursor , catching exceptions <EoL>
<BoL> Begin a transaction and return a transaction handle . <EoL>
<BoL> Begin a nested transaction and return a transaction handle . <EoL>
<BoL> Begin a two-phase or XA transaction and return a transaction <EoL>
<BoL> Close this : class : ` .Connection ` . <EoL>
<BoL> Returns a branched version of this : class : ` .Connection ` . <EoL>
<BoL> Returns a branched version of this : class : ` .Connection ` . <EoL>
<BoL> Detach the underlying DB-API connection from its connection pool . <EoL>
<BoL> r '' '' '' Executes a SQL statement construct and returns a <EoL>
<BoL> r '' '' '' Set non-SQL options for the connection which take effect <EoL>
<BoL> Return the current isolation level assigned to this <EoL>
<BoL> Return True if a transaction is in progress . <EoL>
<BoL> Invalidate the underlying DBAPI connection associated with <EoL>
<BoL> r '' '' '' Given a callable object or function , execute it , passing <EoL>
<BoL> Executes and returns the first column of the first row . <EoL>
<BoL> r '' '' '' Execute the given function within a transaction boundary . <EoL>
<BoL> Contruct a new : class : ` .CreateEnginePlugin ` . <EoL>
<BoL> Receive the : class : ` .Engine ` object when it is fully constructed . <EoL>
<BoL> parse and modify dialect kwargs <EoL>
<BoL> parse and modify pool kwargs <EoL>
<BoL> Return the string name of the currently selected schema from <EoL>
<BoL> Retrieve the server version info from the given connection . <EoL>
<BoL> return a callable which sets up a newly created DBAPI connection . <EoL>
<BoL> Build DB-API compatible connection arguments . <EoL>
<BoL> Create a two-phase transaction ID . <EoL>
<BoL> convert the given name to a case insensitive identifier <EoL>
<BoL> Provide an implementation of `` connection.begin ( ) `` , given a <EoL>
<BoL> Begin a two phase transaction on the given connection . <EoL>
<BoL> Provide an implementation of `` connection.close ( ) `` , given a DBAPI <EoL>
<BoL> Provide an implementation of `` connection.commit ( ) `` , given a <EoL>
<BoL> Provide an implementation of `` cursor.execute ( statement , <EoL>
<BoL> Provide an implementation of `` cursor.executemany ( statement , <EoL>
<BoL> Prepare a two phase transaction on the given connection . <EoL>
<BoL> Recover list of uncommitted prepared two phase transaction <EoL>
<BoL> Release the named savepoint on a connection . <EoL>
<BoL> Provide an implementation of `` connection.rollback ( ) `` , given <EoL>
<BoL> Rollback a connection to the named savepoint . <EoL>
<BoL> Create a savepoint with the given name . <EoL>
<BoL> A convenience hook called before returning the final : class : ` .Engine ` . <EoL>
<BoL> Return information about columns in ` table_name ` . <EoL>
<BoL> Given a URL , return the : class : ` .Dialect ` that will be used . <EoL>
<BoL> Return information about foreign_keys in ` table_name ` . <EoL>
<BoL> Return information about indexes in ` table_name ` . <EoL>
<BoL> Given a DBAPI connection , return its isolation level . <EoL>
<BoL> Return information about the primary key constraint on <EoL>
<BoL> Return information about primary keys in ` table_name ` . <EoL>
<BoL> Return a list of table names for ` schema ` . <EoL>
<BoL> Return a list of temporary table names on the given connection , <EoL>
<BoL> Return a list of temporary view names on the given connection , <EoL>
<BoL> Return view definition . <EoL>
<BoL> Return a list of all view names available in the database . <EoL>
<BoL> Check the existence of a particular sequence in the database . <EoL>
<BoL> Check the existence of a particular table in the database . <EoL>
<BoL> Called during strategized creation of the dialect with a <EoL>
<BoL> Return True if the given DB-API error indicates an invalid <EoL>
<BoL> convert the given name to lowercase if it is detected as <EoL>
<BoL> Given a DBAPI connection , revert its isolation to the default . <EoL>
<BoL> Given a DBAPI connection , set its isolation level . <EoL>
<BoL> Transform a generic type to a dialect-specific type . <EoL>
<BoL> Return a context manager delivering a : class : ` .Connection ` <EoL>
<BoL> Return a new : class : ` .Connection ` object . <EoL>
<BoL> Return a : class : ` .Connection ` object which may be part of some <EoL>
<BoL> Dispose of the connection pool used by this : class : ` .Engine ` . <EoL>
<BoL> Executes the given construct and returns a : class : ` .ResultProxy ` . <EoL>
<BoL> Return a new : class : ` .Engine ` that will provide <EoL>
<BoL> Return True if the given backend has a table of the given name . <EoL>
<BoL> Return a `` raw '' DBAPI connection from the connection pool . <EoL>
<BoL> r '' '' '' Given a callable object or function , execute it , passing <EoL>
<BoL> Return a list of all table names available in the database . <EoL>
<BoL> r '' '' '' Execute the given function within a transaction boundary . <EoL>
<BoL> r '' '' '' Update the default execution_options dictionary <EoL>
<BoL> Return a new cursor generated from this ExecutionContext 's <EoL>
<BoL> Return the DBAPI `` cursor.rowcount `` value , or in some <EoL>
<BoL> Receive a DBAPI exception which occurred upon execute , result <EoL>
<BoL> Return True if the last INSERT or UPDATE row contained <EoL>
<BoL> Called after the execution of a compiled statement . <EoL>
<BoL> Called before an execution of a compiled statement . <EoL>
<BoL> Return a result object corresponding to this ExecutionContext . <EoL>
<BoL> Parse the given textual statement and return True if it refers to <EoL>
<BoL> Close this : class : ` .Transaction ` . <EoL>
<BoL> Commit this : class : ` .Transaction ` . <EoL>
<BoL> Roll back this : class : ` .Transaction ` . <EoL>
<BoL> Prepare this : class : ` .TwoPhaseTransaction ` . <EoL>
<BoL> Decorator , memoize a function in a connection.info stash . <EoL>
<BoL> Create a random two-phase transaction ID . <EoL>
<BoL> Compatibility method , adapts the result of get_primary_keys ( ) <EoL>
<BoL> return a callable which sets up a newly created DBAPI connection . <EoL>
<BoL> Provide a database-specific : class : ` .TypeEngine ` object , given <EoL>
<BoL> Execute a string statement on the current cursor , returning a <EoL>
<BoL> handle special 'expanding ' parameters , IN tuples that are rendered <EoL>
<BoL> Initialize execution context for a DDLElement construct . <EoL>
<BoL> Initialize execution context for a ColumnDefault construct . <EoL>
<BoL> Return a dictionary of parameters applied to the current row . <EoL>
<BoL> return self.cursor.lastrowid , or equivalent , after an INSERT . <EoL>
<BoL> Return a 'result processor ' for a given type as present in <EoL>
<BoL> Create a new Engine instance using a configuration dictionary . <EoL>
<BoL> Initialize a new : class : ` .Inspector ` . <EoL>
<BoL> Construct a new dialect-specific Inspector object from the given <EoL>
<BoL> Return information about check constraints in ` table_name ` . <EoL>
<BoL> Return information about columns in ` table_name ` . <EoL>
<BoL> Return information about foreign_keys in ` table_name ` . <EoL>
<BoL> Return information about indexes in ` table_name ` . <EoL>
<BoL> Return information about primary key constraint on ` table_name ` . <EoL>
<BoL> Return information about primary keys in ` table_name ` . <EoL>
<BoL> Return all schema names . <EoL>
<BoL> Return dependency-sorted table and foreign key constraint names in <EoL>
<BoL> Return information about the table comment for `` table_name `` . <EoL>
<BoL> Return all table names in referred to within a particular schema . <EoL>
<BoL> Return a dictionary of options specified when the table of the <EoL>
<BoL> return a list of temporary table names for the current bind . <EoL>
<BoL> return a list of temporary view names for the current bind . <EoL>
<BoL> Return information about unique constraints in ` table_name ` . <EoL>
<BoL> Return definition for ` view_name ` . <EoL>
<BoL> Return all view names in ` schema ` . <EoL>
<BoL> Decorates a function and issues a deprecation warning on use . <EoL>
<BoL> Extract column names and data types from a cursor.description . <EoL>
<BoL> Given arguments , returns a new Engine instance . <EoL>
<BoL> Return the `` entry point '' dialect class . <EoL>
<BoL> Return the SQLAlchemy database dialect class corresponding <EoL>
<BoL> r '' '' '' Translate url attributes into a dictionary of connection arguments . <EoL>
<BoL> Given a string or unicode instance , produce a new URL instance . <EoL>
<BoL> Given arguments from the calling form *multiparams , **params , <EoL>
<BoL> Return True if this event key is registered to listen . <EoL>
<BoL> Return True if the given target/ident/fn is set up to listen . <EoL>
<BoL> Register a listener function for the given target . <EoL>
<BoL> Decorate a function as a listener for the given target + identifier . <EoL>
<BoL> Remove an event listener . <EoL>
<BoL> Clear all class level listeners <EoL>
<BoL> Return an event collection which can be modified . <EoL>
<BoL> Execute this event . <EoL>
<BoL> Execute this event , but only if it has not been <EoL>
<BoL> Execute this event . <EoL>
<BoL> Return an event collection which can be modified . <EoL>
<BoL> Populate from the listeners in another : class : ` _Dispatch ` <EoL>
<BoL> Return an event collection which can be modified . <EoL>
<BoL> Create a 'join ' of this : class : ` ._Dispatch ` and another . <EoL>
<BoL> Populate from the listeners in another : class : ` _Dispatch ` <EoL>
<BoL> Create a : class : ` ._Dispatch ` class corresponding to an <EoL>
<BoL> Intercept high level execute ( ) events after execute . <EoL>
<BoL> Intercept high level execute ( ) events , receiving uncompiled <EoL>
<BoL> Intercept begin ( ) events . <EoL>
<BoL> Intercept begin_twophase ( ) events . <EoL>
<BoL> Intercept commit ( ) events , as initiated by a <EoL>
<BoL> Intercept commit_twophase ( ) events . <EoL>
<BoL> Intercept the creation of a new : class : ` .Connection ` . <EoL>
<BoL> Intercept when the : meth : ` .Engine.dispose ` method is called . <EoL>
<BoL> r '' '' '' Intercept all exceptions processed by the : class : ` .Connection ` . <EoL>
<BoL> Intercept prepare_twophase ( ) events . <EoL>
<BoL> Intercept release_savepoint ( ) events . <EoL>
<BoL> Intercept rollback ( ) events , as initiated by a <EoL>
<BoL> Intercept rollback_savepoint ( ) events . <EoL>
<BoL> Intercept rollback_twophase ( ) events . <EoL>
<BoL> Intercept savepoint ( ) events . <EoL>
<BoL> Intercept when the : meth : ` .Connection.execution_options ` <EoL>
<BoL> Intercept when the : meth : ` .Engine.execution_options ` <EoL>
<BoL> r '' '' '' Called after CREATE statements are emitted . <EoL>
<BoL> r '' '' '' Called after DROP statements are emitted . <EoL>
<BoL> Called after a : class : ` .SchemaItem ` is associated with <EoL>
<BoL> r '' '' '' Called before CREATE statements are emitted . <EoL>
<BoL> r '' '' '' Called before DROP statements are emitted . <EoL>
<BoL> Called before a : class : ` .SchemaItem ` is associated with <EoL>
<BoL> Called for each unit of 'column info ' retrieved when <EoL>
<BoL> Receive connection arguments before a connection is made . <EoL>
<BoL> Receive a cursor to have execute ( ) called . <EoL>
<BoL> Receive a cursor to have execute ( ) with no parameters called . <EoL>
<BoL> Receive a cursor to have executemany ( ) called . <EoL>
<BoL> Called by subclasses to create a new ConnectionRecord . <EoL>
<BoL> Implementation for : meth : ` get ` , supplied by subclasses . <EoL>
<BoL> Implementation for : meth : ` return_conn ` , supplied by subclasses . <EoL>
<BoL> Mark all connections established within the generation <EoL>
<BoL> Given a _ConnectionRecord , return it to the : class : ` .Pool ` . <EoL>
<BoL> Detect if creator accepts a single argument , or is sent <EoL>
<BoL> Add a : class : ` .PoolListener ` -like object to this pool . <EoL>
<BoL> Return a DBAPI connection from the pool . <EoL>
<BoL> Dispose of this pool . <EoL>
<BoL> Return a new : class : ` .Pool ` , of the same class as this one <EoL>
<BoL> Produce a DBAPI connection that is not referenced by any <EoL>
<BoL> Called when a connection returns to the pool . <EoL>
<BoL> Called when a connection is retrieved from the Pool . <EoL>
<BoL> Called when a DBAPI connection is closed . <EoL>
<BoL> Called when a detached DBAPI connection is closed . <EoL>
<BoL> Called at the moment a particular DBAPI connection is first <EoL>
<BoL> Called when a DBAPI connection is `` detached '' from a pool . <EoL>
<BoL> Called exactly once for the first time a DBAPI connection is <EoL>
<BoL> Called when a DBAPI connection is to be `` invalidated '' . <EoL>
<BoL> Called before the `` reset '' action occurs for a pooled connection . <EoL>
<BoL> Called when a DBAPI connection is to be `` soft invalidated '' . <EoL>
<BoL> Produce an inspection object for the given target . <EoL>
<BoL> Intercept begin ( ) events . <EoL>
<BoL> Intercept begin_twophase ( ) events . <EoL>
<BoL> Intercept commit ( ) events . <EoL>
<BoL> Intercept commit_twophase ( ) events . <EoL>
<BoL> Intercept high level execute ( ) events . <EoL>
<BoL> Intercept prepare_twophase ( ) events . <EoL>
<BoL> Intercept release_savepoint ( ) events . <EoL>
<BoL> Intercept rollback ( ) events . <EoL>
<BoL> Intercept rollback_savepoint ( ) events . <EoL>
<BoL> Intercept rollback_twophase ( ) events . <EoL>
<BoL> Intercept savepoint ( ) events . <EoL>
<BoL> Adapt a : class : ` .PoolListener ` to individual <EoL>
<BoL> Called when a connection returns to the pool . <EoL>
<BoL> Called when a connection is retrieved from the Pool . <EoL>
<BoL> Called once for each new DB-API connection or Pool 's `` creator ( ) `` . <EoL>
<BoL> Called exactly once for the first DB-API connection . <EoL>
<BoL> Return a : class : ` .Lateral ` object . <EoL>
<BoL> r '' '' '' Return a literal clause , bound to a bind parameter . <EoL>
<BoL> r '' '' '' Produce a : class : ` .ColumnClause ` object that has the <EoL>
<BoL> Delegate a critical call to the underlying logger . <EoL>
<BoL> Delegate a debug call to the underlying logger . <EoL>
<BoL> Delegate an error call to the underlying logger . <EoL>
<BoL> Delegate an exception call to the underlying logger . <EoL>
<BoL> What 's the effective level for this logger ? <EoL>
<BoL> Delegate an info call to the underlying logger . <EoL>
<BoL> Is this logger enabled for level 'level ' ? <EoL>
<BoL> Delegate a log call to the underlying logger . <EoL>
<BoL> Delegate a warning call to the underlying logger . <EoL>
<BoL> create a logger for an instance that implements : class : ` .Identified ` . <EoL>
<BoL> Return a negation of the given clause , i.e . `` NOT ( clause ) `` . <EoL>
<BoL> Create an 'OUT ' parameter for usage in functions ( stored procedures ) , <EoL>
<BoL> Dispose of this pool . <EoL>
<BoL> Return a new DBAPI cursor for the underlying connection . <EoL>
<BoL> Separate this connection from its Pool . <EoL>
<BoL> Mark this connection as invalidated . <EoL>
<BoL> Invalidate the DBAPI connection held by this : class : ` ._ConnectionRecord ` . <EoL>
<BoL> Initializes a new proxy . <EoL>
<BoL> Activate a connection to the database . <EoL>
<BoL> Dispose the pool referenced by the given connect arguments . <EoL>
<BoL> Chop extraneous lines off beginning and end of a traceback . <EoL>
<BoL> Remove all current DB-API 2.0 managers . <EoL>
<BoL> r '' '' '' Return a proxy for a DB-API module that automatically <EoL>
<BoL> Allow disable of _create_rule using a callable . <EoL>
<BoL> Create a new : class : ` .CreateSchema ` construct . <EoL>
<BoL> chain ' an additional ClauseVisitor onto this ClauseVisitor . <EoL>
<BoL> traverse the given expression structure , returning an iterator <EoL>
<BoL> traverse and visit the given expression structure . <EoL>
<BoL> Create a new : class : ` .DropSchema ` construct . <EoL>
<BoL> sort a collection of : class : ` .Table ` objects based on dependency . <EoL>
<BoL> delete memoized collections when a FromClause is cloned . <EoL>
<BoL> Add a column to this collection . <EoL>
<BoL> add the given column to this collection , removing unaliased <EoL>
<BoL> Return True if the given column element compares to this one <EoL>
<BoL> r '' '' '' Return an `` EXCEPT `` of multiple selectables . <EoL>
<BoL> r '' '' '' Return an `` EXCEPT ALL `` of multiple selectables . <EoL>
<BoL> r '' '' '' Return an `` INTERSECT `` of multiple selectables . <EoL>
<BoL> r '' '' '' Return an `` INTERSECT ALL `` of multiple selectables . <EoL>
<BoL> r '' '' '' Return a `` UNION `` of multiple selectables . <EoL>
<BoL> r '' '' '' Return a `` UNION ALL `` of multiple selectables . <EoL>
<BoL> Override the default _generate ( ) method to also clear out <EoL>
<BoL> Append the given GROUP BY criterion applied to this selectable . <EoL>
<BoL> Append the given ORDER BY criterion applied to this selectable . <EoL>
<BoL> return a new selectable with the 'use_labels ' flag set to True . <EoL>
<BoL> return a 'scalar ' representation of this selectable , which can be <EoL>
<BoL> return a new selectable with the 'autocommit ' flag set to <EoL>
<BoL> r '' '' '' Return a new : class : ` .CTE ` , or Common Table Expression instance . <EoL>
<BoL> Compile and execute this : class : ` .Executable ` . <EoL>
<BoL> return a new selectable with the given list of GROUP BY <EoL>
<BoL> return a 'scalar ' representation of this selectable , embedded as a <EoL>
<BoL> return a new selectable with the given LIMIT criterion <EoL>
<BoL> return a new selectable with the given OFFSET criterion <EoL>
<BoL> return a new selectable with the given list of ORDER BY <EoL>
<BoL> Set the parameters for the statement . <EoL>
<BoL> r '' '' '' Add one or more expressions following the statement keyword , i.e . <EoL>
<BoL> r '' '' '' Add a : term : ` RETURNING ` or equivalent clause to this statement . <EoL>
<BoL> Add the given WHERE clause to a newly returned delete construct . <EoL>
<BoL> Add a table hint for a single table to this <EoL>
<BoL> Return a : class : ` .False_ ` construct . <EoL>
<BoL> Return a new : class : ` .Insert ` construct which represents <EoL>
<BoL> Make use of a : term : ` RETURNING ` clause for the purpose <EoL>
<BoL> r '' '' '' specify a fixed VALUES clause for an INSERT statement , or the SET <EoL>
<BoL> Construct a new : class : ` .Join ` . <EoL>
<BoL> Return an `` OUTER JOIN `` clause element . <EoL>
<BoL> r '' '' '' return an alias of this : class : ` .Join ` . <EoL>
<BoL> r '' '' '' Create a : class : ` .Select ` from this : class : ` .Join ` . <EoL>
<BoL> append the given column expression to the columns clause of this <EoL>
<BoL> append the given correlation expression to this select ( ) <EoL>
<BoL> append the given FromClause expression to this select ( ) construct 's <EoL>
<BoL> append the given expression to this select ( ) construct 's HAVING <EoL>
<BoL> append the given columns clause prefix expression to this select ( ) <EoL>
<BoL> append the given expression to this select ( ) construct 's WHERE <EoL>
<BoL> return a new select ( ) construct with the given column expression <EoL>
<BoL> r '' '' '' return a new : class : ` .Select ` which will correlate the given FROM <EoL>
<BoL> r '' '' '' return a new : class : ` .Select ` which will omit the given FROM <EoL>
<BoL> r '' '' '' Return a new select ( ) construct which will apply DISTINCT to its <EoL>
<BoL> return a SQL EXCEPT of this select ( ) construct against the given <EoL>
<BoL> return a SQL EXCEPT ALL of this select ( ) construct against the <EoL>
<BoL> return child elements as per the ClauseElement specification . <EoL>
<BoL> return a new select ( ) construct with the given expression added to <EoL>
<BoL> return a SQL INTERSECT of this select ( ) construct against the given <EoL>
<BoL> return a SQL INTERSECT ALL of this select ( ) construct against the <EoL>
<BoL> return a Set of all FromClause elements referenced by this Select . <EoL>
<BoL> Return a new : func ` .select ` construct with redundantly <EoL>
<BoL> r '' '' '' return a new : func : ` .select ` construct with the <EoL>
<BoL> return a 'grouping ' construct as per the ClauseElement <EoL>
<BoL> r '' '' '' Add one or more expressions following the statement as a whole . <EoL>
<BoL> return a SQL UNION of this select ( ) construct against the given <EoL>
<BoL> return a SQL UNION ALL of this select ( ) construct against the given <EoL>
<BoL> return a new select ( ) construct with the given expression added to <EoL>
<BoL> r '' '' '' Add an indexing or other executional context hint for the given <EoL>
<BoL> r '' '' '' Return a new : func : ` .select ` construct with its columns <EoL>
<BoL> add a statement hint to this : class : ` .Select ` . <EoL>
<BoL> Produce a new : class : ` .TableClause ` . <EoL>
<BoL> Return a constant : class : ` .True_ ` construct . <EoL>
<BoL> return a new update ( ) construct with the given expression added to <EoL>
<BoL> r '' '' '' Produce a : class : ` .Alias ` construct against this <EoL>
<BoL> Execute this : class : ` .FunctionElement ` against an embedded <EoL>
<BoL> Produce a FILTER clause against this function . <EoL>
<BoL> Produce an OVER clause against this function . <EoL>
<BoL> Execute this : class : ` .FunctionElement ` against an embedded <EoL>
<BoL> Produce a : func : ` ~.expression.select ` construct <EoL>
<BoL> Produce a WITHIN GROUP ( ORDER BY expr ) clause against this function . <EoL>
<BoL> For types that define their return type as based on the criteria <EoL>
<BoL> Produce an ascending `` ORDER BY `` clause element . <EoL>
<BoL> Produce a descending `` ORDER BY `` clause element . <EoL>
<BoL> Produce an column-expression-level unary `` DISTINCT `` clause . <EoL>
<BoL> Produce the `` NULLS FIRST `` modifier for an `` ORDER BY `` expression . <EoL>
<BoL> Produce the `` NULLS LAST `` modifier for an `` ORDER BY `` expression . <EoL>
<BoL> Compare this : class : ` UnaryExpression ` against the given <EoL>
<BoL> Compare this : class : ` BinaryExpression ` against the <EoL>
<BoL> execute a deferred value for serialization purposes . <EoL>
<BoL> Return a copy of this : class : ` .BindParameter ` with the given value <EoL>
<BoL> Compare this : class : ` BindParameter ` to the given <EoL>
<BoL> Produce a conjunction of expressions joined by `` AND `` . <EoL>
<BoL> Compare this : class : ` .ClauseList ` to the given : class : ` .ClauseList ` , <EoL>
<BoL> Produce a conjunction of expressions joined by `` OR `` . <EoL>
<BoL> Produce an ALL expression . <EoL>
<BoL> Produce an ANY expression . <EoL>
<BoL> return a new : class : ` .Exists ` construct , applying the given <EoL>
<BoL> return a new exists ( ) construct with the given expression added to <EoL>
<BoL> Produce an additional FILTER against the function . <EoL>
<BoL> Produce an OVER clause against this filtered function . <EoL>
<BoL> Return a constant : class : ` .Null ` construct . <EoL>
<BoL> Apply a WHERE clause to the SELECT statement referred to <EoL>
<BoL> Produce an OVER clause against this : class : ` .WithinGroup ` <EoL>
<BoL> Deep copy the given ClauseElement , annotating each element <EoL>
<BoL> Deep copy the given element , removing annotations . <EoL>
<BoL> Annotate the given ClauseElement and copy its internals so that <EoL>
<BoL> Mark a method as generative . <EoL>
<BoL> Format the remote table clause of a CREATE CONSTRAINT clause . <EoL>
<BoL> Escape an identifier . <EoL>
<BoL> Return True if the given identifier requires quoting . <EoL>
<BoL> Canonicalize an escaped identifier . <EoL>
<BoL> Prepare a quoted schema name . <EoL>
<BoL> Prepare a quoted table and schema name . <EoL>
<BoL> Format table name and schema as a tuple . <EoL>
<BoL> Conditionally quote an identifier . <EoL>
<BoL> Quote an identifier . <EoL>
<BoL> Conditionally quote a schema . <EoL>
<BoL> Unpack 'schema.table.column'-like strings into components . <EoL>
<BoL> utility method used for unit tests only . <EoL>
<BoL> Initialize collections related to CTEs only if <EoL>
<BoL> special API to support the use case of 'nested result sets <EoL>
<BoL> Rewrite any `` a JOIN ( b JOIN c ) '' expression as <EoL>
<BoL> return a dictionary of bind parameter keys and values <EoL>
<BoL> Called when a SELECT statement has no froms , and no FROM clause is <EoL>
<BoL> Called when building a `` SELECT `` statement , position is just <EoL>
<BoL> Render the value of a bind parameter as a quoted literal . <EoL>
<BoL> Provide a hook for MySQL to add LIMIT to the UPDATE <EoL>
<BoL> Create a bound parameter in the INSERT statement to receive a <EoL>
<BoL> Create a primary key expression in the INSERT statement and <EoL>
<BoL> create a set of tuples representing column/string pairs for use <EoL>
<BoL> Establish the values and/or types of bound parameters within <EoL>
<BoL> Turn this : class : ` .TextClause ` object into a : class : ` .TextAsFrom ` <EoL>
<BoL> See : meth : ` .ColumnOperators.between ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.distinct ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.__inv__ ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.match ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.__neg__ ` . <EoL>
<BoL> r '' '' '' Produce a `` CASE `` expression . <EoL>
<BoL> Produce a `` CAST `` expression . <EoL>
<BoL> Produce a : class : ` .ColumnClause ` object . <EoL>
<BoL> Return a : class : ` .Extract ` construct . <EoL>
<BoL> Produce a : class : ` .FunctionFilter ` object against a function . <EoL>
<BoL> Return a : class : ` Label ` object for the <EoL>
<BoL> Return a : class : ` .Tuple ` . <EoL>
<BoL> Associate a SQL expression with a particular type , without rendering <EoL>
<BoL> r '' '' '' Produce a : class : ` .WithinGroup ` object against a function . <EoL>
<BoL> coerce the given value to : class : ` ._truncated_label ` . <EoL>
<BoL> return the intersection of sets a and b , counting <EoL>
<BoL> expand the given set of ClauseElements to be the set of all 'cloned ' <EoL>
<BoL> locate Column objects within the given expression . <EoL>
<BoL> True if `` col `` is an instance of : class : ` .ColumnElement ` . <EoL>
<BoL> expand tables into individual columns in the <EoL>
<BoL> clone the given expression structure , allowing <EoL>
<BoL> traverse and visit the given expression structure using the default <EoL>
<BoL> Construct a new : class : ` .Exists ` against an existing <EoL>
<BoL> Construct a : class : ` .Function ` . <EoL>
<BoL> Construct a : class : ` .FunctionElement ` . <EoL>
<BoL> Produce a wrapping function for the given cls or classmethod . <EoL>
<BoL> r '' '' '' Return an : class : ` .Alias ` object derived <EoL>
<BoL> Return a : class : ` .TableSample ` object . <EoL>
<BoL> Associate a callable with a particular func . name . <EoL>
<BoL> r '' '' '' Operate on an argument . <EoL>
<BoL> Reverse operate on an argument . <EoL>
<BoL> rotate a comparison operator 180 degrees . <EoL>
<BoL> Parse the for_update argument of : func : ` .select ` . <EoL>
<BoL> Convert the given value to an `` offset or limit '' clause . <EoL>
<BoL> Convert the `` offset or limit '' clause of a select construct to an <EoL>
<BoL> Given an impl , adapt this type 's class to the impl assuming `` native '' . <EoL>
<BoL> Construct a new : class : ` .Variant ` . <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Return a new : class : ` .Variant ` which adds the given <EoL>
<BoL> Suggest a type for a 'coerced ' Python value in an expression . <EoL>
<BoL> Apply cloned traversal to the given list of elements , and return <EoL>
<BoL> traverse and visit the given expression structure . <EoL>
<BoL> given criterion containing bind params , convert selected elements <EoL>
<BoL> Return an ordered list of `` bound '' values in the given clause . <EoL>
<BoL> Given a target clause and a second to search within , return True <EoL>
<BoL> Given the columns clause and ORDER BY of a selectable , <EoL>
<BoL> Given a list of FROM clauses and a selectable , <EoL>
<BoL> r '' '' '' given a list of columns , return a 'reduced ' set based on natural <EoL>
<BoL> Return True if left/right have some overlapping selectable <EoL>
<BoL> traverse and yield only outer-exposed column elements , such as would <EoL>
<BoL> Break up an 'order by ' expression into individual column-expressions , <EoL>
<BoL> Produce a traversal of the given expression , delivering <EoL>
<BoL> traverse and visit the given expression structure . <EoL>
<BoL> receive pre-copied elements during a cloning traversal . <EoL>
<BoL> Return an optimized visit dispatch function for the clsLook for an attribute named `` visit_ '' + self.__visit_name__ <EoL>
<BoL> traverse the given expression structure , returning an iterator . <EoL>
<BoL> traverse the given expression structure , returning an iterator . <EoL>
<BoL> clone the given expression structure , allowing element <EoL>
<BoL> traverse and visit the given expression structure using the <EoL>
<BoL> visit the given expression structure using the given iterator of <EoL>
<BoL> Return an immutable proxy for this : class : ` .Properties ` . <EoL>
<BoL> Return the contents of this : class : ` .KeyedTuple ` as a dictionary . <EoL>
<BoL> Return a list of string key names for this : class : ` .KeyedTuple ` . <EoL>
<BoL> Construct a new : class : ` .ScopedRegistry ` . <EoL>
<BoL> Clear the current scope , if any . <EoL>
<BoL> Return True if an object is present in the current scope . <EoL>
<BoL> Set the value for the current scope . <EoL>
<BoL> Return the contents of this : class : ` .KeyedTuple ` as a dictionary . <EoL>
<BoL> Generator : ( ( id ( o ) , o ) for o in iterable ) . <EoL>
<BoL> Given an iterator of which further sub-elements may also be <EoL>
<BoL> return True if any items of set_ are present in iterable . <EoL>
<BoL> Copy the given dict and update with the given values . <EoL>
<BoL> Ensure basic interface compliance for an instance or dict of callables.A callable-holding shell . <EoL>
<BoL> Coerce to integer . <EoL>
<BoL> Return a callable that will evaluate a string as <EoL>
<BoL> Return an unordered sequence of all classes related to cls . <EoL>
<BoL> r '' '' '' If 'key ' is present in dict 'kw ' , coerce its value to type 'type\_ ' if <EoL>
<BoL> Implement contextlib.nested , mostly for unit tests . <EoL>
<BoL> Like quote ( ) , but also replace ' ' with '+ ' , as required for quoting <EoL>
<BoL> Replace % xx escapes by their single-character equivalent . The optional <EoL>
<BoL> Like unquote ( ) , but also replace plus signs by spaces , as required for <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Instantiate cls using the __dict__ of obj as constructor arguments . <EoL>
<BoL> Return a threadsafe counter function . <EoL>
<BoL> decode a slice object as sent to __getitem__ . <EoL>
<BoL> A signature-matching decorator factory . <EoL>
<BoL> Wrap a function with a warnings.warn and augmented docstring . <EoL>
<BoL> Return a ( key , value ) iterator for almost any dict-like object . <EoL>
<BoL> Given an instance or class , guess if it is or is acting as one of <EoL>
<BoL> format_argspec_plus with considerations for typical __init__ methods <EoL>
<BoL> Returns a dictionary of formatted , introspected function arguments . <EoL>
<BoL> Produce a __repr__ ( ) based on direct association of the __init__ ( ) <EoL>
<BoL> Return the argument signature for any callable . <EoL>
<BoL> r '' '' '' Return the full set of inherited kwargs for the given ` cls ` . <EoL>
<BoL> Return the set of legal kwargs for the given ` func ` . <EoL>
<BoL> inspect.getargspec with considerations for typical __init__ methods <EoL>
<BoL> Expire all memoized properties for *instance* . <EoL>
<BoL> iterate all the keys and attributes associated <EoL>
<BoL> Construct a new named symbol . <EoL>
<BoL> Call the given function given each nonzero bit from n . <EoL>
<BoL> Decorate a method memoize its return value . <EoL>
<BoL> Return True if the two methods are the same implementation . <EoL>
<BoL> Decorate the given function to be a no-op after it is called exactly <EoL>
<BoL> Assign a '_creation_order ' sequence to the given instance . <EoL>
<BoL> Adjust the incoming callable such that a 'self ' argument is not <EoL>
<BoL> Issue a warning . <EoL>
<BoL> executes the given function , catches all exceptions and converts to <EoL>
<BoL> Issue a warning with a paramterized string , limiting the number <EoL>
<BoL> Augment functools.update_wrapper ( ) to work with objects with <EoL>
<BoL> Initialize a queue object with a given maximum size . <EoL>
<BoL> Return True if the queue is empty , False otherwise ( not <EoL>
<BoL> Return True if the queue is full , False otherwise ( not <EoL>
<BoL> Remove and return an item from the queue . <EoL>
<BoL> Remove and return an item from the queue without blocking . <EoL>
<BoL> Put an item into the queue . <EoL>
<BoL> Put an item into the queue without blocking . <EoL>
<BoL> Return the approximate size of the queue ( not reliable ! ) . <EoL>
<BoL> sort the given list of items by dependency . <EoL>
<BoL> Compute the area of a polygon . <EoL>
<BoL> Clip a polygon to the given bounding box . <EoL>
<BoL> Context for use in testing to ensure that all warnings are raised . <EoL>
<BoL> Context for use in testing to catch known warnings matching regexes <EoL>
<BoL> A version of ` warnings.warn ` with a default stacklevel of 2 . <EoL>
<BoL> Verify an array meets the desired ndims and array is n't empty . <EoL>
<BoL> Turn seed into a ` np.random.RandomState ` instance . <EoL>
<BoL> Convert input image to double image with the appropriate range . <EoL>
<BoL> Create a copy of a function . <EoL>
<BoL> Return the class for a bound method . <EoL>
<BoL> Convert an image to floating point format . <EoL>
<BoL> Attempt to safely cast values to integer format . <EoL>
<BoL> This would run all unit tests , but pytest could n't be <EoL>
<BoL> Return decorator that adapts to RGB images to a gray-scale filter . <EoL>
<BoL> Convert an image to the requested data-type.Scale an array of unsigned/positive integers from ` n ` to ` m ` bits . <EoL>
<BoL> Return color image by applying ` image_filter ` on channels of ` image ` . <EoL>
<BoL> Return color image by applying ` image_filter ` on HSV-value of ` image ` . <EoL>
<BoL> Return True if the image *looks* like it 's RGB . <EoL>
<BoL> convert cartesian coordinates to polar ( uses non-standard theta range ! ) <EoL>
<BoL> Do the color space conversion . <EoL>
<BoL> Check the shape of the array and convert it to <EoL>
<BoL> Ensure input for lab2lch , lch2lab are well-posed . <EoL>
<BoL> Check the shape of the array to be RGBA and convert it to <EoL>
<BoL> Stain to RGB color space conversion . <EoL>
<BoL> Convert an image array to a new color space . <EoL>
<BoL> Return intensity limits , i.e . ( min , max ) tuple , of the image 's dtype . <EoL>
<BoL> Get the XYZ coordinates of the given illuminant and observer [ 1 ] _ . <EoL>
<BoL> Create an RGB representation of a gray-level image . <EoL>
<BoL> Make an educated guess about whether an image has a channels dimension . <EoL>
<BoL> Haematoxylin-Eosin-DAB ( HED ) to RGB color space conversion . <EoL>
<BoL> HSV to RGB color space conversion . <EoL>
<BoL> CIE-LAB to CIE-LCH color space conversion . <EoL>
<BoL> Lab to RGB color space conversion . <EoL>
<BoL> CIE-LAB to XYZcolor space conversion . <EoL>
<BoL> CIE-LCH to CIE-LAB color space conversion . <EoL>
<BoL> Luv to RGB color space conversion . <EoL>
<BoL> CIE-Luv to XYZ color space conversion . <EoL>
<BoL> Compute luminance of an RGB image . <EoL>
<BoL> RGB to Haematoxylin-Eosin-DAB ( HED ) color space conversion . <EoL>
<BoL> RGB to HSV color space conversion . <EoL>
<BoL> RGB to lab color space conversion . <EoL>
<BoL> RGB to CIE-Luv color space conversion . <EoL>
<BoL> RGB to RGB CIE color space conversion . <EoL>
<BoL> RGB to XYZ color space conversion . <EoL>
<BoL> RGB to YCbCr color space conversion . <EoL>
<BoL> RGB to YDbDr color space conversion . <EoL>
<BoL> RGB to YIQ color space conversion . <EoL>
<BoL> RGB to YPbPr color space conversion . <EoL>
<BoL> RGB to YUV color space conversion . <EoL>
<BoL> RGBA to RGB conversion . <EoL>
<BoL> RGB CIE to RGB color space conversion . <EoL>
<BoL> RGB to stain color space conversion . <EoL>
<BoL> XYZ to CIE-LAB color space conversion . <EoL>
<BoL> XYZ to CIE-Luv color space conversion . <EoL>
<BoL> XYZ to RGB color space conversion . <EoL>
<BoL> YCbCr to RGB color space conversion . <EoL>
<BoL> YDbDr to RGB color space conversion . <EoL>
<BoL> YIQ to RGB color space conversion . <EoL>
<BoL> YPbPr to RGB color space conversion . <EoL>
<BoL> YUV to RGB color space conversion . <EoL>
<BoL> Visualise each segment in ` label_field ` with its mean color in ` image ` . <EoL>
<BoL> Return ` unique_labels ` and ` color_cycle ` for label array and color list . <EoL>
<BoL> Return RGB color as ( 1 , 3 ) array . <EoL>
<BoL> Euclidean distance between two points in Lab color space <EoL>
<BoL> Color difference as given by the CIEDE 2000 standard . <EoL>
<BoL> Color difference according to CIEDE 94 standard <EoL>
<BoL> Color difference from the CMC l : c standard . <EoL>
<BoL> squared hue difference term occurring in deltaE_cmc and deltaE_ciede94 <EoL>
<BoL> Color image of the astronaut Eileen Collins . <EoL>
<BoL> Gray-level `` camera '' image . <EoL>
<BoL> Checkerboard image . <EoL>
<BoL> Chelsea the cat . <EoL>
<BoL> Motion blurred clock . <EoL>
<BoL> Coffee cup . <EoL>
<BoL> Greek coins from Pompeii . <EoL>
<BoL> Black and white silhouette of a horse . <EoL>
<BoL> Hubble eXtreme Deep Field . <EoL>
<BoL> Convert an image to boolean format . <EoL>
<BoL> Immunohistochemical ( IHC ) staining with hematoxylin counterstaining . <EoL>
<BoL> Subset of data from the LFW dataset . <EoL>
<BoL> Load an image file located in the data directory . <EoL>
<BoL> Scikit-image logo , a RGBA image . <EoL>
<BoL> Surface of the moon . <EoL>
<BoL> Scanned page . <EoL>
<BoL> Launch photo of DSCOVR on Falcon 9 by SpaceX . <EoL>
<BoL> Rectified stereo image pair with ground-truth disparities . <EoL>
<BoL> Gray-level `` text '' image used for corner detection . <EoL>
<BoL> Set the default plugin for a specified operation . The plugin <EoL>
<BoL> Generate a mask for a filled circle shape . <EoL>
<BoL> Generate an array of random colors . <EoL>
<BoL> Generate a mask for a filled rectangle shape . <EoL>
<BoL> Generate a mask for a filled equilateral triangle shape . <EoL>
<BoL> Generate coordinates of pixels within circle . <EoL>
<BoL> Generate coordinates of pixels within polygon . <EoL>
<BoL> Generate Bezier curve coordinates . <EoL>
<BoL> Generate circle perimeter coordinates . <EoL>
<BoL> Generate anti-aliased circle perimeter coordinates . <EoL>
<BoL> Generate coordinates of points within ellipse bounded by shape . <EoL>
<BoL> Generate coordinates of pixels within ellipse . <EoL>
<BoL> Generate ellipse perimeter coordinates . <EoL>
<BoL> Generate line pixel coordinates . <EoL>
<BoL> Generate anti-aliased line pixel coordinates . <EoL>
<BoL> Generate polygon perimeter coordinates . <EoL>
<BoL> Generate coordinates of pixels within a rectangle . <EoL>
<BoL> Set pixel color in the image at the given coordinates . <EoL>
<BoL> Generates ellipsoid with semimajor axes aligned with grid dimensions <EoL>
<BoL> Calculates analytical surface area and volume for ellipsoid with <EoL>
<BoL> Contrast Limited Adaptive Histogram Equalization . <EoL>
<BoL> Perform clipping of the histogram and redistribution of bins . <EoL>
<BoL> Convert an image to 16-bit unsigned integer format . <EoL>
<BoL> Calculate the equalized lookup table ( mapping ) . <EoL>
<BoL> Return image after stretching or shrinking its intensity levels . <EoL>
<BoL> Performs Gamma Correction on the input image . <EoL>
<BoL> Performs Logarithmic correction on the input image . <EoL>
<BoL> Performs Sigmoid Correction on the input image . <EoL>
<BoL> Return cumulative distribution function ( cdf ) for the given image . <EoL>
<BoL> Return image after histogram equalization . <EoL>
<BoL> Return histogram of image . <EoL>
<BoL> Return image intensity range ( min , max ) based on desired value type . <EoL>
<BoL> Return specified page . <EoL>
<BoL> Return iterator over pages . <EoL>
<BoL> Return number of image pages in file . <EoL>
<BoL> Return string containing information about file . <EoL>
<BoL> Set strip_byte_counts to size of compressed data . <EoL>
<BoL> Unwrap strip offsets for LSM files greater than 4 GB . <EoL>
<BoL> Return image series in FluoView file . <EoL>
<BoL> Read TIFF header and all page records from file . <EoL>
<BoL> Return image series in ImageJ file . <EoL>
<BoL> Return image series in LSM file . <EoL>
<BoL> Return image series in NIH file . <EoL>
<BoL> Return image series in OME-TIFF file ( s ) . <EoL>
<BoL> Return image data from multiple TIFF pages as numpy array . <EoL>
<BoL> Close open file handle ( s ) . <EoL>
<BoL> Return string with detailed information about file . <EoL>
<BoL> Return string with information about image sequence . <EoL>
<BoL> Get axes and shape from file names . <EoL>
<BoL> Read image data from all files and return as single numpy array . <EoL>
<BoL> Return current date and time . <EoL>
<BoL> Write meta data to image_description tag . <EoL>
<BoL> Write outstanding IFDs and tags to file . <EoL>
<BoL> Write remaining pages ( if not truncate ) and close file handle . <EoL>
<BoL> Return image data from TIFF file ( s ) as numpy array . <EoL>
<BoL> Write image data to TIFF file . <EoL>
<BoL> Return attribute from underlying file object . <EoL>
<BoL> Initialize file handle from file name or another file handle . <EoL>
<BoL> Close file . <EoL>
<BoL> Flush write buffers if applicable . <EoL>
<BoL> Return numpy.memmap of data stored in file . <EoL>
<BoL> Open or re-open file . <EoL>
<BoL> Read 'size ' bytes from file , or until EOF is reached . <EoL>
<BoL> Return numpy array from file . <EoL>
<BoL> Return numpy record from file . <EoL>
<BoL> Set file 's current position . <EoL>
<BoL> Return file 's current position . <EoL>
<BoL> Write bytestring to file . <EoL>
<BoL> Write numpy array to binary file . <EoL>
<BoL> abs ( a ) <EoL>
<BoL> a ! = 0 <EoL>
<BoL> Will be math.ceil ( a ) in 3.0 . <EoL>
<BoL> a == b <EoL>
<BoL> float ( self ) = self.numerator / self.denominator <EoL>
<BoL> Will be math.floor ( a ) in 3.0 . <EoL>
<BoL> a // b <EoL>
<BoL> a > = b <EoL>
<BoL> a > b <EoL>
<BoL> hash ( self ) <EoL>
<BoL> a < = b <EoL>
<BoL> a < b <EoL>
<BoL> a % b <EoL>
<BoL> -a <EoL>
<BoL> Constructs a Rational . <EoL>
<BoL> +a : Coerces a subclass instance to Fraction <EoL>
<BoL> a ** b <EoL>
<BoL> repr ( self ) <EoL>
<BoL> a // b <EoL>
<BoL> a % b <EoL>
<BoL> Will be round ( self , ndigits ) in 3.0 . <EoL>
<BoL> a ** b <EoL>
<BoL> str ( self ) <EoL>
<BoL> trunc ( a ) <EoL>
<BoL> a + b <EoL>
<BoL> a / b <EoL>
<BoL> a * b <EoL>
<BoL> Generates forward and reverse operators given a purely-rational <EoL>
<BoL> Helper for comparison operators , for internal use only . <EoL>
<BoL> a - b <EoL>
<BoL> Converts a finite Decimal instance to a rational number , exactly . <EoL>
<BoL> Converts a finite float to a rational number , exactly . <EoL>
<BoL> Closest Fraction to self with denominator at most max_denominator . <EoL>
<BoL> Pretty print Record . <EoL>
<BoL> Return tag value . <EoL>
<BoL> Initialize instance from file . <EoL>
<BoL> Return string containing information about page . <EoL>
<BoL> Read TIFF IFD structure and its tags from file . <EoL>
<BoL> Return if page 's image data in file can be memory-mapped . <EoL>
<BoL> Return if ImageJ data are contiguous and adjust page attributes . <EoL>
<BoL> Validate standard tags and initialize attributes . <EoL>
<BoL> Return string with detailed information about page . <EoL>
<BoL> Return specified TiffPage . <EoL>
<BoL> Return iterator over TiffPages in series . <EoL>
<BoL> Return number of TiffPages in series . <EoL>
<BoL> Return string with information about series . <EoL>
<BoL> Return image data from series of TIFF pages as numpy array . <EoL>
<BoL> Initialize instance from file or arguments . <EoL>
<BoL> Return string containing information about tag . <EoL>
<BoL> Correct LSM bitspersample tag . <EoL>
<BoL> Initialize instance from arguments . <EoL>
<BoL> Read tag structure from open file . Advance file cursor . <EoL>
<BoL> Return value as human readable string . <EoL>
<BoL> Return string with information about all tags . <EoL>
<BoL> Decompress LZW ( Lempel-Ziv-Welch ) encoded TIFF strip ( byte string ) .Return integer of 'bitw ' bits at 'bitcount ' position in encoded . <EoL>
<BoL> Decompress PackBits encoded byte string . <EoL>
<BoL> Reverse bits in each byte of byte string or numpy array . <EoL>
<BoL> Decompress byte string to array of integers of any bit size < = 32 . <EoL>
<BoL> Block the GUI . For use as skimage plugin . <EoL>
<BoL> Try replace decorated function by module.function . <EoL>
<BoL> Return palette-colored image . <EoL>
<BoL> Return file name ( s ) from Tkinter 's file open dialog . <EoL>
<BoL> Return argument as one of types if possible . <EoL>
<BoL> Decode floating point horizontal differencing . <EoL>
<BoL> Return datetime object from timestamp in Excel serial format . <EoL>
<BoL> Return file size as string from byte size . <EoL>
<BoL> Return image description from data shape and meta data . <EoL>
<BoL> Return dictionary from image description byte string . <EoL>
<BoL> Return dictionary from ImageJ image description byte string . <EoL>
<BoL> Return dictionary from ImageJ metadata tag value . <EoL>
<BoL> Return shape normalized to 6D ImageJ hyperstack TZCYXS . <EoL>
<BoL> Return datetime from days since 1/1/4713 BC and ms since midnight . <EoL>
<BoL> Command line usage main function . <EoL>
<BoL> Return human sorted list of strings . <EoL>
<BoL> Return dict with keys from keys|keyvals and values from kwargs|keyvals . <EoL>
<BoL> Return product of sequence of numbers . <EoL>
<BoL> Read tag data from file and return as byte string . <EoL>
<BoL> Read LSM events from file and return as list of ( time , type , text ) . <EoL>
<BoL> Read LSM sequence of float pairs from file and return as list . <EoL>
<BoL> Read CS_LSM_INFO tag from file and return as numpy.rec.array . <EoL>
<BoL> Read LSM positions from file and return as list . <EoL>
<BoL> Read LSM scan information from file and return as Record . <EoL>
<BoL> Read LSM time stamps from file and return as list . <EoL>
<BoL> Read FEI SFEG/HELIOS headers and return as nested Record . <EoL>
<BoL> Read JSON tag data from file and return as object . <EoL>
<BoL> Read MicroManager non-TIFF settings from open file and return as dict . <EoL>
<BoL> Read MM_HEADER tag from file and return as numpy.rec.array . <EoL>
<BoL> Read MM_STAMP tag from file and return as numpy.ndarray . <EoL>
<BoL> Read NIH_IMAGE_HEADER tag from file and return as numpy.rec.array . <EoL>
<BoL> Read tag data from file and return as numpy array . <EoL>
<BoL> Read Zeiss SEM tag and return as Record . <EoL>
<BoL> Read TVIPS EM-MENU headers and return as Record . <EoL>
<BoL> Read MetaMorph STK UIC1Tag from file and return as dictionary . <EoL>
<BoL> Read MetaMorph STK UIC2Tag from file and return as dictionary . <EoL>
<BoL> Read MetaMorph STK UIC3Tag from file and return as dictionary . <EoL>
<BoL> Read MetaMorph STK UIC4Tag from file and return as dictionary . <EoL>
<BoL> Read UIC ImagePropertyEx tag from file and return as dict . <EoL>
<BoL> Read a single UIC tag value from file and return tag name and value . <EoL>
<BoL> Return reoriented view of image array . <EoL>
<BoL> Return axes matching new shape . <EoL>
<BoL> Return image array with at least ndim dimensions . <EoL>
<BoL> Return tuple containing value if value is not a sequence . <EoL>
<BoL> Return shape and axes with single-dimensional entries removed . <EoL>
<BoL> Read data from sequence of TiffPage and stack them vertically . <EoL>
<BoL> Return string truncated at last byte that is 7bit ASCII . <EoL>
<BoL> Return string truncated at first null character . <EoL>
<BoL> Return image with its axes permuted to match specified axes . <EoL>
<BoL> Return array from byte string containing packed samples . <EoL>
<BoL> Update dict with keys and values if keys do not already exist . <EoL>
<BoL> Apply the filter to the given data . <EoL>
<BoL> Parameters <EoL>
<BoL> Calculate filter and data FFT in preparation for filtering . <EoL>
<BoL> Filter an image with the Hessian filter . <EoL>
<BoL> Return an image of the same shape where each pixel is the <EoL>
<BoL> Apply hysteresis thresholding to ` image ` . <EoL>
<BoL> Return result after masking . <EoL>
<BoL> Find the edges of an image using the Laplace operator . <EoL>
<BoL> Return the transfer function of the Laplacian . <EoL>
<BoL> Find the edge magnitude using the Prewitt transform . <EoL>
<BoL> Find the horizontal edges of an image using the Prewitt transform . <EoL>
<BoL> Find the vertical edges of an image using the Prewitt transform . <EoL>
<BoL> Find the edge magnitude using Roberts ' cross operator . <EoL>
<BoL> Find the cross edges of an image using the Roberts ' Cross operator . <EoL>
<BoL> Find the cross edges of an image using Roberts ' cross operator . <EoL>
<BoL> Find the edge magnitude using the Scharr transform . <EoL>
<BoL> Find the horizontal edges of an image using the Scharr transform . <EoL>
<BoL> Find the vertical edges of an image using the Scharr transform . <EoL>
<BoL> Find the edge magnitude using the Sobel transform . <EoL>
<BoL> Find the horizontal edges of an image using the Sobel transform . <EoL>
<BoL> Find the vertical edges of an image using the Sobel transform . <EoL>
<BoL> Apply the filter in reverse to the given data . <EoL>
<BoL> Return an array of oshape from the centre of x . <EoL>
<BoL> Pad the data to the given shape with zeros . <EoL>
<BoL> Apply the given filter to data . <EoL>
<BoL> Minimum Mean Square Error ( Wiener ) inverse filter . <EoL>
<BoL> Auto-level image using local histogram . <EoL>
<BoL> Local bottom-hat of an image . <EoL>
<BoL> Local entropy . <EoL>
<BoL> Equalize image using local histogram . <EoL>
<BoL> Decorator to add a default structuring element to morphology functions . <EoL>
<BoL> Return local gradient of an image ( i.e . local maximum - local minimum ) . <EoL>
<BoL> Convert an image to 8-bit unsigned integer format . <EoL>
<BoL> Return local maximum of an image . <EoL>
<BoL> Return local mean of an image . <EoL>
<BoL> Return local minimum of an image . <EoL>
<BoL> Return local mode of an image . <EoL>
<BoL> Local Otsu 's threshold value for each pixel . <EoL>
<BoL> Return the local number ( population ) of pixels . <EoL>
<BoL> Return the local sum of pixels . <EoL>
<BoL> Local threshold of an image . <EoL>
<BoL> Local top-hat of an image . <EoL>
<BoL> Return threshold value ( s ) based on ISODATA method . <EoL>
<BoL> Compute threshold value by Li 's iterative Minimum Cross Entropy method . <EoL>
<BoL> Return threshold value based on the mean of grayscale values . <EoL>
<BoL> Return threshold value based on minimum method . <EoL>
<BoL> Applies Niblack local threshold to an array . <EoL>
<BoL> Return threshold value based on Otsu 's method . <EoL>
<BoL> Applies Sauvola local threshold to an array . Sauvola is a <EoL>
<BoL> Return threshold value based on the triangle algorithm . <EoL>
<BoL> Return threshold value based on Yen 's method . <EoL>
<BoL> Compute cross-entropy between distributions above and below a threshold . <EoL>
<BoL> Return local mean and standard deviation of each pixel using a <EoL>
<BoL> Returns a figure comparing the outputs of different methods . <EoL>
<BoL> Crop array ` ar ` by ` crop_width ` along each dimension . <EoL>
<BoL> Integral image / summed area table . <EoL>
<BoL> Returns a figure comparing the outputs of different thresholding methods.A wrapper function to return a thresholded image . <EoL>
<BoL> Convert an image to single-precision ( 32-bit ) floating point format . <EoL>
<BoL> Convert an image to double-precision ( 64-bit ) floating point format . <EoL>
<BoL> Convert an image to 16-bit signed integer format . <EoL>
<BoL> Return selected image ( s ) in the collection . <EoL>
<BoL> Iterate over the images . <EoL>
<BoL> Number of images in collection . <EoL>
<BoL> Check that the given image number is valid . <EoL>
<BoL> Concatenate all images in the collection into an array . <EoL>
<BoL> Clear the image cache . <EoL>
<BoL> Add separators and column titles to plugin info table . <EoL>
<BoL> Pop an image from the shared image stack . <EoL>
<BoL> Push an image onto the shared image stack . <EoL>
<BoL> Find the appropriate plugin of 'kind ' and execute it . <EoL>
<BoL> Yield name of file from the given resource ( i.e . file or url ) . <EoL>
<BoL> Save an image to file . <EoL>
<BoL> Display an image . <EoL>
<BoL> Display a collection of images . <EoL>
<BoL> Display pending images . <EoL>
<BoL> Return the display range for a given set of image properties . <EoL>
<BoL> Determine nonstandard properties of an input image . <EoL>
<BoL> Raise the appropriate warning for each nonstandard image type . <EoL>
<BoL> Return an ` ImageCollection ` from files matching the given pattern . <EoL>
<BoL> Show the input image and return the current axes . <EoL>
<BoL> Display all images in the collection . <EoL>
<BoL> Return True if PIL image in palette mode is grayscale . <EoL>
<BoL> Load an image from file . <EoL>
<BoL> Save an image to disk . <EoL>
<BoL> Export an ndarray to a PIL object . <EoL>
<BoL> Import a PIL Image object to an ndarray , in memory . <EoL>
<BoL> Add a list of plugins to the module docstring , formatted as <EoL>
<BoL> Convert string to list of strings and ints that gives intuitive sorting . <EoL>
<BoL> Concatenate all images in the image collection into an array . <EoL>
<BoL> Return an ` ImageCollection ` from files matching the given pattern . <EoL>
<BoL> List available plugins . <EoL>
<BoL> Create a new section in the configuration . Extends <EoL>
<BoL> Set an option . Extends RawConfigParser.set by validating type and <EoL>
<BoL> Clear the plugin state to the default , i.e. , where no plugins are loaded <EoL>
<BoL> Add ` imread_collection ` to module if not already present . <EoL>
<BoL> Load the given plugin . <EoL>
<BoL> Return plugin name and meta-data dict from plugin config file . <EoL>
<BoL> Scan the plugins directory for .ini files and parse them <EoL>
<BoL> Return plugin meta-data . <EoL>
<BoL> Return the currently preferred plugin order . <EoL>
<BoL> Read SIFT or SURF features from externally generated file . <EoL>
<BoL> Return True if string is an http or ftp path . <EoL>
<BoL> Do a keyword search on scikit-image docstrings . <EoL>
<BoL> Estimate circle model from data using total least squares . <EoL>
<BoL> Predict x- and y-coordinates using the estimated model . <EoL>
<BoL> Determine residuals of data to model . <EoL>
<BoL> Estimate circle model from data using total least squares . <EoL>
<BoL> Predict x- and y-coordinates using the estimated model . <EoL>
<BoL> Determine residuals of data to model . <EoL>
<BoL> Estimate line model from data . <EoL>
<BoL> Predict intersection of the estimated line model with a hyperplane <EoL>
<BoL> Predict x-coordinates for 2D lines using the estimated model . <EoL>
<BoL> Predict y-coordinates for 2D lines using the estimated model . <EoL>
<BoL> Determine residuals of data to model . <EoL>
<BoL> Compute surface area , given vertices & triangular faces <EoL>
<BoL> Kind of lazy obtaining of the luts . <EoL>
<BoL> Decode a bytestring of base-64 data into a bytes object . <EoL>
<BoL> Return the ( weighted ) centroid of an image . <EoL>
<BoL> Compute the inertia tensor of the input image . <EoL>
<BoL> Compute the eigenvalues of the inertia tensor of the image . <EoL>
<BoL> Calculate all raw image moments up to a certain order . <EoL>
<BoL> Calculate all central image moments up to a certain order . <EoL>
<BoL> Calculate all raw image moments up to a certain order . <EoL>
<BoL> Calculate all central image moments up to a certain order . <EoL>
<BoL> Calculate Hu 's set of image moments ( 2D-only ) . <EoL>
<BoL> Calculate all normalized central image moments up to a certain order . <EoL>
<BoL> Approximate a polygonal chain with the specified tolerance . <EoL>
<BoL> Subdivision of polygonal curves using B-Splines . <EoL>
<BoL> Calculate total perimeter of all objects in binary image . <EoL>
<BoL> Down-sample image by applying function to local blocks . <EoL>
<BoL> Block view of the input n-dimensional array ( using re-striding ) . <EoL>
<BoL> Compute the mean-squared error between two images . <EoL>
<BoL> Compute the normalized root mean-squared error ( NRMSE ) between two <EoL>
<BoL> Compute the peak signal to noise ratio ( PSNR ) for an image . <EoL>
<BoL> Calculate the Shannon entropy of an image . <EoL>
<BoL> Determine number trials such that at least one outlier-free subset is <EoL>
<BoL> NumPy < 1.8 does not support the ` axis ` argument for ` np.linalg.norm ` . <EoL>
<BoL> Test whether points on a specified grid are inside a polygon . <EoL>
<BoL> Test whether points lie inside a polygon . <EoL>
<BoL> Return the coordinates of the profile of an image along a scan line . <EoL>
<BoL> Promote im1 , im2 to nearest appropriate floating point precision . <EoL>
<BoL> Raise an error if the shape and dtype do not match . <EoL>
<BoL> Returns all combinations of shifts in n dimensions over the specified <EoL>
<BoL> Apply np.roll along a set of axes . <EoL>
<BoL> BayesShrink threshold for a zero-mean details coeff array . <EoL>
<BoL> Perform total-variation denoising on n-dimensional images . <EoL>
<BoL> Calculate the robust median estimator of the noise standard deviation . <EoL>
<BoL> Universal threshold used by the VisuShrink method <EoL>
<BoL> Perform total-variation denoising using split-Bregman optimization . <EoL>
<BoL> Robust wavelet-based estimator of the ( Gaussian ) noise standard deviation . <EoL>
<BoL> Richardson-Lucy deconvolution . <EoL>
<BoL> Wiener-Hunt deconvolution <EoL>
<BoL> Inpaint masked points in image with biharmonic equations . <EoL>
<BoL> Return the quadratic norm of images in Fourier space . <EoL>
<BoL> Compute the transfer function of an impulse response ( IR ) . <EoL>
<BoL> 2-dimensional unitary Fourier transform . <EoL>
<BoL> N-dimensional unitary Fourier transform . <EoL>
<BoL> 2-dimensional inverse unitary Fourier transform . <EoL>
<BoL> N-dimensional unitary inverse Fourier transform . <EoL>
<BoL> 2-dimensional inverse real unitary Fourier transform . <EoL>
<BoL> N-dimensional inverse real unitary Fourier transform . <EoL>
<BoL> 2-dimensional real unitary Fourier transform <EoL>
<BoL> N-dimensional real unitary Fourier transform . <EoL>
<BoL> Recover the original from a wrapped phase image . <EoL>
<BoL> Combine this transformation with another . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Determine residuals of transformed destination coordinates . <EoL>
<BoL> Combine this transformation with another . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Setup and solve the homogeneous epipolar constraint matrix : : <EoL>
<BoL> Estimate essential matrix using 8-point algorithm . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Compute the Sampson distance . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Estimate fundamental matrix using 8-point algorithm . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Center and normalize image points . <EoL>
<BoL> Convert from ` numpy.pad ` mode name to the corresponding ndimage mode . <EoL>
<BoL> Estimate N-D similarity transformation with or without scaling . <EoL>
<BoL> Estimate 2D geometric transformation parameters . <EoL>
<BoL> Apply 2D matrix transform . <EoL>
<BoL> Clip output image to range of values of input image . <EoL>
<BoL> Copy b into each color layer of a , such that : : <EoL>
<BoL> Down-sample N-dimensional image by local averaging . <EoL>
<BoL> Build the source coordinates for the output of a 2-D image warp . <EoL>
<BoL> Compute the 2-dimensional finite radon transform ( FRT ) for an n x n <EoL>
<BoL> Compute the 2-dimensional inverse finite radon transform ( iFRT ) for <EoL>
<BoL> Perform a circular Hough transform . <EoL>
<BoL> Perform an elliptical Hough transform . <EoL>
<BoL> Perform a straight line Hough transform . <EoL>
<BoL> Use an integral image to integrate over a given window . <EoL>
<BoL> Order angles to reduce the amount of correlated information <EoL>
<BoL> Return image with each channel smoothed by the Gaussian filter . <EoL>
<BoL> Calculates the radon transform of an image given specified <EoL>
<BoL> Carve vertical or horizontal seams off an image . <EoL>
<BoL> Invert an image . <EoL>
<BoL> Find ` n_points ` regularly spaced along ` ar_shape ` . <EoL>
<BoL> Return an image with ~ ` n_points ` regularly-spaced nonzero pixels . <EoL>
<BoL> Function to add random noise of various types to a floating-point image . <EoL>
<BoL> Rolling window view of the input n-dimensional array . <EoL>
<BoL> Remove repeated rows from a 2D array . <EoL>
<BoL> Private constructor . <EoL>
<BoL> Iterate over the names of attributes.Callback to gather attribute names <EoL>
<BoL> Decode a name according to the current file settings . <EoL>
<BoL> Encode a name according to the current file settings.Create an appropriate link creation property list <EoL>
<BoL> Create a new attribute , overwriting any existing attribute . <EoL>
<BoL> Get a view object on member items <EoL>
<BoL> Get a view object on member names <EoL>
<BoL> Change the value of an attribute while preserving its type . <EoL>
<BoL> Get a view object on member objects <EoL>
<BoL> Get a context manager allowing you to perform reads to a <EoL>
<BoL> The size of the first axis . TypeError if scalar . <EoL>
<BoL> Read data directly from HDF5 into an existing NumPy array . <EoL>
<BoL> Resize the dataset , or the specified axis . <EoL>
<BoL> Write data directly to HDF5 from a NumPy array . <EoL>
<BoL> Add an object to the group . The name must not already be in use . <EoL>
<BoL> Close the file . All open objects become invalid <EoL>
<BoL> Create a new HDF5 dataset <EoL>
<BoL> Create and return a new subgroup . <EoL>
<BoL> Tell the HDF5 library to flush its buffers . <EoL>
<BoL> Retrieve an item or other information . <EoL>
<BoL> Move a link to a new location in the file . <EoL>
<BoL> Open a dataset , creating it if it does n't exist . <EoL>
<BoL> Return a group , creating it if it does n't exist . <EoL>
<BoL> Recursively visit all names in this group and subgroups ( HDF5 1.8 ) .Call the function with the text name , not bytes <EoL>
<BoL> Recursively visit names and objects in this group ( HDF5 1.8 ) .Use the text name of the object , not bytes <EoL>
<BoL> Create a new Group object by binding to a low-level GroupID . <EoL>
<BoL> Decode filename used by HDF5 library . <EoL>
<BoL> Encode filename for use in the HDF5 library . <EoL>
<BoL> Check if an object 's dataspace is empty <EoL>
<BoL> Make a NumPy dtype appropriate for reading <EoL>
<BoL> Get the shape of the target dataspace selection referred to by *ref* <EoL>
<BoL> Get the shape of the target dataspace referred to by *ref* . <EoL>
<BoL> Default link access property list <EoL>
<BoL> Default link creation property list <EoL>
<BoL> Attempt to guess an appropriate dtype for the object , returning None <EoL>
<BoL> Determine if a file is valid HDF5 ( False if it does n't exist ) . <EoL>
<BoL> Decode filename from the filesystem encoding with 'surrogateescape ' error <EoL>
<BoL> Encode filename to the filesystem encoding with 'surrogateescape ' error <EoL>
<BoL> Decode filename ( an os.PathLike , bytes , or str ) from the filesystem <EoL>
<BoL> Encode filename ( an os.PathLike , bytes , or str ) to the filesystem <EoL>
<BoL> Set up a file access property list <EoL>
<BoL> Get a new FileID by opening or creating a file . <EoL>
<BoL> Register a custom driver . <EoL>
<BoL> Return a frozenset of the names of all of the registered drivers . <EoL>
<BoL> Unregister a custom driver . <EoL>
<BoL> Bootstrap function to figure out what filters are available . <EoL>
<BoL> Check if chunks/maxshape match dataset rank <EoL>
<BoL> Extract a dictionary of active filters from a DCPL , along with <EoL>
<BoL> Guess an appropriate chunk layout for a dataset , given its shape and <EoL>
<BoL> Perform point-wise selection from a NumPy boolean array <EoL>
<BoL> Create a selection . Shape may be None if spaceid is given . <EoL>
<BoL> Internal method which actually performs the selection <EoL>
<BoL> Add the sequence of points to the end of the current selection <EoL>
<BoL> Get an iterable for broadcasting <EoL>
<BoL> Add the sequence of points to the beginning of the current selection <EoL>
<BoL> Replace the current selection with the given sequence of points <EoL>
<BoL> Return an iterator over target dataspaces for broadcasting . <EoL>
<BoL> Expand ellipsis objects and fill in missing axes . <EoL>
<BoL> Process a `` simple '' selection tuple , containing only slices and <EoL>
<BoL> Given an integer index , return a 3-tuple <EoL>
<BoL> Given a slice object , return a 3-tuple <EoL>
<BoL> Given a dataspace , try to deduce the shape of the selection.Determine the number of elements selected along a particular axis . <EoL>
<BoL> High-level routine to generate a selection from arbitrary arguments <EoL>
<BoL> Returns a 2-tuple containing : <EoL>
<BoL> Returns a 2-tuple containing : <EoL>
<BoL> Top-level dispatch function for reading . <EoL>
<BoL> Call this from an interactive IPython session to enable tab-completion <EoL>
<BoL> Run tests with TextTestRunner and returns a TestResult instance . <EoL>
<BoL> Threaded cached implementation of dask.get <EoL>
<BoL> > > > import dask.array as da <EoL>
<BoL> The indices of the top k elements of an array . <EoL>
<BoL> Copy of the array , cast to a specified type . <EoL>
<BoL> Compute this dask collection <EoL>
<BoL> Copy array . This is a no-op for dask.arrays , which are immutable <EoL>
<BoL> See da.cumprod for docstring <EoL>
<BoL> See da.cumsum for docstring <EoL>
<BoL> Map a function across all blocks of a dask array . <EoL>
<BoL> Map a function over blocks of the array with some overlap <EoL>
<BoL> Persist this dask collection into memory <EoL>
<BoL> See da.rechunk for docstring <EoL>
<BoL> Convert dask Array to dask Dataframe <EoL>
<BoL> Convert into an array of `` dask.delayed `` objects , one per chunk . <EoL>
<BoL> Store array in HDF5 file <EoL>
<BoL> Save array to the zarr storage format <EoL>
<BoL> The top k elements of an array . <EoL>
<BoL> Get a view of the array as a new data type <EoL>
<BoL> Apply a generalized ufunc or similar python function to arrays . <EoL>
<BoL> Return evenly spaced values from ` start ` to ` stop ` with step size ` step ` . <EoL>
<BoL> Extract the indices of the k largest elements from a on the given axis , <EoL>
<BoL> Decorator for `` dask.array.gufunc `` . <EoL>
<BoL> Convert the input to a dask array . <EoL>
<BoL> Convert the input to a dask array . <EoL>
<BoL> Tensor operation : Generalized inner and outer products <EoL>
<BoL> Assemble an nd-array from nested lists of blocks . <EoL>
<BoL> Broadcast an array to a new shape . <EoL>
<BoL> Chunk and combine function of argtopk <EoL>
<BoL> Final aggregation function of argtopk <EoL>
<BoL> Preparatory step for argtopk <EoL>
<BoL> Coarsen array by applying reduction to fixed size neighborhoods <EoL>
<BoL> Concatenate zero or more iterables , any of which may be infinite . <EoL>
<BoL> > > > list ( flatten ( [ 1 ] ) ) <EoL>
<BoL> A wrapper for functions that do n't provide keepdims to ensure that they do . <EoL>
<BoL> Chunk function of ` slice_with_int_dask_array_on_axis ` . <EoL>
<BoL> Final aggregation function of ` slice_with_int_dask_array_on_axis ` . <EoL>
<BoL> Take values from the input array by matching 1d index and data slices . <EoL>
<BoL> Chunk and combine function of topk <EoL>
<BoL> Final aggregation function of topk <EoL>
<BoL> Trim boundaries off of array <EoL>
<BoL> Compute several dask collections at once . <EoL>
<BoL> Concatenate arrays along an existing axis <EoL>
<BoL> bind operator to this class <EoL>
<BoL> Call the corresponding method based on type of argument . <EoL>
<BoL> Return the function implementation for the given `` cls `` <EoL>
<BoL> Register dispatch of ` func ` on arguments of type ` type ` <EoL>
<BoL> Register a registration function which will be called if the <EoL>
<BoL> Iterate over x , yielding ( index , value , entering ) , where <EoL>
<BoL> Check if the chunks are regular <EoL>
<BoL> Recursively Concatenate nested lists of arrays along axes <EoL>
<BoL> Calls a function and converts its result to the given dtype . <EoL>
<BoL> Get axis along which point-wise slicing results lie <EoL>
<BoL> Create a TOP symbolic mutable mapping , given the inputs to top <EoL>
<BoL> Point wise indexing with broadcasting . <EoL>
<BoL> Point wise indexing with only NumPy Arrays . <EoL>
<BoL> > > > locations = [ 0 ] , [ 2 , 1 ] <EoL>
<BoL> Pull out point-wise slices from block <EoL>
<BoL> Rotate block so that points are on the first dimension <EoL>
<BoL> Repeatedly apply binary function to a sequence , accumulating results <EoL>
<BoL> Tries to infer output dtype of `` func `` for a small set of input arguments . <EoL>
<BoL> Return a new dict with new key value pair <EoL>
<BoL> Determine automatic chunks <EoL>
<BoL> > > > blockdims_from_blockshape ( ( 10 , 10 ) , ( 4 , 3 ) ) <EoL>
<BoL> Construct a chunks tuple that broadcasts many chunks tuples <EoL>
<BoL> Determines output shape from broadcasting arrays . <EoL>
<BoL> Chunks tuple from nested list of arrays <EoL>
<BoL> Find the common block dimensions from the list of block dimensions <EoL>
<BoL> Compute a graph as if it were of type cls . <EoL>
<BoL> Recursive np.concatenate <EoL>
<BoL> Recursively call np.concatenate along axes <EoL>
<BoL> Make nested iterators concrete lists <EoL>
<BoL> First element in a nested list <EoL>
<BoL> Decorator to attach original class 's docstring to the wrapped method . <EoL>
<BoL> Dot product of many aligned chunks <EoL>
<BoL> Apply elementwise function across arguments <EoL>
<BoL> Return the factors of an integer <EoL>
<BoL> The first element in a sequence <EoL>
<BoL> Find number of occurrences of each value in seq <EoL>
<BoL> Create a dask array from a dask delayed value <EoL>
<BoL> Create dask array in a single block by calling a function <EoL>
<BoL> Load dask array from stack of npy files <EoL>
<BoL> Load array from the zarr storage format <EoL>
<BoL> Get the name of a function . <EoL>
<BoL> Fuse stacked slices together <EoL>
<BoL> A getter function that optimizations feel comfortable inlining <EoL>
<BoL> A simple wrapper around `` getter `` . <EoL>
<BoL> Allow function to be taken over by globals <EoL>
<BoL> Group a collection by a key function <EoL>
<BoL> Handle out parameters <EoL>
<BoL> > > > interleave_none ( [ 0 , None , 2 , None ] , [ 1 , 3 ] ) <EoL>
<BoL> Returns `` True `` if `` x `` is a dask collection <EoL>
<BoL> > > > is_integer ( 6 ) <EoL>
<BoL> > > > is_scalar_for_elemwise ( 42 ) <EoL>
<BoL> Join two sequences on common attributes <EoL>
<BoL> > > > keyname ( 'x ' , 3 , [ None , None , 0 , 2 ] ) <EoL>
<BoL> A function inserted in a Dask graph for storing a chunk . <EoL>
<BoL> Call a function on every element within a nested container <EoL>
<BoL> Normalize user provided arguments to atop or map_blocks <EoL>
<BoL> Offsets inputs by offset <EoL>
<BoL> Parse byte string to numbers <EoL>
<BoL> Partition sequence into tuples of length n <EoL>
<BoL> Persist multiple Dask collections into memory <EoL>
<BoL> Ensure that this value remains this value in a dask graph <EoL>
<BoL> Replace ... with slices , : , : , : <EoL>
<BoL> Reshape iterator to nested shape <EoL>
<BoL> Creates a Dask graph for loading stored `` keys `` from `` dsk `` . <EoL>
<BoL> Return a chunk dimension that is close to an even multiple or factor <EoL>
<BoL> Get the shape of nested list <EoL>
<BoL> Master function for array slicing <EoL>
<BoL> Translate chunks tuple to a set of slices in product order <EoL>
<BoL> Stack arrays along a new axis <EoL>
<BoL> Store arrays in HDF5 file <EoL>
<BoL> Write dask array to a stack of .npy files <EoL>
<BoL> Deterministic token <EoL>
<BoL> Tensor operation <EoL>
<BoL> Permute axes of nested list <EoL>
<BoL> Unify chunks across a sequence of arrays <EoL>
<BoL> > > > unpack_singleton ( [ [ [ [ 1 ] ] ] ] ) <EoL>
<BoL> Apply function to values of dictionary <EoL>
<BoL> > > > lol = [ ( 'x ' , 1 , 0 ) , ( 'x ' , 1 , 1 ) , ( 'x ' , 1 , 2 ) ] <EoL>
<BoL> Return a new array with the same shape and type as a given array . <EoL>
<BoL> Return a 2-D Array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Return a full array with the same shape and type as a given array . <EoL>
<BoL> Implements NumPy 's `` indices `` for Dask Arrays . <EoL>
<BoL> Return an array of ones with the same shape and type as a given array . <EoL>
<BoL> Helper function for padding edges . <EoL>
<BoL> Helper function for padding boundaries with values in the array . <EoL>
<BoL> Helper function for padding boundaries with statistics from the array . <EoL>
<BoL> Helper function for padding boundaries with a user defined function . <EoL>
<BoL> A sequence of overlapping subsequences <EoL>
<BoL> Lower triangle of an array with elements above the ` k ` -th diagonal zeroed . <EoL>
<BoL> Upper triangle of an array with elements above the ` k ` -th diagonal zeroed . <EoL>
<BoL> Return an array of zeros with the same shape and type as a given array . <EoL>
<BoL> A reproduction of numpy 's _parse_einsum_input ( ) <EoL>
<BoL> For computing the output chunks of [ i ] fft* <EoL>
<BoL> For computing the output chunks of irfft* <EoL>
<BoL> For computing the output chunks of rfft* <EoL>
<BoL> Wrap 1D , 2D , and ND real and complex FFT functions <EoL>
<BoL> Reverse element order along axis . <EoL>
<BoL> Blocked variant of : func : ` numpy.histogram ` . <EoL>
<BoL> pandas.isnull for dask arrays <EoL>
<BoL> Wrap numpy random function to produce dask.array random function <EoL>
<BoL> Private function to perform Cholesky decomposition , which returns both <EoL>
<BoL> A wrapper for np.linalg.qr that handles arrays with 0 rows <EoL>
<BoL> Returns the Cholesky decomposition , : math : ` A = L L^* ` or <EoL>
<BoL> Compression level to use in svd_compressed <EoL>
<BoL> Randomly sample matrix to find most active subspace <EoL>
<BoL> Compute the inverse of a matrix with LU decomposition and <EoL>
<BoL> Return the least-squares solution to a linear matrix equation using <EoL>
<BoL> Compute the lu decomposition of a matrix . <EoL>
<BoL> Compute the qr factorization of a matrix . <EoL>
<BoL> Direct Short-and-Fat QR <EoL>
<BoL> Solve the equation `` a x = b `` for `` x `` . By default , use LU <EoL>
<BoL> Solve the equation ` a x = b ` for ` x ` , assuming a is a triangular matrix . <EoL>
<BoL> Compute the singular value decomposition of a matrix . <EoL>
<BoL> Randomly compressed rank-k thin Singular Value Decomposition . <EoL>
<BoL> Direct Tall-and-Skinny QR algorithm <EoL>
<BoL> Copies some attributes of obj to self.Finalizes the masked array.Special hook for ufuncs.Return a view of the MaskedArray dataReturns a copy of the MaskedArray cast to given newtype.x.__getitem__ ( y ) < == > x [ y ] Return whether ` elem ` is a scalar result of indexing ` arr ` , or Nonex.__setitem__ ( i , y ) < == > x [ i ] =ySet the mask.Return the current mask.Return the mask of the records.Return the mask of the records.Force the mask to hard.Force the mask to soft.Copy the mask and set the sharedmask flag to False.Reduce a mask to nomask when possible.Return the current data , as a view of the originalReturn the filling value of the masked array.Set the filling value of the masked array.Return a copy of self , with masked values filled with a given value.Return all the non-masked data as a 1-D array.Return ` a ` where condition is `` True `` .Replace masked values with masked_print_option , casting all innermostLiteral string representation.Compare self with other using operator.eq or operator.ne.Check whether other equals self elementwise.Check whether other does not equal self elementwise.Add self to other , and return a new masked array.Add other to self , and return a new masked array.Subtract other from self , and return a new masked array.Subtract self from other , and return a new masked array.Multiply other by self , and return a new masked array.Divide other into self , and return a new masked array.Divide other into self , and return a new masked array.Divide self into other , and return a new masked array.Divide other into self , and return a new masked array.Divide self into other , and return a new masked array.Raise self to the power other , masking the potential NaNs/InfsRaise other to the power self , masking the potential NaNs/InfsAdd other to self in-place.Subtract other from self in-place.Multiply self by other in-place.Divide self by other in-place.Floor divide self by other in-place.True divide self by other in-place.Raise self to the power other , in place.Convert to float.Convert to int.Convert to long.Return the imaginary part of the masked array.Return the real part of the masked array.Count the non-masked elements of the array along the given axis.Returns a 1D version of self , as a view.Give a new shape to the array without changing its data ... warning : :Set storage-indexed locations to corresponding values.Return the addresses of the data and mask areas.Return a boolean indicating whether the data is contiguous.Returns True if all elements evaluate to True.Returns True if any of the elements of ` a ` evaluate to True.Return the indices of unmasked elements that are not zero . ( this docstring should be overwritten ) a.dot ( b , out=None ) Return the sum of the array elements over the given axis.Return the cumulative sum of the array elements over the given axis.Return the product of the array elements over the given axis.Return the cumulative product of the array elements over the given axis.Returns the average of the array elements along given axis.Compute the anomalies ( deviations from the arithmetic mean ) Returns the variance of the array elements along given axis.Returns the standard deviation of the array elements along given axis.Return each element rounded to the given number of decimals.Return an ndarray of indices that sort the array along theReturn array of indices to the minimum values along the given axis.Returns array of indices of the maximum values along the given axis.Sort the array , in-placeReturn the minimum along a given axis.Return the array minimum along the specified axis.Return the maximum along a given axis.Return ( maximum - minimum ) along the given dimensionReturn the data portion of the masked array as a hierarchical Python list.This function is a compatibility alias for tobytes . Despite its name itReturn the array data as a string containing the raw bytes in the array.Save a masked array to a file in binary format.Transforms a masked array into a flexible-type array.Return the internal state of the masked array , for picklingRestore the internal state of the masked array , forReturn a 3-tuple for pickling a MaskedArray . <EoL>
<BoL> Map a function over blocks of the array with some overlap <EoL>
<BoL> pandas.notnull for dask arrays <EoL>
<BoL> Implementation of numpy.divide that works with dtype kwarg . <EoL>
<BoL> Return new dask with only the tasks required to calculate keys . <EoL>
<BoL> Find keys to avoid fusion <EoL>
<BoL> Replace Nones in slices with integers <EoL>
<BoL> High level optimization of stacked TOP layers <EoL>
<BoL> Optimize slices <EoL>
<BoL> > > > a , b , c = 'abc ' <EoL>
<BoL> Similar to dask.array.chunk.trim but requires one to specificy the <EoL>
<BoL> Pads an array which has 'none ' as the boundary type . <EoL>
<BoL> Add boundary conditions to an array before overlaping <EoL>
<BoL> Add constant slice to either side of array <EoL>
<BoL> Get all neighboring keys around center <EoL>
<BoL> > > > fractional_slice ( ( 'x ' , 5.1 ) , { 0 : 2 } ) # doctest : +SKIP <EoL>
<BoL> Merge a collection of dictionaries <EoL>
<BoL> Each reflect each boundary value outwards <EoL>
<BoL> Share boundaries between neighboring blocks <EoL>
<BoL> Share boundaries between neighboring blocks <EoL>
<BoL> Copy a slice of an array around to its other side <EoL>
<BoL> Pipe a value through a sequence of functions <EoL>
<BoL> Reflect boundaries of array on the same side <EoL>
<BoL> Trim sides from each block <EoL>
<BoL> Trim sides from each block . <EoL>
<BoL> Approximate percentile of 1-D array <EoL>
<BoL> Apply RandomState method with seed <EoL>
<BoL> Copy docstring from one function to another <EoL>
<BoL> Return a list of arrays that can initialize <EoL>
<BoL> Convert blocks in dask array x for new chunks . <EoL>
<BoL> Merge intermediate results from `` arg_* `` functions <EoL>
<BoL> Generic function for argreduction . <EoL>
<BoL> Compose functions to operate in series . <EoL>
<BoL> Generic function for cumulative reduction <EoL>
<BoL> Get element in a sequence or dict <EoL>
<BoL> Version of inspect.getargspec that works with partial and warps . <EoL>
<BoL> List of list of tuple keys <EoL>
<BoL> Create an argreduction callable <EoL>
<BoL> A reduction to count the number of elements <EoL>
<BoL> A reduction to count the number of elements <EoL>
<BoL> Partial reduction across multiple axes . <EoL>
<BoL> Partition all elements of sequence into tuples of length at most n <EoL>
<BoL> plucks an element or several elements from each item in a sequence . <EoL>
<BoL> Extract the k largest elements from a on the given axis , <EoL>
<BoL> Validate an input to axis= keywords <EoL>
<BoL> Reshape array to new shape <EoL>
<BoL> x : nd-array <EoL>
<BoL> Helper/wrapper function for : func : ` numpy.unique ` . <EoL>
<BoL> Interleave a sequence of sequences <EoL>
<BoL> Like functools.wraps , but safe to use even if wrapped is not a function . <EoL>
<BoL> Split an array into a list of arrays ( using slices ) at the given breaks <EoL>
<BoL> Sanitize a one-element index . <EoL>
<BoL> Returns a dict of { blocknum : slice } <EoL>
<BoL> Check validity of index for a given dimension <EoL>
<BoL> Create a function to insert value at many locations in sequence . <EoL>
<BoL> Is sequence sorted ? <EoL>
<BoL> > > > new_blockdim ( 100 , [ 20 , 10 , 20 , 10 , 40 ] , slice ( 0 , 90 , 2 ) ) <EoL>
<BoL> Normalize slicing indexes <EoL>
<BoL> Normalize slices to canonical form <EoL>
<BoL> > > > partition_by_size ( [ 10 , 20 , 10 ] , [ 1 , 5 , 9 , 12 , 29 , 35 ] ) <EoL>
<BoL> Flip negative indices around to positive ones <EoL>
<BoL> Sanitize the elements for indexing along one axis <EoL>
<BoL> Dask array indexing with slices and integers <EoL>
<BoL> Slice x with one or more dask arrays of bools <EoL>
<BoL> Slice x with at most one 1D dask arrays of ints . <EoL>
<BoL> Slice a ND dask array with a 1D dask arrays of ints along the given <EoL>
<BoL> Handle indexing with Nones <EoL>
<BoL> Fancy indexing along blocked array dasks <EoL>
<BoL> Construct a plan to slice chunks with the given index <EoL>
<BoL> Index array with an iterable of index <EoL>
<BoL> A simple subs function that works both on tuples and strings <EoL>
<BoL> Rewrite a stack of atop expressions into a single atop expression <EoL>
<BoL> Create a new task with the values substituted <EoL>
<BoL> Normalize a python object and merge all sub-graphs . <EoL>
<BoL> Wrap up numpy function into dask.array <EoL>
<BoL> Check that graph is well named and non-overlapping <EoL>
<BoL> Transform np creation function into blocked version <EoL>
<BoL> Convert ( r , g , b ) triple to `` # RRGGBB '' string <EoL>
<BoL> Given a list of dask vals , return a single graph and a list of keys such <EoL>
<BoL> Convert many collections into a single dask graph , after optimization <EoL>
<BoL> Get scheduler function <EoL>
<BoL> Same as hash_buffer , but returns its result in hex-encoded form . <EoL>
<BoL> Identity function . Return x <EoL>
<BoL> Optimize several dask collections at once . <EoL>
<BoL> Get value from Dask <EoL>
<BoL> Extract collections in preparation for compute/persist/etc ... <EoL>
<BoL> Visualize several dask graphs at once . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Return buffered data without advancing the file position . <EoL>
<BoL> Read up to size uncompressed bytes from the file . <EoL>
<BoL> Read up to size uncompressed bytes , while trying to avoid <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read a line of uncompressed bytes from the file . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a bytes object to the file . <EoL>
<BoL> Compress data in one shot and return the compressed string . <EoL>
<BoL> Decompress a gzip compressed string in one shot . <EoL>
<BoL> Compress a block of data . <EoL>
<BoL> Decompress a block of data . <EoL>
<BoL> Close all encapsulated file objects <EoL>
<BoL> Returns a function that receives a single integer <EoL>
<BoL> Expand paths if they have a `` * `` in them . <EoL>
<BoL> Create a filesystem object from a protocol and options . <EoL>
<BoL> Get the hdfs driver implementation . <EoL>
<BoL> Get an equivalent pyarrow filesystem . <EoL>
<BoL> Attempt to import a required dependency . <EoL>
<BoL> Infer storage options from URL path and merge it with existing storage <EoL>
<BoL> Read a block of bytes from a file <EoL>
<BoL> Parameters <EoL>
<BoL> Get an equivalent pyarrow filesystem <EoL>
<BoL> Ensure paths are absolute and normalized <EoL>
<BoL> For a template path , return matching files <EoL>
<BoL> Make any intermediate directories to make path writable <EoL>
<BoL> Make a file-like object <EoL>
<BoL> Size in bytes of the file at path <EoL>
<BoL> Unique identifier , so we can tell if a file changed <EoL>
<BoL> Seek current file to next byte after a delimiter bytestring <EoL>
<BoL> Parse a URL into 5 components : <EoL>
<BoL> Allows callbacks to work with nested schedulers . <EoL>
<BoL> Normalizes a callback to a tuple <EoL>
<BoL> Take an iterable of callbacks , return a list of each callback . <EoL>
<BoL> Open a bzip2-compressed file . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Return buffered data without advancing the file position . <EoL>
<BoL> Read up to size uncompressed bytes from the file . <EoL>
<BoL> Read up to size uncompressed bytes , while trying to avoid <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read bytes into b . <EoL>
<BoL> Read a line of uncompressed bytes from the file . <EoL>
<BoL> Read a list of lines of uncompressed bytes from the file . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a byte string to the file . <EoL>
<BoL> Write a sequence of byte strings to the file . <EoL>
<BoL> S.pop ( [ index ] ) - > item -- remove and return item at index ( default last ) . <EoL>
<BoL> S.remove ( value ) -- remove first occurrence of value . <EoL>
<BoL> Bind a method to class <EoL>
<BoL> Get all non `` *args/**kwargs `` arguments for a function <EoL>
<BoL> Parse a URL into 6 components : <EoL>
<BoL> Collect configuration from paths and environment variables <EoL>
<BoL> Collect config from environment variables <EoL>
<BoL> Collect configuration from yaml files <EoL>
<BoL> Expand environment variables in a nested config dictionary <EoL>
<BoL> Get elements from global config <EoL>
<BoL> Update a sequence of nested dictionaries <EoL>
<BoL> Update configuration by re-reading yaml files and env variables <EoL>
<BoL> Rename old keys to new keys <EoL>
<BoL> Assign value into a nested configuration dictionary <EoL>
<BoL> Update a nested dictionary with values from another <EoL>
<BoL> Add a new set of defaults to the configuration <EoL>
<BoL> Deprecated : see dask.config.set instead <EoL>
<BoL> Get the immediate tasks on which this task depends <EoL>
<BoL> Get dependencies and dependents from dask dask graph <EoL>
<BoL> Return a list of nodes that form a cycle if Dask is not a DAG . <EoL>
<BoL> Whether `` x `` has anything to compute . <EoL>
<BoL> Does Dask form a directed acyclic graph when calculating keys ? <EoL>
<BoL> Is x hashable ? <EoL>
<BoL> Is x a runnable task ? <EoL>
<BoL> A generator to preorder-traverse a task . <EoL>
<BoL> Perform a substitution on a task <EoL>
<BoL> Return a list of keys of dask sorted in topological order . <EoL>
<BoL> Generate data for a single partition of a dask bag <EoL>
<BoL> Make a Dask Bag filled with data randomly generated by the mimesis projet <EoL>
<BoL> Make a dataset of random people <EoL>
<BoL> A naive synchronous version of get_async <EoL>
<BoL> Produce a 20-bytes hash of *buf* using SHA1 . <EoL>
<BoL> Hash a bytes-like ( buffer-compatible ) object . This function returns <EoL>
<BoL> Do the actual work of collecting data and executing a function <EoL>
<BoL> A naive synchronous version of apply_async <EoL>
<BoL> Default get_id <EoL>
<BoL> Compute task and handle all administration <EoL>
<BoL> Fire off a task to the thread pool <EoL>
<BoL> Identity function . Returns x . <EoL>
<BoL> Get nested index from collection <EoL>
<BoL> Order nodes in dask graph <EoL>
<BoL> Remove data from temporary storage <EoL>
<BoL> Sorting key function that is robust to different types <EoL>
<BoL> Start state from a dask <EoL>
<BoL> Return the current multiprocessing context . <EoL>
<BoL> Initialize a worker process before running any tasks in it . <EoL>
<BoL> Metaclass that wraps exception type in RemoteException <EoL>
<BoL> Subroutine of fuse . <EoL>
<BoL> Create new keys for `` fuse `` tasks <EoL>
<BoL> Create new keys for fused tasks <EoL>
<BoL> Set of functions contained within nested task <EoL>
<BoL> Fuse getitem with lower operation <EoL>
<BoL> Return new dask graph with linear sequence of tasks fused together . <EoL>
<BoL> Fuse selections with lower operation . <EoL>
<BoL> Return new dask with the given keys inlined with their values . <EoL>
<BoL> > > > key_split ( 'x ' ) <EoL>
<BoL> Number of total data elements on which this key depends <EoL>
<BoL> Number of total data elements that depend on key <EoL>
<BoL> Count the number of items in seq <EoL>
<BoL> Return only unique elements of a sequence <EoL>
<BoL> Return the current Thread object , corresponding to the caller 's thread of control . <EoL>
<BoL> Must return a method used by binary operator <EoL>
<BoL> Must return a method used by unary operator <EoL>
<BoL> Formats an ascii table for given columns and rows . <EoL>
<BoL> Apply function inside nested lists <EoL>
<BoL> > > > digit ( 1234 , 0 , 10 ) <EoL>
<BoL> Turn string or bytes to bytes <EoL>
<BoL> Ensure that a file does not exist . <EoL>
<BoL> Turn string or bytes to bytes <EoL>
<BoL> Dumps a number of textfiles to disk <EoL>
<BoL> Get an instance of the appropriate lock for a certain situation based on <EoL>
<BoL> Import a module . <EoL>
<BoL> > > > insert ( ( 'a ' , 'b ' , 'c ' ) , 0 , 'x ' ) <EoL>
<BoL> Is this object a numpy array or something similar ? <EoL>
<BoL> Sorting ` key ` function for performing a natural sort on a collection of <EoL>
<BoL> > > > from operator import add <EoL>
<BoL> Pseudorandom array of integer indexes <EoL>
<BoL> Does this function take multiple arguments ? <EoL>
<BoL> Turn off axis labels and legend . <EoL>
<BoL> Finalize the annotations and layout . <EoL>
<BoL> Get a list of colors for the hue variable . <EoL>
<BoL> Extract the legend data from an axes object and save it . <EoL>
<BoL> Remove axis spines from the facets . <EoL>
<BoL> Make the axis identified by these indices active and return it . <EoL>
<BoL> Generator for name indices and data subsets for each facet . <EoL>
<BoL> Apply a plotting function to each facet 's subset of the data . <EoL>
<BoL> Like `` .map `` but passes args as strings and inserts data in kwargs . <EoL>
<BoL> Save the figure . <EoL>
<BoL> Set attributes on each subplot Axes . <EoL>
<BoL> Set axis labels on the left column and bottom row of the grid . <EoL>
<BoL> Label the x axis on the bottom row of the grid . <EoL>
<BoL> Set x axis tick labels on the bottom row of the grid . <EoL>
<BoL> Label the y axis on the left column of the grid . <EoL>
<BoL> Set y axis tick labels on the left column of the grid . <EoL>
<BoL> Annotate the plot with a statistic about the relationship . <EoL>
<BoL> Shortcut to draw the full plot . <EoL>
<BoL> Draw a bivariate plot of ` x ` and ` y ` . <EoL>
<BoL> Draw univariate plots for ` x ` and ` y ` separately . <EoL>
<BoL> Wrap figure.savefig defaulting to tight bounding box . <EoL>
<BoL> Set the axis labels on the bivariate axes . <EoL>
<BoL> Add labels to the left and bottom Axes . <EoL>
<BoL> Find which variables in a DataFrame are numeric . <EoL>
<BoL> Plot with the same function in every subplot . <EoL>
<BoL> Plot with a univariate function on each diagonal subplot . <EoL>
<BoL> Plot with a bivariate function on the lower diagonal subplots . <EoL>
<BoL> Plot with a bivariate function on the off-diagonal subplots . <EoL>
<BoL> Plot with a bivariate function on the upper diagonal subplots . <EoL>
<BoL> Bootstrap by resampling from a kernel density estimate . <EoL>
<BoL> Resample units instead of datapoints . <EoL>
<BoL> Resample one or more arrays with replacement and store aggregate values . <EoL>
<BoL> Return a parameter dict for the aesthetic style of the plots . <EoL>
<BoL> Calculate number of hist bins using Freedman-Diaconis rule . <EoL>
<BoL> Make a palette that blends between a list of colors . <EoL>
<BoL> Return a list of colors defining a color palette . <EoL>
<BoL> Group a long-form variable by another with correct order . <EoL>
<BoL> Add a dummy patch object so we can get legend data . <EoL>
<BoL> Add descriptive labels to an Axes object . <EoL>
<BoL> Draw the bars onto ` ax ` . <EoL>
<BoL> Get a list of colors for the main component of the plots . <EoL>
<BoL> Determine how the plot should be oriented based on the data . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Use matplotlib to draw a boxplot on an Axes . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Take a drawn matplotlib boxplot and make it look nice . <EoL>
<BoL> Add empty scatterplot artists with labels for the legend . <EoL>
<BoL> Get the number of data points and calculate ` depth ` of <EoL>
<BoL> Find the outliers based on the letter value depth . <EoL>
<BoL> Use matplotlib to draw a letter value plot on an Axes . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Draw the main data components of the plot . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Draw the points onto ` ax ` . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Stop points from extending beyond their territory . <EoL>
<BoL> Adjust x position of points to avoid overlaps . <EoL>
<BoL> Return a list of all swarm points that could overlap with target . <EoL>
<BoL> Plot the data . <EoL>
<BoL> Remove candidates from the list if they overlap with the swarm . <EoL>
<BoL> Make the full plot . <EoL>
<BoL> Return a list of ( x , y ) coordinates that might be valid . <EoL>
<BoL> Find new positions on the categorical axis for each point . <EoL>
<BoL> Draw boxplot information at center of the density . <EoL>
<BoL> Draw individual observations as points at middle of the violin . <EoL>
<BoL> Draw the quartiles as lines at width of density . <EoL>
<BoL> Draw a line to mark a single observation . <EoL>
<BoL> Draw a line orthogonal to the value axis at width of density . <EoL>
<BoL> Draw the violins onto ` ax ` . <EoL>
<BoL> Find the support and density for all of the data . <EoL>
<BoL> Estimate a KDE for a vector of data with flexible bandwidth . <EoL>
<BoL> Define a grid of support for the violin . <EoL>
<BoL> Make the violin plot . <EoL>
<BoL> Scale the relative area under the KDE curve . <EoL>
<BoL> Scale each density curve by the number of observations . <EoL>
<BoL> Scale each density curve to the same height . <EoL>
<BoL> Return a list of unique data values . <EoL>
<BoL> Make a sequential palette that blends from dark to `` color `` . <EoL>
<BoL> Deprecated ; please use ` catplot ` instead . <EoL>
<BoL> Get a set of evenly spaced colors in HUSL hue space . <EoL>
<BoL> Calculate the IQR for an array of numbers . <EoL>
<BoL> Deprecated ; please use ` boxenplot ` . <EoL>
<BoL> Helper method for removing NA values from array-like . <EoL>
<BoL> Select a palette from the ColorBrewer set . <EoL>
<BoL> Launch an interactive widget to create a sequential cubehelix palette . <EoL>
<BoL> Launch an interactive widget to create a dark sequential palette . <EoL>
<BoL> Launch an interactive widget to choose a diverging color palette . <EoL>
<BoL> Launch an interactive widget to create a light sequential palette . <EoL>
<BoL> Make a palette with color names from Crayola crayons . <EoL>
<BoL> Decrease the saturation channel of a color by some percent . <EoL>
<BoL> Establish support for a kernel density estimate . <EoL>
<BoL> Compute a bivariate kde using scipy . <EoL>
<BoL> Compute a univariate kernel density estimate using scipy . <EoL>
<BoL> Compute a bivariate kde using statsmodels . <EoL>
<BoL> Plot datapoints in an array as sticks on an axis . <EoL>
<BoL> Who 's a good boy ? <EoL>
<BoL> Return None <EoL>
<BoL> Return true , if the named module is a package . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Reload the module and return it . <EoL>
<BoL> Return a shell-escaped version of the string *s* . <EoL>
<BoL> splitquery ( '/path ? query ' ) -- > '/path ' , 'query ' . <EoL>
<BoL> splittag ( '/path # tag ' ) -- > '/path ' , 'tag ' . <EoL>
<BoL> splituser ( 'user [ : passwd ] @ host [ : port ] ' ) -- > 'user [ : passwd ] ' , 'host [ : port ] ' . <EoL>
<BoL> Removes any existing fragment from URL . <EoL>
<BoL> Join a base URL and a possibly relative URL to form an absolute <EoL>
<BoL> Put a parsed URL back together again . This may result in a <EoL>
<BoL> Combine the elements of a tuple as returned by urlsplit ( ) into a <EoL>
<BoL> Make an HTTP connection using connection_class . <EoL>
<BoL> Add a header to be used by the HTTP interface only <EoL>
<BoL> Handle http errors . <EoL>
<BoL> Error 301 -- also relocated ( permanently ) . <EoL>
<BoL> Error 302 -- relocated ( temporarily ) . <EoL>
<BoL> Error 303 -- also relocated ( essentially identical to 302 ) . <EoL>
<BoL> Error 307 -- relocated , but turn POST into error . <EoL>
<BoL> Default error handling -- do n't raise an exception . <EoL>
<BoL> Use URLopener ( ) .open ( file ) instead of open ( file , 'r ' ) . <EoL>
<BoL> Use `` data '' URL . <EoL>
<BoL> Use local file or FTP depending on form of URL . <EoL>
<BoL> Use FTP protocol . <EoL>
<BoL> Use HTTP protocol . <EoL>
<BoL> Use HTTPS protocol . <EoL>
<BoL> Use local file . <EoL>
<BoL> Overridable interface to open unknown URL type . <EoL>
<BoL> Overridable interface to open unknown URL type . <EoL>
<BoL> Override this in a GUI environment ! <EoL>
<BoL> retrieve ( url ) returns ( filename , headers ) for a local object <EoL>
<BoL> Return an HTTPResponse object for the request , using http_class . <EoL>
<BoL> Check if test is below base in a URI tree <EoL>
<BoL> Accept authority or URI and extract only the authority and path . <EoL>
<BoL> Return a Request or None in response to a redirect . <EoL>
<BoL> Default error handler : close the connection and raise OSError . <EoL>
<BoL> Create an opener object from a list of handlers . <EoL>
<BoL> OS-specific conversion from a file system path to a relative URL <EoL>
<BoL> Return True , if host should be bypassed . <EoL>
<BoL> OS-specific conversion from a relative URL of the 'file ' scheme <EoL>
<BoL> Clean up temporary files from urlretrieve calls . <EoL>
<BoL> using the parsed robots.txt decide if useragent can fetch url <EoL>
<BoL> Sets the time the robots.txt file was last fetched to the <EoL>
<BoL> Returns the time the robots.txt file was last fetched . <EoL>
<BoL> Parse the input lines from a robots.txt file . <EoL>
<BoL> Reads the robots.txt URL and feeds it to the parser . <EoL>
<BoL> Sets the URL referring to a robots.txt file . <EoL>
<BoL> A decorator that defines __unicode__ and __str__ methods under Python 2 . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Report available example datasets , useful for reporting issues . <EoL>
<BoL> Get a set of evenly spaced colors in HLS hue space . <EoL>
<BoL> Load a dataset from the online repository ( requires internet ) . <EoL>
<BoL> Preprocess { row/col } _colors to extract labels and convert colors . <EoL>
<BoL> Turns a list of colors into a numpy matrix and matplotlib colormap <EoL>
<BoL> Get the proportions of the figure taken up by each axes <EoL>
<BoL> Plots color labels between the dendrogram and the heatmap <EoL>
<BoL> Divide the data by the difference between the max and min <EoL>
<BoL> Standarize the mean and variance of the data axis <EoL>
<BoL> Plot a dendrogram of the relationships between the columns of data <EoL>
<BoL> Calculates a dendrogram based on the linkage matrix <EoL>
<BoL> Plots a dendrogram of the similarities between data on the axes <EoL>
<BoL> Add textual labels with the value in each cell . <EoL>
<BoL> Determine ticks and ticklabels that minimize overlap . <EoL>
<BoL> Return ticks and labels at evenly spaced intervals . <EoL>
<BoL> Draw the heatmap on the provided Axes . <EoL>
<BoL> Convert either a list of colors or nested lists of colors to RGB . <EoL>
<BoL> Convert a pandas index or multiindex to an axis label . <EoL>
<BoL> Convert a pandas index or multiindex into ticklabels . <EoL>
<BoL> Ensure that data and mask are compatabile and add missing values . <EoL>
<BoL> Return a boolean for whether the list of ticklabels have overlaps . <EoL>
<BoL> Calculate the relative luminance of a color according to W3C standards <EoL>
<BoL> Return a Unicode string representing a Python object . <EoL>
<BoL> Plot the values in a color palette as a horizontal array . <EoL>
<BoL> Return discrete colors from a matplotlib palette . <EoL>
<BoL> Open the context . <EoL>
<BoL> Close the context . <EoL>
<BoL> Return a color palette with hex codes instead of RGB values . <EoL>
<BoL> Add some more flexibility to color choices . <EoL>
<BoL> Turn stringified cubehelix params into args/kwargs . <EoL>
<BoL> Return the list of colors in the current matplotlib color cycle . <EoL>
<BoL> Change how matplotlib color shorthands are interpreted . <EoL>
<BoL> Independently manipulate the h , l , or s channels of a color . <EoL>
<BoL> Make a palette with color names from the xkcd color survey . <EoL>
<BoL> Return a parameter dict to scale elements of the figure . <EoL>
<BoL> Set the aesthetic style of the plots . <EoL>
<BoL> Set the plotting context parameters . <EoL>
<BoL> Restore all RC params to default settings . <EoL>
<BoL> Restore all RC params to original settings ( respects custom rc ) . <EoL>
<BoL> Set the matplotlib color cycle using a seaborn palette . <EoL>
<BoL> Remove observations with missing data . <EoL>
<BoL> Extract variables from data or use directly . <EoL>
<BoL> Discretize a predictor by assigning value to closest bin . <EoL>
<BoL> Low-level regression and prediction using linear algebra . <EoL>
<BoL> Fit the model in log-space . <EoL>
<BoL> Fit a locally-weighted regression , which returns its own grid . <EoL>
<BoL> Regression using numpy polyfit for higher-order trends . <EoL>
<BoL> Fit the regression model . <EoL>
<BoL> More general regression function using statsmodels objects . <EoL>
<BoL> Draw the model . <EoL>
<BoL> Draw the full plot . <EoL>
<BoL> Regress b from a keeping a 's original mean . <EoL>
<BoL> Draw the data . <EoL>
<BoL> Test if a series is completely missing . <EoL>
<BoL> Determine if data should considered numeric or categorical . <EoL>
<BoL> Add labeled artists to represent the different plot semantics . <EoL>
<BoL> Compute an estimate and confidence interval using grouper . <EoL>
<BoL> Determine colors when the hue variable is qualitative . <EoL>
<BoL> Return the color corresponding to the hue level . <EoL>
<BoL> Set x and y labels with visibility that matches the ticklabels . <EoL>
<BoL> Determine colors when the hue variable is quantitative . <EoL>
<BoL> Determine what colors to use given data characteristics . <EoL>
<BoL> Determine the linewidths given data characteristics . <EoL>
<BoL> Determine the markers and line dashes . <EoL>
<BoL> Draw the plot onto an axes , passing matplotlib kwargs . <EoL>
<BoL> Return the size corresponding to the size level . <EoL>
<BoL> Convert a style argument to a dict of matplotlib attributes . <EoL>
<BoL> Return ( x , y ) data for each subset defined by semantics . <EoL>
<BoL> Convert intervals to error arguments relative to plot heights . <EoL>
<BoL> Wrapper to handle different pandas sorting API pre/post 0.17 . <EoL>
<BoL> Return a fully saturated color with the same hue . <EoL>
<BoL> Plot the kernal density estimate of the bootstrap distribution . <EoL>
<BoL> Plot 250 traces from bootstrap . <EoL>
<BoL> Plot translucent error bands around the central tendancy . <EoL>
<BoL> Plot error bars at each data point . <EoL>
<BoL> Plot the kernal density estimate over the sample . <EoL>
<BoL> Plot each original data point discretely . <EoL>
<BoL> Plot a trace for each observation in the original data . <EoL>
<BoL> Upsample over time and plot a KDE of the bootstrap distribution . <EoL>
<BoL> Decorator that will skip a test if ` url ` is unreachable . <EoL>
<BoL> Set the spine 's position without resetting an associated axis . <EoL>
<BoL> Return booleans for whether the x and y ticklabels on an Axes overlap . <EoL>
<BoL> Grab current axis and label it . <EoL>
<BoL> Return a percentile range from an array of values . <EoL>
<BoL> Return the path of the seaborn data directory . <EoL>
<BoL> Like scoreatpercentile but can take and return array of percentiles . <EoL>
<BoL> Return arguments to plt.bar for pmf-like histogram of an array . <EoL>
<BoL> Return a R-style significance string corresponding to p values . <EoL>
<BoL> Create a matplotlib colormap that will be updated by the widgets . <EoL>
<BoL> Show a continuous matplotlib colormap . <EoL>
<BoL> Change the LUT values in a matplotlib colormap in-place . <EoL>
<BoL> Asserts that the given condition is true . <EoL>
<BoL> Internal method used by the protocol message implementation . <EoL>
<BoL> Support the pickle protocol . <EoL>
<BoL> Attempts to apply a gradient to the accumulator . <EoL>
<BoL> Number of gradients that have currently been aggregated in accumulator . <EoL>
<BoL> Sets the global time step of the accumulator . <EoL>
<BoL> Attempts to extract the average gradient from the accumulator . <EoL>
<BoL> Creates a new ConditionalAccumulator . <EoL>
<BoL> Returns True iff this DType refers to the same type as ` other ` . <EoL>
<BoL> Creates a new ` DataType ` . <EoL>
<BoL> Returns True iff self ! = other . <EoL>
<BoL> Returns True if the ` other ` DType will be converted to this DType . <EoL>
<BoL> Construct a ` DeviceSpec ` from a string . <EoL>
<BoL> Merge the properties of `` dev '' into this ` DeviceSpec ` . <EoL>
<BoL> Parse a ` DeviceSpec ` name into its components . <EoL>
<BoL> Return a string representation of this ` DeviceSpec ` . <EoL>
<BoL> Returns the sum of ` self ` and ` other ` . <EoL>
<BoL> DEPRECATED : Use ` __floordiv__ ` via ` x // y ` instead . <EoL>
<BoL> Returns true if ` other ` has the same known value as this Dimension . <EoL>
<BoL> Returns the quotient of ` self ` and ` other ` rounded down . <EoL>
<BoL> Returns True if ` self ` is known to be greater than or equal to ` other ` . <EoL>
<BoL> Returns True if ` self ` is known to be greater than ` other ` . <EoL>
<BoL> Creates a new Dimension with the given value . <EoL>
<BoL> Returns True if ` self ` is known to be less than or equal to ` other ` . <EoL>
<BoL> Returns True if ` self ` is known to be less than ` other ` . <EoL>
<BoL> Returns ` self ` modulo ` other ` . <EoL>
<BoL> Returns the product of ` self ` and ` other ` . <EoL>
<BoL> Returns true if ` other ` has a different known value from ` self ` . <EoL>
<BoL> Returns the sum of ` other ` and ` self ` . <EoL>
<BoL> Returns the quotient of ` other ` and ` self ` rounded down . <EoL>
<BoL> Returns ` other ` modulo ` self ` . <EoL>
<BoL> Returns the product of ` self ` and ` other ` . <EoL>
<BoL> Returns the subtraction of ` self ` from ` other ` . <EoL>
<BoL> Returns the subtraction of ` other ` from ` self ` . <EoL>
<BoL> Raises an exception if ` other ` is not compatible with this Dimension . <EoL>
<BoL> Returns true if ` other ` is compatible with this Dimension . <EoL>
<BoL> Returns a Dimension that combines the information in ` self ` and ` other ` . <EoL>
<BoL> Validate and convert ` vals ` to a list of ` Tensor ` s . <EoL>
<BoL> Return the value to return from a dequeue op . <EoL>
<BoL> Return a list of values to pass to ` name_scope ( ) ` . <EoL>
<BoL> Closes this queue . <EoL>
<BoL> Dequeues one element from this queue . <EoL>
<BoL> Dequeues and concatenates ` n ` elements from this queue . <EoL>
<BoL> Dequeues and concatenates ` n ` elements from this queue . <EoL>
<BoL> Enqueues one element to this queue . <EoL>
<BoL> Enqueues zero or more elements to this queue . <EoL>
<BoL> Create a queue using the queue reference from ` queues [ index ] ` . <EoL>
<BoL> Returns true if queue is closed . <EoL>
<BoL> Compute the number of elements in this queue . <EoL>
<BoL> Returns the number of records this reader has produced . <EoL>
<BoL> Returns the number of work units this reader has finished processing . <EoL>
<BoL> Returns the next record ( key , value ) pair produced by a reader . <EoL>
<BoL> Restore a reader to its initial clean state . <EoL>
<BoL> Restore a reader to a previously saved state . <EoL>
<BoL> Produce a string tensor that encodes the state of a reader . <EoL>
<BoL> Enters a context inside which operations are recorded on this tape . <EoL>
<BoL> Exits the recording context , no further operations are traced . <EoL>
<BoL> Creates a new GradientTape . <EoL>
<BoL> Clears all information stored in this tape . <EoL>
<BoL> Temporarily stops recording operations on this tape . <EoL>
<BoL> Ensures that ` tensor ` is being traced by this tape . <EoL>
<BoL> Returns variables watched by this tape in order of construction . <EoL>
<BoL> Creates a new , empty Graph . <EoL>
<BoL> Add device to stack manually , separate from a context manager . <EoL>
<BoL> Adds a function to the graph . <EoL>
<BoL> Creates ` Operations ` in this graph for any new TF_Operations . <EoL>
<BoL> Adds 'op ' to the graph . <EoL>
<BoL> Applies the current device function stack to the given operation . <EoL>
<BoL> See ` Graph.as_graph_element ( ) ` for details . <EoL>
<BoL> EXPERIMENTAL : A context manager for setting attributes on operators . <EoL>
<BoL> Check if the graph is finalized . <EoL>
<BoL> For an op that takes ` input_ops ` as inputs , compute control inputs . <EoL>
<BoL> If this graph contains functions , copy them to ` graph_def ` . <EoL>
<BoL> Creates an ` Operation ` in this graph from the supplied TF_Operation . <EoL>
<BoL> Common logic for creating an op in this graph . <EoL>
<BoL> Returns the current control flow context . <EoL>
<BoL> Returns the function definition for 'name ' . <EoL>
<BoL> Returns the ` OpDef ` proto for ` type ` . ` type ` is a string . <EoL>
<BoL> Returns the ` Operation ` with the given ` name ` . <EoL>
<BoL> Returns the ` Tensor ` representing ` tf_output ` . <EoL>
<BoL> Tests whether 'name ' is registered in this graph 's function library . <EoL>
<BoL> EXPERIMENTAL : A context manager for setting kernel labels . <EoL>
<BoL> Return detailed error message about device conflict due to colocation . <EoL>
<BoL> Returns a lock to guard code that creates & mutates ops . <EoL>
<BoL> Id for next Operation instance . Also increments the internal id . <EoL>
<BoL> Python 'with ' handler to help annotate ops with their originator . <EoL>
<BoL> Record that the given op depends on all registered control dependencies . <EoL>
<BoL> Returns a lock to guard code for Session.run . <EoL>
<BoL> Sets the current control flow context . <EoL>
<BoL> Return colocation stack metadata as a dictionary . <EoL>
<BoL> Return device function stack as a list of TraceableObjects . <EoL>
<BoL> Opposite of ` finalize ` . Internal interface . <EoL>
<BoL> Stores ` value ` in the collections given by ` names ` . <EoL>
<BoL> Returns a context manager that makes this ` Graph ` the default graph . <EoL>
<BoL> Returns the object referred to by ` obj ` , as an ` Operation ` or ` Tensor ` . <EoL>
<BoL> Clears all values in a collection . <EoL>
<BoL> Returns a context manager that specifies an op to colocate with . <EoL>
<BoL> Returns a context manager that specifies the resource container to use . <EoL>
<BoL> Returns a context manager that specifies control dependencies . <EoL>
<BoL> Finalizes this graph , making it read-only . <EoL>
<BoL> Returns a list of collections used in this graph . <EoL>
<BoL> Returns the current name scope . <EoL>
<BoL> Returns the ` Operation ` with the given ` name ` . <EoL>
<BoL> Return the list of operations in the graph . <EoL>
<BoL> Returns the ` Tensor ` with the given ` name ` . <EoL>
<BoL> EXPERIMENTAL : A context manager for overriding gradient functions . <EoL>
<BoL> Returns ` True ` if and only if ` tensor ` is feedable . <EoL>
<BoL> Returns ` True ` if and only if ` tensor_or_op ` is fetchable . <EoL>
<BoL> r '' '' '' Returns a context manager that creates hierarchical names for operations . <EoL>
<BoL> Marks the given ` tensor ` as unfeedable in this graph . <EoL>
<BoL> Marks the given ` op ` as unfetchable in this graph . <EoL>
<BoL> Make device , colocation and dependencies stacks thread-local . <EoL>
<BoL> Return a unique operation name for ` name ` . <EoL>
<BoL> Create a IdentityReader . <EoL>
<BoL> Creates an ` IndexedSlices ` . <EoL>
<BoL> Creates a new interactive TensorFlow session . <EoL>
<BoL> Returns a handle to a `` callable '' with the given options . <EoL>
<BoL> Perform either run or partial_run , depending the presence of ` handle ` . <EoL>
<BoL> Returns a context manager that makes this object the default session . <EoL>
<BoL> Closes an ` InteractiveSession ` . <EoL>
<BoL> Lists available devices in this session . <EoL>
<BoL> Returns a Python callable that runs a particular step.Template callable that accepts RunOptions and RunMetadata . <EoL>
<BoL> Continues the execution with more feeds and fetches . <EoL>
<BoL> Sets up a graph with feeds and fetches for partial run . <EoL>
<BoL> Runs operations and evaluates tensors in ` fetches ` . <EoL>
<BoL> Create a LMDBReader . <EoL>
<BoL> Specifies that ops of type ` op_type ` is not differentiable . <EoL>
<BoL> Creates a new ` OpError ` indicating that a particular op failed . <EoL>
<BoL> r '' '' '' Creates an ` Operation ` . <EoL>
<BoL> Add a new control input to this operation . <EoL>
<BoL> Add a list of new control inputs to this operation . <EoL>
<BoL> Add this op to its control flow context . <EoL>
<BoL> Returns the control flow context of this op . <EoL>
<BoL> Regroups a flat list of input tensors into scalar and sequence inputs . <EoL>
<BoL> Removes any control inputs to this operation . <EoL>
<BoL> Private method used to set an attribute in the node_def . <EoL>
<BoL> Sets the current control flow context of this op . <EoL>
<BoL> Set the device of this operation . <EoL>
<BoL> Create and return a new TF_Input for input_idx'th input of this op . <EoL>
<BoL> Create and return a new TF_Output for output_idx'th output of this op . <EoL>
<BoL> Update the input to this operation at the given index . <EoL>
<BoL> Returns the list of colocation groups of the op . <EoL>
<BoL> Returns the value of the attr of this op with the given ` name ` . <EoL>
<BoL> Runs this operation in a ` Session ` . <EoL>
<BoL> DEPRECATED : Use outputs . <EoL>
<BoL> Constructs a queue object from a queue reference . <EoL>
<BoL> Creates a new ReaderBase . <EoL>
<BoL> Registers the function ` f ` as gradient function for ` op_type ` . <EoL>
<BoL> Creates a new decorator with ` op_type ` as the Operation type . <EoL>
<BoL> Creates a new TensorFlow session . <EoL>
<BoL> Closes this session . <EoL>
<BoL> Resets resource containers on ` target ` , and close all connected sessions . <EoL>
<BoL> Attempts to apply a gradient to the accumulator . <EoL>
<BoL> Attempts to extract the average gradient from the accumulator . <EoL>
<BoL> Attempts to extract the average gradient from the accumulator . <EoL>
<BoL> Creates a ` SparseTensor ` . <EoL>
<BoL> Returns a list of ` Operation ` s that consume this ` SparseTensor ` . <EoL>
<BoL> Evaluates this sparse tensor in a ` Session ` . <EoL>
<BoL> Get the ` TensorShape ` representing the shape of the dense tensor . <EoL>
<BoL> Create a TFRecordReader . <EoL>
<BoL> r '' '' '' Computes the absolute value of a tensor . <EoL>
<BoL> Dummy method to prevent a tensor from being used as a Python ` bool ` . <EoL>
<BoL> r '' '' '' Returns the truth value of ( x > = y ) element-wise . <EoL>
<BoL> Overload for Tensor.__getitem__ . <EoL>
<BoL> r '' '' '' Returns the truth value of ( x > y ) element-wise . <EoL>
<BoL> Creates a new ` Tensor ` . <EoL>
<BoL> r '' '' '' Returns the truth value of NOT x element-wise . <EoL>
<BoL> r '' '' '' Returns the truth value of ( x < = y ) element-wise . <EoL>
<BoL> r '' '' '' Returns the truth value of ( x < y ) element-wise . <EoL>
<BoL> r '' '' '' Computes numerical negative value element-wise . <EoL>
<BoL> Dummy method to prevent a tensor from being used as a Python ` bool ` . <EoL>
<BoL> Return a value to use for the NodeDef `` input '' attribute . <EoL>
<BoL> Returns the TensorShape of this tensor according to the C API . <EoL>
<BoL> Returns ops needing shape inference to compute target_op 's shape . <EoL>
<BoL> Integer rank of this Tensor , if known , else None . <EoL>
<BoL> Returns a list of ` Operation ` s that consume this tensor . <EoL>
<BoL> Evaluates this tensor in a ` Session ` . <EoL>
<BoL> Alias of Tensor.shape . <EoL>
<BoL> Updates the shape of this tensor . <EoL>
<BoL> Close the current TensorArray . <EoL>
<BoL> Return the values in the TensorArray as a concatenated ` Tensor ` . <EoL>
<BoL> Return selected values in the TensorArray as a packed ` Tensor ` . <EoL>
<BoL> Returns a TensorArray with the same content and properties . <EoL>
<BoL> Read the value at location ` index ` in the TensorArray . <EoL>
<BoL> Scatter the values of a ` Tensor ` in specific indices of a ` TensorArray ` . <EoL>
<BoL> Return the size of the TensorArray . <EoL>
<BoL> Split the values of a ` Tensor ` into the TensorArray . <EoL>
<BoL> Return the values in the TensorArray as a stacked ` Tensor ` . <EoL>
<BoL> Unstack the values of a ` Tensor ` in the TensorArray . <EoL>
<BoL> Write ` value ` into index ` index ` of the TensorArray . <EoL>
<BoL> Returns True if this shape contains non-zero information . <EoL>
<BoL> Returns True if ` self ` is equivalent to ` other ` . <EoL>
<BoL> Returns the value of a dimension or a shape , depending on the key . <EoL>
<BoL> Creates a new TensorShape with the given dimensions . <EoL>
<BoL> Returns ` self.dims ` if the rank is known , otherwise raises ValueError . <EoL>
<BoL> Returns the rank of this shape , or raises ValueError if unspecified . <EoL>
<BoL> Returns True if ` self ` is known to be different from ` other ` . <EoL>
<BoL> Returns a list of integers or ` None ` for each dimension . <EoL>
<BoL> Returns this shape as a ` TensorShapeProto ` . <EoL>
<BoL> Raises an exception if ` self ` is not compatible with the given ` rank ` . <EoL>
<BoL> Raises exception if ` self ` and ` other ` do not represent the same shape . <EoL>
<BoL> Raises an exception if ` self ` is not fully defined in every dimension . <EoL>
<BoL> Raises an exception if ` self ` and ` other ` do not have compatible ranks . <EoL>
<BoL> Returns the concatenation of the dimension in ` self ` and ` other ` . <EoL>
<BoL> Returns True iff ` self ` is compatible with ` other ` . <EoL>
<BoL> Returns True iff ` self ` is fully defined in every dimension . <EoL>
<BoL> Returns a ` TensorShape ` combining the information in ` self ` and ` other ` . <EoL>
<BoL> Returns the most specific TensorShape compatible with ` self ` and ` other ` . <EoL>
<BoL> Returns the total number of elements , or none for incomplete shapes . <EoL>
<BoL> Returns a shape based on ` self ` with the given rank . <EoL>
<BoL> Returns a shape based on ` self ` with at least the given rank . <EoL>
<BoL> Returns a shape based on ` self ` with at most the given rank . <EoL>
<BoL> Create a TextLineReader . <EoL>
<BoL> Register overloads for all operators . <EoL>
<BoL> Defer an operator overload to ` ops.Tensor ` . <EoL>
<BoL> Utility function for converting a Variable to a Tensor . <EoL>
<BoL> Creates a slice helper object given a variable . <EoL>
<BoL> Returns a dictionary of values to checkpoint with this object . <EoL>
<BoL> Pop and load any deferred checkpoint restores into ` checkpointable ` . <EoL>
<BoL> Look up a dependency by name . <EoL>
<BoL> Initialize dependency management . <EoL>
<BoL> Restore the object 's attributes from a name-based checkpoint . <EoL>
<BoL> If automatic dependency tracking is enabled , ignores ` value ` . <EoL>
<BoL> Return a dependency 's value for restore-on-create . <EoL>
<BoL> Restore this object and its dependencies ( may be deferred ) . <EoL>
<BoL> Declare a dependency on another ` Checkpointable ` object . <EoL>
<BoL> Assigns a new value to the variable . <EoL>
<BoL> Adds a value to this variable . <EoL>
<BoL> Subtracts a value from this variable . <EoL>
<BoL> Increments this variable until it reaches ` limit ` . <EoL>
<BoL> In a session , computes and returns the value of this variable . <EoL>
<BoL> Returns a ` Variable ` object created from ` variable_def ` . <EoL>
<BoL> Alias of Variable.shape . <EoL>
<BoL> Returns the value of the initialized variable . <EoL>
<BoL> Load new value into this variable . <EoL>
<BoL> Returns the value of this variable , read in the current context . <EoL>
<BoL> Adds ` IndexedSlices ` to this variable . <EoL>
<BoL> Applies sparse addition to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse subtraction to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse assignment to individual values or slices in a Variable . <EoL>
<BoL> Subtracts ` IndexedSlices ` from this variable . <EoL>
<BoL> Assigns ` IndexedSlices ` to this variable . <EoL>
<BoL> Overrides the shape for this variable . <EoL>
<BoL> Converts a ` Variable ` to a ` VariableDef ` protocol buffer . <EoL>
<BoL> Returns the last snapshot of this variable . <EoL>
<BoL> Get this scope 's variables . <EoL>
<BoL> Get this scope 's global variables . <EoL>
<BoL> Get this scope 's local variables . <EoL>
<BoL> Reuse variables in this scope . <EoL>
<BoL> Set caching_device for this scope . <EoL>
<BoL> Set custom getter for this scope . <EoL>
<BoL> Set data type for this scope . <EoL>
<BoL> Set initializer for this scope . <EoL>
<BoL> Set partitioner for this scope . <EoL>
<BoL> Set regularizer for this scope . <EoL>
<BoL> Sets whether to use ResourceVariables for this scope . <EoL>
<BoL> Get this scope 's trainable variables . <EoL>
<BoL> Create a WholeFileReader . <EoL>
<BoL> Returns the element-wise sum of a list of tensors . <EoL>
<BoL> r '' '' '' Computes acos of x element-wise . <EoL>
<BoL> r '' '' '' Computes inverse hyperbolic cosine of x element-wise . <EoL>
<BoL> r '' '' '' Returns x + y element-wise . <EoL>
<BoL> Connect a ` check_numerics ` to every floating point tensor . <EoL>
<BoL> Adds all input tensors element-wise . <EoL>
<BoL> Wrapper for ` Graph.add_to_collection ( ) ` using the default graph . <EoL>
<BoL> Wrapper for ` Graph.add_to_collections ( ) ` using the default graph . <EoL>
<BoL> See ` tf.global_variables ` . <EoL>
<BoL> r '' '' '' Returns the element-wise argument of a complex ( or real ) tensor . <EoL>
<BoL> Runs the program with an optional 'main ' function and 'argv ' list . <EoL>
<BoL> r '' '' '' Returns the index with the largest value across dimensions of a tensor . <EoL>
<BoL> r '' '' '' Returns the index with the smallest value across dimensions of a tensor . <EoL>
<BoL> Converts the given ` type_value ` to a ` DType ` . <EoL>
<BoL> r '' '' '' Converts each entry in the given tensor to strings . Supports many numeric <EoL>
<BoL> r '' '' '' Computes asin of x element-wise . <EoL>
<BoL> r '' '' '' Computes inverse hyperbolic sine of x element-wise . <EoL>
<BoL> Assert the condition ` x == y ` holds element-wise . <EoL>
<BoL> Assert the condition ` x > y ` holds element-wise . <EoL>
<BoL> Assert that ` x ` is of integer dtype . <EoL>
<BoL> Assert the condition ` x < y ` holds element-wise . <EoL>
<BoL> Assert the condition ` x < = y ` holds element-wise . <EoL>
<BoL> Assert the condition ` x < 0 ` holds element-wise . <EoL>
<BoL> Assert the condition ` x > = 0 ` holds element-wise . <EoL>
<BoL> Assert the condition ` x < = 0 ` holds element-wise . <EoL>
<BoL> Assert the condition ` x > 0 ` holds element-wise . <EoL>
<BoL> Static assert that values is a `` proper '' iterable . <EoL>
<BoL> Assert ` x ` has rank equal to ` rank ` . <EoL>
<BoL> Validate and return float type based on ` tensors ` and ` dtype ` . <EoL>
<BoL> Statically asserts that the given ` Tensor ` is of the specified type . <EoL>
<BoL> Returns an Op to check if variables are initialized . <EoL>
<BoL> Update 'ref ' by assigning 'value ' to it . <EoL>
<BoL> Update 'ref ' by adding 'value ' to it . <EoL>
<BoL> Update 'ref ' by subtracting 'value ' from it . <EoL>
<BoL> r '' '' '' Computes atan of x element-wise . <EoL>
<BoL> r '' '' '' Computes arctangent of ` y/x ` element-wise , respecting signs of the arguments . <EoL>
<BoL> r '' '' '' Computes inverse hyperbolic tangent of x element-wise . <EoL>
<BoL> Gather slices from ` params ` according to ` indices ` with leading batch dims . <EoL>
<BoL> Generalization of ` tf.scatter_update ` to axis different than 0 . <EoL>
<BoL> r '' '' '' BatchToSpace for N-D tensors of type T . <EoL>
<BoL> r '' '' '' Compute the regularized incomplete beta integral \\ ( I_x ( a , b ) \\ ) . <EoL>
<BoL> r '' '' '' Bitcasts a tensor from one type to another without copying data . <EoL>
<BoL> r '' '' '' Elementwise computes the bitwise AND of ` x ` and ` y ` . <EoL>
<BoL> r '' '' '' Elementwise computes the bitwise OR of ` x ` and ` y ` . <EoL>
<BoL> r '' '' '' Elementwise computes the bitwise XOR of ` x ` and ` y ` . <EoL>
<BoL> r '' '' '' Flips all bits elementwise . <EoL>
<BoL> r '' '' '' Elementwise computes the bitwise left-shift of ` x ` and ` y ` . <EoL>
<BoL> r '' '' '' Elementwise computes the bitwise right-shift of ` x ` and ` y ` . <EoL>
<BoL> Apply boolean mask to tensor . Numpy equivalent is ` tensor [ mask ] ` .Mask tensor along dimension 0 with a 1-D mask . <EoL>
<BoL> Returns the broadcasted dynamic shape between ` shape_x ` and ` shape_y ` . <EoL>
<BoL> Returns the broadcasted static shape between ` shape_x ` and ` shape_y ` . <EoL>
<BoL> r '' '' '' Broadcast an array for a compatible shape . <EoL>
<BoL> Casts a tensor to a new type . <EoL>
<BoL> r '' '' '' Returns element-wise smallest integer not less than x . <EoL>
<BoL> r '' '' '' Checks a tensor for NaN and Inf values . <EoL>
<BoL> r '' '' '' Computes the Cholesky decomposition of one or more square matrices . <EoL>
<BoL> Solves systems of linear eqns ` A X = RHS ` , given Cholesky factorizations . <EoL>
<BoL> Clips tensor values to a maximum average L2-norm . <EoL>
<BoL> Clips values of multiple tensors by the ratio of the sum of their norms . <EoL>
<BoL> Clips tensor values to a maximum L2-norm . <EoL>
<BoL> Converts either bytes or unicode to ` bytes ` , using utf-8 encoding for text . <EoL>
<BoL> Returns the given argument as a unicode string . <EoL>
<BoL> Converts to ` str ` as ` str ( value ) ` , but use ` as_str ` for ` bytes ` . <EoL>
<BoL> Context manager for testing forward compatibility of generated graphs . <EoL>
<BoL> Return true if the forward compatibility window has expired . <EoL>
<BoL> Returns the file system path representation of a ` PathLike ` object , else as it is . <EoL>
<BoL> r '' '' '' Converts two real numbers to a complex number . <EoL>
<BoL> Concatenates tensors along one dimension . <EoL>
<BoL> r '' '' '' Returns the complex conjugate of a complex number . <EoL>
<BoL> Creates a constant tensor . <EoL>
<BoL> Instantiates an initializer from a configuration dictionary . <EoL>
<BoL> Wrapper for ` Graph.container ( ) ` using the default graph . <EoL>
<BoL> Wrapper for ` Graph.control_dependencies ( ) ` using the default graph . <EoL>
<BoL> Converts the given ` value ` to a ` Tensor ` . <EoL>
<BoL> Converts the given object to a ` Tensor ` or an ` IndexedSlices ` . <EoL>
<BoL> Converts value to a ` SparseTensor ` or ` Tensor ` . <EoL>
<BoL> r '' '' '' Computes cos of x element-wise . <EoL>
<BoL> r '' '' '' Computes hyperbolic cosine of x element-wise . <EoL>
<BoL> r '' '' '' Increments 'ref ' until it reaches 'limit ' . <EoL>
<BoL> r '' '' '' Compute the pairwise cross product . <EoL>
<BoL> Compute the cumulative product of the tensor ` x ` along ` axis ` . <EoL>
<BoL> Compute the cumulative sum of the tensor ` x ` along ` axis ` . <EoL>
<BoL> Decorator to define a function with a custom gradient.Decorated function with custom gradient . <EoL>
<BoL> Creates an ` Iterator ` for enumerating the elements of this dataset . <EoL>
<BoL> Apply options , such as optimization configuration , to the dataset . <EoL>
<BoL> Produces serialized graph representation of the dataset . <EoL>
<BoL> Creates a scalar ` tf.Tensor ` of ` tf.variant ` representing this dataset . <EoL>
<BoL> Returns a list of the input datasets of the dataset . <EoL>
<BoL> Applies a transformation function to this dataset . <EoL>
<BoL> Combines consecutive elements of this dataset into batches . <EoL>
<BoL> Caches the elements in this dataset . <EoL>
<BoL> Creates a ` Dataset ` by concatenating given dataset with this dataset . <EoL>
<BoL> Filters this dataset according to ` predicate ` . <EoL>
<BoL> Maps ` map_func ` across this dataset and flattens the result . <EoL>
<BoL> Creates a ` Dataset ` whose elements are generated by ` generator ` .Creates a unique ` iterator_id ` for each pass over the dataset.Generates the next element from iterator with ID ` iterator_id_t ` .A ` py_func ` that will be called to invoke the iterator.Releases host-side state for the iterator with ID ` iterator_id_t ` . <EoL>
<BoL> Splits each rank-N ` tf.SparseTensor ` in this dataset row-wise . <EoL>
<BoL> Creates a ` Dataset ` whose elements are slices of the given tensors . <EoL>
<BoL> Creates a ` Dataset ` with a single element , comprising the given tensors . <EoL>
<BoL> A dataset of all files matching one or more glob patterns . <EoL>
<BoL> Creates an ` Iterator ` for enumerating the elements of this dataset . <EoL>
<BoL> Creates an ` Iterator ` for enumerating the elements of this dataset . <EoL>
<BoL> Maps ` map_func ` across the elements of this dataset . <EoL>
<BoL> Returns the options for this dataset and its inputs . <EoL>
<BoL> Creates a ` Dataset ` that prefetches elements from this dataset . <EoL>
<BoL> Creates a ` Dataset ` of a step-separated range of values . <EoL>
<BoL> Reduces the input dataset to a single element . <EoL>
<BoL> Repeats this dataset ` count ` times . <EoL>
<BoL> Creates a ` Dataset ` that includes only 1/ ` num_shards ` of this dataset . <EoL>
<BoL> Randomly shuffles the elements of this dataset . <EoL>
<BoL> Creates a ` Dataset ` that skips ` count ` elements from this dataset . <EoL>
<BoL> Creates a ` Dataset ` with at most ` count ` elements from this dataset . <EoL>
<BoL> Combines input elements into a dataset of windows . <EoL>
<BoL> Returns a new ` tf.data.Dataset ` with the given options set . <EoL>
<BoL> Creates a ` Dataset ` by zipping together the given datasets . <EoL>
<BoL> Returns a nested structure of ` tf.Tensor ` s representing the next element . <EoL>
<BoL> Returns a ` tf.Operation ` that initializes this iterator on ` dataset ` . <EoL>
<BoL> Returns a string-valued ` tf.Tensor ` that represents this iterator . <EoL>
<BoL> Produces the list of enabled static optimizations . <EoL>
<BoL> Merges itself with the given ` tf.data.Options ` . <EoL>
<BoL> Creates a ` TextLineDataset ` . <EoL>
<BoL> Initializes a ` CheckpointInputPipelineHook ` . <EoL>
<BoL> Called when new TensorFlow session is created . <EoL>
<BoL> Creates a ` Dataset ` that counts from ` start ` in steps of size ` step ` . <EoL>
<BoL> Returns an ` Optional ` that wraps the given value . <EoL>
<BoL> Returns a nested structure of values wrapped by this optional . <EoL>
<BoL> Returns a tensor that evaluates to ` True ` if this optional has a value . <EoL>
<BoL> Returns an ` Optional ` that has no value . <EoL>
<BoL> A ` Dataset ` of pseudorandom values . <EoL>
<BoL> Creates a ` SqlDataset ` . <EoL>
<BoL> Creates a ` StatsAggregator ` . <EoL>
<BoL> Returns a string ` tf.Tensor ` that summarizes the aggregated statistics . <EoL>
<BoL> Returns a ` tf.Operation ` to write a dataset to a file . <EoL>
<BoL> Return int64 id of the length bucket for this element.Batch elements in dataset . <EoL>
<BoL> Creates a dataset that deterministically chooses elements from ` datasets ` . <EoL>
<BoL> A transformation that copies dataset elements to the given ` target_device ` . <EoL>
<BoL> A transformation that batches ragged elements into ` tf.SparseTensor ` s . <EoL>
<BoL> A transformation that enumerate the elements of a dataset . <EoL>
<BoL> Returns an ` Optional ` that contains the next value from the iterator . <EoL>
<BoL> Returns the single element in ` dataset ` as a nested structure of tensors . <EoL>
<BoL> A transformation that groups elements and performs a reduction.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Creates a ` Dataset ` from another ` Dataset ` and silently ignores any errors . <EoL>
<BoL> Records the latency of producing each element of the input dataset . <EoL>
<BoL> Organizes columns into a features dictionary . <EoL>
<BoL> Returns a SaveableObject for saving/restore iterator state using Saver . <EoL>
<BoL> A transformation that parses ` Example ` protos into a ` dict ` of tensors.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> A transformation that prefetches dataset values to the given ` device ` . <EoL>
<BoL> A transformation that resamples a dataset to achieve a target distribution.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Samples elements at random from the datasets in ` datasets ` . <EoL>
<BoL> A transformation that scans a function across an input dataset . <EoL>
<BoL> Shuffles and repeats a Dataset returning a new permutation for each epoch . <EoL>
<BoL> Splits elements of a dataset into multiple elements on the batch dimension.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Creates a ` Dataset ` from another ` Dataset ` , discarding duplicates . <EoL>
<BoL> Assert that the tensor does not contain any NaN 's or Inf 's . <EoL>
<BoL> r '' '' '' Returns which elements of x are finite . <EoL>
<BoL> r '' '' '' Returns which elements of x are Inf . <EoL>
<BoL> r '' '' '' Returns which elements of x are NaN . <EoL>
<BoL> Returns ` True ` if ` x ` is non-decreasing . <EoL>
<BoL> Returns ` True ` if ` x ` is strictly increasing . <EoL>
<BoL> r '' '' '' Decode web-safe base64-encoded strings . <EoL>
<BoL> r '' '' '' Decompress strings . <EoL>
<BoL> r '' '' '' Convert JSON-encoded Example records to binary protocol buffer strings . <EoL>
<BoL> r '' '' '' Reinterpret the bytes of a string as a vector of numbers . <EoL>
<BoL> Delete the tensor for the given tensor handle . <EoL>
<BoL> r '' '' '' Dequantize the 'input ' tensor into a float Tensor . <EoL>
<BoL> Deserialize and concatenate ` SparseTensors ` from a serialized minibatch . <EoL>
<BoL> Wrapper for ` Graph.device ( ) ` using the default graph . <EoL>
<BoL> r '' '' '' Returns a diagonal tensor with a given diagonal values . <EoL>
<BoL> r '' '' '' Returns the diagonal part of the tensor . <EoL>
<BoL> r '' '' '' Computes Psi , the derivative of Lgamma ( the log of the absolute value of <EoL>
<BoL> Compatibility utility required to allow for both V1 and V2 behavior in TF . <EoL>
<BoL> Compatibility utility required to allow for both V1 and V2 behavior in TF . <EoL>
<BoL> Opts out of resource variables . <EoL>
<BoL> Disables the V2 TensorShape behavior and reverts to V1 behavior . <EoL>
<BoL> Helper to ` sample ` which ensures input is 1D . <EoL>
<BoL> Implementation for ` is_scalar_batch ` and ` is_scalar_event ` . <EoL>
<BoL> Returns ` 1 ` if ` prob > 0.5 ` and ` 0 ` otherwise . <EoL>
<BoL> Helper function to standardize op scope . <EoL>
<BoL> Helper to ` sample ` ; sets static shape info . <EoL>
<BoL> Shape of a single sample from a single event index as a 1-D ` Tensor ` . <EoL>
<BoL> Cumulative distribution function . <EoL>
<BoL> Creates a deep copy of the distribution . <EoL>
<BoL> Covariance . <EoL>
<BoL> Computes the ( Shannon ) cross entropy . <EoL>
<BoL> Shannon entropy in nats . <EoL>
<BoL> Shape of a single sample from a single batch as a 1-D int32 ` Tensor ` . <EoL>
<BoL> Indicates that ` batch_shape == [ ] ` . <EoL>
<BoL> Indicates that ` event_shape == [ ] ` . <EoL>
<BoL> Computes the Kullback -- Leibler divergence . <EoL>
<BoL> Log cumulative distribution function . <EoL>
<BoL> Log probability density/mass function . <EoL>
<BoL> Log survival function . <EoL>
<BoL> Mean . <EoL>
<BoL> Mode . <EoL>
<BoL> Shapes of parameters given the desired shape of a call to ` sample ( ) ` . <EoL>
<BoL> param_shapes with static ( i.e . ` TensorShape ` ) shapes . <EoL>
<BoL> Probability density/mass function . <EoL>
<BoL> Quantile function . Aka `` inverse cdf '' or `` percent point function '' . <EoL>
<BoL> Generate samples of the specified shape . <EoL>
<BoL> Standard deviation . <EoL>
<BoL> Survival function . <EoL>
<BoL> Variance . <EoL>
<BoL> Checks the validity of a concentration parameter . <EoL>
<BoL> Checks the validity of a sample . <EoL>
<BoL> Checks the validity of the concentration parameter . <EoL>
<BoL> Checks the validity of a sample . <EoL>
<BoL> Helper to ` _covariance ` and ` _variance ` which computes a shared scale . <EoL>
<BoL> Checks the validity of the concentration parameter . <EoL>
<BoL> Check counts for proper shape , values , then return tensor version . <EoL>
<BoL> Helper to ` _covariance ` and ` _variance ` which computes a shared scale . <EoL>
<BoL> Check counts for proper shape , values , then return tensor version . <EoL>
<BoL> Reconstruct input ` x ` from a its normalized version . <EoL>
<BoL> Standardize input ` x ` to a unit normal . <EoL>
<BoL> Perform the KL registration . <EoL>
<BoL> Initialize the KL registrar . <EoL>
<BoL> Determine if this ` ReparameterizationType ` is equal to another . <EoL>
<BoL> ` high - low ` . <EoL>
<BoL> Divides x / y elementwise ( using Python 2 division operator semantics ) . <EoL>
<BoL> Computes an unsafe divide which returns 0 if the y is zero . <EoL>
<BoL> Computes Python style division of ` x ` by ` y ` . <EoL>
<BoL> Performs a safe saturating cast of ` value ` to ` dtype ` . <EoL>
<BoL> r '' '' '' Partitions ` data ` into ` num_partitions ` tensors using indices from ` partitions ` . <EoL>
<BoL> r '' '' '' Interleave the values from the ` data ` tensors into a single tensor . <EoL>
<BoL> Computes the Levenshtein distance between sequences . <EoL>
<BoL> A generalized contraction between tensors of arbitrary dimension . <EoL>
<BoL> Creates resource variables by default . <EoL>
<BoL> In TensorFlow 2.0 , iterating over a TensorShape instance returns values . <EoL>
<BoL> r '' '' '' Encode strings into web-safe base64 format . <EoL>
<BoL> Updates the shape of a tensor and checks at runtime that the shape holds . <EoL>
<BoL> r '' '' '' Returns the truth value of ( x == y ) element-wise . <EoL>
<BoL> Computes the Gauss error function of ` x ` element-wise . <EoL>
<BoL> r '' '' '' Computes the complementary error function of ` x ` element-wise . <EoL>
<BoL> Creates an ` AbortedError ` . <EoL>
<BoL> Creates an ` AlreadyExistsError ` . <EoL>
<BoL> Creates a ` CancelledError ` . <EoL>
<BoL> Creates a ` DataLossError ` . <EoL>
<BoL> Creates a ` DeadlineExceededError ` . <EoL>
<BoL> Creates a ` FailedPreconditionError ` . <EoL>
<BoL> Creates an ` InternalError ` . <EoL>
<BoL> Creates an ` InvalidArgumentError ` . <EoL>
<BoL> Creates a ` NotFoundError ` . <EoL>
<BoL> Creates an ` OutOfRangeError ` . <EoL>
<BoL> Creates a ` PermissionDeniedError ` . <EoL>
<BoL> Creates a ` ResourceExhaustedError ` . <EoL>
<BoL> Creates an ` UnauthenticatedError ` . <EoL>
<BoL> Creates an ` UnavailableError ` . <EoL>
<BoL> Creates an ` UnimplementedError ` . <EoL>
<BoL> Creates an ` UnknownError ` . <EoL>
<BoL> Returns True if the current thread has eager execution enabled . <EoL>
<BoL> r '' '' '' Computes exponential of x element-wise . \\ ( y = e^x\\ ) . <EoL>
<BoL> Inserts a dimension of 1 into a tensor 's shape . <EoL>
<BoL> Context manager for setting the executor of eagar defined functions . <EoL>
<BoL> r '' '' '' Computes exponential of x - 1 element-wise . <EoL>
<BoL> r '' '' '' Extract ` patches ` from ` images ` and put them in the `` depth '' output dimension . <EoL>
<BoL> r '' '' '' Extract ` patches ` from ` input ` and put them in the `` depth '' output dimension . 3D extension of ` extract_image_patches ` . <EoL>
<BoL> r '' '' '' Fake-quantize the 'inputs ' tensor , type float to 'outputs ' tensor of same type . <EoL>
<BoL> r '' '' '' Compute gradients for a FakeQuantWithMinMaxArgs operation . <EoL>
<BoL> r '' '' '' Fake-quantize the 'inputs ' tensor of type float via global float scalars ` min ` <EoL>
<BoL> r '' '' '' Compute gradients for a FakeQuantWithMinMaxVars operation . <EoL>
<BoL> r '' '' '' Fake-quantize the 'inputs ' tensor of type float and one of the shapes : ` [ d ] ` , <EoL>
<BoL> r '' '' '' Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation . <EoL>
<BoL> Represents discretized dense input . <EoL>
<BoL> A ` _CategoricalColumn ` that returns identity values . <EoL>
<BoL> A ` _CategoricalColumn ` with in-memory vocabulary . <EoL>
<BoL> Returns a column for performing crosses of categorical features . <EoL>
<BoL> Represents multi-hot representation of given categorical column . <EoL>
<BoL> Creates parsing spec dictionary from input feature_columns . <EoL>
<BoL> r '' '' '' Fast Fourier transform . <EoL>
<BoL> r '' '' '' 2D fast Fourier transform . <EoL>
<BoL> r '' '' '' 3D fast Fourier transform . <EoL>
<BoL> r '' '' '' Creates a tensor filled with a scalar value . <EoL>
<BoL> Partitioner to specify a fixed number of shards along given axis . <EoL>
<BoL> r '' '' '' Returns element-wise largest integer not greater than x . <EoL>
<BoL> r '' '' '' Returns x // y element-wise . <EoL>
<BoL> Divides ` x / y ` elementwise , rounding toward the most negative integer . <EoL>
<BoL> r '' '' '' Returns element-wise remainder of division . When ` x < 0 ` xor ` y < 0 ` is <EoL>
<BoL> r '' '' '' Gather slices from ` params ` into a Tensor with shape specified by ` indices ` . <EoL>
<BoL> Wrapper for ` Graph.get_collection ( ) ` using the default graph . <EoL>
<BoL> Wrapper for ` Graph.get_collection_ref ( ) ` using the default graph . <EoL>
<BoL> Returns the default graph for the current thread . <EoL>
<BoL> Returns the default session for the current thread . <EoL>
<BoL> Returns the local seeds an operation should use given an op-specific seed . <EoL>
<BoL> Return the handle of ` data ` . <EoL>
<BoL> Get the tensor of type ` dtype ` by feeding a tensor handle . <EoL>
<BoL> Returns the current variable scope . <EoL>
<BoL> Copies data from oldpath to newpath . <EoL>
<BoL> Deletes everything under dirname recursively . <EoL>
<BoL> Determines whether a path exists or not . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Closes FileIO . Should be called for the WritableFile to be flushed . <EoL>
<BoL> Flushes the Writable file . <EoL>
<BoL> Returns the contents of a file as a string . <EoL>
<BoL> r '' '' '' Reads the next line from the file . Leaves the '\n ' at the end . <EoL>
<BoL> Returns all lines from the file in a list . <EoL>
<BoL> Returns the size of the file . <EoL>
<BoL> Returns the current position in the file . <EoL>
<BoL> Writes file_content to the file . Appends to the end of the file . <EoL>
<BoL> Returns a list of files that match the given pattern ( s ) . <EoL>
<BoL> Returns whether the path is a directory or not . <EoL>
<BoL> Returns a list of entries contained within a directory . <EoL>
<BoL> Creates a directory and all parent/intermediate directories . <EoL>
<BoL> Creates a directory with the name 'dirname ' . <EoL>
<BoL> Deletes the file located at 'filename ' . <EoL>
<BoL> Rename or move a file / directory . <EoL>
<BoL> Returns file statistics for a given path . <EoL>
<BoL> Recursive directory tree generator for directories . <EoL>
<BoL> Computes the global norm of multiple tensors . <EoL>
<BoL> Returns global variables . <EoL>
<BoL> Returns an Op that initializes global variables . <EoL>
<BoL> Extract the subgraph that can reach any of the nodes in 'dest_nodes ' . <EoL>
<BoL> Returns True if the given node_def must run on CPU , otherwise False . <EoL>
<BoL> Prunes out nodes that are n't needed for inference . <EoL>
<BoL> Convenience function to get a shape from a NodeDef 's input string . <EoL>
<BoL> Create an op that groups multiple operations.A sort key that allows None to be compared to strings . <EoL>
<BoL> r '' '' '' Gives a guarantee to the TF runtime that the input tensor is a constant . <EoL>
<BoL> r '' '' '' Return a tensor with the same shape and contents as input . <EoL>
<BoL> r '' '' '' Returns a list of tensors with the same shapes and contents as the input <EoL>
<BoL> r '' '' '' Inverse fast Fourier transform . <EoL>
<BoL> r '' '' '' Inverse 2D fast Fourier transform . <EoL>
<BoL> r '' '' '' Inverse 3D fast Fourier transform . <EoL>
<BoL> r '' '' '' Compute the lower regularized incomplete Gamma function ` P ( a , x ) ` . <EoL>
<BoL> r '' '' '' Compute the upper regularized incomplete Gamma function ` Q ( a , x ) ` . <EoL>
<BoL> r '' '' '' Returns the imaginary part of a complex ( or real ) tensor . <EoL>
<BoL> Adjust the brightness of RGB or Grayscale images . <EoL>
<BoL> Adjust contrast of RGB or grayscale images . <EoL>
<BoL> Performs Gamma Correction on the input image . <EoL>
<BoL> Adjust hue of an RGB image . <EoL>
<BoL> Adjust jpeg encoding quality of an RGB image . <EoL>
<BoL> Adjust saturation of an RGB image . <EoL>
<BoL> Crop the central region of the image ( s ) . <EoL>
<BoL> Convert ` image ` to ` dtype ` , scaling its values if needed . <EoL>
<BoL> r '' '' '' Extracts crops from the input image tensor and resizes them . <EoL>
<BoL> r '' '' '' Decode and Crop a JPEG-encoded image to a uint8 tensor . <EoL>
<BoL> r '' '' '' Decode the first frame of a BMP-encoded image to a uint8 tensor . <EoL>
<BoL> r '' '' '' Decode the first frame of a GIF-encoded image to a uint8 tensor . <EoL>
<BoL> Convenience function for ` decode_bmp ` , ` decode_gif ` , ` decode_jpeg ` , Decodes a GIF image.Decodes a PNG image.Checks if an image is PNG.Decodes a jpeg image . <EoL>
<BoL> r '' '' '' Decode a JPEG-encoded image to a uint8 tensor . <EoL>
<BoL> r '' '' '' Decode a PNG-encoded image to a uint8 or uint16 tensor . <EoL>
<BoL> r '' '' '' Draw bounding boxes on a batch of images . <EoL>
<BoL> r '' '' '' JPEG-encode an image . <EoL>
<BoL> r '' '' '' PNG-encode an image . <EoL>
<BoL> r '' '' '' Extracts a glimpse from the input tensor . <EoL>
<BoL> r '' '' '' Extract the shape information of a JPEG-encoded image . <EoL>
<BoL> Flip an image horizontally ( left to right ) . <EoL>
<BoL> Flip an image vertically ( upside down ) . <EoL>
<BoL> Converts one or more images from Grayscale to RGB . <EoL>
<BoL> r '' '' '' Convert one or more images from HSV to RGB . <EoL>
<BoL> Returns image gradients ( dy , dx ) for each color channel . <EoL>
<BoL> r '' '' '' Convenience function to check if the 'contents ' encodes a JPEG image . <EoL>
<BoL> Linearly scales ` image ` to have zero mean and unit variance . <EoL>
<BoL> Returns the Peak Signal-to-Noise Ratio between a and b . <EoL>
<BoL> Adjust the brightness of images by a random factor . <EoL>
<BoL> Adjust the contrast of an image by a random factor . <EoL>
<BoL> Randomly crops a tensor to a given size . <EoL>
<BoL> Randomly flip an image horizontally ( left to right ) . <EoL>
<BoL> Randomly flips an image vertically ( upside down ) . <EoL>
<BoL> Adjust the hue of an RGB image by a random factor . <EoL>
<BoL> Randomly changes jpeg encoding quality for inducing jpeg noise . <EoL>
<BoL> Adjust the saturation of an RGB image by a random factor . <EoL>
<BoL> r '' '' '' Resize ` images ` to ` size ` using area interpolation . <EoL>
<BoL> r '' '' '' Resize ` images ` to ` size ` using bicubic interpolation . <EoL>
<BoL> r '' '' '' Resize ` images ` to ` size ` using bilinear interpolation . <EoL>
<BoL> Crops and/or pads an image to a target width and height . <EoL>
<BoL> r '' '' '' Resize ` images ` to ` size ` using nearest neighbor interpolation . <EoL>
<BoL> Converts one or more images from RGB to Grayscale . <EoL>
<BoL> r '' '' '' Converts one or more images from RGB to HSV . <EoL>
<BoL> Converts one or more images from RGB to YIQ . <EoL>
<BoL> Converts one or more images from RGB to YUV . <EoL>
<BoL> Rotate image ( s ) counter-clockwise by 90 degrees . <EoL>
<BoL> Returns a tensor holding Sobel edge maps . <EoL>
<BoL> Computes SSIM index between img1 and img2 . <EoL>
<BoL> Computes the MS-SSIM between img1 and img2 . <EoL>
<BoL> Calculate and return the total variation for one or more images . <EoL>
<BoL> Transpose image ( s ) by swapping the height and width dimension . <EoL>
<BoL> Converts one or more images from YIQ to RGB . <EoL>
<BoL> Converts one or more images from YUV to RGB . <EoL>
<BoL> A context manager that lifts ops out of control-flow scopes and function-building graphs . <EoL>
<BoL> Returns an Op that initializes all tables of the default graph . <EoL>
<BoL> See ` tf.global_variables_initializer ` . <EoL>
<BoL> See ` tf.local_variables_initializer ` . <EoL>
<BoL> See ` tf.variables_initializer ` . <EoL>
<BoL> He normal initializer . <EoL>
<BoL> He uniform variance scaling initializer . <EoL>
<BoL> LeCun normal initializer . <EoL>
<BoL> LeCun uniform initializer . <EoL>
<BoL> Returns an Op that initializes all local variables . <EoL>
<BoL> Returns an Op that initializes all tables of the default graph . <EoL>
<BoL> Returns an Op that initializes a list of variables . <EoL>
<BoL> r '' '' '' Computes the inverse permutation of a tensor . <EoL>
<BoL> Convert to RecordWriterOptions for use with PyRecordWriter . <EoL>
<BoL> Convert various option types to a unified string . <EoL>
<BoL> Save the list of files matching pattern , so it is only computed once . <EoL>
<BoL> r '' '' '' Returns the set of files matching one or more glob patterns . <EoL>
<BoL> Parses a single ` Example ` proto . <EoL>
<BoL> r '' '' '' Transforms a serialized tensorflow.TensorProto proto into a Tensor . <EoL>
<BoL> r '' '' '' Reads and outputs the entire contents of the input filename . <EoL>
<BoL> Serialize ` N ` -minibatch ` SparseTensor ` into an ` [ N , 3 ] ` ` Tensor ` . <EoL>
<BoL> Serialize a ` SparseTensor ` into a 3-vector ( 1-D ` Tensor ` ) object . <EoL>
<BoL> An iterator that read the records from a TFRecords file . <EoL>
<BoL> r '' '' '' Writes contents to the file at input filename . Creates file and recursively <EoL>
<BoL> Writes a graph proto to a file . <EoL>
<BoL> Tests if a variable has been initialized . <EoL>
<BoL> Wraps ` call ` , applying pre- and post-processing steps . <EoL>
<BoL> Makes the metric name unique and adds it to the model 's metric name list . <EoL>
<BoL> Checks compatibility between the layer and provided inputs . <EoL>
<BoL> Caches metric name and function attributes for every model output . <EoL>
<BoL> Check trainable weights count consistency . <EoL>
<BoL> Used every step in eager to reset losses . <EoL>
<BoL> Decides how ` self.call ( ) ` is invoked . See base_layer.CallConvention . <EoL>
<BoL> Returns the Callback Model for this Model . <EoL>
<BoL> Private utility to retrieves an attribute ( e.g . inputs ) from a node . <EoL>
<BoL> Create lambdas which compute regularization losses.Creates a regularization loss ` Tensor ` for variable ` v ` . <EoL>
<BoL> Initialized model metric attributes . <EoL>
<BoL> Get Layer inputs from __call__ *args and **kwargs . <EoL>
<BoL> Override to allow ` Layer ` to disable dependency tracking . <EoL>
<BoL> Computes output tensors for new inputs . <EoL>
<BoL> Set model 's input and output specs based on the input data received . <EoL>
<BoL> Sets the metric attributes on the model for all the model outputs . <EoL>
<BoL> Sets the metric attributes on the model for the given output . <EoL>
<BoL> Add Checkpointable dependencies on a list of Layers . <EoL>
<BoL> Util shared between different serialization methods . <EoL>
<BoL> Add loss tensor ( s ) , potentially dependent on layer inputs . <EoL>
<BoL> Add update op ( s ) , potentially dependent on layer inputs . <EoL>
<BoL> Apply the layer on a input . <EoL>
<BoL> Builds the model based on input shapes received . <EoL>
<BoL> Calls the model on new inputs . <EoL>
<BoL> Count the total number of scalars composing the weights . <EoL>
<BoL> Instantiates a Model from its config ( output of ` get_config ( ) ` ) .Deserialize a node.Deserializes a layer , then call it on appropriate inputs . <EoL>
<BoL> Retrieves the input tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves a layer based on either its name ( unique ) or index . <EoL>
<BoL> Retrieves losses relevant to a specific set of inputs . <EoL>
<BoL> Retrieves the output tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves updates relevant to a specific set of inputs . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Loads all layer weights , either from a TensorFlow or an HDF5 weight file . <EoL>
<BoL> Returns predictions for a single batch of samples . <EoL>
<BoL> Saves the model to a single HDF5 file . <EoL>
<BoL> Saves all layer weights . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Prints a string summary of the network . <EoL>
<BoL> Test the model on a single batch of samples . <EoL>
<BoL> Returns a JSON string containing the network configuration . <EoL>
<BoL> Returns a yaml string containing the network configuration . <EoL>
<BoL> Runs a single gradient update on a single batch of data . <EoL>
<BoL> Adds a layer instance on top of the layer stack . <EoL>
<BoL> Removes the last layer in the model . <EoL>
<BoL> Generate class predictions for the input samples . <EoL>
<BoL> Generates class probability predictions for the input samples . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Hard sigmoid activation function . <EoL>
<BoL> Rectified Linear Unit . <EoL>
<BoL> Scaled Exponential Linear Unit ( SELU ) . <EoL>
<BoL> Softmax activation function . <EoL>
<BoL> Softplus activation function . <EoL>
<BoL> Softsign activation function . <EoL>
<BoL> Element-wise absolute value . <EoL>
<BoL> Bitwise reduction ( logical AND ) . <EoL>
<BoL> Bitwise reduction ( logical OR ) . <EoL>
<BoL> Creates a 1D tensor containing a sequence of integers . <EoL>
<BoL> Returns the index of the maximum value along an axis . <EoL>
<BoL> Returns the index of the minimum value along an axis . <EoL>
<BoL> Publicly accessible method for determining the current backend . <EoL>
<BoL> Batchwise dot product . <EoL>
<BoL> Turn a nD tensor into a 2D tensor with same 0th dimension . <EoL>
<BoL> Returns the value of more than one tensor variable . <EoL>
<BoL> Applies batch normalization on x given mean , var , beta and gamma . <EoL>
<BoL> Sets the values of many tensor variables at once . <EoL>
<BoL> Adds a bias vector to a tensor . <EoL>
<BoL> Binary crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Casts a tensor to a different dtype and returns it . <EoL>
<BoL> Cast a Numpy array to the default Keras float type . <EoL>
<BoL> Categorical crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Destroys the current TF graph and creates a new one . <EoL>
<BoL> Element-wise value clipping . <EoL>
<BoL> Concatenates a list of tensors alongside the specified axis . <EoL>
<BoL> Creates a constant tensor . <EoL>
<BoL> Computes cos of x element-wise . <EoL>
<BoL> Returns the static number of elements in a variable or tensor . <EoL>
<BoL> Runs CTC loss algorithm on each batch element . <EoL>
<BoL> Decodes the output of a softmax . <EoL>
<BoL> Converts CTC labels from dense to sparse . <EoL>
<BoL> Multiplies 2 tensors ( and/or variables ) and returns a *tensor* . <EoL>
<BoL> Sets entries in ` x ` to zero at random , while scaling the entire tensor . <EoL>
<BoL> Returns the dtype of a Keras tensor or variable , as a string . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Returns the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Element-wise equality between two tensors . <EoL>
<BoL> Evaluates the value of a variable . <EoL>
<BoL> Element-wise exponential . <EoL>
<BoL> Adds a 1-sized dimension at index `` axis '' . <EoL>
<BoL> Instantiate an identity matrix and returns it . <EoL>
<BoL> Flatten a tensor . <EoL>
<BoL> Returns the default float type , as a string . <EoL>
<BoL> Reduce elems using fn to combine them from left to right . <EoL>
<BoL> Reduce elems using fn to combine them from right to left . <EoL>
<BoL> Instantiates a Keras function . <EoL>
<BoL> Retrieves the elements of indices ` indices ` in the tensor ` reference ` . <EoL>
<BoL> Returns the TF session to be used by the backend . <EoL>
<BoL> Associates a string prefix with an integer counter in a TensorFlow graph . <EoL>
<BoL> Returns the value of a variable . <EoL>
<BoL> Returns the gradients of ` loss ` w.r.t . ` variables ` . <EoL>
<BoL> Element-wise truth value of ( x > y ) . <EoL>
<BoL> Element-wise truth value of ( x > = y ) . <EoL>
<BoL> Segment-wise linear approximation of sigmoid . <EoL>
<BoL> Returns the default image data format convention . <EoL>
<BoL> Selects ` x ` in test phase , and ` alt ` otherwise . <EoL>
<BoL> Returns whether the ` targets ` are in the top ` k ` ` predictions ` . <EoL>
<BoL> Selects ` x ` in train phase , and ` alt ` otherwise . <EoL>
<BoL> Returns the shape of tensor or variable as a tuple of int or None entries . <EoL>
<BoL> Returns whether a tensor is a sparse tensor . <EoL>
<BoL> Normalizes a tensor wrt the L2 norm alongside the specified axis . <EoL>
<BoL> Returns the learning phase flag . <EoL>
<BoL> Element-wise truth value of ( x < y ) . <EoL>
<BoL> Element-wise truth value of ( x < = y ) . <EoL>
<BoL> Element-wise log . <EoL>
<BoL> Sets the manual variable initialization flag . <EoL>
<BoL> Map the function fn over the elements elems and return the outputs . <EoL>
<BoL> Maximum value in a tensor . <EoL>
<BoL> Element-wise maximum of two tensors . <EoL>
<BoL> Mean of a tensor , alongside the specified axis . <EoL>
<BoL> Minimum value in a tensor . <EoL>
<BoL> Element-wise minimum of two tensors . <EoL>
<BoL> Compute the moving average of a variable . <EoL>
<BoL> Start the scope block . <EoL>
<BoL> Initialize the context manager . <EoL>
<BoL> Returns the number of axes in a tensor , as an integer . <EoL>
<BoL> Computes mean and std for batch then apply batch_normalization on batch . <EoL>
<BoL> Element-wise inequality between two tensors . <EoL>
<BoL> Computes the one-hot representation of an integer tensor . <EoL>
<BoL> Instantiates an all-ones variable and returns it . <EoL>
<BoL> Instantiates an all-ones variable of the same shape as another tensor . <EoL>
<BoL> Permutes axes in a tensor . <EoL>
<BoL> Instantiates a placeholder tensor and returns it . <EoL>
<BoL> Element-wise exponentiation . <EoL>
<BoL> Prints ` message ` and the tensor value when evaluated . <EoL>
<BoL> Multiplies the values in a tensor , alongside the specified axis . <EoL>
<BoL> Returns a tensor with random binomial distribution of values . <EoL>
<BoL> Returns a tensor with normal distribution of values . <EoL>
<BoL> Returns a tensor with uniform distribution of values . <EoL>
<BoL> Instantiates a variable with values drawn from a uniform distribution . <EoL>
<BoL> Rectified linear unit . <EoL>
<BoL> Repeats a 2D tensor . <EoL>
<BoL> Repeats the elements of a tensor along an axis , like ` np.repeat ` . <EoL>
<BoL> Resets graph identifiers . <EoL>
<BoL> Reshapes a tensor to the specified shape . <EoL>
<BoL> Resizes the volume contained in a 5D tensor . <EoL>
<BoL> Reverse a tensor along the specified axes . <EoL>
<BoL> RNN step function.RNN step function . <EoL>
<BoL> Element-wise rounding to the closest integer . <EoL>
<BoL> Sets the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Sets the default float type . <EoL>
<BoL> Sets the value of the image data format convention . <EoL>
<BoL> Sets the learning phase to a fixed value . <EoL>
<BoL> Sets the global TensorFlow session . <EoL>
<BoL> Sets the value of a variable , from a Numpy array . <EoL>
<BoL> Returns the symbolic shape of a tensor or variable . <EoL>
<BoL> Element-wise sigmoid . <EoL>
<BoL> Element-wise sign . <EoL>
<BoL> Computes sin of x element-wise . <EoL>
<BoL> Softmax of a tensor . <EoL>
<BoL> Softplus of a tensor . <EoL>
<BoL> Softsign of a tensor . <EoL>
<BoL> Categorical crossentropy with integer targets . <EoL>
<BoL> Pads the 2nd and 3rd dimensions of a 4D tensor . <EoL>
<BoL> Pads 5D tensor with zeros along the depth , height , width dimensions . <EoL>
<BoL> Element-wise square root . <EoL>
<BoL> Element-wise square . <EoL>
<BoL> Removes a 1-dimension from the tensor at index `` axis '' . <EoL>
<BoL> Stacks a list of rank ` R ` tensors into a rank ` R+1 ` tensor . <EoL>
<BoL> Standard deviation of a tensor , alongside the specified axis . <EoL>
<BoL> Returns ` variables ` but with zero gradient w.r.t . every other variable . <EoL>
<BoL> Sum of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Switches between two operations depending on a scalar value . <EoL>
<BoL> Element-wise tanh . <EoL>
<BoL> Pads the middle dimension of a 3D tensor . <EoL>
<BoL> Converts a sparse tensor into a dense tensor and returns it . <EoL>
<BoL> Transposes a tensor and returns it . <EoL>
<BoL> Returns a tensor with truncated random normal distribution of values . <EoL>
<BoL> Update the value of ` x ` by adding ` increment ` . <EoL>
<BoL> Update the value of ` x ` by subtracting ` decrement ` . <EoL>
<BoL> Variance of a tensor , alongside the specified axis . <EoL>
<BoL> Instantiates a variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable of the same shape as another tensor . <EoL>
<BoL> Resets wait counter and cooldown counter . <EoL>
<BoL> Sets file writer . <EoL>
<BoL> Defines histogram ops when histogram_freq > 0 . <EoL>
<BoL> Writes metrics out as custom scalar summaries . <EoL>
<BoL> Writes scalar summaries for metrics on every training batch . <EoL>
<BoL> Add histogram op to Model eval_function callbacks , reset batch count . <EoL>
<BoL> Checks if summary ops should run next epoch , logs scalar summaries . <EoL>
<BoL> Checks if histogram summaries can be run . <EoL>
<BoL> Sets Keras model and creates summary ops . <EoL>
<BoL> Loads the Boston Housing dataset . <EoL>
<BoL> Loads CIFAR10 dataset . <EoL>
<BoL> Loads CIFAR100 dataset . <EoL>
<BoL> Loads the Fashion-MNIST dataset . <EoL>
<BoL> Retrieves the dictionary mapping word indices back to words . <EoL>
<BoL> Loads the MNIST dataset . <EoL>
<BoL> Retrieves the dictionary mapping word indices back to words . <EoL>
<BoL> Alias for ` add_weight ` . <EoL>
<BoL> Computes an output mask tensor . <EoL>
<BoL> Computes the output shape of the layer . <EoL>
<BoL> Creates a layer from its config . <EoL>
<BoL> Returns the current weights of the layer . <EoL>
<BoL> Sets the weights of the layer , from Numpy arrays . <EoL>
<BoL> Returns the configuration of the initializer as a JSON-serializable dict . <EoL>
<BoL> Creates the variables of the layer . <EoL>
<BoL> This is where the layer 's logic lives . <EoL>
<BoL> Computes the shape of the resultant of an elementwise operation . <EoL>
<BoL> Returns the config of the layer . <EoL>
<BoL> Returns the output of fused batch norm . <EoL>
<BoL> Returns the correction and update values for renorm.Updates a moving average and weight , returns the unbiased value.Updates the var and weight , returns their updated ratio . <EoL>
<BoL> ` Bidirectional.__call__ ` implements the same API as the wrapped ` RNN ` . <EoL>
<BoL> Calculates padding for 'causal ' option for 1-d conv layers . <EoL>
<BoL> Validate the state spec between the initial_state and the state_size . <EoL>
<BoL> Computes carry and output using split kernels . <EoL>
<BoL> Computes carry and output using fused kernels . <EoL>
<BoL> Find and replace a missing dimension in an output shape . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Finds non-specific dimensions in the static shapes . <EoL>
<BoL> Computes an output mask tensor for Embedding layer . <EoL>
<BoL> Functional interface to the ` Add ` layer . <EoL>
<BoL> Functional interface to the ` Average ` layer . <EoL>
<BoL> Functional interface to the ` Concatenate ` layer . <EoL>
<BoL> Functional interface to the ` Dot ` layer . <EoL>
<BoL> Functional interface to the ` Maximum ` layer . <EoL>
<BoL> Functional interface to the ` Minimum ` layer . <EoL>
<BoL> Functional interface to the ` Multiply ` layer . <EoL>
<BoL> Functional interface to the ` Subtract ` layer . <EoL>
<BoL> Logarithm of the hyperbolic cosine of the prediction error . <EoL>
<BoL> Clone any ` Model ` instance . <EoL>
<BoL> Loads a model saved via ` save_model ` .Handles custom object lookup . <EoL>
<BoL> Instantiates a Keras model from its config . <EoL>
<BoL> Parses a JSON model configuration file and returns a model instance . <EoL>
<BoL> Parses a yaml model configuration file and returns a model instance . <EoL>
<BoL> Saves a model to a HDF5 file . <EoL>
<BoL> Returns gradients of ` loss ` with respect to ` params ` . <EoL>
<BoL> Returns the current value of the weights of the optimizer . <EoL>
<BoL> Sets the weights of the optimizer , from Numpy arrays . <EoL>
<BoL> Inverse of the ` serialize ` function . <EoL>
<BoL> Retrieves a Keras Optimizer instance . <EoL>
<BoL> For python 2.x . <EoL>
<BoL> Applies a transformation to an image according to given parameters . <EoL>
<BoL> Generates random parameters for a transformation . <EoL>
<BoL> Applies a random transformation to an image . <EoL>
<BoL> Applies the normalization configuration to a batch of inputs . <EoL>
<BoL> For python 2.x . <EoL>
<BoL> Performs a brightness shift . <EoL>
<BoL> Performs a channel shift . <EoL>
<BoL> Converts a 3D Numpy array to a PIL Image instance . <EoL>
<BoL> Converts a PIL Image instance to a Numpy array . <EoL>
<BoL> Performs a random brightness shift . <EoL>
<BoL> Performs a random channel shift . <EoL>
<BoL> Create a generator that iterate over the Sequence . <EoL>
<BoL> Returns the TimeseriesGenerator configuration as Python dictionary . <EoL>
<BoL> Method called at the end of every epoch . <EoL>
<BoL> Returns a JSON string containing the timeseries generator <EoL>
<BoL> Generates a word rank-based probabilistic sampling table . <EoL>
<BoL> Updates internal vocabulary based on a list of sequences . <EoL>
<BoL> Updates internal vocabulary based on a list of texts . <EoL>
<BoL> Returns the tokenizer configuration as Python dictionary . <EoL>
<BoL> Converts a list of sequences into a Numpy matrix . <EoL>
<BoL> Transforms each sequence into a list of text . <EoL>
<BoL> Transforms each sequence in ` sequences ` to a list of texts ( strings ) . <EoL>
<BoL> Convert a list of texts to a Numpy matrix . <EoL>
<BoL> Transforms each text in texts to a sequence of integers . <EoL>
<BoL> Transforms each text in ` texts ` to a sequence of integers . <EoL>
<BoL> Returns a JSON string containing the tokenizer configuration . <EoL>
<BoL> Gets the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Sends current Iterable to all workers . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Starts the handler 's workers . <EoL>
<BoL> Stops running threads and wait for them to exit , if necessary . <EoL>
<BoL> Gets the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Wait for the queue to be empty . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Updates the progress bar . <EoL>
<BoL> Gets batch at position ` index ` . <EoL>
<BoL> Number of batch in the Sequence . <EoL>
<BoL> Gets the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Converts all convolution kernels in a model from Theano to TensorFlow . <EoL>
<BoL> Provides a scope that changes to ` _GLOBAL_CUSTOM_OBJECTS ` can not escape . <EoL>
<BoL> Retrieves a live reference to the global dictionary of custom objects . <EoL>
<BoL> Returns the list of input tensors necessary to compute ` tensor ` . <EoL>
<BoL> Replicates a model on different GPUs.Slice an array into ` parts ` slices and return slice ` i ` . <EoL>
<BoL> Normalizes a Numpy array . <EoL>
<BoL> Converts a class vector ( integers ) to binary class matrix . <EoL>
<BoL> Checks for user typos in ` params ` . <EoL>
<BoL> Filters ` sk_params ` and returns those in ` fn ` 's arguments . <EoL>
<BoL> Constructs a new model with ` build_fn ` & fit the model to ` ( x , y ) ` . <EoL>
<BoL> Gets parameters for this estimator . <EoL>
<BoL> Returns the class predictions for the given test data . <EoL>
<BoL> Returns class probability estimates for the given test data . <EoL>
<BoL> Returns the mean accuracy on the given test data and labels . <EoL>
<BoL> Sets the parameters of this estimator . <EoL>
<BoL> Constructs a new model with ` build_fn ` & fit the model to ` ( x , y ) ` . <EoL>
<BoL> Returns predictions for the given test data . <EoL>
<BoL> Returns the mean loss on the given test data and labels . <EoL>
<BoL> Use Keras-style variable management . <EoL>
<BoL> Use Keras-style variable management . <EoL>
<BoL> Flattens an input tensor while preserving the batch axis ( axis 0 ) . <EoL>
<BoL> r '' '' '' Computes \\ ( ln ( |Beta ( x ) | ) \\ ) , reducing along the last dimension . <EoL>
<BoL> r '' '' '' Computes the log of the absolute value of ` Gamma ( x ) ` element-wise . <EoL>
<BoL> r '' '' '' Generates values in an interval . <EoL>
<BoL> Private default implementation of _assert_non_singular . <EoL>
<BoL> Default implementation of _assert_positive_definite . <EoL>
<BoL> Check that arg.dtype == self.dtype . <EoL>
<BoL> Generic and often inefficient implementation . Override often . <EoL>
<BoL> Return the maximum condition number that we consider nonsingular . <EoL>
<BoL> Helper function to standardize op scope . <EoL>
<BoL> Default implementation of _solve . <EoL>
<BoL> Default implementation of _solvevec . <EoL>
<BoL> Generic and often inefficient implementation . Override often . <EoL>
<BoL> Add matrix represented by this operator to ` x ` . Equivalent to ` A + x ` . <EoL>
<BoL> Returns an ` Op ` that asserts this operator is non singular . <EoL>
<BoL> Returns an ` Op ` that asserts this operator is positive definite . <EoL>
<BoL> Returns an ` Op ` that asserts this operator is self-adjoint . <EoL>
<BoL> Shape of batch dimensions of this operator , determined at runtime . <EoL>
<BoL> Determinant for every batch member . <EoL>
<BoL> Efficiently get the [ batch ] diagonal part of this operator . <EoL>
<BoL> Dimension ( in the sense of vector spaces ) of the domain of this operator . <EoL>
<BoL> Log absolute value of determinant for every batch member . <EoL>
<BoL> Transform [ batch ] matrix ` x ` with left multiplication : ` x -- > Ax ` . <EoL>
<BoL> Transform [ batch ] vector ` x ` with left multiplication : ` x -- > Ax ` . <EoL>
<BoL> Dimension ( in the sense of vector spaces ) of the range of this operator . <EoL>
<BoL> Shape of this ` LinearOperator ` , determined at runtime . <EoL>
<BoL> Solve ( exact or approx ) ` R ` ( batch ) systems of equations : ` A X = rhs ` . <EoL>
<BoL> Solve single equation with best effort : ` A X = rhs ` . <EoL>
<BoL> Rank ( in the sense of tensors ) of matrix corresponding to this operator . <EoL>
<BoL> Return a dense ( batch ) matrix representing this operator . <EoL>
<BoL> Trace of the linear operator , equal to sum of ` self.diag_part ( ) ` . <EoL>
<BoL> Split ` x ` into blocks matching ` operators ` 's ` domain_dimension ` . <EoL>
<BoL> Broadcast batch dims of batch matrix ` x ` and spectrum . <EoL>
<BoL> Static check of spectrum . Then return ` Tensor ` version . <EoL>
<BoL> FFT along the last self.block_depth dimensions of x . <EoL>
<BoL> IFFT along the last self.block_depth dimensions of x . <EoL>
<BoL> Flatten the block dimensions then reshape to a batch matrix . <EoL>
<BoL> Shape batch matrix to batch vector , then blockify trailing dimensions . <EoL>
<BoL> Returns an ` Op ` that asserts this operator has Hermitian spectrum . <EoL>
<BoL> Shape of the block dimensions of ` self.spectrum ` . <EoL>
<BoL> Convolution kernel corresponding to ` self.spectrum ` . <EoL>
<BoL> Static check of diag . <EoL>
<BoL> Static check of the ` matrix ` argument . <EoL>
<BoL> Static check of init arg ` batch_shape ` , possibly add asserts . <EoL>
<BoL> Static check of init arg ` num_rows ` , possibly add asserts . <EoL>
<BoL> Minimum of domain/range dimension , if statically available , else None . <EoL>
<BoL> Minimum of domain/range dimension , as a tensor . <EoL>
<BoL> Returns the diagonal of this operator as all ones . <EoL>
<BoL> Return 'x ' , possibly after broadcasting the leading dimensions . <EoL>
<BoL> Add matrix represented by this operator to ` mat ` . Equiv to ` I + mat ` . <EoL>
<BoL> Static check that shapes are compatible . <EoL>
<BoL> Set attributes self._diag_update and self._diag_operator . <EoL>
<BoL> Static check of the ` tril ` argument . <EoL>
<BoL> Static check of init arg ` num_rows ` , possibly add asserts . <EoL>
<BoL> Add matrix represented by this operator to ` mat ` . Equiv to ` I + mat ` . <EoL>
<BoL> Static check of init arg ` batch_shape ` , possibly add asserts . <EoL>
<BoL> Static check of init arg ` num_rows ` , possibly add asserts . <EoL>
<BoL> Minimum of domain/range dimension , if statically available , else None . <EoL>
<BoL> Minimum of domain/range dimension , as a tensor . <EoL>
<BoL> Return 'x ' , possibly after broadcasting the leading dimensions . <EoL>
<BoL> Returns the diagonal of this operator as all zeros . <EoL>
<BoL> Add matrix represented by this operator to ` mat ` . Equiv to ` I + mat ` . <EoL>
<BoL> Transposes the last two dimensions of and conjugates tensor ` matrix ` . <EoL>
<BoL> r '' '' '' Copy a tensor setting everything outside a central band in each innermost matrix <EoL>
<BoL> r '' '' '' Computes the determinant of one or more square matrices . <EoL>
<BoL> r '' '' '' Returns a batched diagonal tensor with a given batched diagonal values . <EoL>
<BoL> r '' '' '' Returns the batched diagonal part of a batched tensor . <EoL>
<BoL> Computes the eigen decomposition of a batch of self-adjoint matrices . <EoL>
<BoL> Computes the eigenvalues of one or more self-adjoint matrices . <EoL>
<BoL> r '' '' '' Computes the matrix exponential of one or more square matrices . <EoL>
<BoL> r '' '' '' Computes the inverse of one or more square invertible matrices or their <EoL>
<BoL> Normalizes along dimension ` axis ` using an L2 norm . <EoL>
<BoL> Computes log of the determinant of a hermitian positive definite matrix . <EoL>
<BoL> r '' '' '' Computes the matrix logarithm of one or more square matrices : <EoL>
<BoL> r '' '' '' Solves one or more linear least-squares problems.Determines whether to use the composite or specialized CPU kernel.Computes ( A^H*A + l2_regularizer ) ^ { -1 } * A^H * rhs.Computes A^H * ( A*A^H + l2_regularizer ) ^ { -1 } * rhs.Composite implementation of matrix_solve_ls that supports GPU . <EoL>
<BoL> r '' '' '' Computes the QR decompositions of one or more matrices . <EoL>
<BoL> r '' '' '' Returns a batched matrix tensor with new batched diagonal values . <EoL>
<BoL> r '' '' '' Computes the sign and the log of the absolute value of the determinant of <EoL>
<BoL> r '' '' '' Solves systems of linear equations . <EoL>
<BoL> r '' '' '' Computes the matrix square root of one or more square matrices : <EoL>
<BoL> r '' '' '' Computes the singular value decompositions of one or more matrices . <EoL>
<BoL> r '' '' '' Tensor contraction of a and b along specified axes.Helper method to perform transpose and reshape for contraction op.Generates two sets of contraction axes for the two tensor arguments . <EoL>
<BoL> Compute the trace of a tensor ` x ` . <EoL>
<BoL> Transposes last two dimensions of tensor ` a ` . <EoL>
<BoL> r '' '' '' Solves systems of linear equations with upper or lower triangular matrices by <EoL>
<BoL> Constructor . <EoL>
<BoL> Makes sure no numpy arrays pointing to internal buffers are active . <EoL>
<BoL> Gets tensor details . <EoL>
<BoL> Returns true if there exist no numpy array buffers . <EoL>
<BoL> Gets model input details . <EoL>
<BoL> Gets model output details . <EoL>
<BoL> Gets the value of the input tensor ( get a copy ) . <EoL>
<BoL> Gets tensor details for every tensor with valid tensor details . <EoL>
<BoL> Invoke the interpreter . <EoL>
<BoL> Resizes an input tensor . <EoL>
<BoL> Sets the value of the input tensor . Note this copies data in ` value ` . <EoL>
<BoL> Returns function that gives a numpy view of the current tensor buffer . <EoL>
<BoL> Create a OpHint . <EoL>
<BoL> Add a wrapped input argument to the hint . <EoL>
<BoL> Add a sequence of inputs to the function invocation . <EoL>
<BoL> Add a wrapped output argument to the hint . <EoL>
<BoL> Add a sequence of outputs to the function invocation . <EoL>
<BoL> Checks if the input and output tensors have been initialized . <EoL>
<BoL> Sets the first dimension of the input tensor to ` batch_size ` . <EoL>
<BoL> Converts a TensorFlow GraphDef based on instance variables . <EoL>
<BoL> Creates a TFLiteConverter class from a TensorFlow Session . <EoL>
<BoL> Returns a list of the names of the input tensors . <EoL>
<BoL> Creates a TocoConverter class from a TensorFlow Session . <EoL>
<BoL> Convert a model using TOCO . <EoL>
<BoL> Loads a TensorFlow plugin , containing file system implementation . <EoL>
<BoL> Loads a TensorFlow plugin . <EoL>
<BoL> Loads a TensorFlow plugin , containing custom ops and kernels . <EoL>
<BoL> Returns local variables . <EoL>
<BoL> r '' '' '' Computes natural logarithm of x element-wise . <EoL>
<BoL> r '' '' '' Computes natural logarithm of ( 1 + x ) element-wise . <EoL>
<BoL> Computes log sigmoid of ` x ` element-wise . <EoL>
<BoL> Return how much logging output will be produced . <EoL>
<BoL> Log 'msg % args ' at level 'level ' once per 'n ' times . <EoL>
<BoL> Log 'msg % args ' at level 'level ' only first 'n ' times . <EoL>
<BoL> Log 'msg % args ' at level 'level ' only if condition is fulfilled . <EoL>
<BoL> Sets the threshold for what messages will be logged . <EoL>
<BoL> r '' '' '' Returns the truth value of x AND y element-wise . <EoL>
<BoL> r '' '' '' Returns the truth value of x OR y element-wise . <EoL>
<BoL> x ^ y = ( x | y ) & ~ ( x & y ) . <EoL>
<BoL> Adds a externally defined loss to the collection of losses . <EoL>
<BoL> Gets the list of losses from the loss_collection . <EoL>
<BoL> Gets the total regularization loss . <EoL>
<BoL> Gets the list of regularization losses . <EoL>
<BoL> Returns a tensor whose value represents the total loss . <EoL>
<BoL> Create a numpy ndarray from a tensor . <EoL>
<BoL> Create a TensorProto.Argument must be a dense tensor : % s <EoL>
<BoL> r '' '' '' Reshapes a tensor . <EoL>
<BoL> r '' '' '' Reverses specific dimensions of a tensor . <EoL>
<BoL> r '' '' '' Scatter ` updates ` into a new tensor according to ` indices ` . <EoL>
<BoL> r '' '' '' SpaceToBatch for N-D tensors of type T . <EoL>
<BoL> r '' '' '' Constructs a tensor by tiling a given tensor . <EoL>
<BoL> The loop body of map_fn . <EoL>
<BoL> Computes the Bessel i0 function of ` x ` element-wise . <EoL>
<BoL> Computes the Bessel i0e function of ` x ` element-wise . <EoL>
<BoL> Computes the Bessel i1 function of ` x ` element-wise . <EoL>
<BoL> Computes the Bessel i1e function of ` x ` element-wise . <EoL>
<BoL> r '' '' '' Says whether the targets are in the top ` K ` predictions . <EoL>
<BoL> Computes log softmax activations . <EoL>
<BoL> r '' '' '' Returns the max of x and y ( i.e . x > y ? x : y ) element-wise . <EoL>
<BoL> r '' '' '' Returns the min of x and y ( i.e . x < y ? x : y ) element-wise . <EoL>
<BoL> Computes numerical negative value element-wise . <EoL>
<BoL> r '' '' '' Returns the truth value of ( x ! = y ) element-wise . <EoL>
<BoL> r '' '' '' Compute the polygamma function \\ ( \psi^ { ( n ) } ( x ) \\ ) . <EoL>
<BoL> r '' '' '' Computes the elementwise value of a polynomial . <EoL>
<BoL> r '' '' '' Computes the power of one value to another . <EoL>
<BoL> r '' '' '' Returns the real part of a complex ( or real ) tensor . <EoL>
<BoL> r '' '' '' Computes the reciprocal of x element-wise . <EoL>
<BoL> r '' '' '' Returns element-wise integer closest to x . <EoL>
<BoL> Rounds the values of a tensor to the nearest integer , element-wise . <EoL>
<BoL> r '' '' '' Computes reciprocal of square root of x element-wise . <EoL>
<BoL> Multiplies a scalar times a ` Tensor ` or ` IndexedSlices ` object . <EoL>
<BoL> r '' '' '' Computes the maximum along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the mean along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the minimum along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the product along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the sum along segments of a tensor . <EoL>
<BoL> Computes sigmoid of ` x ` element-wise . <EoL>
<BoL> Returns an element-wise indication of the sign of a number . <EoL>
<BoL> r '' '' '' Computes sin of x element-wise . <EoL>
<BoL> r '' '' '' Computes hyperbolic sine of x element-wise . <EoL>
<BoL> Computes softmax activations . <EoL>
<BoL> r '' '' '' Computes softplus : ` log ( exp ( features ) + 1 ) ` . <EoL>
<BoL> r '' '' '' Computes softsign : ` features / ( abs ( features ) + 1 ) ` . <EoL>
<BoL> r '' '' '' Computes square root of x element-wise . <EoL>
<BoL> r '' '' '' Computes square of x element-wise . <EoL>
<BoL> r '' '' '' Returns ( x - y ) ( x - y ) element-wise . <EoL>
<BoL> r '' '' '' Computes tan of x element-wise . <EoL>
<BoL> Computes hyperbolic tangent of ` x ` element-wise . <EoL>
<BoL> Finds values and indices of the ` k ` largest entries for the last dimension . <EoL>
<BoL> Divides x / y elementwise ( using Python 3 division operator semantics ) . <EoL>
<BoL> r '' '' '' Computes the maximum along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the mean along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the minimum along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the product along segments of a tensor . <EoL>
<BoL> r '' '' '' Computes the sum along segments of a tensor divided by the sqrt ( N ) . <EoL>
<BoL> r '' '' '' Computes the sum along segments of a tensor . <EoL>
<BoL> r '' '' '' Returns 0 if x == 0 , and x / y otherwise , elementwise . <EoL>
<BoL> r '' '' '' Returns 0 if x == 0 , and x * log ( y ) otherwise , elementwise . <EoL>
<BoL> Returns the fraction of zeros in ` value ` . <EoL>
<BoL> r '' '' '' Compute the Hurwitz zeta function \\ ( \zeta ( x , q ) \\ ) . <EoL>
<BoL> Broadcasts parameters for evaluation on an N-D grid . <EoL>
<BoL> Interpolation formula inspired by section 4 of Davis & Goadrich 2006.Computes the roc-auc or pr-auc based on confusion counts . <EoL>
<BoL> Compute the mean intersection-over-union via the confusion matrix . <EoL>
<BoL> Computes the specificity at the given sensitivity . <EoL>
<BoL> Partitioner that partitions list for a variable of given shape and type . <EoL>
<BoL> Returns all variables in the MODEL_VARIABLES collection . <EoL>
<BoL> Returns all variables that maintain their moving averages . <EoL>
<BoL> Draws samples from a multinomial distribution . <EoL>
<BoL> Atrous convolution ( a.k.a . convolution with holes or dilated convolution ) . <EoL>
<BoL> Performs the average pooling on the input . <EoL>
<BoL> r '' '' '' Performs 3D average pooling on the input . <EoL>
<BoL> Adds ` bias ` to ` value ` . <EoL>
<BoL> r '' '' '' Computes a 2-D convolution given 4-D ` input ` and ` filter ` tensors . <EoL>
<BoL> r '' '' '' Computes the gradients of convolution with respect to the filter . <EoL>
<BoL> r '' '' '' Computes the gradients of convolution with respect to the input . <EoL>
<BoL> r '' '' '' Computes a 3-D convolution given 5-D ` input ` and ` filter ` tensors . <EoL>
<BoL> r '' '' '' Computes the gradients of 3-D convolution with respect to the filter . <EoL>
<BoL> Computes Concatenated ReLU . <EoL>
<BoL> Performs greedy decoding on the logits given in input ( best path ) . <EoL>
<BoL> r '' '' '' Computes a 2-D depthwise convolution given 4-D ` input ` and ` filter ` tensors . <EoL>
<BoL> r '' '' '' Computes the gradients of depthwise convolution with respect to the filter . <EoL>
<BoL> r '' '' '' Computes the gradients of depthwise convolution with respect to the input . <EoL>
<BoL> r '' '' '' Computes the grayscale dilation of 4-D ` input ` and 3-D ` filter ` tensors . <EoL>
<BoL> Computes dropout . <EoL>
<BoL> r '' '' '' Computes exponential linear : ` exp ( features ) - 1 ` if < 0 , ` features ` otherwise . <EoL>
<BoL> Computes the grayscale erosion of 4-D ` value ` and 3-D ` kernel ` tensors . <EoL>
<BoL> r '' '' '' Performs fractional average pooling on the input . <EoL>
<BoL> r '' '' '' Performs fractional max pooling on the input . <EoL>
<BoL> r '' '' '' L2 Loss . <EoL>
<BoL> Compute the Leaky ReLU activation function . <EoL>
<BoL> r '' '' '' Local Response Normalization . <EoL>
<BoL> Computes log Poisson loss given ` log_input ` . <EoL>
<BoL> Performs the max pooling on the input . <EoL>
<BoL> r '' '' '' Performs 3D max pooling on the input . <EoL>
<BoL> r '' '' '' Performs max pooling on the input and outputs both max values and indices . <EoL>
<BoL> Calculate the mean and variance of based on the sufficient statistics . <EoL>
<BoL> r '' '' '' Produces the average pool of the input tensor for quantized types . <EoL>
<BoL> r '' '' '' Computes a 2D convolution given quantized 4D input and filter tensors . <EoL>
<BoL> r '' '' '' Produces the max pool of the input tensor for quantized types . <EoL>
<BoL> r '' '' '' Computes Quantized Rectified Linear X : ` min ( max ( features , 0 ) , max_value ) ` <EoL>
<BoL> Copy some tensors through via array_ops.where . <EoL>
<BoL> r '' '' '' Computes rectified linear : ` max ( features , 0 ) ` . <EoL>
<BoL> Computes Rectified Linear 6 : ` min ( max ( features , 0 ) , 6 ) ` . <EoL>
<BoL> Computes Relu ( x * weight + biases ) . <EoL>
<BoL> Run this RNN cell on inputs , starting from the given state . <EoL>
<BoL> Determines op naming for the Layer . <EoL>
<BoL> Long short-term memory cell ( LSTM ) . <EoL>
<BoL> Return zero-filled state tensor ( s ) . <EoL>
<BoL> Most basic RNN : output = new_state = act ( W * input + U * state + B ) . <EoL>
<BoL> Run the cell on specified device . <EoL>
<BoL> Construct a ` DeviceWrapper ` for ` cell ` with device ` device ` . <EoL>
<BoL> Run the cell with the declared dropouts . <EoL>
<BoL> Run this RNN cell on inputs , starting from the given state . <EoL>
<BoL> Create a RNN cell composed sequentially of a number of RNNCells . <EoL>
<BoL> Run this multi-layer cell on inputs , starting from state . <EoL>
<BoL> Run the cell and then apply the residual_fn on its inputs to its outputs . <EoL>
<BoL> Constructs a ` ResidualWrapper ` for ` cell ` . <EoL>
<BoL> r '' '' '' Computes scaled exponential linear : ` scale * alpha * ( exp ( features ) - 1 ) ` <EoL>
<BoL> Computes softmax cross entropy between ` logits ` and ` labels ` . <EoL>
<BoL> Calculate the sufficient statistics for the mean and variance of ` x ` . <EoL>
<BoL> Computes a weighted cross entropy . <EoL>
<BoL> Returns the frequency-weighted mean and variance of ` x ` . <EoL>
<BoL> Computes matmul ( x , weights ) + biases . <EoL>
<BoL> r '' '' '' Does nothing . Only useful as a placeholder for control edges . <EoL>
<BoL> Use this function to prevent regularization of variables . <EoL>
<BoL> Creates a tensor with all elements set to 1 . <EoL>
<BoL> Creates a tensor with all elements set to 1 . <EoL>
<BoL> DEPRECATED . Same as name_scope above , just different argument order . <EoL>
<BoL> Pads a tensor . <EoL>
<BoL> Stacks a list of rank- ` R ` tensors into one rank- ` ( R+1 ) ` tensor in parallel . <EoL>
<BoL> Inserts a placeholder for a tensor that will be always fed . <EoL>
<BoL> r '' '' '' A placeholder op that passes through ` input ` when its output is not fed . <EoL>
<BoL> Print the specified inputs . <EoL>
<BoL> Constructor . <EoL>
<BoL> Whether only account the statistics of displayed profiler nodes . <EoL>
<BoL> Build a profiling option . <EoL>
<BoL> Options used to profile trainable variable parameters . <EoL>
<BoL> Selectively counting statistics based on node types . <EoL>
<BoL> Do not generate side-effect outputs . <EoL>
<BoL> Print the result to a file . <EoL>
<BoL> Set the maximum depth of display . <EoL>
<BoL> Only show profiler nodes holding no less than 'min_params ' parameters . <EoL>
<BoL> Generate a pprof profile gzip file . <EoL>
<BoL> Print the result to stdout . <EoL>
<BoL> Which profile step to use for profiling . <EoL>
<BoL> Generate a timeline json file . <EoL>
<BoL> Constructor . <EoL>
<BoL> Writes the profile to a file . <EoL>
<BoL> Add statistics of a step . <EoL>
<BoL> Automatically detect problems and generate reports . <EoL>
<BoL> Profile the statistics of graph nodes , organized by dataflow graph . <EoL>
<BoL> Profile the statistics of graph nodes , organized by name scope . <EoL>
<BoL> Profile the statistics of the Operation types ( e.g . MatMul , Conv2D ) . <EoL>
<BoL> Profile the statistics of the Python codes . <EoL>
<BoL> Serialize the ProfileProto to a binary string . <EoL>
<BoL> Auto profile and advise . <EoL>
<BoL> Log provided 'op_log ' , and add additional model information below . <EoL>
<BoL> Wraps a python function and uses it as a TensorFlow op . <EoL>
<BoL> r '' '' '' Quantizes then dequantizes a tensor . <EoL>
<BoL> r '' '' '' Concatenates quantized tensors along one dimension . <EoL>
<BoL> Draws ` shape ` samples from each of the given Poisson distribution ( s ) . <EoL>
<BoL> Sets the graph-level random seed . <EoL>
<BoL> Randomly shuffles a tensor along its first dimension . <EoL>
<BoL> Creates a sequence of numbers . <EoL>
<BoL> Returns the rank of a tensor . <EoL>
<BoL> r '' '' '' Returns x / y element-wise for real types . <EoL>
<BoL> r '' '' '' Replace elements of ` input ` matching regex ` pattern ` with ` rewrite ` . <EoL>
<BoL> Clears the default graph stack and resets the global default graph . <EoL>
<BoL> Get a direct path to the data files colocated with the script . <EoL>
<BoL> Get the path to the specified file in the data dependencies . <EoL>
<BoL> Get a root directory containing all the data attributes in the build rule . <EoL>
<BoL> Load the resource at given path , where path is relative to tensorflow/ . <EoL>
<BoL> Readahead files not implemented ; simply returns given path . <EoL>
<BoL> Add train op to the SavedModel . <EoL>
<BoL> Adds main op to the SavedModel . <EoL>
<BoL> Creates a sharded saver if one does not already exist . <EoL>
<BoL> Saves asset to the meta graph and writes asset files to disk . <EoL>
<BoL> Tags the meta graph def and adds it to the SavedModel . <EoL>
<BoL> Validates the ` SignatureDef ` entries in the signature def map . <EoL>
<BoL> Validates the ` TensorInfo ` proto . <EoL>
<BoL> Writes a ` SavedModel ` protocol buffer to disk . <EoL>
<BoL> Utility function to build a SignatureDef protocol buffer . <EoL>
<BoL> Utility function to build TensorInfo proto . <EoL>
<BoL> Creates classification signature from given examples and predictions . <EoL>
<BoL> Returns the Tensor or SparseTensor described by a TensorInfo proto . <EoL>
<BoL> Determine whether a SignatureDef can be served by TensorFlow Serving . <EoL>
<BoL> Loads the model from a SavedModel as specified by tags . <EoL>
<BoL> Checks whether the provided export directory could contain a SavedModel . <EoL>
<BoL> Returns a main op to init variables and tables . <EoL>
<BoL> Returns a main op to init variables , tables and restore the graph . <EoL>
<BoL> Creates prediction signature from given inputs and outputs . <EoL>
<BoL> Creates regression signature from given examples and predictions . <EoL>
<BoL> Convenience function to build a SavedModel suitable for serving . <EoL>
<BoL> The loop body of scan . <EoL>
<BoL> r '' '' '' Divides a variable reference by sparse updates . <EoL>
<BoL> r '' '' '' Reduces sparse updates into a variable reference using the ` max ` operation . <EoL>
<BoL> r '' '' '' Reduces sparse updates into a variable reference using the ` min ` operation . <EoL>
<BoL> r '' '' '' Multiplies sparse updates into a variable reference . <EoL>
<BoL> r '' '' '' Applies sparse addition to individual values or slices in a Variable . <EoL>
<BoL> r '' '' '' Applies sparse subtraction to individual values or slices in a Variable . <EoL>
<BoL> r '' '' '' Applies sparse ` updates ` to individual values or slices in a Variable . <EoL>
<BoL> r '' '' '' Subtracts sparse updates to a variable reference . <EoL>
<BoL> Returns a mask tensor representing the first N positions of each cell . <EoL>
<BoL> r '' '' '' Transforms a Tensor into a serialized TensorProto proto . <EoL>
<BoL> Compute set difference of elements in last dimension of ` a ` and ` b ` . <EoL>
<BoL> Compute set intersection of elements in last dimension of ` a ` and ` b ` . <EoL>
<BoL> Compute number of unique elements along last dimension of ` a ` . <EoL>
<BoL> Compute set union of elements in last dimension of ` a ` and ` b ` . <EoL>
<BoL> Returns the shape of a tensor . <EoL>
<BoL> Returns shape of tensors . <EoL>
<BoL> Returns the size of a tensor . <EoL>
<BoL> Extracts a slice from a tensor . <EoL>
<BoL> Adds two tensors , at least one of each is a ` SparseTensor ` . <EoL>
<BoL> Generates sparse cross from a list of sparse and dense tensors . <EoL>
<BoL> Generates hashed sparse cross from a list of sparse and dense tensors . <EoL>
<BoL> Inserts a dimension of 1 into a tensor 's shape . <EoL>
<BoL> Fills empty rows in the input 2-D ` SparseTensor ` with a default value . <EoL>
<BoL> Masks elements of ` IndexedSlices ` . <EoL>
<BoL> Returns the element-wise max of two SparseTensors . <EoL>
<BoL> Returns the element-wise min of two SparseTensors . <EoL>
<BoL> Inserts a placeholder for a sparse tensor that will be always fed . <EoL>
<BoL> Reorders a ` SparseTensor ` into the canonical , row-major ordering . <EoL>
<BoL> Resets the shape of a ` SparseTensor ` with indices and values unchanged . <EoL>
<BoL> Reshapes a ` SparseTensor ` to represent values in a new dense shape . <EoL>
<BoL> Retains specified non-empty values within a ` SparseTensor ` . <EoL>
<BoL> Slice a ` SparseTensor ` based on the ` start ` and ` size . <EoL>
<BoL> Applies softmax to a batched N-D ` SparseTensor ` . <EoL>
<BoL> Converts a ` SparseTensor ` of ids into a dense bool indicator tensor . <EoL>
<BoL> Transposes a ` SparseTensor ` <EoL>
<BoL> r '' '' '' Multiply matrix `` a '' by matrix `` b '' . <EoL>
<BoL> Computes the 1D [ Discrete Cosine Transform ( DCT ) ] [ dct ] of ` input ` . <EoL>
<BoL> Computes the 1D [ Inverse Discrete Cosine Transform ( DCT ) ] [ idct ] of ` input ` . <EoL>
<BoL> Splits a tensor into sub tensors . <EoL>
<BoL> Removes dimensions of size 1 from the shape of a tensor . <EoL>
<BoL> Stacks a list of rank- ` R ` tensors into one rank- ` ( R+1 ) ` tensor . <EoL>
<BoL> r '' '' '' Stops gradient computation . <EoL>
<BoL> Closure that holds all the arguments to create an assignment . <EoL>
<BoL> r '' '' '' Joins the strings in the given list of string tensors into one tensor ; <EoL>
<BoL> Split elements of ` source ` based on ` delimiter ` into a ` SparseTensor ` . <EoL>
<BoL> r '' '' '' Strip leading and trailing whitespaces from the Tensor . <EoL>
<BoL> r '' '' '' Converts each string in the input Tensor to its hash mod by a number of buckets . <EoL>
<BoL> r '' '' '' Converts each string in the input Tensor to its hash mod by a number of buckets . <EoL>
<BoL> r '' '' '' Converts each string in the input Tensor to its hash mod by a number of buckets . <EoL>
<BoL> r '' '' '' Converts each string in the input Tensor to the specified numeric type . <EoL>
<BoL> r '' '' '' Formats a string template using a list of tensors . <EoL>
<BoL> r '' '' '' Match elements of ` input ` with regex ` pattern ` . <EoL>
<BoL> Split elements of ` source ` based on ` sep ` into a ` SparseTensor ` . <EoL>
<BoL> r '' '' '' Determine the script codes of a given tensor of Unicode integer code points . <EoL>
<BoL> r '' '' '' Transcode the input text from a source encoding to a destination encoding . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Adds an event to the event file . <EoL>
<BoL> Adds a ` Graph ` to the event file . <EoL>
<BoL> Adds a ` MetaGraphDef ` to the event file . <EoL>
<BoL> Adds a metadata information for a single session.run ( ) call . <EoL>
<BoL> Adds a ` SessionLog ` protocol buffer to the event file . <EoL>
<BoL> Adds a ` Summary ` protocol buffer to the event file . <EoL>
<BoL> Flushes the event file to disk and close the file . <EoL>
<BoL> Flushes the event file to disk . <EoL>
<BoL> Returns the directory where event file will be written . <EoL>
<BoL> Reopens the EventFileWriter . <EoL>
<BoL> Clear cached summary writers . Currently only used for unit tests . <EoL>
<BoL> Returns the FileWriter for the specified directory . <EoL>
<BoL> Given a TensorSummary node_def , retrieve its SummaryDescription . <EoL>
<BoL> Outputs a ` Summary ` protocol buffer with images . <EoL>
<BoL> Merges all summaries collected in the default graph . <EoL>
<BoL> Outputs a ` Summary ` protocol buffer containing a single scalar value . <EoL>
<BoL> Summarizes textual data . <EoL>
<BoL> Get the compilation flags for custom operators . <EoL>
<BoL> Get the directory containing the TensorFlow C++ header files . <EoL>
<BoL> Get the directory containing the TensorFlow framework library . <EoL>
<BoL> Get the link flags for custom operators . <EoL>
<BoL> Returns full name of class and method calling report_benchmark . <EoL>
<BoL> Undoes all SmartSet ( ) & Set ( ) calls , restoring original definitions . <EoL>
<BoL> In parent , replace child_name 's old definition with new_child . <EoL>
<BoL> Replace obj.attr_name with new_attr . <EoL>
<BoL> Reverses SmartSet ( ) calls , restoring things to original definitions . <EoL>
<BoL> Reverses Set ( ) calls , restoring things to their original definitions . <EoL>
<BoL> Do not rely on the destructor to undo your stubs . <EoL>
<BoL> Asserts that a and b are the same proto . <EoL>
<BoL> Set the session and its graph to global default and constrain devices . <EoL>
<BoL> See session ( ) for details.Returns a config for sessions . <EoL>
<BoL> Generate a summary of ndarray subscripts as a list of str . <EoL>
<BoL> Asserts that two structures of numpy arrays or Tensors , have near values . <EoL>
<BoL> Asserts that two numpy arrays or Tensors have the same values . <EoL>
<BoL> Assert element values are all greater than a target value . <EoL>
<BoL> Assert element values are all greater than or equal to a target value . <EoL>
<BoL> Assert that elements of a Tensor are all in a given closed set . <EoL>
<BoL> Assert element values are all less than a target value . <EoL>
<BoL> Assert element values are all less than or equal to a target value . <EoL>
<BoL> Asserts that two float arrays are near each other . <EoL>
<BoL> Assert ndarray data type is equal to expected . <EoL>
<BoL> Asserts that the two given devices are the same . <EoL>
<BoL> Asserts that two numpy arrays have near values . <EoL>
<BoL> Asserts that two floats are near each other . <EoL>
<BoL> Assert that two numpy arrays , or or Tensors , do not have near values . <EoL>
<BoL> Asserts that message is same as parsed expected_message_ascii . <EoL>
<BoL> Asserts that a Numpy ndarray and a TensorFlow tensor have the same shape . <EoL>
<BoL> Assert that actual.startswith ( expected_start ) is True . <EoL>
<BoL> A context manager that captures the writes to a given stream . <EoL>
<BoL> Returns a Thread wrapper that asserts 'target ' completes successfully . <EoL>
<BoL> Evaluates tensors and returns numpy values . <EoL>
<BoL> Returns a unique temporary directory for the test to use . <EoL>
<BoL> Returns a TensorFlow Session for use in executing tests . <EoL>
<BoL> Asserts that two ` GraphDef ` s are ( mostly ) the same . <EoL>
<BoL> Returns a tf.ConfigProto for disabling the dependency optimizer . <EoL>
<BoL> Returns a temporary directory for use during tests . <EoL>
<BoL> Returns the name of a GPU device if available or the empty string . <EoL>
<BoL> Returns whether TensorFlow was built with CUDA ( GPU ) support . <EoL>
<BoL> Returns whether TensorFlow can access a GPU . <EoL>
<BoL> Runs all unit tests . <EoL>
<BoL> Creates an absolute test srcdir path given a relative path . <EoL>
<BoL> r '' '' '' Provides the time since epoch in seconds . <EoL>
<BoL> Casts a tensor to type ` bfloat16 ` . <EoL>
<BoL> Casts a tensor to type ` complex128 ` . <EoL>
<BoL> Casts a tensor to type ` complex64 ` . <EoL>
<BoL> Casts a tensor to type ` float64 ` . <EoL>
<BoL> Casts a tensor to type ` float32 ` . <EoL>
<BoL> Casts a tensor to type ` int32 ` . <EoL>
<BoL> Casts a tensor to type ` int64 ` . <EoL>
<BoL> Add ops to apply sparse gradients to ` var ` , with repeated sparse indices . <EoL>
<BoL> Asserts tensors are all valid types ( see ` _valid_dtypes ` ) . <EoL>
<BoL> Call the function if param is callable . <EoL>
<BoL> Add an extra variable , not associated with a slot . <EoL>
<BoL> Apply gradients to a replica variable . <EoL>
<BoL> Do what is needed to finish the update . <EoL>
<BoL> Find or create a slot for a variable . <EoL>
<BoL> From Checkpointable . Find a non-slot variable in the current graph . <EoL>
<BoL> Additional variables created by the ` Optimizer ` . <EoL>
<BoL> Add ops to apply sparse gradients to ` handle ` , with repeated indices . <EoL>
<BoL> Restore a newly created slot variable 's value . <EoL>
<BoL> Returns a dict for caching slots created under the given name . <EoL>
<BoL> Valid types for loss , variables and gradients . <EoL>
<BoL> Find or create a slot initialized with 0.0 . <EoL>
<BoL> Apply gradients to variables . <EoL>
<BoL> Return a slot named ` name ` created for ` var ` by the Optimizer . <EoL>
<BoL> Return a list of the names of slots created by the ` Optimizer ` . <EoL>
<BoL> A list of variables which encode the current state of ` Optimizer ` . <EoL>
<BoL> Group objects into a training checkpoint . <EoL>
<BoL> Support self.foo = checkpointable syntax . <EoL>
<BoL> Create a save counter if it does not yet exist . <EoL>
<BoL> Override to allow CheckpointableBase to disable dependency tracking . <EoL>
<BoL> Restore a training checkpoint . <EoL>
<BoL> Saves a training checkpoint and provides basic checkpoint management . <EoL>
<BoL> Writes a training checkpoint . <EoL>
<BoL> Saves the latest checkpoint , returns should_stop . <EoL>
<BoL> Creates a ` ClusterSpec ` . <EoL>
<BoL> Creates a ` tf.train.ClusterDef ` based on the given ` cluster_spec ` . <EoL>
<BoL> Returns a ` tf.train.ClusterDef ` protocol buffer based on this cluster . <EoL>
<BoL> Returns a dictionary from job names to their tasks . <EoL>
<BoL> Returns a mapping from task ID to address in the given job . <EoL>
<BoL> Returns the number of tasks defined in the given job . <EoL>
<BoL> Returns the address of the given task in the given job . <EoL>
<BoL> Returns a list of valid task indices in the given job . <EoL>
<BoL> Create a new Coordinator . <EoL>
<BoL> Check if the exception indicated in 'ex ' should be ignored . <EoL>
<BoL> Clears the stop flag . <EoL>
<BoL> If an exception has been passed to ` request_stop ` , this raises it . <EoL>
<BoL> Register a thread to join . <EoL>
<BoL> Request that the threads stop . <EoL>
<BoL> Check if stop was requested . <EoL>
<BoL> Context manager to request stop when an Exception is raised . <EoL>
<BoL> Wait till the Coordinator is told to stop . <EoL>
<BoL> Maintains moving averages of variables . <EoL>
<BoL> Returns the ` Variable ` holding the average of ` var ` . <EoL>
<BoL> Returns the name of the ` Variable ` holding the average for ` var ` . <EoL>
<BoL> Returns a map of names to ` Variables ` to restore . <EoL>
<BoL> Initializes a ` FeedFnHook ` . <EoL>
<BoL> Called once before using the session . <EoL>
<BoL> Called at the end of session . <EoL>
<BoL> Initializes ` FinalOpHook ` with ops to run at the end of the session . <EoL>
<BoL> Called before each call to run ( ) . <EoL>
<BoL> Initializes a ` GlobalStepWaiterHook ` . <EoL>
<BoL> Construct a new gradient descent optimizer . <EoL>
<BoL> Add ops to apply sparse gradients to ` var ` . <EoL>
<BoL> Create all slots needed by the variables . <EoL>
<BoL> Add ops to apply sparse gradients to the variable ` handle ` . <EoL>
<BoL> Start a LooperThread that calls a function periodically . <EoL>
<BoL> Called at 'timer_interval_secs ' boundaries . <EoL>
<BoL> Called when the thread starts . <EoL>
<BoL> Called when the thread stops . <EoL>
<BoL> Return True if the monitored session is closed . For tests only . <EoL>
<BoL> Run ops in the monitored session . <EoL>
<BoL> Run ops using a step function . <EoL>
<BoL> Initializes a ` NanTensorHook ` . <EoL>
<BoL> Create a QueueRunner . <EoL>
<BoL> Close the queue when the Coordinator requests stop . <EoL>
<BoL> Create a QueueRunner from ` QueueRunnerDef ` . <EoL>
<BoL> Execute the enqueue op in a loop , close the queue in case of error . <EoL>
<BoL> Create threads to run the enqueue ops for the given session . <EoL>
<BoL> Returns a ` QueueRunner ` object created from ` queue_runner_def ` . <EoL>
<BoL> Converts this ` QueueRunner ` to a ` QueueRunnerDef ` protocol buffer . <EoL>
<BoL> Returns the checkpoint filename given a ` ( filename , time ) ` pair . <EoL>
<BoL> Deletes old checkpoints if necessary . <EoL>
<BoL> Manages the list of the latest checkpoints . <EoL>
<BoL> Adds a collection to MetaGraphDef protocol buffer . <EoL>
<BoL> Builds saver_def . <EoL>
<BoL> Generates a ` SaverDef ` representation of this saver . <EoL>
<BoL> Returns a ` Saver ` object created from ` saver_def ` . <EoL>
<BoL> Recovers the internal saver state after a crash . <EoL>
<BoL> Restores previously saved variables . <EoL>
<BoL> DEPRECATED : Use set_last_checkpoints_with_time . <EoL>
<BoL> Sets the list of old checkpoint filenames and timestamps . <EoL>
<BoL> Converts this ` Saver ` to a ` SaverDef ` protocol buffer . <EoL>
<BoL> Returns an op that groups the default local init ops . <EoL>
<BoL> Creates operations if needed and finalizes the graph . <EoL>
<BoL> Get from cache or create a default operation . <EoL>
<BoL> Return true if the timer should trigger for the specified step . <EoL>
<BoL> Creates a new single-process cluster running on the local host . <EoL>
<BoL> Blocks until the server has shut down . <EoL>
<BoL> Starts this server . <EoL>
<BoL> Checks if the model is ready or not . <EoL>
<BoL> Checks if the model is ready to run local_init_op . <EoL>
<BoL> Closes a session without raising an exception . <EoL>
<BoL> Tries to run _local_init_op , if not None , and is ready for local init . <EoL>
<BoL> Creates a new ` Session ` and waits for model to be ready . <EoL>
<BoL> Initializes SessionRunContext . <EoL>
<BoL> Sets stop requested field . <EoL>
<BoL> Returns underlying ` TensorFlow.Session ` object . <EoL>
<BoL> Initializes a ` StopAtStepHook ` . <EoL>
<BoL> Fetches the summary op either from self._summary_op or self._scaffold . <EoL>
<BoL> Start a LooperThread that calls a function periodically . <EoL>
<BoL> Request that the coordinator stop the threads . <EoL>
<BoL> Check if the coordinator was told to stop . <EoL>
<BoL> Start threads for ` QueueRunners ` . <EoL>
<BoL> Start the standard services for 'sess ' . <EoL>
<BoL> Context handler to stop the supervisor when an exception is raised . <EoL>
<BoL> Indicate that a summary was computed . <EoL>
<BoL> Block waiting for the coordinator to stop . <EoL>
<BoL> Returns the global_step from the default graph . <EoL>
<BoL> Returns the first ` Operation ` from a collection . <EoL>
<BoL> Initializes global_step . <EoL>
<BoL> Initializes init_op . <EoL>
<BoL> Initializes local_init_op . <EoL>
<BoL> Initializes saver . <EoL>
<BoL> Initializes summary_op . <EoL>
<BoL> Check that all is good . <EoL>
<BoL> Writes graph_def to ` logdir ` and adds it to summary if applicable . <EoL>
<BoL> Add ops to apply dense gradients to ` var ` . <EoL>
<BoL> Create all needed tensors before applying gradients . <EoL>
<BoL> Add ops to apply dense gradients to the variable ` handle ` . <EoL>
<BoL> Apply gradients to variables . <EoL>
<BoL> Compute gradients of `` loss '' for the variables in `` var_list '' . <EoL>
<BoL> Returns the QueueRunner for the chief to execute . <EoL>
<BoL> Returns the op to fill the sync_token_queue with the tokens . <EoL>
<BoL> Return a slot named `` name '' created for `` var '' by the Optimizer . <EoL>
<BoL> Return a list of the names of slots created by the ` Optimizer ` . <EoL>
<BoL> Creates a hook to handle SyncReplicasHook ops such as initialization . <EoL>
<BoL> Fetches a list of optimizer variables in the default graph . <EoL>
<BoL> Adds a ` QueueRunner ` to a collection in the graph . <EoL>
<BoL> Asserts ` global_step_tensor ` is a scalar int ` Variable ` or ` Tensor ` . <EoL>
<BoL> Checks whether a V1 or V2 checkpoint exists with the specified prefix . <EoL>
<BoL> Applies cosine decay to the learning rate . <EoL>
<BoL> Create global step tensor in graph . <EoL>
<BoL> A general quantization scheme is being developed in ` tf.contrib.quantize ` . <EoL>
<BoL> Returns the mtimes ( modification timestamps ) of the checkpoints . <EoL>
<BoL> Returns CheckpointState proto from the `` checkpoint '' file . <EoL>
<BoL> Get the global step tensor . <EoL>
<BoL> Returns and create ( if necessary ) the global step tensor . <EoL>
<BoL> Small helper to get the global step . <EoL>
<BoL> Replaces ` tf.Variable ` initializers so they load from a checkpoint file . <EoL>
<BoL> Finds the filename of latest saved checkpoint file . <EoL>
<BoL> Returns tensor ` num_epochs ` times and then raises an ` OutOfRange ` error . <EoL>
<BoL> Returns list of all variables in the checkpoint . <EoL>
<BoL> Returns ` CheckpointReader ` for checkpoint found in ` ckpt_dir_or_file ` . <EoL>
<BoL> Returns the tensor value of the given variable in the checkpoint . <EoL>
<BoL> Piecewise constant from boundaries and interval values . <EoL>
<BoL> r '' '' '' Computes fingerprints of the input strings . <EoL>
<BoL> r '' '' '' Distributed version of Stochastic Dual Coordinate Ascent ( SDCA ) optimizer for <EoL>
<BoL> r '' '' '' Applies L1 regularization shrink step on the parameters . <EoL>
<BoL> Returns all variables created with ` trainable=True ` . <EoL>
<BoL> Transposes ` a ` . Permutes the dimensions according to ` perm ` . <EoL>
<BoL> r '' '' '' Returns x / y element-wise for integer types . <EoL>
<BoL> r '' '' '' Returns element-wise remainder of division . This emulates C semantics in that <EoL>
<BoL> Group tensors together . <EoL>
<BoL> r '' '' '' Converts a flat index or array of flat indices into a tuple of <EoL>
<BoL> Unpacks the given dimension of a rank- ` R ` tensor into rank- ` ( R-1 ) ` tensors . <EoL>
<BoL> Example of overriding the generated code for an Op . <EoL>
<BoL> Partitioner that partitions shards to have max_shard_bytes total size . <EoL>
<BoL> Scope which defines a variable creation function to be used by variable ( ) . <EoL>
<BoL> Enters the context manager when there is no cached scope yet . <EoL>
<BoL> Return the elements , either from ` x ` or ` y ` , depending on the ` condition ` . <EoL>
<BoL> Creates a tensor with all elements set to zero . <EoL>
<BoL> Creates a tensor with all elements set to zero . <EoL>
<BoL> Used to hook in an external package into the TensorFlow namespace.Sets child package as a subpackage of parent package.Sets child package as a attr of the parent package . <EoL>
<BoL> Build a subgraph that does one full all-reduce , using NCCL . <EoL>
<BoL> Construct hybrid of NCCL within workers , Recursive-HD across workers . <EoL>
<BoL> Construct hybrid of NCCL within workers , Ring across workers . <EoL>
<BoL> Construct a subgraph for recursive halving-doubling all-reduce . <EoL>
<BoL> Construct a subgraph for shuffle all-reduce . <EoL>
<BoL> Returns a representation of this object as an AST node.constructor_name ( <EoL>
<BoL> Decorator that compiles a function to use TensorFlow ops.Decorator implementation . <EoL>
<BoL> Compiles a function call inline . For internal use only . <EoL>
<BoL> Decorator that suppresses the conversion of a function.Decorator implementation . <EoL>
<BoL> Context manager that rewrites runtime errors . <EoL>
<BoL> Indicates that the entity is expected hold items of specified type/shape . <EoL>
<BoL> Stacks the input , if it admits the notion of stacking . <EoL>
<BoL> Opens a table and returns a ` tf.contrib.bigtable.BigtableTable ` object . <EoL>
<BoL> Retrieves the row keys matching a given prefix . <EoL>
<BoL> Retrieves all row keys between start and end . <EoL>
<BoL> Retrieves the values of columns for a dataset of keys . <EoL>
<BoL> Retrieves a sampling of row keys from the Bigtable table . <EoL>
<BoL> Retrieves row ( including values ) from the Bigtable service . <EoL>
<BoL> Retrieves rows ( including values ) from the Bigtable service . <EoL>
<BoL> Writes a dataset to the table . <EoL>
<BoL> Saves the ` CheckpointManager ` 's state in ` directory ` . <EoL>
<BoL> Deletes or preserves managed checkpoints . <EoL>
<BoL> Creates a new checkpoint and manages it.Initialize the save counter if it has been newly created . <EoL>
<BoL> Construct a new sequence . Arguments are passed to ` list ( ) ` . <EoL>
<BoL> Determines the backing storage ( overridden in subclasses ) . <EoL>
<BoL> Add a dependency on ` value ` . <EoL>
<BoL> Add a new checkpointable value . <EoL>
<BoL> Add a sequence of checkpointable values . <EoL>
<BoL> Construct a new sequence . Arguments are passed to ` dict ( ) ` . <EoL>
<BoL> Un-wrap ` _NumpyWrapper ` objects when accessing attributes . <EoL>
<BoL> Automatically wrap NumPy arrays assigned to attributes . <EoL>
<BoL> Create placeholder NumPy arrays for to-be-restored attributes . <EoL>
<BoL> Callback for ` PythonStringStateSaveable ` to deserialize the object . <EoL>
<BoL> Specify callbacks for saving and restoring ` array ` . <EoL>
<BoL> Callback for ` PythonStringStateSaveable ` to serialize the object . <EoL>
<BoL> Add a dependency on ` checkpointable ` . <EoL>
<BoL> Capture variables created within this scope as ` Template ` dependencies.A variable creation hook which adds Checkpointable dependencies . <EoL>
<BoL> r '' '' '' Visualizes an object-based checkpoint ( from ` tf.train.Checkpoint ` ) . <EoL>
<BoL> Traverse the object graph and list all accessible objects . <EoL>
<BoL> Retrieves information about the objects in a checkpoint . <EoL>
<BoL> Returns serialized BigQueryTablePartition messages . <EoL>
<BoL> Constructs a ConfigureGcsHook . <EoL>
<BoL> ConfigureColabSession configures the GCS file system in Colab . <EoL>
<BoL> Configures the GCS file system for a given a session.Helper function to actually configure GCS . <EoL>
<BoL> Retrieve the current state of the cluster and returns a ClusterSpec . <EoL>
<BoL> Retrieves the name or URL of the session master . <EoL>
<BoL> Returns a ClusterSpec object based on the latest instance group info . <EoL>
<BoL> Creates a SimpleClusterResolver from a ClusterSpec . <EoL>
<BoL> Returns the ClusterSpec passed into the constructor . <EoL>
<BoL> Returns the master address to use when creating a session . <EoL>
<BoL> Resolve host names of nodes allocated in current jobs . <EoL>
<BoL> Returns a ClusterSpec object based on the latest instance group info . <EoL>
<BoL> Returns job name and task_index for the process which calls this . <EoL>
<BoL> When running in GKE , the environment variable will be set . <EoL>
<BoL> Returns a ClusterSpec object based on the latest TPU information . <EoL>
<BoL> Get the Master string to be used for the session . <EoL>
<BoL> Initializes a UnionClusterResolver with other ClusterResolvers . <EoL>
<BoL> Returns a union of all the ClusterSpecs from the ClusterResolvers . <EoL>
<BoL> Returns the master address to use when creating a session . <EoL>
<BoL> Enable or disable JIT compilation of operators within the scope . <EoL>
<BoL> Create op in XLACompileContext and notifies outer context recursively . <EoL>
<BoL> Add ` val ` to the current context and its outer context recursively . <EoL>
<BoL> Enter this control flow context . <EoL>
<BoL> Start building a gradient colocated with an op . <EoL>
<BoL> Exit this control flow context . <EoL>
<BoL> Start building a gradient colocated with an op . <EoL>
<BoL> Make a list of tensors available in the outer context . <EoL>
<BoL> Returns the pivot node for this context , or None . <EoL>
<BoL> Return the while context containing this context . <EoL>
<BoL> Remove any external control dependency on this op . <EoL>
<BoL> Builds a new XLACompileContext . <EoL>
<BoL> Initializes values and external_values from ` ValuesDef ` protocol buffer . <EoL>
<BoL> Converts the values to a ` ValuesDef ` protocol buffer . <EoL>
<BoL> Calls the model_fn with required parameters . <EoL>
<BoL> Creates a single step of evaluation for xla.compile ( ) .A single step of evaluation . <EoL>
<BoL> Creates a single step of training for xla.compile ( ) .A single step of training . <EoL>
<BoL> Verifies estimator spec contains correct data . <EoL>
<BoL> Builds graph operators that compiles and symbolically executes computation . <EoL>
<BoL> Enters a context where all summary ops are skipped . <EoL>
<BoL> Retrieves the Scaffold from ` captured_scaffold_fn ` . <EoL>
<BoL> Validate the number of input arguments to an XLA function . <EoL>
<BoL> Builds an operator that compiles and runs ` computation ` with XLA . <EoL>
<BoL> estimator_model_fn decorates a model_fn to be compiled for execution . <EoL>
<BoL> Returns an ` Operation ` for minimizing the unconstrained problem.Returns an ` Operation ` for minimizing the constrained problem . <EoL>
<BoL> Constructs a new ` AdditiveSwapRegretOptimizer ` . <EoL>
<BoL> Constructs a new ` ConstrainedOptimizer ` . <EoL>
<BoL> Returns a copy of an operation from another Graph under a specified scope . <EoL>
<BoL> Given a ` Variable ` instance from one ` Graph ` , initializes and returns <EoL>
<BoL> Given an ` Operation ` instance from some ` Graph ` , returns <EoL>
<BoL> Build the CrfDecodeBackwardRnnCell . <EoL>
<BoL> Initialize the CrfDecodeBackwardRnnCell . <EoL>
<BoL> Build the CrfDecodeForwardRnnCell . <EoL>
<BoL> Initialize the CrfDecodeForwardRnnCell . <EoL>
<BoL> Build the CrfForwardRnnCell . <EoL>
<BoL> Initialize the CrfForwardRnnCell . <EoL>
<BoL> Computes the binary scores of tag sequences . <EoL>
<BoL> Decode the highest scoring sequence of tags in TensorFlow.Decoding of highest scoring sequence . <EoL>
<BoL> Computes the normalization for a CRF.Forward computation of alpha values . <EoL>
<BoL> Computes the unary scores of tag sequences . <EoL>
<BoL> Decode the highest scoring sequence of tags outside of TensorFlow . <EoL>
<BoL> Gated recurrent unit ( GRU ) with nunits cells . <EoL>
<BoL> Long short-term memory cell ( LSTM ) . <EoL>
<BoL> Wraps ` call ` , applying pre- and post-processing steps . <EoL>
<BoL> Shapes of Cudnn canonical bias tensors for given layer . <EoL>
<BoL> Shapes of Cudnn canonical weight tensors for given layer . <EoL>
<BoL> Create custom saveable for the Cudnn layer . <EoL>
<BoL> Custom getter for layer variables . <EoL>
<BoL> Create variables of the Cudnn RNN . <EoL>
<BoL> Runs the forward step for the RNN model . <EoL>
<BoL> Shape of the state of Cudnn RNN cells w/o . input_c . <EoL>
<BoL> Converts from Cudnn canonical format to opaque params . <EoL>
<BoL> Converts opaque params to Cudnn canonical format . <EoL>
<BoL> r '' '' '' Transform from tf canonical to Cudnn canonical . <EoL>
<BoL> r '' '' '' Transform from Cudnn canonical to tf canonical . <EoL>
<BoL> Add canonical weight dependencies to ` checkpointable ` . <EoL>
<BoL> Tracks parameters in a canonical configuration . <EoL>
<BoL> r '' '' '' Stitching cudnn canonical biases to generate tf canonical biases . <EoL>
<BoL> r '' '' '' Stitching cudnn canonical weights to generate tf canonical weights . <EoL>
<BoL> r '' '' '' Reverse the operations in StitchBiases ( ) . <EoL>
<BoL> r '' '' '' Reverse the operations in StitchWeights ( ) . <EoL>
<BoL> Shape of Cudnn LSTM states . <EoL>
<BoL> Track parameters for compatibility with CudnnCompatibleLSTMCell . <EoL>
<BoL> r '' '' '' Stitching cudnn canonical biases to generate tf canonical biases . <EoL>
<BoL> r '' '' '' Stitching cudnn canonical weights to generate tf canonical weights . <EoL>
<BoL> r '' '' '' Reverse the operations in StitchBiases ( ) . <EoL>
<BoL> r '' '' '' Reverse the operations in StitchWeights ( ) . <EoL>
<BoL> r '' '' '' Stitching cudnn canonical biases to generate tf canonical biases . <EoL>
<BoL> r '' '' '' Stitching cudnn canonical weights to generate tf canonical weights . <EoL>
<BoL> r '' '' '' Reverse the operations in StitchBiases ( ) . <EoL>
<BoL> r '' '' '' Reverse the operations in StitchWeights ( ) . <EoL>
<BoL> Creates a ` Dataset ` that counts from ` start ` in steps of size ` step ` . <EoL>
<BoL> Create a ` LMDBDataset ` . <EoL>
<BoL> Assert the shape of this ` Dataset ` . <EoL>
<BoL> A batching transformation that omits the final small batch ( if present ) .Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Creates a dataset that deterministically chooses elements from ` datasets ` . <EoL>
<BoL> A transformation that copies dataset elements to the given ` target_device ` . <EoL>
<BoL> A transformation that batches ragged elements into ` tf.SparseTensor ` s . <EoL>
<BoL> A transformation that enumerate the elements of a dataset . <EoL>
<BoL> Returns the single element in ` dataset ` as a nested structure of tensors . <EoL>
<BoL> A transformation that groups elements and performs a reduction . <EoL>
<BoL> Creates a ` Dataset ` from another ` Dataset ` and silently ignores any errors . <EoL>
<BoL> Returns a SaveableObject for saving/restore iterator state using Saver . <EoL>
<BoL> Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> A transformation that parses ` Example ` protos into a ` dict ` of tensors . <EoL>
<BoL> A transformation that prefetches dataset values to the given ` device ` . <EoL>
<BoL> Returns the result of reducing the ` dataset ` using ` reducer ` . <EoL>
<BoL> A transformation that resamples a dataset to achieve a target distribution . <EoL>
<BoL> Samples elements at random from the datasets in ` datasets ` . <EoL>
<BoL> A transformation that scans a function across an input dataset . <EoL>
<BoL> Shuffles and repeats a Dataset returning a new permutation for each epoch . <EoL>
<BoL> A non-deterministic version of the ` Dataset.interleave ( ) ` transformation . <EoL>
<BoL> Splits elements of a dataset into multiple elements on the batch dimension . <EoL>
<BoL> Creates a ` Dataset ` from another ` Dataset ` , discarding duplicates . <EoL>
<BoL> Merges all summaries collected in the default graph . <EoL>
<BoL> All reduce algorithm in a batch . <EoL>
<BoL> Reduce PerDevice objects in a batch . <EoL>
<BoL> Broadcast the ` tensor ` to destinations . <EoL>
<BoL> Reduce ` per_device_value ` to ` destinations ` . <EoL>
<BoL> Initializes the object . <EoL>
<BoL> Creates one MirroredVariable on the current worker . <EoL>
<BoL> Initializes the object for local training . <EoL>
<BoL> Initializes the object for local training . <EoL>
<BoL> A wrapper around ` fn ` to create the while loop body . <EoL>
<BoL> Combine multiple ` reduce ` calls into one for faster execution . <EoL>
<BoL> Mirror a tensor on one device to all worker devices . <EoL>
<BoL> Run ` fn ` once per replica . <EoL>
<BoL> Run ` fn ` once per replica . DEPRECATED . <EoL>
<BoL> Scope that controls which devices variables will be created on . <EoL>
<BoL> Distributes the dataset to each local GPU . <EoL>
<BoL> Any final actions to be done at the end of all computations . <EoL>
<BoL> Shortcut for ` tf.group ( distribution.unwrap ( value ) ) ` . <EoL>
<BoL> Any initialization to be done before running any computations . <EoL>
<BoL> Read the aggregate value of a replica-local variable . <EoL>
<BoL> Combine ( via e.g . sum or mean ) values across replicas . <EoL>
<BoL> Returns a context manager selecting this DistributionStrategy as current . <EoL>
<BoL> Returns the list of all per-device values contained in ` value ` . <EoL>
<BoL> Run ` fn ` to update ` var ` using inputs mirrored to the same devices . <EoL>
<BoL> Runs ` fn ( *args , **kwargs ) ` on ` colocate_with ` devices . <EoL>
<BoL> Return a ` dataset ` split across all replicas . <EoL>
<BoL> Device ( s ) for non-slot variables . <EoL>
<BoL> Reads the value of a variable . <EoL>
<BoL> Returns the container that this per-device ` value ` belongs to . <EoL>
<BoL> Create a mirrored variable . See ` DistributionStrategy.scope ` . <EoL>
<BoL> Initializes the object for multi-worker training . <EoL>
<BoL> Initialize the Monitor with components for executing training steps . <EoL>
<BoL> Validate and complete the all-reduce spec . <EoL>
<BoL> All reduce algorithm in a batch . <EoL>
<BoL> A wrapper around ` fn ` to create the while loop body . <EoL>
<BoL> Read the aggregate value of a replica-local variable . <EoL>
<BoL> Initializes this strategy . <EoL>
<BoL> Create an AggregatingVariable and fix up collections . <EoL>
<BoL> Initialize internal devices for local training . <EoL>
<BoL> Select any single values in ` structured ` . <EoL>
<BoL> Distributes the dataset to each local GPU . <EoL>
<BoL> Constructor . <EoL>
<BoL> ` tower_id ` is deprecated , use ` replica_id ` instead . <EoL>
<BoL> Default implementation for single replica . <EoL>
<BoL> Merge args across replicas and run ` merge_fn ` in a cross-replica context . <EoL>
<BoL> Perform one step of this training algorithm . <EoL>
<BoL> Function to run one iteration with one input . <EoL>
<BoL> Initializes the TPUStrategy object . <EoL>
<BoL> Create a TPUMirroredVariable . See ` DistributionStrategy.scope ` . <EoL>
<BoL> Enqueue ops for one iteration.Callable for the loop body of the while_loop instantiated below . <EoL>
<BoL> Single step on the TPU device . <EoL>
<BoL> Returns the current DistributionStrategy if in a cross-replica context . <EoL>
<BoL> Returns the current ` DistributionStrategy ` object . <EoL>
<BoL> Reduce ` aggregation ` corresponding to the last loss reduction . <EoL>
<BoL> Returns the current ReplicaContext or None if in a cross-replica context . <EoL>
<BoL> Return if there is a current non-default ` DistributionStrategy ` . <EoL>
<BoL> Verify in ` replica_ctx ` replica context . <EoL>
<BoL> Starts a standard TensorFlow server . <EoL>
<BoL> Calls ` fn ` , appropriately reshaping its input ` x ` and output . <EoL>
<BoL> Computes graph and static ` sample_shape ` . <EoL>
<BoL> Helper which validates sample arg , e.g. , input to ` log_prob ` . <EoL>
<BoL> Check counts for proper shape , values , then return tensor version . <EoL>
<BoL> Reconstruct input ` x ` from a its normalized version . <EoL>
<BoL> Standardize input ` x ` . <EoL>
<BoL> Finish computation of log_prob on one element of the inverse image . <EoL>
<BoL> Finish computation of prob on one element of the inverse image . <EoL>
<BoL> Helper which rolls left event_dims left or right event_dims right . <EoL>
<BoL> Computes the default value for reinterpreted_batch_ndim __init__ arg . <EoL>
<BoL> Finish computation of log_prob on one element of the inverse image . <EoL>
<BoL> Finish computation of prob on one element of the inverse image . <EoL>
<BoL> Compute the n'th ( uncentered ) moment . <EoL>
<BoL> Standardize input ` x ` to a unit logistic . <EoL>
<BoL> Get a list of num_components batchwise probabilities . <EoL>
<BoL> Expand the rank of x up to static_event_rank times for broadcasting . <EoL>
<BoL> r '' '' '' A lower bound on the entropy of this mixture model . <EoL>
<BoL> Compute log_prob ( y ) using log survival_function and cdf together . <EoL>
<BoL> Returns a fresh integer usable as a seed in downstream operations . <EoL>
<BoL> Initializes a ` SeedStream ` . <EoL>
<BoL> Ensures ` self.distribution.mean ( ) ` has ` [ batch , event ] ` shape . <EoL>
<BoL> Shape for the mode/mean Tensors . <EoL>
<BoL> Computes the multivariate digamma function ; Psi_p ( a ) . <EoL>
<BoL> Creates sequence used in multivariate ( di ) gamma ; shape = shape ( a ) + [ p ] . <EoL>
<BoL> Computes the log multivariate gamma function ; log ( Gamma_p ( a ) ) . <EoL>
<BoL> Computes the log normalizing constant , log ( Z ) . <EoL>
<BoL> Computes E [ log ( det ( X ) ) ] under this Wishart distribution . <EoL>
<BoL> Wishart distribution scale matrix . <EoL>
<BoL> Instantiates the ` AbsoluteValue ` bijector . <EoL>
<BoL> Helper which stores mapping info in forward/inverse dicts . <EoL>
<BoL> Check whether event_ndims is atleast min_event_ndims . <EoL>
<BoL> Subclass implementation for ` forward_event_shape ` public function . <EoL>
<BoL> Subclass implementation for ` forward_event_shape_tensor ` function . <EoL>
<BoL> Subclass implementation of ` forward_log_det_jacobian ` public function . <EoL>
<BoL> Compute the reduction dimensions given event_ndims . <EoL>
<BoL> Subclass implementation for ` inverse_event_shape ` public function . <EoL>
<BoL> Subclass implementation for ` inverse_event_shape_tensor ` function . <EoL>
<BoL> Helper which retrieves mapping info from forward/inverse dicts . <EoL>
<BoL> Helper to check dtype when self.dtype is known . <EoL>
<BoL> Helper which returns tries to return an integer static value . <EoL>
<BoL> Helper function to standardize op scope . <EoL>
<BoL> Returns the forward ` Bijector ` evaluation , i.e. , X = g ( Y ) . <EoL>
<BoL> Shape of a single sample from a single batch as a ` TensorShape ` . <EoL>
<BoL> Returns the inverse ` Bijector ` evaluation , i.e. , X = g^ { -1 } ( Y ) . <EoL>
<BoL> Shape of a single sample from a single batch as a ` TensorShape ` . <EoL>
<BoL> Subclass implementation of ` inverse_log_det_jacobian ` public function . <EoL>
<BoL> Subclass implementation for ` forward ` public function . <EoL>
<BoL> Subclass implementation for ` inverse ` public function . <EoL>
<BoL> Instantiates ` Chain ` bijector . <EoL>
<BoL> Instantiates the ` CholeskyOuterProduct ` bijector . <EoL>
<BoL> Ensures non-scalar input has at least one column . <EoL>
<BoL> Creates a ` Bijector ` which swaps the meaning of ` inverse ` and ` forward ` . <EoL>
<BoL> While-loop body for autoregression calculation . <EoL>
<BoL> Instantiates the ` MatrixInverseTriL ` bijector . <EoL>
<BoL> Instantiates the ` Square ` bijector . <EoL>
<BoL> MADE parameterized via ` masked_autoregressive_default_template ` . <EoL>
<BoL> Fully connected MLP parameterized via ` real_nvp_template ` . <EoL>
<BoL> Creates a ( batch of ) triangular matrix from a vector of inputs . <EoL>
<BoL> Creates a vector from a ( batch of ) triangular matrix . <EoL>
<BoL> Transform diagonal of [ batch- ] matrix , leave rest of matrix unchanged . <EoL>
<BoL> Compute exponentially weighted moving { mean , variance } of a streaming value . <EoL>
<BoL> Posterior Normal distribution with conjugate prior on the mean . <EoL>
<BoL> Posterior predictive Normal distribution w. conjugate prior on the mean . <EoL>
<BoL> Helper to build quantiles . <EoL>
<BoL> Helper to get dist.batch_shape.ndims , statically if possible.Helper to build ` TensorShape ` .Helper to build quantiles . <EoL>
<BoL> Computes the inverse softplus , i.e. , x = softplus_inverse ( softplus ( x ) ) . <EoL>
<BoL> Creates a matrix with values set above , below , and on the diagonal.Prepends and appends a zero to every vector in a batch of vectors.Adds list of Tensors , ignoring ` None ` . <EoL>
<BoL> Configure saving . <EoL>
<BoL> Creates a ` tf.train.Saver ` with the current object graph frozen . <EoL>
<BoL> Restore a training checkpoint . <EoL>
<BoL> Save a training checkpoint . <EoL>
<BoL> Copy this variable store and all of its contents . <EoL>
<BoL> Configure the ` Network ` . <EoL>
<BoL> Overrides Layer op naming to match variable naming . <EoL>
<BoL> Get a contained ` tf.layers.Layer ` either by name or index . <EoL>
<BoL> Track a Layer in this Network . <EoL>
<BoL> Creates a TensorSpec . <EoL>
<BoL> True if the shape and dtype of ` spec_or_tensor ` are compatible . <EoL>
<BoL> Register overloads for all operators . <EoL>
<BoL> Defer an operator overload to ` ops.Tensor ` . <EoL>
<BoL> Utility function for converting a Variable to a Tensor . <EoL>
<BoL> Dummy method to prevent iteration . Do not call . <EoL>
<BoL> Conversion function for Graph.as_graph_element ( ) . <EoL>
<BoL> Makes assignments depend on the cached value , if any . <EoL>
<BoL> Find the initialized value for a variable op . <EoL>
<BoL> For implementing ` Checkpointable ` . This object is saveable on its own . <EoL>
<BoL> Initializes from ` VariableDef ` proto . <EoL>
<BoL> Unsupported . <EoL>
<BoL> Replace dependencies on variables with their initialized values . <EoL>
<BoL> Replace dependencies on variables with their initialized values . <EoL>
<BoL> Sets the slice info for this ` ResourceVariable ` . <EoL>
<BoL> Attempt to guard against dependencies on uninitialized variables . <EoL>
<BoL> Assigns a new value to this variable . <EoL>
<BoL> Adds a value to this variable . <EoL>
<BoL> Subtracts a value from this variable . <EoL>
<BoL> Increments this variable until it reaches ` limit ` . <EoL>
<BoL> Evaluates and returns the value of this variable . <EoL>
<BoL> Alias of Variable.shape . <EoL>
<BoL> Returns the value of the initialized variable . <EoL>
<BoL> Checks whether a resource variable has been initialized . <EoL>
<BoL> Load new value into this variable . <EoL>
<BoL> Constructs an op which reads the value of this variable . <EoL>
<BoL> Adds ` IndexedSlices ` from this variable . <EoL>
<BoL> Applies sparse addition to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse subtraction to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse assignment to individual values or slices in a Variable . <EoL>
<BoL> Subtracts ` IndexedSlices ` from this variable . <EoL>
<BoL> Assigns ` IndexedSlices ` to this variable . <EoL>
<BoL> Unsupported . <EoL>
<BoL> Reads the value of this variable sparsely , using ` gather ` . <EoL>
<BoL> Converts a ` ResourceVariable ` to a ` VariableDef ` protocol buffer . <EoL>
<BoL> A cached operation which reads the value of this variable . <EoL>
<BoL> Add an execution callback to the default eager context . <EoL>
<BoL> Clears errors raised during ASYNC execution mode . <EoL>
<BoL> Waits for ops dispatched in ASYNC mode to finish . <EoL>
<BoL> Clear all execution callbacks from the default eager context . <EoL>
<BoL> Connects to a single machine to enable remote execution on it . <EoL>
<BoL> Compiles a Python function into a callable TensorFlow graph . <EoL>
<BoL> Enables eager execution for the lifetime of this program . <EoL>
<BoL> Context manager for setting execution mode for current thread . <EoL>
<BoL> Returns a list of variables for the given ` tf.train.Optimizer ` . <EoL>
<BoL> Returns a function which differentiates f with respect to params.Computes the gradient of the decorated function . <EoL>
<BoL> Returns a function which differentiates f with respect to variables.Computes the gradient of the wrapped function . <EoL>
<BoL> Returns a function which differentiates f with respect to variables.Computes the gradient of the wrapped function . <EoL>
<BoL> List the names of the available devices . <EoL>
<BoL> Get the number of available GPU devices . <EoL>
<BoL> Wraps a python function into a TensorFlow op that executes it eagerly . <EoL>
<BoL> Restore the Network from a checkpoint . <EoL>
<BoL> ContextManager that restores variables on creation . <EoL>
<BoL> Runs the program with an optional main function and argv list . <EoL>
<BoL> Execute all test methods in the given class with and without eager . <EoL>
<BoL> Sets execution mode for the current thread . <EoL>
<BoL> Set how abnormal conditions are handled by the default eager context . <EoL>
<BoL> Returns a function that computes f and its derivative w.r.t . params.Computes the value and gradient of the decorated function . <EoL>
<BoL> Asserts members of ` Estimator ` are not overridden . <EoL>
<BoL> Calls the input function . <EoL>
<BoL> Calls model function . <EoL>
<BoL> Call model_fn for evaluation and handle return values . <EoL>
<BoL> Call model_fn in distribution mode and handle return values.Runs one step of the eval computation and captures outputs . <EoL>
<BoL> Create hooks to run correct number of steps in training . <EoL>
<BoL> Creates and asserts properties of the global step . <EoL>
<BoL> Creates the global step tensor in graph . <EoL>
<BoL> Builds the graph and related hooks to run evaluation . <EoL>
<BoL> Extracts batch length of predictions . <EoL>
<BoL> Extracts ` predict_keys ` from ` predictions ` . <EoL>
<BoL> Extracts the ` features ` and labels from return values of ` input_fn ` . <EoL>
<BoL> Extracts the ` features ` from return values of ` input_fn ` . <EoL>
<BoL> Initiate training with ` input_fn ` , without ` DistributionStrategies ` . <EoL>
<BoL> Initiate training with ` input_fn ` , using ` DistributionStrategies ` .A single step that is passed to run_on_dataset . <EoL>
<BoL> Shows the directory name where evaluation metrics are dumped . <EoL>
<BoL> Returns list of all variable names in this model . <EoL>
<BoL> Returns value of the variable given by name . <EoL>
<BoL> Finds the filename of the latest saved checkpoint file in ` model_dir ` . <EoL>
<BoL> Does first run which shows the eval metrics before training . <EoL>
<BoL> Runs evaluator . <EoL>
<BoL> Build eval graph and restoring op . <EoL>
<BoL> Runs evaluator for final model . <EoL>
<BoL> Wrap an existing optimizer for gathering gradients across towers . <EoL>
<BoL> Collect gradients updates to apply them with the last tower . <EoL>
<BoL> Compute gradients , but first , if needed , scale the loss . <EoL>
<BoL> Check that passed ` tensor ` is a Tensor or SparseTensor . <EoL>
<BoL> Log a report of which signatures were produced . <EoL>
<BoL> Creates a placeholder that matches the dtype and shape of passed tensor . <EoL>
<BoL> Ensure that tensors is a dict of str to Tensor mappings . <EoL>
<BoL> Creates a new ` tf.estimator.Estimator ` which has given metrics . <EoL>
<BoL> Build a supervised_input_receiver_fn for raw features and labels.A receiver_fn that expects pass-through features and labels . <EoL>
<BoL> Get a function that returns a SupervisedInputReceiver matching an input_fn . <EoL>
<BoL> Calls logit_fn . <EoL>
<BoL> Returns an optimizer which clips gradients before applying them . <EoL>
<BoL> Deep Neural Network logit_fn . <EoL>
<BoL> Forward features to predictions dictionary . <EoL>
<BoL> Function builder for a linear logit_fn.Linear model logit_fn . <EoL>
<BoL> Creates a ` _Head ` for multi-objective learning . <EoL>
<BoL> Helper to read eval metrics from eval summary files . <EoL>
<BoL> Calls model function with support of 2 , 3 or 4 arguments . <EoL>
<BoL> Separate update operations from metric value operations . <EoL>
<BoL> Method that builds model graph and returns evaluation ops . <EoL>
<BoL> Returns feature parser for given example batch using features info . <EoL>
<BoL> Method that builds model graph and returns prediction ops . <EoL>
<BoL> Method that builds model graph and returns trainer ops . <EoL>
<BoL> Creates a model function.Model function . <EoL>
<BoL> Returns cluster centers . <EoL>
<BoL> Returns the covariances . <EoL>
<BoL> Get parameters for this estimator . <EoL>
<BoL> Returns list of all variable names in this model . <EoL>
<BoL> Returns value of the variable given by name . <EoL>
<BoL> See BaseEstimator.predict . <EoL>
<BoL> Predict total log-likelihood . <EoL>
<BoL> Set the parameters of this estimator . <EoL>
<BoL> Returns the cluster weights . <EoL>
<BoL> Initializes GMM algorithm . <EoL>
<BoL> Defines the diagonal covariance probabilities per example in a class . <EoL>
<BoL> Defines the full covariance probabilities per example in a class . <EoL>
<BoL> Define graph for a single iteration . <EoL>
<BoL> Probability per example in a class . <EoL>
<BoL> Defines the total log-likelihood of current iteration . <EoL>
<BoL> Maximization operations . <EoL>
<BoL> Computes the partial statistics of the means and covariances . <EoL>
<BoL> Computes the prior probability of all samples . <EoL>
<BoL> Defines the likelihood of each data sample . <EoL>
<BoL> Initializes variables . <EoL>
<BoL> Returns a list of Tensors with the matrix of assignments per shard . <EoL>
<BoL> Returns the clusters with dimensions num_classes X 1 X num_dimensions . <EoL>
<BoL> Returns the covariances matrices . <EoL>
<BoL> Returns the initialization operation . <EoL>
<BoL> Returns a boolean operation for initialized variables . <EoL>
<BoL> Returns the log-likelihood operation . <EoL>
<BoL> Returns the per-sample likelihood fo the data . <EoL>
<BoL> Returns the training operation . <EoL>
<BoL> Returns True if clusters centers are kept normalized . <EoL>
<BoL> Computes cosine distance between each input and each cluster center . <EoL>
<BoL> Computes Euclidean distance between each input and each cluster center . <EoL>
<BoL> Creates variables . <EoL>
<BoL> Computes distance between each input and each cluster center . <EoL>
<BoL> Maps input to closest cluster and the score . <EoL>
<BoL> Normalized the input data . <EoL>
<BoL> Generate a training graph for kmeans algorithm . <EoL>
<BoL> Returns the cluster centers . <EoL>
<BoL> Finds the index of the closest cluster center to each input point . <EoL>
<BoL> Returns the sum of squared distances to nearest clusters . <EoL>
<BoL> Transforms each input point to its distances to all cluster centers . <EoL>
<BoL> Returns the column factors of the model , loading them from checkpoint . <EoL>
<BoL> Computes the projections of the rows or columns given in input_fn . <EoL>
<BoL> Returns the row factors of the model , loading them from checkpoint . <EoL>
<BoL> Helper function to create a worker cached copy of a Variable . <EoL>
<BoL> Helper function to create row and column factors . <EoL>
<BoL> Helper function to create the gramian variable . <EoL>
<BoL> Creates local cache of factors , weights and gramian for rows and columns . <EoL>
<BoL> Helper function to create sharded weight vector . <EoL>
<BoL> Create sharding function for scatter update . <EoL>
<BoL> Helper function to create ops to prepare/calculate gramian . <EoL>
<BoL> Helper function to split dims values into num_shards . <EoL>
<BoL> Helper function to create a Variable . <EoL>
<BoL> Helper function for doing sharded scatter update . <EoL>
<BoL> r '' '' '' Updates the column factors . <EoL>
<BoL> r '' '' '' Updates the row factors . <EoL>
<BoL> Returns a feature column that represents sequences of integers . <EoL>
<BoL> A sequence of categorical terms where ids use a vocabulary file . <EoL>
<BoL> A sequence of categorical terms where ids use an in-memory list . <EoL>
<BoL> Create an op that decodes the contents of a video file . <EoL>
<BoL> Creates an op that encodes an audio file using sampled audio from a tensor . <EoL>
<BoL> Initializes a new ` BoundedTensorSpec ` . <EoL>
<BoL> Creates a critical section . <EoL>
<BoL> To avoid deadlocks , all args must be executed before lock_op . <EoL>
<BoL> Initialize the CriticalSection from constructor arguments . <EoL>
<BoL> Check if the tensor ` x ` is the same Mutex as ` self._handle ` . <EoL>
<BoL> Execute function ` fn ( *args , **kwargs ) ` inside the CriticalSection . <EoL>
<BoL> Adds a node that yields a group of records every time it is executed . <EoL>
<BoL> Decorates a function with args so it can be used within an arg_scope . <EoL>
<BoL> Adds a variable to the ` GraphKeys.MODEL_VARIABLES ` collection . <EoL>
<BoL> Stores the default arguments for the given set of list_ops . <EoL>
<BoL> Returns the list kwargs that arg_scope can set for a func . <EoL>
<BoL> Returns the indices of a tensor that give its sorted order along an axis . <EoL>
<BoL> Verifies that a global step tensor is valid or gets one if None is given . <EoL>
<BoL> Assert ` tensor ` is 0-D , of type ` tf.int32 ` or ` tf.int64 ` . <EoL>
<BoL> Creates an operation to assign specific variables from a checkpoint . <EoL>
<BoL> Creates an assignment operation from a given mapping . <EoL>
<BoL> Returns a function that assigns specific variables from the given values . <EoL>
<BoL> Construct a kernel . Used to construct orthgonal kernel . <EoL>
<BoL> Convert a dictionary to a tensor . <EoL>
<BoL> Matrix convolution . <EoL>
<BoL> Construct orthogonal kernel for convolution . <EoL>
<BoL> Construct an n x n orthogonal matrix . <EoL>
<BoL> Compute a n x n symmetric projection matrix . <EoL>
<BoL> Construct a 2 x 2 kernel . Used to construct orthgonal kernel . <EoL>
<BoL> Convert a dictionary to a tensor . <EoL>
<BoL> Matrix convolution . <EoL>
<BoL> Construct orthogonal kernel for convolution . <EoL>
<BoL> Construct a 3 x 3 kernel . Used to construct orthgonal kernel.Return p or ( 1-p ) . <EoL>
<BoL> Convert a dictionary to a tensor . <EoL>
<BoL> Matrix convolution . <EoL>
<BoL> Construct orthogonal kernel for convolution . <EoL>
<BoL> Create global step tensor in graph . <EoL>
<BoL> Decorator for marking functions or methods deprecated.Deprecation wrapper . <EoL>
<BoL> Deprecation decorator.Deprecation wrapper . <EoL>
<BoL> Returns a dict mapping arg_name to DeprecatedArgSpec w/o position.Builds a dictionary from deprecated arguments to their spec.Deprecation decorator.A comparison operation that works for multiple object types.Deprecation wrapper . <EoL>
<BoL> Returns the appropriate graph to use for the given inputs . <EoL>
<BoL> Gets the list of local variables , filtered by scope and/or suffix . <EoL>
<BoL> Gets the list of model variables , filtered by scope and/or suffix . <EoL>
<BoL> Returns the current name scope of the default graph . <EoL>
<BoL> Returns and create ( if necessary ) the global step tensor . <EoL>
<BoL> Get placeholders of a graph . <EoL>
<BoL> Gets the list of trainable variables , filtered by scope and/or suffix . <EoL>
<BoL> Gets the variable uniquely identified by that var_op_name . <EoL>
<BoL> Returns the full name of a variable . <EoL>
<BoL> Gets the list of variables that were given that name . <EoL>
<BoL> Gets the list of variables that end with the given suffix . <EoL>
<BoL> Gets the list of the variables to restore . <EoL>
<BoL> Checks whether a func has been decorated with @ add_arg_scope or not . <EoL>
<BoL> Using assignment map initializes current variables with loaded tensors . <EoL>
<BoL> Check whether ` x ` is of tensor type . <EoL>
<BoL> Returns list of all variables in the latest checkpoint . <EoL>
<BoL> Variable initializer . <EoL>
<BoL> Returns CheckpointReader for latest checkpoint . <EoL>
<BoL> Returns a Tensor with the contents of the given variable in the checkpoint . <EoL>
<BoL> Prepends name scope to a name . <EoL>
<BoL> Reduce tensors to a scalar sum . <EoL>
<BoL> Squeeze last dim if ranks of ` predictions ` and ` labels ` differ by 1 . <EoL>
<BoL> Like tf.case , except attempts to statically evaluate predicates . <EoL>
<BoL> Return either ` true_fn ( ) ` if predicate ` pred ` is true else ` false_fn ( ) ` . <EoL>
<BoL> Return the bool value for ` pred ` , or None if ` pred ` had a dynamic value . <EoL>
<BoL> Sorts a tensor . <EoL>
<BoL> Removes name scope from a name . <EoL>
<BoL> Assert tensors are the same shape , from the same graph . <EoL>
<BoL> Asserts tensor has expected shape . <EoL>
<BoL> Initialize 'ref ' with all zeros , ref tensor should be uninitialized . <EoL>
<BoL> Run train ops a certain number of times . <EoL>
<BoL> GANEstimator model function . <EoL>
<BoL> Returns a GANLoss tuple from the provided GANModel . <EoL>
<BoL> StarGANEstimator model function . <EoL>
<BoL> Adds image summaries for CycleGAN . <EoL>
<BoL> Adds image summaries for real and fake images . <EoL>
<BoL> Adds typical GANModel summaries . <EoL>
<BoL> Adds summaries for a regularization losses.. <EoL>
<BoL> Helper function to create a result for each image on the fly . <EoL>
<BoL> Classifier score for evaluating a conditional generative model . <EoL>
<BoL> Classifier score for evaluating a generative model from logits . <EoL>
<BoL> Get a GraphDef proto from a disk location . <EoL>
<BoL> Get a GraphDef proto from within a .par file . <EoL>
<BoL> Get a GraphDef proto from a tarball on the web . <EoL>
<BoL> Arrange a minibatch of images into a grid to form a single image . <EoL>
<BoL> A reshaped summary image . <EoL>
<BoL> Run virtual batch normalization on inputs . <EoL>
<BoL> Compute the statistics needed for virtual batch normalization . <EoL>
<BoL> Return the reference batch , but batch normalized . <EoL>
<BoL> Modifies an optimizer so it clips weights to a certain value . <EoL>
<BoL> Modifies an optimizer so it clips weights to a certain value . <EoL>
<BoL> Condition the value of a tensor . <EoL>
<BoL> Condition a tensor based on a one-hot tensor . <EoL>
<BoL> Returns a hooks function for sequential GAN training . <EoL>
<BoL> Returns a hooks function for sequential GAN training . <EoL>
<BoL> Returns a thin wrapper around slim.learning.train_step , for GANs.A thin wrapper around slim.learning.train_step , for GANs . <EoL>
<BoL> Returns a namedtuple as a dictionary . <EoL>
<BoL> Defines the cycle consistency loss . <EoL>
<BoL> Convert a discriminator loss function to take a StarGANModel . <EoL>
<BoL> Convert a generator loss function to take a StarGANModel . <EoL>
<BoL> Convert a gradient penalty function to take a StarGANModel . <EoL>
<BoL> Classification Loss Function Helper . <EoL>
<BoL> Create a dictionary of control-output dependencies . <EoL>
<BoL> Build the control outputs dictionary . <EoL>
<BoL> return the control outputs of op . <EoL>
<BoL> Update the control outputs if the graph has changed . <EoL>
<BoL> Allows for implicit boolean conversion . <EoL>
<BoL> Create a copy of this subgraph . <EoL>
<BoL> Allow Python context to minimize the life time of a subgraph view . <EoL>
<BoL> Create a subgraph containing the given ops and the `` passthrough '' tensors . <EoL>
<BoL> Assign other to itself . <EoL>
<BoL> Remap in the place the inputs and/or outputs to the default mapping . <EoL>
<BoL> Remap the inputs of the subgraph in-place . <EoL>
<BoL> Remap the outputs of the subgraph in-place . <EoL>
<BoL> Remap the outputs in place so that all the tensors appears only once . <EoL>
<BoL> Remap the outputs in place to match the number of consumers . <EoL>
<BoL> Remove unused ops in place . <EoL>
<BoL> Return a Python set of all the consumers of this subgraph view . <EoL>
<BoL> Return a copy of itself . <EoL>
<BoL> Return the op named op_name . <EoL>
<BoL> Find the input index corresponding to the given input tensor t . <EoL>
<BoL> Check whether a tensor is passthrough . <EoL>
<BoL> Get an op by its index . <EoL>
<BoL> Find the output index corresponding to given output tensor t . <EoL>
<BoL> Remap the inputs and outputs of the subgraph . <EoL>
<BoL> Remap the inputs and/or outputs to the default mapping . <EoL>
<BoL> Remap the inputs of the subgraph . <EoL>
<BoL> Remap the output of the subgraph . <EoL>
<BoL> Remap the outputs so that all the tensors appears only once . <EoL>
<BoL> Remap the outputs to match the number of consumers . <EoL>
<BoL> Remove unused ops . <EoL>
<BoL> Transformer constructor . <EoL>
<BoL> Connect the previously copied ops . <EoL>
<BoL> Copy ops without connecting them . <EoL>
<BoL> Reconnects the cyclic tensors . <EoL>
<BoL> Transform a subgraph view . <EoL>
<BoL> Return tre transformed tensor of ` t ` . <EoL>
<BoL> Constructor . <EoL>
<BoL> Return the correct container depending on the type of ` top ` . <EoL>
<BoL> Return the original op/tensor corresponding to the transformed one . <EoL>
<BoL> Return the transformed op/tensor corresponding to the original one . <EoL>
<BoL> Return the original op/tensor corresponding to the transformed one . <EoL>
<BoL> Return the transformed op/tensor corresponding to the original one . <EoL>
<BoL> Check if sgv belongs to the given graph . <EoL>
<BoL> Check is the mapping is valid . <EoL>
<BoL> Returns index as is or return index of tensor in ` ts ` . <EoL>
<BoL> Returns index in ` indices ` as is or replace with tensor 's index . <EoL>
<BoL> Create a SubGraphView from selected operations and passthrough tensors . <EoL>
<BoL> Make a subgraph from a name scope . <EoL>
<BoL> Check that all the element in args belong to the same graph . <EoL>
<BoL> Add all the elements of ` lb ` to ` la ` if they are not there already . <EoL>
<BoL> Find corresponding ops/tensors in a different graph . <EoL>
<BoL> Find corresponding op/tensor in a different graph . <EoL>
<BoL> Flatten a tree into a list . <EoL>
<BoL> Return all the consuming ops of the tensors in ts . <EoL>
<BoL> Return all the generating ops of the tensors in ` ts ` . <EoL>
<BoL> Return all the predefined collection names . <EoL>
<BoL> get all the tensors which are input or output of an op in the graph . <EoL>
<BoL> Return the unique graph used by the all the elements in tops . <EoL>
<BoL> Return true if the object is iterable . <EoL>
<BoL> Convert ops to a list of ` tf.Operation ` . <EoL>
<BoL> Convert ts to a list of ` tf.Tensor ` . <EoL>
<BoL> Create placeholder name for the graph editor . <EoL>
<BoL> Transform all the nodes of a tree . <EoL>
<BoL> Add the control inputs cops to op . <EoL>
<BoL> Add the transformed elem to the ( renamed ) collections of elem . <EoL>
<BoL> Bypass the given subgraph by connecting its inputs to its outputs . <EoL>
<BoL> Return True if obj can be turned into a regular expression . <EoL>
<BoL> Do various check on control_inputs and control_outputs . <EoL>
<BoL> Compute the tensors at the boundary of a set of ops . <EoL>
<BoL> Connect the outputs of sgv0 to the inputs of sgv1 . <EoL>
<BoL> Copy a ` tf.Operation ` . <EoL>
<BoL> Detach both the inputs and the outputs of a subgraph view . <EoL>
<BoL> Detach all the external control inputs of the subgraph sgv . <EoL>
<BoL> Detach all the external control outputs of the subgraph sgv . <EoL>
<BoL> Detach the inputs of a subgraph view . <EoL>
<BoL> Detach the output of a subgraph view . <EoL>
<BoL> Get the ops passing the given filter . <EoL>
<BoL> Get all the operations that match the given regex . <EoL>
<BoL> Get all the tensors which are input or output of an op in ops . <EoL>
<BoL> r '' '' '' Get all the tensors linked to ops that match the given regex . <EoL>
<BoL> Get all the operations under the given scope path . <EoL>
<BoL> Transform a tensor into itself ( identity ) if possible . <EoL>
<BoL> Return a compiled regular expression . <EoL>
<BoL> Remove the control inputs cops from co . <EoL>
<BoL> Transform a tensor into a placeholder tensor . <EoL>
<BoL> Check swap mode . <EoL>
<BoL> Make sure the shape and dtype of the two tensor 's lists are compatible . <EoL>
<BoL> Re-route both the inputs and the outputs of the two subgraph views . <EoL>
<BoL> Re-route all the inputs of two subgraphs . <EoL>
<BoL> Re-route all the outputs of two operations . <EoL>
<BoL> Remap in place the inputs of two subgraph views to mimic the reroute . <EoL>
<BoL> Reroute the end of the tensors ( t0 , t1 ) . <EoL>
<BoL> Reroute the end of the tensors in each pair ( t0 , t1 ) in ts0 x ts1 . <EoL>
<BoL> Re-route all the inputs of two subgraphs . <EoL>
<BoL> Re-route the inputs and outputs of sgv0 to sgv1 ( see _reroute_sgv ) . <EoL>
<BoL> Re-route all the outputs of two operations . <EoL>
<BoL> For each tensor 's pair , replace the end of t1 by the end of t0 . <EoL>
<BoL> Swap all the inputs of sgv0 and sgv1 ( see reroute_inputs ) . <EoL>
<BoL> Swap the inputs and outputs of sgv1 to sgv0 ( see _reroute_sgv ) . <EoL>
<BoL> Swap all the outputs of sgv0 and sgv1 ( see reroute_outputs ) . <EoL>
<BoL> For each tensor 's pair , swap the end of ( t0 , t1 ) . <EoL>
<BoL> Compute the list of unique input tensors of all the op in ops . <EoL>
<BoL> Compute the list of unique output tensors of all the op in ops . <EoL>
<BoL> Helper to select operations . <EoL>
<BoL> Helper to select operations and tensors . <EoL>
<BoL> Helper to select tensors . <EoL>
<BoL> Compute a destination name from a source name . <EoL>
<BoL> Complete ` ops ` so that the transformed graph is valid . <EoL>
<BoL> Transform an optional op only if it is inside the subgraph . <EoL>
<BoL> Run one step of GridRNN . <EoL>
<BoL> Total size of the state of the inner cell used in this grid . <EoL>
<BoL> Extract the cell and previous output tensors from the given state . <EoL>
<BoL> Fills in c_prev and m_prev with projected input , for input dimensions . <EoL>
<BoL> Composes the transforms tensors . <EoL>
<BoL> Labels the connected components in a batch of images . <EoL>
<BoL> Image warping using per-pixel flow vectors . <EoL>
<BoL> Converts ` tf.contrib.image ` projective transforms to affine matrices . <EoL>
<BoL> Converts affine matrices to ` tf.contrib.image ` projective transforms . <EoL>
<BoL> Rotate image ( s ) counterclockwise by the passed angle ( s ) in radians . <EoL>
<BoL> Translate image ( s ) by the passed vectors ( s ) . <EoL>
<BoL> Returns projective transform ( s ) for the given translation ( s ) . <EoL>
<BoL> Basic wrapper for the ObtainNextOp . <EoL>
<BoL> ODE integration on a fixed grid ( with no step size control ) . <EoL>
<BoL> Runs inference to determine the predicted class per instance . <EoL>
<BoL> Runs inference to determine the class probability predictions . <EoL>
<BoL> r '' '' '' Constructs a RandomFourierFeatureMapper instance . <EoL>
<BoL> Maps each row of input_tensor using random Fourier features . <EoL>
<BoL> Construct an Axes . <EoL>
<BoL> Creates a new Axes object without the given axis . <EoL>
<BoL> Construct an Axis . <EoL>
<BoL> Returns the integer position of the given tick label . <EoL>
<BoL> Construct a LabeledTensor . <EoL>
<BoL> Support tf.Graph.as_graph_element on LabeledTensor objects . <EoL>
<BoL> Returns the TensorShape that represents the shape of this tensor . <EoL>
<BoL> Reshape the input to the original shape . <EoL>
<BoL> Reshape the input to the target shape . <EoL>
<BoL> Find the left-most consistent ordering between two lists of unique items . <EoL>
<BoL> LabeledTensor version of ` tf . { op_name } ` . <EoL>
<BoL> LabeledTensor version of ` tf . { op_name } ` with label based alignment . <EoL>
<BoL> Align the axes of two tensors so they may be broadcast to each other . <EoL>
<BoL> Convert an AxisLike object into an Axis . <EoL>
<BoL> Set axis order for the result of broadcasting operations within a scope . <EoL>
<BoL> Verify that the given tensor has a consistent axis order . <EoL>
<BoL> Concatenate a list of Axes . <EoL>
<BoL> Converts the given ` value ` to a ` LabeledTensor ` . <EoL>
<BoL> Define a binary operation that broadcasts labeled tensors.LabeledTensor version of ` tf . { op_name } ` with label based alignment . <EoL>
<BoL> Define a unary operation for labeled tensors.LabeledTensor version of ` tf . { op_name } ` . <EoL>
<BoL> Insert dimensions of size 1 . <EoL>
<BoL> Get the axis_order set by any containing axis_order_scope . <EoL>
<BoL> The identity op . <EoL>
<BoL> Impose desired axis order on a labeled tensor . <EoL>
<BoL> Slice out a subset of the tensor . <EoL>
<BoL> Permute a tensor 's axes . <EoL>
<BoL> Convert a dict of lt.FixedLenFeature into a dict of tf.FixedLenFeature . <EoL>
<BoL> Parse ` Example ` protos into a ` dict ` of labeled tensors . <EoL>
<BoL> Parses a single ` Example ` proto . <EoL>
<BoL> Create a placeholder for a labeled tensor . <EoL>
<BoL> Apply a boolean mask to a labeled tensor . <EoL>
<BoL> Casts a labeled tensor to a new type . <EoL>
<BoL> Concatenate tensors along a dimension . <EoL>
<BoL> Creates a constant tensor . <EoL>
<BoL> Define a reduction op for labeled tensors.Computes the given reduction across the given axes of a LabeledTensor . <EoL>
<BoL> Left fold on the list of tensors unpacked from labeled_tensor . <EoL>
<BoL> Map on the list of tensors unpacked from labeled_tensor . <EoL>
<BoL> Matrix multiply two tensors with rank 1 or 2 . <EoL>
<BoL> Creates an identical tensor with all elements set to one . <EoL>
<BoL> Pack tensors along a new axis . <EoL>
<BoL> Pads a tensor . <EoL>
<BoL> Randomly crops a tensor to a given size . <EoL>
<BoL> Computes the given reduction across the given axes of a LabeledTensor . <EoL>
<BoL> Rename an axis of LabeledTensor . <EoL>
<BoL> Reshape specific axes of a LabeledTensor . <EoL>
<BoL> Slice out a subset of the tensor . <EoL>
<BoL> Remove size-1 dimensions . <EoL>
<BoL> Constructs a tensor by tiling a given tensor . <EoL>
<BoL> Unpack the tensor . <EoL>
<BoL> Asserts a tensor does n't contain NaNs or Infs . <EoL>
<BoL> Return elements from x or y depending on condition . <EoL>
<BoL> Creates an identical tensor with all elements set to zero . <EoL>
<BoL> Replace forward references in the given type . <EoL>
<BoL> A more succinct repr for typecheck tracebacks . <EoL>
<BoL> A decorator which checks the input types of a function.Check the types.A helper function . <EoL>
<BoL> Register an abbreviation for a type in typecheck tracebacks . <EoL>
<BoL> A decorator which checks the return types of a function.Check the types.A helper function . <EoL>
<BoL> Same as tf.maximum , but with helpful gradient for inputs < bound . <EoL>
<BoL> Gradient for ` _lower_bound ` . <EoL>
<BoL> Run backward through the reversible layers . <EoL>
<BoL> Run forward through the reversible layers . <EoL>
<BoL> Custom gradient fn for a block of reversible residual layers . <EoL>
<BoL> Returns the summed penalty by applying ` regularizer ` to the ` weights_list ` . <EoL>
<BoL> Internal function forces updates moving_vars if is_training.Internal function that delay updates moving_vars if is_training . <EoL>
<BoL> Creates a _BucketizedColumn for discretizing dense input . <EoL>
<BoL> Checks the validity of the set of FeatureColumns . <EoL>
<BoL> Helper that prepares features config from input feature_columns . <EoL>
<BoL> Converts a dense tensor into a sparse tensor . <EoL>
<BoL> Version of embedding_lookup that avoids duplicate lookups . <EoL>
<BoL> Returns None , or a ( path , tensor_name ) to load a checkpoint from . <EoL>
<BoL> Returns arguments to embedding lookup to build an input layer . <EoL>
<BoL> Helper method for self.key ( ) that omits particular properties . <EoL>
<BoL> Returns arguments to look up embeddings for this column . <EoL>
<BoL> Resets the configuration in the column . <EoL>
<BoL> Returns a dense tensor representing this column 's values . <EoL>
<BoL> Handles cross transformation . <EoL>
<BoL> Handles sparse column to id conversion . <EoL>
<BoL> Creates a SparseTensor from the bucketized Tensor . <EoL>
<BoL> Handles cross transformation.Collects base columns contained in the cross . <EoL>
<BoL> Returns the id tensor from the given transformed input_tensor . <EoL>
<BoL> Handles sparse column to id conversion . <EoL>
<BoL> Returns the weight tensor from the given transformed input_tensor . <EoL>
<BoL> Apply transformation and inserts it into columns_to_tensors . <EoL>
<BoL> Gets the transformed feature column . <EoL>
<BoL> Used by the Transformer to prevent double transformations . <EoL>
<BoL> Returns the input tensor after custom normalization is applied . <EoL>
<BoL> Apply transformation and inserts it into columns_to_tensors . <EoL>
<BoL> Returns the input tensor after custom normalization is applied . <EoL>
<BoL> Apply transformation and inserts it into columns_to_tensors . <EoL>
<BoL> sparsify input_tensor if dense . <EoL>
<BoL> Returns the id tensor from the given transformed input_tensor . <EoL>
<BoL> Handles sparse column to id conversion . <EoL>
<BoL> Check compatibility of two sparse columns . <EoL>
<BoL> Returns the weight tensor from the given transformed input_tensor . <EoL>
<BoL> Returns the id tensor from the given transformed input_tensor . <EoL>
<BoL> Inserts a tuple with the id and weight tensors . <EoL>
<BoL> Check compatibility with other sparse column . <EoL>
<BoL> Returns the weight tensor from the given transformed input_tensor . <EoL>
<BoL> Prepares a feature spec for parsing ` tf.SequenceExample ` s . <EoL>
<BoL> Returns configuration for the base feature defined in feature_column . <EoL>
<BoL> Returns true if ` v ` is a variable . <EoL>
<BoL> Reshaping logic for dense , numeric ` Tensors ` . <EoL>
<BoL> Decorator for marking functions or methods experimental . <EoL>
<BoL> Returns placeholder tensors for inference . <EoL>
<BoL> Creates an ` _OneHotColumn ` for a one-hot or multi-hot repr in a DNN . <EoL>
<BoL> Creates a _SparseColumn with keys . <EoL>
<BoL> Flattens the input while maintaining the batch_size . <EoL>
<BoL> Returns a function that can be used to apply L1 L2 regularizations . <EoL>
<BoL> Returns a function that can be used to apply L1 regularization to weights.Applies L1 regularization to weights . <EoL>
<BoL> Returns a function that can be used to apply L2 regularization to weights.Applies l2 regularization to weights . <EoL>
<BoL> Adds a maxout op from https : //arxiv.org/abs/1302.4389 <EoL>
<BoL> Creates a _TargetColumn for multi class single label classification . <EoL>
<BoL> Decorator that recomputes the function on the backwards pass . <EoL>
<BoL> Applies the same layer with the same arguments repeatedly . <EoL>
<BoL> Performs softmax on Nth dimension of N-dimensional logit tensor . <EoL>
<BoL> Builds a stack of layers by applying layer repeatedly using stack_args . <EoL>
<BoL> Returns a function that applies the sum of multiple regularizers.Applies the sum of all the input regularizers . <EoL>
<BoL> Add a summary operation for the histogram of a tensor . <EoL>
<BoL> Add a scalar summary operation for the tensor . <EoL>
<BoL> Summarize an activation . <EoL>
<BoL> Summarize activations , using ` summarize_activation ` to summarize . <EoL>
<BoL> Summarize a tensor using a suitable summary type . <EoL>
<BoL> Summarize a set of tensors . <EoL>
<BoL> Returns transformed features based on features columns passed in . <EoL>
<BoL> Normalizes the given input across the specified dimension to unit length . <EoL>
<BoL> Initializer function . <EoL>
<BoL> Returns an initializer performing `` Xavier '' initialization for weights . <EoL>
<BoL> Initializes a BaseEstimator instance . <EoL>
<BoL> Method that builds model graph and returns evaluation ops . <EoL>
<BoL> Determines whether the training has stopped . <EoL>
<BoL> Export the Estimator using export_fn , if defined . <EoL>
<BoL> Creates , starts , and returns a server_lib.Server . <EoL>
<BoL> Interleaves training and evaluation . <EoL>
<BoL> Evaluate on the evaluation data . <EoL>
<BoL> Extends the hooks for training . <EoL>
<BoL> Resets the export strategies with the ` new_export_strategies ` . <EoL>
<BoL> Starts a TensorFlow server and joins the serving thread . <EoL>
<BoL> Tests training , evaluating and exporting the estimator for a single step . <EoL>
<BoL> Fit the estimator using the training data . <EoL>
<BoL> Interleaves training and evaluation . <EoL>
<BoL> Connect our ` metric_fn ` to the specified members of the given dicts.Get a single tensor or an element of a dict or raise ValueError . <EoL>
<BoL> Creates an equivalent ` EstimatorSpec ` .Returns self.eval_metric_ops without loss metric . <EoL>
<BoL> Returns None or tf.ConfigProto instance with default device_filters set . <EoL>
<BoL> Initialize distributed properties based on ` tf_config ` . <EoL>
<BoL> Overwrites the session_config for distributed training . <EoL>
<BoL> See ` replace ` . <EoL>
<BoL> Returns task index from ` TF_CONFIG ` environmental variable . <EoL>
<BoL> Returns a new instance of ` RunConfig ` replacing specified properties . <EoL>
<BoL> Generates a 'Unique Identifier ' based on all internal fields . <EoL>
<BoL> Build an input_fn appropriate for serving , expecting fed tf.Examples.An input_fn that expects a serialized tf.Example . <EoL>
<BoL> Wrapper function factory invoked by decorator magic.The actual wrapper function that applies the retry logic . <EoL>
<BoL> Load Boston housing dataset . <EoL>
<BoL> Load Iris dataset . <EoL>
<BoL> Download the data from source url , unless it 's already here . <EoL>
<BoL> Create a smaller dataset of only 1/ratio of original data . <EoL>
<BoL> The actual wrapper function that applies the retry logic . <EoL>
<BoL> Loads dataset by name . <EoL>
<BoL> Creates binary synthetic datasets . <EoL>
<BoL> Return the next ` batch_size ` examples from this data set . <EoL>
<BoL> Convert class labels from scalars to one-hot vectors . <EoL>
<BoL> Extract the images into a 4D uint8 numpy array [ index , y , x , depth ] . <EoL>
<BoL> Extract the labels into a 1D uint8 numpy array [ index ] . <EoL>
<BoL> Return Archimedes spiral <EoL>
<BoL> Return Equiangular ( Bernoulli 's ) spiral <EoL>
<BoL> Return Parabolic ( Fermat 's ) spiral <EoL>
<BoL> Get DBpedia datasets from CSV files . <EoL>
<BoL> Download if DBpedia data is not present . <EoL>
<BoL> Extract data from dask.Series or dask.DataFrame for predictors . <EoL>
<BoL> Extract data from dask.Series or dask.DataFrame for labels . <EoL>
<BoL> Extract data from pandas.DataFrame for predictors . <EoL>
<BoL> Extract data from pandas.DataFrame for labels . <EoL>
<BoL> Extracts numpy matrix from pandas DataFrame . <EoL>
<BoL> Returns the local init ops to initialize tables and local variables . <EoL>
<BoL> Lazy init and return saver . <EoL>
<BoL> Deprecation wrapper . <EoL>
<BoL> Runs session for given tensors with monitor callbacks . <EoL>
<BoL> Writes eval results into summary file in given dir . <EoL>
<BoL> Clear cached summary writers . Currently only used for unit tests . <EoL>
<BoL> Returns single SummaryWriter per logdir in current run . <EoL>
<BoL> Restore graph from ` restore_checkpoint_path ` and run ` output_dict ` tensors . <EoL>
<BoL> See run_feeds_iter ( ) . Returns a ` list ` instead of an iterator . <EoL>
<BoL> Run ` output_dict ` tensors with each input in ` feed_dicts ` . <EoL>
<BoL> Run ` output_dict ` tensors ` n ` times , with the same ` feed_dict ` each run . <EoL>
<BoL> Creates output alternative for the Head . <EoL>
<BoL> Returns a dict of predictions . <EoL>
<BoL> Returns a dict of metrics keyed by name . <EoL>
<BoL> Applies transformations to labels tensor . <EoL>
<BoL> See ` _MultiClassHead ` . <EoL>
<BoL> See ` _MultiClassHead ` . <EoL>
<BoL> Applies transformations to labels tensor . <EoL>
<BoL> Returns integer label ID ` Tensor ` . <EoL>
<BoL> Returns labels ` Tensor ` of the same type as classes . <EoL>
<BoL> Returns a dict of predictions . <EoL>
<BoL> Returns a dict of metrics keyed by name . <EoL>
<BoL> Returns a dict that contains both the original labels and label IDs . <EoL>
<BoL> _Head to merges multiple _Head objects . <EoL>
<BoL> Merges list of ModelFnOps for eval . <EoL>
<BoL> Merges list of ModelFnOps for inference . <EoL>
<BoL> Merges list of ModelFnOps for training . <EoL>
<BoL> Splits logits for heads . <EoL>
<BoL> See ` _MultiClassHead ` . <EoL>
<BoL> Returns a dict of metrics keyed by name . <EoL>
<BoL> Applies transformations to labels tensor . <EoL>
<BoL> Returns a dict of predictions . <EoL>
<BoL> Returns a dict of metrics keyed by name . <EoL>
<BoL> Applies transformations to labels tensor . <EoL>
<BoL> Average label value for class ` class_id ` . <EoL>
<BoL> Returns centered_bias ` Variable ` . <EoL>
<BoL> Creates and returns training op for centered bias . <EoL>
<BoL> Raises ValueError if the given mode is invalid . <EoL>
<BoL> Raises ValueError if the given tensor is ` SparseTensor ` . <EoL>
<BoL> Creates output alternative for the Head . <EoL>
<BoL> Returns a tuple of ( loss_train , loss_report ) . <EoL>
<BoL> Returns a spec of given func . <EoL>
<BoL> Validate logits args , and create ` logits ` if necessary . <EoL>
<BoL> Creates a MultiHead stemming from same logits/hidden layer . <EoL>
<BoL> Computes poisson loss from logits . <EoL>
<BoL> If labels is ` SparseTensor ` , converts it to indicator ` Tensor ` . <EoL>
<BoL> Returns label as a tensor . <EoL>
<BoL> Returns weights as ` Tensor ` of rank 0 , or at least 2 . <EoL>
<BoL> Creates a Head that contains only loss terms . <EoL>
<BoL> Creates ` FeatureColumn ` objects for inputs defined by input ` x ` . <EoL>
<BoL> Creates ` FeatureColumn ` objects for inputs defined by ` input_fn ` . <EoL>
<BoL> New dask.dataframe with values added to index of each subdataframe . <EoL>
<BoL> Construct the new task graph and make a new dask.dataframe around it . <EoL>
<BoL> Number of rows in each sub-dataframe . <EoL>
<BoL> Returns a function , that will sample data and provide it to placeholders.Samples data and provides it to placeholders . <EoL>
<BoL> Function returns a ` dict ` with data feed params while training . <EoL>
<BoL> Returns a function that samples data into given placeholders.Function that samples data into given placeholders . <EoL>
<BoL> Function returns a ` dict ` with data feed params while training . <EoL>
<BoL> Builds inputs in the graph . <EoL>
<BoL> Adds a placeholder variable for the epoch to the graph . <EoL>
<BoL> Sets placeholders for this data feeder . <EoL>
<BoL> Initializes a StreamingDataFeeder instance . <EoL>
<BoL> Returns a function , that will sample data and provide it to placeholders.Samples data and provides it to placeholders.Initialize array of given shape or dict of shapes and dtype.Puts data array into container.Puts data array or data dictionary into container . <EoL>
<BoL> Function returns a ` dict ` with data feed params while training . <EoL>
<BoL> Accesses an element from collection , using integer location based indexing . <EoL>
<BoL> Filter data types into acceptable format . <EoL>
<BoL> Returns shape for input and output of the data feeder . <EoL>
<BoL> Checks array on dtype and converts it if different . <EoL>
<BoL> Returns an iterable for feeding into predict step . <EoL>
<BoL> Sets up processor iterable . <EoL>
<BoL> generator input function . <EoL>
<BoL> Parse list of file names from pattern , optionally shuffled . <EoL>
<BoL> Numpy input function . <EoL>
<BoL> Pandas input function . <EoL>
<BoL> Tune an experiment with hyper-parameters . <EoL>
<BoL> Create an ExportStrategy for use with Experiment.Exports the given Estimator as a SavedModel . <EoL>
<BoL> Reverse a list of Tensors up to specified lengths . <EoL>
<BoL> RNN estimator with target predictor function on top . <EoL>
<BoL> Creates linear regression TensorFlow subgraph . <EoL>
<BoL> Linear regression subgraph with zero-value initial weights and bias . <EoL>
<BoL> Logistic regression subgraph with zero-value initial weights and bias . <EoL>
<BoL> Called at the beginning of training . <EoL>
<BoL> Callback at the end of training/evaluation . <EoL>
<BoL> Begin epoch . <EoL>
<BoL> End epoch . <EoL>
<BoL> Callback after the step is finished . <EoL>
<BoL> A setter called automatically by the target estimator . <EoL>
<BoL> Callback before training step begins . <EoL>
<BoL> Callback after training step finished . <EoL>
<BoL> Initializes a CaptureVariable monitor . <EoL>
<BoL> Callback after a step is finished or ` end ( ) ` is called . <EoL>
<BoL> Overrides ` BaseMonitor.step_begin ` . <EoL>
<BoL> Overrides ` BaseMonitor.step_end ` . <EoL>
<BoL> Saves the latest checkpoint . <EoL>
<BoL> Initializes an ` EveryN ` monitor . <EoL>
<BoL> Callback before every n'th step begins . <EoL>
<BoL> Callback after every n'th step finished . <EoL>
<BoL> Initializes ExportMonitor . <EoL>
<BoL> Initializes GraphDump monitor . <EoL>
<BoL> Compares two ` GraphDump ` monitors and returns differences . <EoL>
<BoL> Initializes LoggingTrainable monitor . <EoL>
<BoL> Initializes NanLoss monitor . <EoL>
<BoL> Initializes a PrintTensor monitor . <EoL>
<BoL> Create a StopAtStep monitor . <EoL>
<BoL> Retrieves Graph element . <EoL>
<BoL> Wraps monitors with a hook . <EoL>
<BoL> Creates an embedding for categorical variable with given number of classes . <EoL>
<BoL> Provides a N dimensional version of tf.embedding_lookup . <EoL>
<BoL> Returns prediction and loss for mean squared error regression . <EoL>
<BoL> RNN Decoder that creates training and sampling sub-graphs . <EoL>
<BoL> Processes inputs for Sequence to Sequence models . <EoL>
<BoL> Returns predictions and loss for sequence of predictions . <EoL>
<BoL> Does nothing . No fitting required.Calls transform.Reverses output of transform back to text.Transforms input documents into sequence of ids . <EoL>
<BoL> Initializes a CategoricalProcessor instance . <EoL>
<BoL> Learn a vocabulary dictionary of all categories in ` x ` . <EoL>
<BoL> Learn the vocabulary dictionary and return indexies of categories . <EoL>
<BoL> Freeze or unfreeze all vocabularies . <EoL>
<BoL> Transform documents to category-id matrix . <EoL>
<BoL> Returns total count of mappings . Including unknown token . <EoL>
<BoL> Adds count of the category to the frequency table . <EoL>
<BoL> Freezes the vocabulary , after which new words return unknown token id . <EoL>
<BoL> Returns word 's id in the vocabulary . <EoL>
<BoL> Given class id reverse to original class name . <EoL>
<BoL> Trims vocabulary for minimum frequency . <EoL>
<BoL> Learn a vocabulary dictionary of all tokens in the raw documents . <EoL>
<BoL> Learn the vocabulary dictionary and return indexies of words . <EoL>
<BoL> Restores vocabulary processor from given file . <EoL>
<BoL> Reverses output of vocabulary mapping to words . <EoL>
<BoL> Saves vocabulary processor into given file . <EoL>
<BoL> Transform documents to word-id matrix . <EoL>
<BoL> Tokenizer generator . <EoL>
<BoL> Build an input_fn appropriate for serving , expecting feature Tensors.an input_fn that expects all features to be fed directly . <EoL>
<BoL> Creates default input parsing using Estimator 's feature signatures . <EoL>
<BoL> Get first element from the collection . <EoL>
<BoL> Lazy init and return saver . <EoL>
<BoL> Creates classification signature from given examples and predictions . <EoL>
<BoL> Creates generic signature from given examples and predictions . <EoL>
<BoL> Creates logistic regression signature from given examples and predictions . <EoL>
<BoL> Creates regression signature from given examples and predictions . <EoL>
<BoL> Gets a list of Paths in a given directory . <EoL>
<BoL> Creates a filter that keeps the largest n export versions . <EoL>
<BoL> Creates a filter that keeps every export that is a multiple of n . <EoL>
<BoL> Negate a filter . <EoL>
<BoL> Creates a filter that keeps one of every n export versions.A filter function that keeps exactly one out of every n paths . <EoL>
<BoL> Creates a filter that keeps the union of two filters . <EoL>
<BoL> Constructor of this class . <EoL>
<BoL> Get the best eval result from event files . <EoL>
<BoL> Records a given checkpoint and exports if this is the best model . <EoL>
<BoL> Compares two evaluation results and returns true if the 2nd one is better . <EoL>
<BoL> Build ` SignatureDef ` s from all pairs of input and output alternatives . <EoL>
<BoL> Exports the given Estimator as a SavedModel and invokes post_export_fn . <EoL>
<BoL> Deletes older exports , retaining only a given number of the most recent . <EoL>
<BoL> Obtain all input alternatives using the input_fn output and heuristics . <EoL>
<BoL> Locate the most recent SavedModel export in a directory of many exports . <EoL>
<BoL> Obtain all output alternatives using the model_fn output and heuristics . <EoL>
<BoL> Builds a directory name based on the argument but starting with 'temp- ' . <EoL>
<BoL> Builds a path to a new subdirectory within the base directory . <EoL>
<BoL> Creates an custom ExportStrategy for use with tf.contrib.learn.Experiment.Exports the given Estimator as a SavedModel . <EoL>
<BoL> Create an ExportStrategy for use with Experiment , using ` FeatureColumn ` s . <EoL>
<BoL> Put attention masks on hidden using hidden_features and query . <EoL>
<BoL> The current decoder with a fixed feed_previous parameter . <EoL>
<BoL> Returns SparseFeatureColumn for the input dense_tensor.Returns dictionaries for training examples and variables . <EoL>
<BoL> Create a new sdca optimizer . <EoL>
<BoL> Converts input list to a set of tensors . <EoL>
<BoL> Make unshrinked internal variables ( slots ) . <EoL>
<BoL> Compute the static size of the first dimension for a sharded variable . <EoL>
<BoL> Computes the ( un-normalized ) l1 loss of the model . <EoL>
<BoL> Computes the ( un-normalized ) l2 loss of the model . <EoL>
<BoL> Returns predictions of the form w*x . <EoL>
<BoL> Wraps var in a list if it is not a list or PartitionedVariable . <EoL>
<BoL> Add operations to compute the approximate duality gap . <EoL>
<BoL> Add operations to train a linear model by minimizing the loss function . <EoL>
<BoL> Add operations to compute predictions by the model . <EoL>
<BoL> Add operations to compute the loss with regularization loss included . <EoL>
<BoL> Add operations to compute the loss ( without the regularization loss ) . <EoL>
<BoL> Updates the model weights . <EoL>
<BoL> Creates a ` SparseFeatureColumn ` representation . <EoL>
<BoL> Creates a non-initialized ` HashTable ` object . <EoL>
<BoL> Returns tensors of all keys and values in the table . <EoL>
<BoL> Looks up ` keys ` in a table , outputs the corresponding values . <EoL>
<BoL> Compute the number of elements in this table . <EoL>
<BoL> Returns the string_to_hash_bucket op to use based on ` hasher_spec ` . <EoL>
<BoL> Looks up ` keys ` in the table , outputs the corresponding values . <EoL>
<BoL> Compute the number of elements in this table . <EoL>
<BoL> Construct a table object from a table reference . <EoL>
<BoL> Constructs a table initializer object based on keys and values tensors . <EoL>
<BoL> Initializes the given ` table ` with ` keys ` and ` values ` tensors . <EoL>
<BoL> Construct a lookup table interface . <EoL>
<BoL> A function that initializes the resource . Optional . <EoL>
<BoL> Looks up ` keys ` in a table , outputs the corresponding values . <EoL>
<BoL> Compute the number of elements in this table . <EoL>
<BoL> For object-based checkpointing . <EoL>
<BoL> Returns tensors of all keys and values in the table . <EoL>
<BoL> Associates ` keys ` with ` values ` . <EoL>
<BoL> Looks up ` keys ` in a table , outputs the corresponding values . <EoL>
<BoL> Removes ` keys ` and its associated values from the table . <EoL>
<BoL> Compute the number of elements in this table . <EoL>
<BoL> For object-based checkpointing . <EoL>
<BoL> Returns tensors of all keys and values in the table . <EoL>
<BoL> Associates ` keys ` with ` values ` . <EoL>
<BoL> Looks up ` keys ` in a table , outputs the corresponding values . <EoL>
<BoL> Removes ` keys ` and its associated values from the table . <EoL>
<BoL> Compute the number of elements in this table . <EoL>
<BoL> Construct a table initializer object . <EoL>
<BoL> Returns the table initialization op . <EoL>
<BoL> Initializes the table from a text file . <EoL>
<BoL> Maps ` tensor ` of indices into string values based on ` mapping ` . <EoL>
<BoL> Returns a lookup table that maps a ` Tensor ` of indices into strings . <EoL>
<BoL> Maps ` tensor ` of strings into ` int64 ` indices based on ` mapping ` . <EoL>
<BoL> Adds an Absolute Difference loss to the training procedure . <EoL>
<BoL> Adds a externally defined loss to the collection of losses . <EoL>
<BoL> Computes the weighted loss . <EoL>
<BoL> Gets the list of losses from the loss_collection . <EoL>
<BoL> Gets the regularization losses . <EoL>
<BoL> Returns a tensor whose value represents the total loss . <EoL>
<BoL> Method that returns the loss tensor for hinge loss . <EoL>
<BoL> Adds a Log Loss term to the training procedure . <EoL>
<BoL> Adds a Sum-of-Squares loss to the training procedure . <EoL>
<BoL> Computes the lifted structured loss . <EoL>
<BoL> Computes the triplet loss with semi-hard negative mining . <EoL>
<BoL> Cross-entropy loss using ` tf.nn.sparse_softmax_cross_entropy_with_logits ` . <EoL>
<BoL> Generates an op that computes the current memory of a device . <EoL>
<BoL> Generates an op that measures the total memory ( in bytes ) of a device . <EoL>
<BoL> Generates an op that computes the peak memory of a device . <EoL>
<BoL> Add new inits to collection . <EoL>
<BoL> Copy the Saver into the transformed MetaGraphDef , if valid . <EoL>
<BoL> Verify that the named tensor was not removed . <EoL>
<BoL> Clean the specified save and restore op . <EoL>
<BoL> Identify all infrastructural Ops , to ensure that they are retained . <EoL>
<BoL> Fetch a node from a GraphDef proto by name . <EoL>
<BoL> Converts all variables in a graph and checkpoint into constants . <EoL>
<BoL> Obtain node names from a collection . <EoL>
<BoL> Obtain node names from a collection . <EoL>
<BoL> Obtain the shared init op name , if it exists . <EoL>
<BoL> Obtain a node name that is the single element of a collection . <EoL>
<BoL> Determine whether the named tensor is an output of a removed op . <EoL>
<BoL> Determine whether any removed op is mentioned in the given object . <EoL>
<BoL> Get the op name from a tensor name . <EoL>
<BoL> Computes the percentage of times that predictions matches labels . <EoL>
<BoL> Aggregates the metric names to tuple dictionary . <EoL>
<BoL> Aggregates the metric value tensors and update ops into two lists . <EoL>
<BoL> Computes the precision at a given recall . <EoL>
<BoL> Computes the roc-auc or pr-auc based on confusion counts . <EoL>
<BoL> Returns the loss scale . <EoL>
<BoL> Updates loss scale based on if gradients are finite in current step.Branch function when grads are all finite.Branch function when any grad is not finite . <EoL>
<BoL> Creates the fixed loss scale manager . <EoL>
<BoL> Returns the loss scale as a scalar ` float32 ` tensor . <EoL>
<BoL> Updates loss scale based on if gradients are finite in current step . <EoL>
<BoL> Construct a loss scaling optimizer . <EoL>
<BoL> Apply gradients . See base class ` tf.train.Optimizer ` . <EoL>
<BoL> Long short-term memory cell ( LSTM ) with masks for pruning . <EoL>
<BoL> Run one step of LSTM . <EoL>
<BoL> Set up the specification for model pruning . <EoL>
<BoL> Return target sparsity for the given layer/weight name . <EoL>
<BoL> Return the map of weight_name : sparsity parsed from the hparams . <EoL>
<BoL> Performs block-granular masking of the weights . <EoL>
<BoL> Updates the mask for a given weight tensor . <EoL>
<BoL> Adds summaries of weight sparsities and thresholds . <EoL>
<BoL> Apply mask to a given weight tensor . <EoL>
<BoL> Get a tf.HParams object with the default values for the hyperparameters . <EoL>
<BoL> Get sparsity of the weights . <EoL>
<BoL> Converts checkpoint data to GraphDef . <EoL>
<BoL> Removes mask variable from the graph . <EoL>
<BoL> Computes alpha dropout . <EoL>
<BoL> r '' '' '' Finds values of the ` n ` -th order statistic for the last dmension . <EoL>
<BoL> Returns ` y = alpha * ln ( 1 + exp ( x / alpha ) ) ` or ` min ( y , clip ) ` .Backprop for scaled softplus , with optional clipping . <EoL>
<BoL> Args : <EoL>
<BoL> Apply gradients to global variables . <EoL>
<BoL> Returns the op to let all the local variables and local center <EoL>
<BoL> Creates a hook to handle AGNOptimizerHook ops such as initialization . <EoL>
<BoL> Construct the extension class that adds weight decay to an optimizer . <EoL>
<BoL> Create a new ` ElasticAverageCustomGetter ` . <EoL>
<BoL> Apply gradients to global variables . <EoL>
<BoL> Returns the op to let all the local variables and local centerAdds ops to enqueue on all worker queues <EoL>
<BoL> Creates a hook to handle ElasticAverageOptimizerHook ops such as initialization . <EoL>
<BoL> Create a saver copy global_center_variable to trainable variables <EoL>
<BoL> Function to evaluate a ` Tensor ` . <EoL>
<BoL> Pack a list of ` Tensor ` s into a single , flattened , rank-1 ` Tensor ` . <EoL>
<BoL> Add ops to apply sparse gradients to ` var ` , with repeated sparse indices . <EoL>
<BoL> ` apply_gradients ` for use with a ` DistributionStrategy ` .Update variable ` v ` using gradient ` g ` . <EoL>
<BoL> Either looks up or creates ` _OptimizerV2State ` . <EoL>
<BoL> From Checkpointable . Find a non-slot variable in the current graph . <EoL>
<BoL> Add ops to apply sparse gradients to the variable ` handle ` . <EoL>
<BoL> Scale loss for the number of replicas . <EoL>
<BoL> Optimizers may not track dependencies . Raises an error . <EoL>
<BoL> Apply gradients to variables . <EoL>
<BoL> Return a slot named ` name ` created for ` var ` by the Optimizer . <EoL>
<BoL> Return a list of the names of slots created by the ` Optimizer ` . <EoL>
<BoL> A list of variables which encode the current state of ` Optimizer ` . <EoL>
<BoL> Create a new ` ModelAverageCustomGetter ` . <EoL>
<BoL> Get the update ops for the local variables in `` var_list '' . <EoL>
<BoL> Apply gradients to variables . <EoL>
<BoL> Compute gradients of `` loss '' for the variables in `` var_list '' . <EoL>
<BoL> Returns the op . <EoL>
<BoL> Creates a hook to handle ModelAverage ops such as initialization . <EoL>
<BoL> Create a saver swapping moving averages and variables . <EoL>
<BoL> Constructor . <EoL>
<BoL> The main function to update a variable . <EoL>
<BoL> Just a switch between the iterative power vs svd . <EoL>
<BoL> Computes mat_h = mat_g^alpha using svd . mat_g is a symmetric PSD matrix . <EoL>
<BoL> Computes exponential weighted average : var = weight_t * var + rest . <EoL>
<BoL> Context to colocate with ` var ` if ` colocate_clip_ops_with_vars ` . <EoL>
<BoL> Clips gradients of a multitask loss by their global norm . <EoL>
<BoL> Factory function returning an optimizer class with decoupled weight decay.Base_optimizer with decoupled weight decay . <EoL>
<BoL> Create a new Optimizer . <EoL>
<BoL> Add ops to apply dense gradients to ` var ` . <EoL>
<BoL> Add ops to apply sparse gradients to ` var ` . <EoL>
<BoL> Create all slots needed by the variables and any non-slot variables . <EoL>
<BoL> Do what is needed to finish the update . <EoL>
<BoL> Code to execute before applying gradients . <EoL>
<BoL> Add ops to apply dense gradients to the variable ` handle ` . <EoL>
<BoL> r '' '' '' Periodically resample elements of a tensor to conform to ` shape ` . <EoL>
<BoL> r '' '' '' TODO : add doc . <EoL>
<BoL> r '' '' '' TODO : add doc . <EoL>
<BoL> r '' '' '' Returns the element-wise sum of a list of tensors . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Add all input tensors element wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns x + y element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns the argument of a complex number . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns the truth value of abs ( x-y ) < tolerance element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Performs average pooling on the input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients of average pooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients of the average pooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Multiplies slices of two tensors in batches . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Gradients for batch normalization . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the Bessel i0e function of ` x ` element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the Bessel i1e function of ` x ` element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Adds ` bias ` to ` value ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' The backward operation for `` BiasAdd '' on the `` bias '' tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Adds ` bias ` to ` value ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Counts the number of occurrences of each value in an integer array . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Bucketizes 'input ' based on 'boundaries ' . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Cast x of type SrcT to y of DstT . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Compare values of ` input ` to ` threshold ` and pack resulting bits into a ` uint8 ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the complex absolute value of a tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns the complex conjugate of a complex number . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradients of 3-D convolution with respect to the filter . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradients of 3-D convolution with respect to the input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradients of 3-D convolution with respect to the input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Compute the cumulative product of the tensor ` x ` along ` axis ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Compute the cumulative sum of the tensor ` x ` along ` axis ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns the dimension index in the destination data format given the one in <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns the permuted vector/tensor in the destination data format given the <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> Decorator for marking endpoints deprecated . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient of morphological 2-D dilation with respect to the filter . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient of morphological 2-D dilation with respect to the input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns x / y element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns 0 if the denominator is zero . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients for the exponential linear ( Elu ) operation . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the Gauss error function of ` x ` element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradient of the FractionalAvgPool function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradient of the FractionalMaxPool function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Gradient for batch normalization . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Gradient for batch normalization . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Batch normalization . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Performs a padding as a preprocess during a convolution . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Performs a resize and padding as a preprocess during a convolution . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient of ` igamma ( a , x ) ` wrt ` a ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns the imaginary part of a complex number . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Says whether the targets are in the top ` K ` predictions . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Says whether the targets are in the top ` K ` predictions . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the reciprocal of x element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient for the inverse of ` x ` wrt its input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes rectified linear : ` max ( features , features * alpha ) ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes rectified linear gradients for a LeakyRelu operation . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes log softmax activations . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Gradients for Local Response Normalization . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Multiply the matrix `` a '' by the matrix `` b '' . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Performs max pooling on the input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients of max pooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes second-order gradients of the maxpooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients of the maxpooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes second-order gradients of the maxpooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes second-order gradients of the maxpooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes second-order gradients of the maxpooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients of the maxpooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients of the maxpooling function . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Performs max pooling on the input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the mean of elements across dimensions of a tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns element-wise remainder of division . This emulates C semantics in that <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns x * y element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Finds values of the ` n ` -th order statistic for the last dimension . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the product of elements across dimensions of a tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Quantize the 'input ' tensor of type float to 'output ' tensor of type 'T ' . <EoL>
<BoL> r '' '' '' Convert the quantized 'input ' tensor into a lower-precision 'output ' , using the <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns x + y element-wise , working on quantized buffers . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Perform a quantized matrix multiplication of ` a ` by the matrix ` b ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns x * y element-wise , working on quantized buffers . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns the real part of a complex number . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient for the inverse of ` x ` wrt its input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Given a quantized tensor described by ( input , input_min , input_max ) , outputs a <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Convert the quantized 'input ' tensor into a lower-precision 'output ' , using the <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Rounds the values of a tensor to the nearest integer , element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient for the rsqrt of ` x ` wrt its input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Selects elements from ` x ` or ` y ` , depending on ` condition ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes sigmoid of ` x ` element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient of the sigmoid of ` x ` wrt its input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns an element-wise indication of the sign of a number . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the mean along sparse segments of a tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients for SparseSegmentMean . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the mean along sparse segments of a tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the sum along sparse segments of a tensor divided by the sqrt of N . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients for SparseSegmentSqrtN . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the sum along sparse segments of a tensor divided by the sqrt of N . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the sum along sparse segments of a tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the sum along sparse segments of a tensor . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes square root of x element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient for the sqrt of ` x ` wrt its input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes square of x element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Returns x - y element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes hyperbolic tangent of ` x ` element-wise . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes the gradient for the tanh of ` x ` wrt its input . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Quantized Batch normalization . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Adds Tensor 'bias ' to Tensor 'input ' for Quantized types . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes Quantized Rectified Linear : ` max ( features , 0 ) ` <EoL>
<BoL> r '' '' '' Computes Quantized Rectified Linear 6 : ` min ( max ( features , 0 ) , 6 ) ` <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes rectified linear 6 : ` min ( max ( features , 0 ) , 6 ) ` . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes rectified linear 6 gradients for a Relu6 operation . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes rectified linear gradients for a Relu operation . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes gradients for the scaled exponential linear ( Selu ) operation . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes softmax activations . <EoL>
<BoL> r '' '' '' Computes softmax cross entropy cost and gradients to backpropagate . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes softplus gradients for a softplus operation . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes softsign gradients for a softsign operation . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Computes softmax cross entropy cost and gradients to backpropagate . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Finds values and indices of the ` k ` largest elements for the last dimension . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Finds values and indices of the ` k ` largest elements for the last dimension . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> Rewrites an eval input_graph in place for simulated quantization . <EoL>
<BoL> Rewrites a training input_graph in place for simulated quantization . <EoL>
<BoL> Computes order of computation for a given CNN graph . <EoL>
<BoL> A wrapper for remote_fused_graph_execute . <EoL>
<BoL> Resamples input data at user defined coordinates . <EoL>
<BoL> Long short-term memory cell with attention ( LSTMA ) . <EoL>
<BoL> Make the frequency features . <EoL>
<BoL> Run one step of LSTM . <EoL>
<BoL> Create CompiledWrapper cell . <EoL>
<BoL> Construct Conv1DLSTM . See ` ConvLSTMCell ` for more details . <EoL>
<BoL> Construct Conv2DLSTM . See ` ConvLSTMCell ` for more details . <EoL>
<BoL> Construct Conv3DLSTM . See ` ConvLSTMCell ` for more details . <EoL>
<BoL> Run one step of LSTM . <EoL>
<BoL> Run the cell on embedded inputs . <EoL>
<BoL> Initialize the adaptor . <EoL>
<BoL> Slices inputs into groups to prepare for processing by cell 's groups . <EoL>
<BoL> Run one step of G-LSTM . <EoL>
<BoL> GRU cell . <EoL>
<BoL> GRU cell . <EoL>
<BoL> Run one step of LSTM . <EoL>
<BoL> Run the cell and add its inputs to its outputs . <EoL>
<BoL> IndRNN : output = new_state = act ( W * input + u * state + B ) . <EoL>
<BoL> Gated recurrent unit ( GRU ) with nunits cells . <EoL>
<BoL> Independent Long short-term memory cell ( IndyLSTM ) . <EoL>
<BoL> Run the input projection and then the cell . <EoL>
<BoL> Run one step of the Intersection RNN . <EoL>
<BoL> Produce ` out ` , s.t . out ( i , j ) = data ( indices ( i ) , i , j ) . <EoL>
<BoL> Run this LSTM on inputs , starting from the given state . <EoL>
<BoL> LSTM cell with layer normalization and recurrent dropout . <EoL>
<BoL> Initialize the parameters for a NAS cell . <EoL>
<BoL> Run one step of NAS Cell . <EoL>
<BoL> Create a cell with output projection . <EoL>
<BoL> Run the cell and output projection on inputs , starting from state . <EoL>
<BoL> Compute the cycle ratio in the dtype of the time . <EoL>
<BoL> Modulo function that propagates x gradients . <EoL>
<BoL> Phased LSTM Cell . <EoL>
<BoL> Simple recurrent unit ( SRU ) with num_units cells . <EoL>
<BoL> Make the frequency features . <EoL>
<BoL> Run one step of LSTM . <EoL>
<BoL> Time reverse the provided tensor or list of tensors . <EoL>
<BoL> Run one step of UGRNN . <EoL>
<BoL> Get static input batch size if available , with fallback to the dynamic one . <EoL>
<BoL> Transposes the batch and time dimensions of a Tensor . <EoL>
<BoL> r '' '' '' TODO : add doc . <EoL>
<BoL> r '' '' '' TODO : add doc . <EoL>
<BoL> Load a keras.Model from SavedModel . <EoL>
<BoL> Returns ` seq ` as tuple or the singular element . <EoL>
<BoL> Perform a step of attention-wrapped RNN . <EoL>
<BoL> Return an initial ( zero ) state tuple for this ` AttentionWrapper ` . <EoL>
<BoL> Clone this object , overriding components provided by kwargs.Check and set new tensor 's shape . <EoL>
<BoL> Score the query based on the keys and values . <EoL>
<BoL> Creates the initial alignment values for the ` AttentionWrapper ` class . <EoL>
<BoL> Creates the initial state values for the ` AttentionWrapper ` class . <EoL>
<BoL> Score the query based on the keys and values . <EoL>
<BoL> Creates the initial alignment values for the monotonic attentions . <EoL>
<BoL> Initialize BasicDecoder . <EoL>
<BoL> Initialize the decoder . <EoL>
<BoL> Perform a decoding step . <EoL>
<BoL> Splits the tensor from a batch by beams into a batch of beams . <EoL>
<BoL> Maybe sorts beams within a ` TensorArray ` . <EoL>
<BoL> Maybe splits the tensor from a batch by beams into a batch of beams . <EoL>
<BoL> Merges the tensor from a batch of beams into a batch by beams . <EoL>
<BoL> Splits the tensor from a batch by beams into a batch of beams . <EoL>
<BoL> Finalize and return the predicted_ids . <EoL>
<BoL> Initialize the decoder . <EoL>
<BoL> Perform a decoding step . <EoL>
<BoL> Called before any decoding iterations . <EoL>
<BoL> Called per step of decoding ( but only once for dynamic decoding ) . <EoL>
<BoL> Initializer . <EoL>
<BoL> next_inputs_fn for GreedyEmbeddingHelper . <EoL>
<BoL> sample for GreedyEmbeddingHelper . <EoL>
<BoL> Returns ` ( initial_finished , initial_inputs ) ` . <EoL>
<BoL> Returns ` ( finished , next_inputs , next_state ) ` . <EoL>
<BoL> Returns ` sample_ids ` . <EoL>
<BoL> Score the query based on the keys and values . <EoL>
<BoL> Score the query based on the keys and values . <EoL>
<BoL> sample for SampleEmbeddingHelper . <EoL>
<BoL> Perform scheduled sampling . <EoL>
<BoL> Perform scheduled sampling.Concatenate outputs with auxiliary inputs , if they exist . <EoL>
<BoL> Initializer . <EoL>
<BoL> next_inputs_fn for TrainingHelper . <EoL>
<BoL> Internal while_loop body . <EoL>
<BoL> r '' '' '' Calculates the full beams from the per-step ids and parent beam ids . <EoL>
<BoL> Returns batched one-hot vectors . <EoL>
<BoL> Compute monotonic attention distribution from choosing probabilities . <EoL>
<BoL> Computes cumprod of x in logspace using cumsum to avoid underflow . <EoL>
<BoL> Tile the batch dimension of a ( possibly nested structure of ) tensor ( s ) t . <EoL>
<BoL> Checks if this Any represents the given protobuf type . <EoL>
<BoL> Returns the protobuf type name of the inner message . <EoL>
<BoL> Unpacks the current Any message into specified message . <EoL>
<BoL> Returns the filepath value stored in constant ` path_tensor ` . <EoL>
<BoL> Creates a generic signature of name to Tensor name . <EoL>
<BoL> Callback to copy files using ` gfile.Copy ` to an export directory . <EoL>
<BoL> Creates a regression signature . <EoL>
<BoL> Gets a list of Paths in a given directory . <EoL>
<BoL> Creates a filter that keeps the largest n export versions . <EoL>
<BoL> Creates a filter that keeps every export that is a multiple of n . <EoL>
<BoL> Negate a filter . <EoL>
<BoL> r '' '' '' Creates a filter that keeps one of every n export versions . <EoL>
<BoL> Creates a filter that keeps the union of two filters . <EoL>
<BoL> Generate a [ Hann window ] [ hann ] . <EoL>
<BoL> Computes a window that can be used in ` inverse_stft ` . <EoL>
<BoL> Computes [ MFCCs ] [ mfcc ] of ` log_mel_spectrograms ` . <EoL>
<BoL> Reconstructs a signal from a framed representation . <EoL>
<BoL> Internal function for adaptive clipping . <EoL>
<BoL> Creates a _TargetColumn for binary classification with SVMs . <EoL>
<BoL> Bucketizes input_tensor by given boundaries . <EoL>
<BoL> Decodes the data to returns the tensors specified by the list of items . <EoL>
<BoL> Lists the names of the items that the decoder can decode . <EoL>
<BoL> Constructs the Data Provider . <EoL>
<BoL> Verifies that each given item is a member of the list from ListItems ( ) . <EoL>
<BoL> Returns a list of tensors specified by the given list of items . <EoL>
<BoL> Returns the list of item names that can be provided by the data provider . <EoL>
<BoL> Returns the number of data samples in the dataset . <EoL>
<BoL> Returns a dictionary of basic metrics for logistic regression . <EoL>
<BoL> Wait till the global step has reached at least 'step ' . <EoL>
<BoL> Add summaries to gradients . <EoL>
<BoL> Clips the gradients by the given value . <EoL>
<BoL> Multiply specified gradients . <EoL>
<BoL> Function that takes a gradient step and specifies whether to stop . <EoL>
<BoL> Generates ` __all__ ` from the docstring of one or more modules . <EoL>
<BoL> Compute the estimated size of the ops.outputs in the graph . <EoL>
<BoL> Prints the names and shapes of the variables . <EoL>
<BoL> Returns a compact and informative string about a tensor . <EoL>
<BoL> Returns the number of records this reader has produced . <EoL>
<BoL> Returns the number of work units this reader has finished processing . <EoL>
<BoL> Returns the next record ( key , value pair ) produced by the reader . <EoL>
<BoL> Returns up to num_records ( key , value pairs ) produced by a reader . <EoL>
<BoL> Get data_files from data_sources . <EoL>
<BoL> Initializes the BackupHandler handler . <EoL>
<BoL> Initialize the bounding box handler . <EoL>
<BoL> Maps the given dictionary of tensors to a concatenated list of bboxes . <EoL>
<BoL> Decodes the image buffer.Decodes a image based on the headers.Decodes a jpeg image with specified '_dct_method'.Checks if an image is jpeg.Decodes a raw image . <EoL>
<BoL> See base class . <EoL>
<BoL> Constructs the handler with the name of the tf.Feature keys to use . <EoL>
<BoL> Maps the given dictionary of tensors to the requested item . <EoL>
<BoL> Initializes the ItemHandler . <EoL>
<BoL> Initializes the LookupTensor handler . <EoL>
<BoL> Constructs the decoder . <EoL>
<BoL> Decodes the given serialized TF-example . <EoL>
<BoL> See base class . <EoL>
<BoL> Creates a context manager that handles starting and stopping queue runners . <EoL>
<BoL> Produces the summary name given . <EoL>
<BoL> Adds a histogram summary for each of the given tensors . <EoL>
<BoL> Adds a histogram summary for the given tensor . <EoL>
<BoL> Adds an image summary for each of the given tensors . <EoL>
<BoL> Adds an image summary for the given tensor . <EoL>
<BoL> Adds a scalar summary for each of the given tensors . <EoL>
<BoL> Adds a scalar summary for the given tensor . <EoL>
<BoL> Adds a scalar zero-fraction summary for each of the given tensors . <EoL>
<BoL> Multiplies a matrix by a bidiagonal matrix . <EoL>
<BoL> Makes v orthogonal to the j'th vector in basis.Extends the Lanczos bidiagonalization ls by one step . <EoL>
<BoL> r '' '' '' Conjugate gradient least squares solver . <EoL>
<BoL> Creates a linear operator from a rank-2 tensor . <EoL>
<BoL> Creates a linear operator from a rank-2 identity tensor . <EoL>
<BoL> Computes sparsemax activations [ 1 ] . <EoL>
<BoL> Computes sparsemax loss function [ 1 ] . <EoL>
<BoL> Concatenates tensors along the given dimension . <EoL>
<BoL> Depth-wise convolution + softmax ( used after LSTM ) . <EoL>
<BoL> Depth-wise convolution + sigmoid ( used after LSTM ) . <EoL>
<BoL> Import a function from an external module . <EoL>
<BoL> Import a function by exec . <EoL>
<BoL> Log-uniform distributed floatint point number . <EoL>
<BoL> Log-uniform distributed integer , inclusive limits . <EoL>
<BoL> Create a context manager that binds the names in values . <EoL>
<BoL> Normally distributed floating point number with truncation . <EoL>
<BoL> Create the Shared operator . <EoL>
<BoL> Apply the shared operator to an input . <EoL>
<BoL> Uniformly distributed floating number . <EoL>
<BoL> Uniformly distributed integer , inclusive limits . <EoL>
<BoL> Implements an operator that generates a variable . <EoL>
<BoL> Check for common Python keywords in spec . <EoL>
<BoL> Evaluates a spec and creates a network instance given the inputs . <EoL>
<BoL> Evaluates a spec and returns the binding of ` net ` . <EoL>
<BoL> Turn on/off debugging mode . <EoL>
<BoL> Evaluates a parameter specification and returns the environment . <EoL>
<BoL> Evaluates a spec and returns the environment . <EoL>
<BoL> Interpolates keyword arguments into argument lists . <EoL>
<BoL> A filter for combining successive layers with similar names . <EoL>
<BoL> A helper function that disables recursion in tf_structure . <EoL>
<BoL> Split the parameters of op for left recursion . <EoL>
<BoL> Number of parameters in a TensorFlow subgraph . <EoL>
<BoL> Iterate over the left branches of a graph and yield sizes . <EoL>
<BoL> Summarize parameters by depth . <EoL>
<BoL> A simple print function for a TensorFlow graph . <EoL>
<BoL> A postfix expression summarizing the TF graph . <EoL>
<BoL> Validate and convert ` vals ` to a list of ` Tensor ` s . <EoL>
<BoL> Encode inter-device transfers if the current device <EoL>
<BoL> Return the value to return from a get op . <EoL>
<BoL> Return a list of values to pass to ` name_scope ( ) ` . <EoL>
<BoL> Clears the staging area . <EoL>
<BoL> Gets one element from this staging area . <EoL>
<BoL> Peeks at an element in the staging area . <EoL>
<BoL> Create an op that places a value into the staging area . <EoL>
<BoL> Returns the number of elements in the staging area . <EoL>
<BoL> Enables summary writing within a ` with ` block . <EoL>
<BoL> Operation to flush and close the summary writer resource . <EoL>
<BoL> Operation to force the summary writer to flush any buffered data . <EoL>
<BoL> Operation to initialize the summary writer resource . <EoL>
<BoL> Enables this summary writer for the current thread . <EoL>
<BoL> Graph-mode only . Returns all summary ops . <EoL>
<BoL> Sets the should_record_summaries Tensor to always true . <EoL>
<BoL> Writes an audio summary if possible . <EoL>
<BoL> Please use ` tf.contrib.summary.create_file_writer ` . <EoL>
<BoL> Construct a logdir for an eval summary writer . <EoL>
<BoL> Forces summary writer to send any buffered data to storage . <EoL>
<BoL> Writes a tensor summary if possible . <EoL>
<BoL> Writes a TensorFlow graph to the summary interface . <EoL>
<BoL> Writes a histogram summary if possible . <EoL>
<BoL> Writes an image summary if possible . <EoL>
<BoL> Writes a ` tf.Event ` binary proto . <EoL>
<BoL> Sets the should_record_summaries Tensor to always false . <EoL>
<BoL> Sets the should_record_summaries Tensor to true if global_step % n == 0 . <EoL>
<BoL> Writes a scalar summary if possible . <EoL>
<BoL> Returns boolean Tensor which is true if summaries should be recorded . <EoL>
<BoL> Graph-mode only . Returns the list of ops to create all summary writers . <EoL>
<BoL> Given a metric name , return the corresponding metric function . <EoL>
<BoL> Constructor for PredictOutput . <EoL>
<BoL> Wraps raw tensors as dicts and checks type . <EoL>
<BoL> Ops is a dict of { name : op } to run before the session is destroyed . <EoL>
<BoL> Creates a default head based on a type of a problem . <EoL>
<BoL> Get a combined model function given a list of other model fns.Function that returns predictions , training loss , and training op . <EoL>
<BoL> Function that returns predictions , training loss , and training op . <EoL>
<BoL> Return a tensor to use for input data . <EoL>
<BoL> Return a tensor to use for input labels to tensor_forest . <EoL>
<BoL> Creates a TreeVariableSavable object . <EoL>
<BoL> Restores the associated tree from 'restored_tensors ' . <EoL>
<BoL> r '' '' '' Outputs the number of times each feature was used in a split . <EoL>
<BoL> r '' '' '' Outputs the leaf ids for the given input data . <EoL>
<BoL> r '' '' '' Outputs the predictions for the given input data . <EoL>
<BoL> r '' '' '' Outputs the size of the tree , including leaves . <EoL>
<BoL> r '' '' '' Creates a tree model and returns a handle to it . <EoL>
<BoL> r '' '' '' Updates the given leaves for each example with the new labels . <EoL>
<BoL> r '' '' '' Creates a tree model and returns a handle to it . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' TODO : add doc . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Deserializes a serialized tree config and replaces current tree . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Checks whether a tree has been initialized . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Serializes the tree to a proto . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Creates a stats model and returns a handle to it . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Deserializes a serialized stats config and replaces current stats . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Checks whether a stats has been initialized . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' TODO : add doc . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Serializes the stats to a proto . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Puts the Leaf models inside the tree into their final form . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Grows the tree for finished nodes and allocates waiting nodes . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Add labels to stats after traversing the tree for each example . <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Converts byte arrays represented by strings to 32-bit <EoL>
<BoL> r '' '' '' This is the slowpath function for Eager mode . <EoL>
<BoL> r '' '' '' Add elements in deltas to mutable input according to indices . <EoL>
<BoL> Creates a FertileStatsVariableSavable object . <EoL>
<BoL> Restores the associated tree from 'restored_tensors ' . <EoL>
<BoL> Intelligently sets any non-specific parameters . <EoL>
<BoL> Constructs a TF graph for evaluating the leaf impurity of a forest . <EoL>
<BoL> Constructs a TF graph for evaluating the average size of a forest . <EoL>
<BoL> Constructs a TF graph for evaluating a random forest . <EoL>
<BoL> Constructs a TF graph for evaluating a random tree . <EoL>
<BoL> Constructs a TF graph for evaluating the current number of nodes . <EoL>
<BoL> Build a TensorForestParams proto out of the V4ForestHParams object . <EoL>
<BoL> Returns the epoch variable , or [ 0 ] if not defined . <EoL>
<BoL> Stores a config file used by the embedding projector . <EoL>
<BoL> Add graph . <EoL>
<BoL> Add metagraph . <EoL>
<BoL> Add summary . <EoL>
<BoL> Asserts summary contains the specified tags and values . <EoL>
<BoL> Find latest event file in ` base_dir ` . <EoL>
<BoL> Parse events from latest event file in base_dir . <EoL>
<BoL> Parse summary events from latest event file in base_dir . <EoL>
<BoL> Parse summaries from events with simple_value . <EoL>
<BoL> Create summary based on latest stats . <EoL>
<BoL> Maybe dump the profile file . <EoL>
<BoL> Whether should do tracing at current step . <EoL>
<BoL> Traces and profiles at some session run steps . <EoL>
<BoL> Enable tracing and dump profiles at next step . <EoL>
<BoL> Returns profiling results for each step at which ` cmd ` was run . <EoL>
<BoL> Enables tracing and adds traces to profiler at next step . <EoL>
<BoL> Compute some features on the time value . <EoL>
<BoL> Computes the shape of the vector returned by _process_exogenous_features . <EoL>
<BoL> Compute model outputs on a single window of data . <EoL>
<BoL> Scale back data according to stats ( model scale - > input scale ) . <EoL>
<BoL> Scale back variances according to stats ( model scale - > input scale ) . <EoL>
<BoL> Scale data according to stats ( input scale - > model scale ) . <EoL>
<BoL> Scale variances according to stats ( input scale - > model scale ) . <EoL>
<BoL> Default loss definition with state replicated across a batch . <EoL>
<BoL> Computes predictions and a loss.Perform a processing step on a single window of data . <EoL>
<BoL> Create loss_op . <EoL>
<BoL> Computes predictions multiple steps into the future.Predict self.output_window_size values.Helper function to parse the returned TensorArrays . <EoL>
<BoL> Compute model predictions given input data . <EoL>
<BoL> A receiver function to be passed to export_savedmodel . <EoL>
<BoL> Build an input_receiver_fn for export_savedmodel which accepts arrays.A receiver function to be passed to export_savedmodel . <EoL>
<BoL> Constructs a filename queue with an epoch limit . <EoL>
<BoL> Parse ` lines ` as CSV records . <EoL>
<BoL> When possible , raises an error if the dataset is too small . <EoL>
<BoL> Reads a chunk of data from the ` tf.ReaderBase ` for later re-chunking . <EoL>
<BoL> Reads a full epoch of data into memory . <EoL>
<BoL> Numpy array input for a ` TimeSeriesInputFn ` . <EoL>
<BoL> Raise an error if the dataset is too small . <EoL>
<BoL> Returns a large chunk of the Numpy arrays for later re-chunking . <EoL>
<BoL> Returns ` Tensor ` versions of the full Numpy arrays . <EoL>
<BoL> Raises errors if features are not suitable for one-shot prediction . <EoL>
<BoL> Casts features to the correct dtype based on their name . <EoL>
<BoL> Add ops for evaluation ( aka filtering ) to the graph . <EoL>
<BoL> Returns ` features ` with state packed , indicates if packing was done . <EoL>
<BoL> Add ops for prediction to the graph . <EoL>
<BoL> Add ops for serving to the graph . <EoL>
<BoL> Add training ops to the graph . <EoL>
<BoL> Performs basic error checking and returns an EstimatorSpec . <EoL>
<BoL> See ` _Head ` . <EoL>
<BoL> Create queues to window and batch time series data . <EoL>
<BoL> Initialize the ` TimeSeriesInputFn ` . <EoL>
<BoL> A suitable ` input_fn ` for an ` Estimator ` 's ` evaluate ( ) ` . <EoL>
<BoL> An input_fn for predict ( ) . <EoL>
<BoL> Perform filtering using an exported saved model . <EoL>
<BoL> Perform filtering using an exported saved model . <EoL>
<BoL> Saves the latest checkpoint , returns should_stop.Run the saver process . <EoL>
<BoL> Verify group_assignment and get the subgroup size '' . <EoL>
<BoL> Apply gradients to variables . <EoL>
<BoL> Compute gradients of `` loss '' for the variables in `` var_list '' . <EoL>
<BoL> Return a slot named `` name '' created for `` var '' by the Optimizer . <EoL>
<BoL> Return a list of the names of slots created by the ` Optimizer ` . <EoL>
<BoL> Forwarding the variables from the underlying optimizer . <EoL>
<BoL> Constructs a ` DeviceAssignment ` object . <EoL>
<BoL> Returns the physical topology coordinates of a logical core . <EoL>
<BoL> Returns the CPU device attached to a logical core . <EoL>
<BoL> Lookup replica ids by task number and logical core . <EoL>
<BoL> Returns the name of the TPU device assigned to a logical core . <EoL>
<BoL> Returns the ordinal of the TPU device assigned to a logical core . <EoL>
<BoL> Checks that the configuration is self-consistent . <EoL>
<BoL> Freezes the InfeedQueue so it can no longer be modified . <EoL>
<BoL> Generates the device-side Op to dequeue a tuple from the queue . <EoL>
<BoL> Sets the shapes and types of the queue tuple elements . <EoL>
<BoL> Sets the shapes and types of the queue tuple elements . <EoL>
<BoL> Sets the number of shards to use for the InfeedQueue . <EoL>
<BoL> Sets the shard_dimension of each element of the queue . <EoL>
<BoL> Sets the shape of each element of the queue . <EoL>
<BoL> Sets the type of each element of the queue . <EoL>
<BoL> Construct a TPUDistributionStrategy . <EoL>
<BoL> Makes a ` TPUAssignment ` for the passed in ` cpu_model ` . <EoL>
<BoL> Returns a new model_fn , which wraps the TPU support.A Estimator ` model_fn ` for TPUEstimator . <EoL>
<BoL> Calls the input function . <EoL>
<BoL> Wraps ` _call_model_fn ` for ` export_savedmodel ` .Compute tpu tensors used in export_outputs . <EoL>
<BoL> Creates a global step suitable for TPUs . <EoL>
<BoL> Skip the validation . <EoL>
<BoL> Creates an equivalent ` EstimatorSpec ` used by CPU train/eval . <EoL>
<BoL> Builds a Topology object . <EoL>
<BoL> Inverts a [ task , device , axis ] topology to [ x , y , z ] - > task/device maps . <EoL>
<BoL> Parses a serialized ` TopologyProto ` into ` self ` . <EoL>
<BoL> Returns the CPU device attached to a logical core . <EoL>
<BoL> Returns the serialized form of the topology . <EoL>
<BoL> Returns the TensorFlow task number attached to ` device_coordinates ` . <EoL>
<BoL> Returns the name of the TPU device assigned to a logical core . <EoL>
<BoL> Returns the TensorFlow device number at ` device_coordinates ` . <EoL>
<BoL> Scope class for bfloat16 variables so that the model uses custom getter . <EoL>
<BoL> Returns the device name for a core in a replicated TPU computation . <EoL>
<BoL> Sum the input tensor across replicas according to group_assignment . <EoL>
<BoL> Export ` Estimator ` trained model for TPU inference . <EoL>
<BoL> A placeholder op for a value that will be fed into the computation . <EoL>
<BoL> A placeholder op for values fed into the TPU simultaneously as a tuple . <EoL>
<BoL> r '' '' '' An op which feeds a single Tensor value into the computation . <EoL>
<BoL> r '' '' '' An op which feeds multiple Tensor values into the computation as an XLA tuple . <EoL>
<BoL> Initializes a distributed TPU system for use with TensorFlow . <EoL>
<BoL> Copy ` model ` along with weights to the TPU . <EoL>
<BoL> r '' '' '' Retrieves a single tensor from the computation outfeed . This operation will <EoL>
<BoL> r '' '' '' Retrieve multiple values that will be emitted by the computation as an XLA <EoL>
<BoL> r '' '' '' An op which emits a single Tensor value from an XLA computation . <EoL>
<BoL> r '' '' '' An op which emits multiple Tensor values from an XLA computation . <EoL>
<BoL> Builds part of a computation outside any current TPU replicate scope . <EoL>
<BoL> Builds a training loop that executes a fixed number of iterations . <EoL>
<BoL> Shuts down a running a distributed TPU system . <EoL>
<BoL> Builds a training loop for TPUs.Wrapper around ` body ` that handles infeed queues and control deps . <EoL>
<BoL> Execute the enqueue op in a loop , close the queue in case of error . <EoL>
<BoL> Create threads to run the enqueue ops for the given session . <EoL>
<BoL> Choose a ps task index for the given ` Operation ` . <EoL>
<BoL> Create a new ` LoadBalancingStrategy ` . <EoL>
<BoL> Create an instance of ` HParams ` from keyword arguments . <EoL>
<BoL> Returns the field name given parameter type and is_list . <EoL>
<BoL> Creates a new HParams from ` HParamDef ` protocol buffer . <EoL>
<BoL> Adds { name , value } pair to hyperparameters . <EoL>
<BoL> Removes the hyperparameter with key 'name ' . <EoL>
<BoL> Returns the value of ` key ` if it exists , else ` default ` . <EoL>
<BoL> Override hyperparameter values , parsing new values from a dictionary . <EoL>
<BoL> Override hyperparameter values , parsing new values from a string . <EoL>
<BoL> Override hyperparameter values , parsing new values from a json object . <EoL>
<BoL> DEPRECATED . Use override_from_dict . <EoL>
<BoL> Set the value of an existing hyperparameter . <EoL>
<BoL> Serializes the hyperparameters into JSON . <EoL>
<BoL> Converts a ` HParams ` object to a ` HParamDef ` protocol buffer . <EoL>
<BoL> Return the hyperparameter values as a Python dictionary . <EoL>
<BoL> Returns an op to save the current batch of state ` state_name ` . <EoL>
<BoL> Returns batched state tensors . <EoL>
<BoL> Chooses a ps task index for the given ` Operation ` . <EoL>
<BoL> Creates a new ` RandomStrategy ` . <EoL>
<BoL> Create the barrier . <EoL>
<BoL> Group insert_many ops and create prefetch_op . <EoL>
<BoL> Creates ops for reading the barrier , as used by properties like ` length ` . <EoL>
<BoL> Prepares the internal dictionaries _name_to_index and _index_to_name . <EoL>
<BoL> Closes the barrier and the FIFOQueue . <EoL>
<BoL> Constructs the run hook . <EoL>
<BoL> Add summaries to gradients . <EoL>
<BoL> Return an op that enqueues conditionally in one of the queues . <EoL>
<BoL> Load function that computes the byte size of a single-output ` Operation ` . <EoL>
<BoL> Clips the gradients by the given value . <EoL>
<BoL> Returns a ` transform_grads_fn ` function for gradient clipping . <EoL>
<BoL> Enqueue components into queue from ` PrependFromQueueAndPaddedBatchDataset ` . <EoL>
<BoL> Gets or creates the eval step ` Tensor ` . <EoL>
<BoL> Multiply specified gradients . <EoL>
<BoL> Parses hyperparameter values from a string into a python map . <EoL>
<BoL> Given ` inputs ` tensors , stochastically resamples each at a given rate . <EoL>
<BoL> Returns the constant value of the given tensor , if efficiently calculable . <EoL>
<BoL> Loads a contrib op library from the given path . <EoL>
<BoL> Collect the list of ops used by a graph . <EoL>
<BoL> Collect the stripped OpDefs for ops used by a graph . <EoL>
<BoL> Deletes older exports , retaining only a given number of the most recent . <EoL>
<BoL> Get the best eval result from event files . <EoL>
<BoL> Return a new EstimatorSpec replacing specified fields with new values . <EoL>
<BoL> Deletes older exports , retaining only a given number of the most recent . <EoL>
<BoL> Creates a validated ` TrainSpec ` instance . <EoL>
<BoL> Constructor for ` ClassificationOutput ` . <EoL>
<BoL> Generate a SignatureDef proto for inclusion in a MetaGraphDef . <EoL>
<BoL> Constructor for ` RegressionOutput ` . <EoL>
<BoL> Build a serving_input_receiver_fn expecting fed tf.Examples.An input_fn that expects a serialized tf.Example . <EoL>
<BoL> Build a serving_input_receiver_fn expecting feature Tensors.A serving_input_receiver_fn that expects features to be fed directly . <EoL>
<BoL> Train and evaluate the ` estimator ` . <EoL>
<BoL> Returns a list of minidom.Element to add additional flag information . <EoL>
<BoL> Returns a string representing the type of the flag . <EoL>
<BoL> Parses the string argument and returns the native value . <EoL>
<BoL> Returns a serialized string of the value . <EoL>
<BoL> See base class . <EoL>
<BoL> See base class . <EoL>
<BoL> Returns an XML element that contains this flag 's information . <EoL>
<BoL> Returns extra info about this flag in XML . <EoL>
<BoL> Returns parsed flag value as string . <EoL>
<BoL> Internal parse function . <EoL>
<BoL> Changes the default value ( and current value too ) for this Flag . <EoL>
<BoL> Returns a str that describes the type of the flag . <EoL>
<BoL> Parses string and sets flag value . <EoL>
<BoL> See base class . <EoL>
<BoL> See base class . <EoL>
<BoL> Serializes a list as a CSV string or unicode . <EoL>
<BoL> Registers a 'Flag ' object with a 'FlagValues ' object . <EoL>
<BoL> Registers a flag whose value is a comma-separated list of strings . <EoL>
<BoL> Registers a flag whose value can be a list of any strings . <EoL>
<BoL> Registers a flag whose value can be any string . <EoL>
<BoL> Creates a DuplicateFlagError by providing flag name and values . <EoL>
<BoL> Initializes EnumParser . <EoL>
<BoL> See base class . <EoL>
<BoL> Determines validity of argument and returns the correct element of enum . <EoL>
<BoL> Initializes EnumParser . <EoL>
<BoL> See base class . <EoL>
<BoL> Determines validity of argument and returns the correct element of enum . <EoL>
<BoL> Parses flags from argv ; stores parsed flags into this FlagValues object . <EoL>
<BoL> Returns True if name is a value ( flag ) in the dict . <EoL>
<BoL> Deletes a previously-defined flag from a flag object . <EoL>
<BoL> Returns list of names of all defined flags . <EoL>
<BoL> Retrieves the 'value ' attribute of the flag -- name . <EoL>
<BoL> Returns the Flag object for the flag -- name . <EoL>
<BoL> Sets the 'value ' attribute of the flag -- name . <EoL>
<BoL> Registers a new flag variable . <EoL>
<BoL> Returns a help string for all known flags . <EoL>
<BoL> Asserts if all validators in the list are satisfied . <EoL>
<BoL> Cleans up unregistered flags from all module - > [ flags ] dictionaries . <EoL>
<BoL> Returns filename from a flagfile_str of form - [ - ] flagfile=filename . <EoL>
<BoL> Checks whether a Flag object is registered under long name or short name . <EoL>
<BoL> Returns the useful ( ! =comments , etc ) lines from a file with flags . <EoL>
<BoL> Returns the list of flags defined by a module . <EoL>
<BoL> Returns the help string for a list of modules . <EoL>
<BoL> Marks the flag -- name as hidden . <EoL>
<BoL> Checks whether flag_string contain a -- flagfile= < foo > directive . <EoL>
<BoL> Helper function to do the main argument parsing . <EoL>
<BoL> Allow set default values for undefined flags . <EoL>
<BoL> Returns a help string for a given module . <EoL>
<BoL> Returns a help string for a given module . <EoL>
<BoL> Returns a help string for the key flags of a given module . <EoL>
<BoL> Sets a function for checking retired flags . <EoL>
<BoL> Returns value if setting flag |name| to |value| returned True . <EoL>
<BoL> Appends flags registered in another FlagValues instance . <EoL>
<BoL> Appends all flags assignments from this FlagInfo object to a file . <EoL>
<BoL> Return the name of the module defining this flag , or default . <EoL>
<BoL> Return the ID of the module defining this flag , or default . <EoL>
<BoL> Returns a dictionary that maps flag names to flag values . <EoL>
<BoL> Returns the dictionary of module_name - > list of defined flags . <EoL>
<BoL> Returns the dictionary of module_id - > list of defined flags . <EoL>
<BoL> Returns a string with the flags assignments from this FlagValues object . <EoL>
<BoL> Returns the value of a flag ( if not None ) or a default value . <EoL>
<BoL> Returns a help string for all known flags . <EoL>
<BoL> Returns the list of key flags for a module . <EoL>
<BoL> Returns whether flags were parsed . <EoL>
<BoL> Returns the dictionary of module_name - > list of key flags . <EoL>
<BoL> Describes the key flags of the main module . <EoL>
<BoL> Explicitly marks flags as parsed . <EoL>
<BoL> Describes the key flags of a module . <EoL>
<BoL> Processes command line args , but also allow args to be read from file . <EoL>
<BoL> Records the module that defines a specific flag . <EoL>
<BoL> Records the module that defines a specific flag . <EoL>
<BoL> Specifies that a flag is a key flag for a module . <EoL>
<BoL> Remove flags that were previously appended from another FlagValues . <EoL>
<BoL> Changes the default value of the named flag object . <EoL>
<BoL> Sets whether or not to use GNU style scanning . <EoL>
<BoL> Unparses all flags to the point before any FLAGS ( argv ) was called . <EoL>
<BoL> Outputs flag documentation in XML format . <EoL>
<BoL> Returns the float value of argument . <EoL>
<BoL> See base class . <EoL>
<BoL> Returns whether the value is outside the bounds or not . <EoL>
<BoL> See base class . <EoL>
<BoL> Returns the int value of argument . <EoL>
<BoL> See base class . <EoL>
<BoL> Parses argument as comma-separated list of strings . <EoL>
<BoL> See base class . <EoL>
<BoL> See base class . <EoL>
<BoL> Parses one or more arguments with the installed parser . <EoL>
<BoL> See base class . <EoL>
<BoL> Initializer . <EoL>
<BoL> Parses argument as whitespace-separated list of strings . <EoL>
<BoL> Wraps absl.flags 's define functions so tf.flags accepts old names.Wrapper function that turns old keyword names to new ones . <EoL>
<BoL> Declares that all flags key to a module are key to the current module . <EoL>
<BoL> Declares one flag as key to the current module . <EoL>
<BoL> Declares that the current module will not define any more key flags . <EoL>
<BoL> Takes a __doc__ string and reformats it as help . <EoL>
<BoL> Convert a dict of values into process call parameters . <EoL>
<BoL> Returns the integer width of help lines that is used in TextWrap . <EoL>
<BoL> Ensures that flag is not None during program execution . <EoL>
<BoL> Ensures that flags are not None during program execution . <EoL>
<BoL> Wraps a given text to a maximum line length and returns it . <EoL>
<BoL> Returns a flat list from a given nested structure . <EoL>
<BoL> Returns a flat sequence from a given nested structure . <EoL>
<BoL> Returns True iff ` instance ` is an instance of an ` attr.s ` decorated class . <EoL>
<BoL> Returns True iff ` instance ` is a ` collections.Mapping ` . <EoL>
<BoL> Returns a true if its input is a collections.Sequence ( except strings ) . <EoL>
<BoL> Returns a true if ` seq ` is a Sequence or dict ( except strings/lists ) . <EoL>
<BoL> Returns True if the two namedtuples have the same name and fields . <EoL>
<BoL> A decorator : Do not generate docs for this method . <EoL>
<BoL> A decorator : Do not generate docs for this object . <EoL>
<BoL> A decorator : Only generate docs for this method in the defining class . <EoL>
<BoL> Returns true if docs generation should be skipped for this object . <EoL>
<BoL> Returns true if docs should be skipped for this class attribute . <EoL>
<BoL> Python wrapper for the Graph Transform Tool . <EoL>
<BoL> Wrapper around self.call ( ) , for handling internal references . <EoL>
<BoL> Check trainable weights count consistency . <EoL>
<BoL> Retrieves an attribute ( e.g . input_tensors ) from a node . <EoL>
<BoL> Converts a layer and its index to a unique ( immutable type ) name . <EoL>
<BoL> Set model 's input and output specs based on the input data received . <EoL>
<BoL> Util hared between different serialization methods . <EoL>
<BoL> Adds losses to the layer . <EoL>
<BoL> Adds updates to the layer . <EoL>
<BoL> Checks compatibility between the layer and provided inputs . <EoL>
<BoL> Creates the layer weights . <EoL>
<BoL> Calls the model on new inputs . <EoL>
<BoL> Counts the total number of scalars composing the weights . <EoL>
<BoL> Instantiates a Model from its config ( output of ` get_config ( ) ` ) .Deserializes a layer , then call it on appropriate inputs . <EoL>
<BoL> Retrieves the input tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves a layer based on either its name ( unique ) or index . <EoL>
<BoL> Retrieves the output tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Returns predictions for a single batch of samples . <EoL>
<BoL> Computes output tensors for new inputs . <EoL>
<BoL> Saves the model to a single HDF5 file . <EoL>
<BoL> Dumps all layer weights to a HDF5 file . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Prints a string summary of the network . <EoL>
<BoL> Test the model on a single batch of samples . <EoL>
<BoL> Returns a JSON string containing the network configuration . <EoL>
<BoL> Returns a yaml string containing the network configuration . <EoL>
<BoL> Adds a layer instance on top of the layer stack . <EoL>
<BoL> Removes the last layer in the model . <EoL>
<BoL> Generate class predictions for the input samples . <EoL>
<BoL> Generates class probability predictions for the input samples . <EoL>
<BoL> This is where the layer 's logic lives . <EoL>
<BoL> Computes an output mask tensor . <EoL>
<BoL> Computes the output shape of the layer . <EoL>
<BoL> Creates a layer from its config . <EoL>
<BoL> Returns the config of the layer . <EoL>
<BoL> Returns the current weights of the layer . <EoL>
<BoL> Sets the weights of the layer , from Numpy arrays . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Exponential ( base e ) activation function . <EoL>
<BoL> Get the ` identifier ` activation function . <EoL>
<BoL> Hard sigmoid activation function . <EoL>
<BoL> Linear ( i.e . identity ) activation function . <EoL>
<BoL> Rectified Linear Unit . <EoL>
<BoL> Scaled Exponential Linear Unit ( SELU ) . <EoL>
<BoL> Sigmoid activation function . <EoL>
<BoL> Softmax activation function . <EoL>
<BoL> Softplus activation function . <EoL>
<BoL> Softsign activation function . <EoL>
<BoL> Hyperbolic tangent activation function . <EoL>
<BoL> Generates a callable that runs the graph . <EoL>
<BoL> Element-wise absolute value . <EoL>
<BoL> Bitwise reduction ( logical AND ) . <EoL>
<BoL> Bitwise reduction ( logical OR ) . <EoL>
<BoL> Creates a 1D tensor containing a sequence of integers . <EoL>
<BoL> Returns the index of the maximum value along an axis . <EoL>
<BoL> Returns the index of the minimum value along an axis . <EoL>
<BoL> Publicly accessible method <EoL>
<BoL> Batchwise dot product . <EoL>
<BoL> Turn a nD tensor into a 2D tensor with same 0th dimension . <EoL>
<BoL> Returns the value of more than one tensor variable . <EoL>
<BoL> Applies batch normalization on x given mean , var , beta and gamma . <EoL>
<BoL> Sets the values of many tensor variables at once . <EoL>
<BoL> Adds a bias vector to a tensor . <EoL>
<BoL> Binary crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Casts a tensor to a different dtype and returns it . <EoL>
<BoL> Cast a Numpy array to the default Keras float type . <EoL>
<BoL> Categorical crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Destroys the current TF graph and creates a new one . <EoL>
<BoL> Element-wise value clipping . <EoL>
<BoL> Returns the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Returns the default float type , as a string . <EoL>
<BoL> Returns the default image data format convention ( 'channels_first ' or 'channels_last ' ) . <EoL>
<BoL> Legacy getter for ` image_data_format ` . <EoL>
<BoL> Checks that the value correspond to a valid data format . <EoL>
<BoL> Sets the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Sets the default float type . <EoL>
<BoL> Sets the value of the data format convention . <EoL>
<BoL> Legacy setter for ` image_data_format ` . <EoL>
<BoL> Concatenates a list of tensors alongside the specified axis . <EoL>
<BoL> Creates a constant tensor . <EoL>
<BoL> Computes cos of x element-wise . <EoL>
<BoL> Returns the static number of elements in a Keras variable or tensor . <EoL>
<BoL> Runs CTC loss algorithm on each batch element . <EoL>
<BoL> Converts CTC labels from dense to sparse . <EoL>
<BoL> Cumulative product of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Cumulative sum of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Multiplies 2 tensors ( and/or variables ) and returns a *tensor* . <EoL>
<BoL> Sets entries in ` x ` to zero at random , while scaling the entire tensor . <EoL>
<BoL> Returns the dtype of a Keras tensor or variable , as a string . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Element-wise equality between two tensors . <EoL>
<BoL> Evaluates the value of a variable . <EoL>
<BoL> Element-wise exponential . <EoL>
<BoL> Adds a 1-sized dimension at index `` axis '' . <EoL>
<BoL> Instantiate an identity matrix and returns it . <EoL>
<BoL> Flatten a tensor . <EoL>
<BoL> Reduce elems using fn to combine them from left to right . <EoL>
<BoL> Reduce elems using fn to combine them from right to left . <EoL>
<BoL> Instantiates a Keras function . <EoL>
<BoL> Retrieves the elements of indices ` indices ` in the tensor ` reference ` . <EoL>
<BoL> Returns the TF session to be used by the backend . <EoL>
<BoL> Get the uid for the default graph . <EoL>
<BoL> Returns the value of a variable . <EoL>
<BoL> Returns the shape of a variable . <EoL>
<BoL> Returns the gradients of ` loss ` w.r.t . ` variables ` . <EoL>
<BoL> Element-wise truth value of ( x > y ) . <EoL>
<BoL> Element-wise truth value of ( x > = y ) . <EoL>
<BoL> Segment-wise linear approximation of sigmoid . <EoL>
<BoL> Checks if a callable accepts a given keyword argument . <EoL>
<BoL> Returns a tensor with the same content as the input tensor . <EoL>
<BoL> Selects ` x ` in test phase , and ` alt ` otherwise . <EoL>
<BoL> Returns whether the ` targets ` are in the top ` k ` ` predictions ` . <EoL>
<BoL> Selects ` x ` in train phase , and ` alt ` otherwise . <EoL>
<BoL> Returns the shape of tensor or variable as a tuple of int or None entries . <EoL>
<BoL> Returns whether ` x ` is a Keras tensor . <EoL>
<BoL> Returns whether ` x ` is a placeholder . <EoL>
<BoL> Returns whether a tensor is a sparse tensor . <EoL>
<BoL> Normalizes a tensor wrt the L2 norm alongside the specified axis . <EoL>
<BoL> Returns the learning phase flag . <EoL>
<BoL> Element-wise truth value of ( x < y ) . <EoL>
<BoL> Element-wise truth value of ( x < = y ) . <EoL>
<BoL> Apply 1D conv with un-shared weights . <EoL>
<BoL> Apply 2D conv with un-shared weights . <EoL>
<BoL> Element-wise log . <EoL>
<BoL> Computes log ( sum ( exp ( elements across dimensions of a tensor ) ) ) . <EoL>
<BoL> Sets the manual variable initialization flag . <EoL>
<BoL> Map the function fn over the elements elems and return the outputs . <EoL>
<BoL> Maximum value in a tensor . <EoL>
<BoL> Element-wise maximum of two tensors . <EoL>
<BoL> Mean of a tensor , alongside the specified axis . <EoL>
<BoL> Minimum value in a tensor . <EoL>
<BoL> Element-wise minimum of two tensors . <EoL>
<BoL> Compute the moving average of a variable . <EoL>
<BoL> Returns the number of axes in a tensor , as an integer . <EoL>
<BoL> Element-wise inequality between two tensors . <EoL>
<BoL> Computes the one-hot representation of an integer tensor . <EoL>
<BoL> Instantiates an all-ones variable and returns it . <EoL>
<BoL> Instantiates an all-ones variable of the same shape as another tensor . <EoL>
<BoL> Permutes axes in a tensor . <EoL>
<BoL> Instantiates a placeholder tensor and returns it . <EoL>
<BoL> Element-wise exponentiation . <EoL>
<BoL> Prints ` message ` and the tensor value when evaluated . <EoL>
<BoL> Multiplies the values in a tensor , alongside the specified axis . <EoL>
<BoL> Returns a tensor with random binomial distribution of values . <EoL>
<BoL> Returns a tensor with normal distribution of values . <EoL>
<BoL> Returns a tensor with uniform distribution of values . <EoL>
<BoL> Rectified linear unit . <EoL>
<BoL> Repeats a 2D tensor . <EoL>
<BoL> Repeats the elements of a tensor along an axis , like ` np.repeat ` . <EoL>
<BoL> Resets graph identifiers . <EoL>
<BoL> Reshapes a tensor to the specified shape . <EoL>
<BoL> Resizes the volume contained in a 5D tensor . <EoL>
<BoL> Reverses a tensor along the specified axes . <EoL>
<BoL> RNN step function.RNN step function . <EoL>
<BoL> Element-wise rounding to the closest integer . <EoL>
<BoL> Sets the learning phase to a fixed value . <EoL>
<BoL> Sets the global TensorFlow session . <EoL>
<BoL> Sets the value of a variable , from a Numpy array . <EoL>
<BoL> Returns the symbolic shape of a tensor or variable . <EoL>
<BoL> Element-wise sigmoid . <EoL>
<BoL> Element-wise sign . <EoL>
<BoL> Computes sin of x element-wise . <EoL>
<BoL> Extracts a slice from a tensor . <EoL>
<BoL> Softmax of a tensor . <EoL>
<BoL> Softplus of a tensor . <EoL>
<BoL> Softsign of a tensor . <EoL>
<BoL> Categorical crossentropy with integer targets . <EoL>
<BoL> Pads the 2nd and 3rd dimensions of a 4D tensor . <EoL>
<BoL> Pads 5D tensor with zeros along the depth , height , width dimensions . <EoL>
<BoL> Element-wise square root . <EoL>
<BoL> Element-wise square . <EoL>
<BoL> Removes a 1-dimension from the tensor at index `` axis '' . <EoL>
<BoL> Stacks a list of rank ` R ` tensors into a rank ` R+1 ` tensor . <EoL>
<BoL> Standard deviation of a tensor , alongside the specified axis . <EoL>
<BoL> Returns ` variables ` but with zero gradient w.r.t . every other variable . <EoL>
<BoL> Sum of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Switches between two operations depending on a scalar value . <EoL>
<BoL> Element-wise tanh . <EoL>
<BoL> Pads the middle dimension of a 3D tensor . <EoL>
<BoL> This method captures TF 's explicit device scope setting . <EoL>
<BoL> Get a list of available gpu devices ( formatted as strings ) . <EoL>
<BoL> Return explicit device of current context , otherwise returns ` None ` . <EoL>
<BoL> Check whether the current scope supports NCHW ops . <EoL>
<BoL> Check if the current device is explicitly set on the device type specified . <EoL>
<BoL> Transpose and cast the input before the conv1d . <EoL>
<BoL> Transpose and cast the input before the conv2d . <EoL>
<BoL> Transpose and cast the input before the conv3d . <EoL>
<BoL> Convert keras ' padding to tensorflow 's padding . <EoL>
<BoL> Convert the input ` x ` to a tensor of type ` dtype ` . <EoL>
<BoL> Creates a tensor by tiling ` x ` by ` n ` . <EoL>
<BoL> Converts a sparse tensor into a dense tensor and returns it . <EoL>
<BoL> Transposes a tensor and returns it . <EoL>
<BoL> Converts a tuple or a list to the correct ` data_format ` . <EoL>
<BoL> Returns a tensor with truncated random normal distribution of values . <EoL>
<BoL> Update the value of ` x ` to ` new_x ` . <EoL>
<BoL> Update the value of ` x ` by adding ` increment ` . <EoL>
<BoL> Update the value of ` x ` by subtracting ` decrement ` . <EoL>
<BoL> Variance of a tensor , alongside the specified axis . <EoL>
<BoL> Instantiates a variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable of the same shape as another tensor . <EoL>
<BoL> Called right before processing a batch . <EoL>
<BoL> Called at the end of a batch . <EoL>
<BoL> Called at the start of an epoch . <EoL>
<BoL> Called at the end of an epoch . <EoL>
<BoL> Called at the beginning of training . <EoL>
<BoL> Called at the end of training . <EoL>
<BoL> Updates the progress bar . <EoL>
<BoL> Resets wait counter and cooldown counter . <EoL>
<BoL> Loads the Boston Housing dataset . <EoL>
<BoL> Internal utility for parsing CIFAR data . <EoL>
<BoL> Loads CIFAR10 dataset . <EoL>
<BoL> Loads CIFAR100 dataset . <EoL>
<BoL> Loads the Fashion-MNIST dataset . <EoL>
<BoL> Removes sequences that exceed the maximum length . <EoL>
<BoL> Retrieves the dictionary mapping words to word indices . <EoL>
<BoL> Loads the MNIST dataset . <EoL>
<BoL> Retrieves the dictionary mapping words to word indices . <EoL>
<BoL> Collects the output shape ( s ) of a list of Keras tensors . <EoL>
<BoL> Retrieves the output mask ( s ) of the previous node . <EoL>
<BoL> Count the total number of scalars composing the weights . <EoL>
<BoL> Normalizes a list/tensor into a list . <EoL>
<BoL> Gets the first element if the iterable has only one value . <EoL>
<BoL> Returns the list of input tensors necessary to compute ` tensor ` . <EoL>
<BoL> Validates a network 's topology and gather its layers and nodes.Builds a map of the graph of layers . <EoL>
<BoL> Produces a prompt asking about overwriting a file . <EoL>
<BoL> Prints a summary of a model.Prints a summary for a single layer . <EoL>
<BoL> Converts weights for RNN layers between native and CuDNN format.Transforms kernel for each gate separately using given function.Makes a function that transforms input kernels from/to CuDNN format . <EoL>
<BoL> De-serializes a model serialized via _serialize_modelHandles custom object lookup . <EoL>
<BoL> Checks if conversion on kernel matrices is required during weight loading . <EoL>
<BoL> Model serialization logic.Serialize any object to a JSON-serializable structure . <EoL>
<BoL> Loads attributes of the specified name from the HDF5 group . <EoL>
<BoL> Loads a model saved via ` save_model ` . <EoL>
<BoL> Implements topological ( order-based ) weight loading . <EoL>
<BoL> Instantiates a Keras model from its config . <EoL>
<BoL> Parses a JSON model configuration file and returns a model instance . <EoL>
<BoL> Parses a yaml model configuration file and returns a model instance . <EoL>
<BoL> Converts layers nested in ` Bidirectional ` wrapper.Converts layers nested in ` TimeDistributed ` wrapper.Converts layers nested in ` Model ` or ` Sequential ` . <EoL>
<BoL> Saves attributes ( data ) of the specified name into the HDF5 group . <EoL>
<BoL> Save a model to a HDF5 file . <EoL>
<BoL> Checks if batch axes are the same for numpy arrays . <EoL>
<BoL> Does validation on the compatibility of targets and loss functions . <EoL>
<BoL> Maps metric functions to model outputs . <EoL>
<BoL> Slices an array or list of arrays . <EoL>
<BoL> Shuffles an array in a batch-wise fashion . <EoL>
<BoL> Returns a list of batch indices ( tuples of indices ) . <EoL>
<BoL> Abstract method to loop over some data in batches . <EoL>
<BoL> Abstract method to loop over some data in batches . <EoL>
<BoL> Get the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Send current Iterable to all workers . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Start the handler 's workers . <EoL>
<BoL> Stops running threads and wait for them to exit , if necessary . <EoL>
<BoL> Get the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Wait for the queue to be empty . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Gets batch at position ` index ` . <EoL>
<BoL> Create a generator that iterate over the Sequence . <EoL>
<BoL> Number of batch in the Sequence . <EoL>
<BoL> Method called at the end of every epoch . <EoL>
<BoL> Iterate indefinitely over a Sequence . <EoL>
<BoL> Adds support for masking and sample-weighting to an objective function.Wrapper function . <EoL>
<BoL> Computes the number of input and output units for a weight shape . <EoL>
<BoL> Glorot normal initializer , also called Xavier normal initializer . <EoL>
<BoL> Glorot uniform initializer , also called Xavier uniform initializer . <EoL>
<BoL> He normal initializer . <EoL>
<BoL> He uniform variance scaling initializer . <EoL>
<BoL> LeCun normal initializer . <EoL>
<BoL> LeCun uniform initializer . <EoL>
<BoL> Computes the shape of the resultant of an elementwise operation . <EoL>
<BoL> Finds and replaces a missing dimension in an output shape . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Finds non-specific dimensions in the static shapes <EoL>
<BoL> Computes an output mask tensor for Embedding layer <EoL>
<BoL> Functional interface to the ` Add ` layer . <EoL>
<BoL> Functional interface to the ` Average ` layer . <EoL>
<BoL> Functional interface to the ` Concatenate ` layer . <EoL>
<BoL> Standardize ` __call__ ` to a single list of tensor inputs . <EoL>
<BoL> Serializes a user defined function . <EoL>
<BoL> Deserializes a user defined function.Ensures that a value is converted to a python cell object . <EoL>
<BoL> Instantiate a layer from a config dictionary . <EoL>
<BoL> Functional interface to the ` Dot ` layer . <EoL>
<BoL> Functional interface to the ` Maximum ` layer . <EoL>
<BoL> Functional interface to the ` Minimum ` layer . <EoL>
<BoL> Functional interface to the ` Multiply ` layer . <EoL>
<BoL> Functional interface to the ` Subtract ` layer . <EoL>
<BoL> Serialize a layer . <EoL>
<BoL> Get the ` identifier ` loss function . <EoL>
<BoL> Logarithm of the hyperbolic cosine of the prediction error . <EoL>
<BoL> Clone a functional ` Model ` instance . <EoL>
<BoL> Clone a ` Sequential ` model instance . <EoL>
<BoL> Clone any ` Model ` instance . <EoL>
<BoL> Returns the current value of the weights of the optimizer . <EoL>
<BoL> Sets the weights of the optimizer , from Numpy arrays . <EoL>
<BoL> Clip the gradient ` g ` if the L2 norm ` n ` exceeds ` c ` . <EoL>
<BoL> Inverse of the ` serialize ` function . <EoL>
<BoL> Retrieves a Keras Optimizer instance . <EoL>
<BoL> Gets a batch of transformed samples . <EoL>
<BoL> Determines input length of a convolution given output length . <EoL>
<BoL> Converts a Numpy kernel matrix from Theano format to TensorFlow format . <EoL>
<BoL> Transforms a single int or iterable of ints into an int tuple . <EoL>
<BoL> Converts all convolution kernels in a model from Theano to TensorFlow . <EoL>
<BoL> Provides a scope that changes to ` _GLOBAL_CUSTOM_OBJECTS ` can not escape . <EoL>
<BoL> Get the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Extracts an archive if it matches tar , tar.gz , tar.bz , or zip formats . <EoL>
<BoL> Calculates a file sha256 or md5 hash . <EoL>
<BoL> Get the value from the Sequence ` uid ` at index ` i ` . <EoL>
<BoL> Get the next value from the generator ` uid ` . <EoL>
<BoL> Validates a file against a sha256 or md5 hash . <EoL>
<BoL> Retrieves a live reference to the global dictionary of custom objects . <EoL>
<BoL> Replicates a model on different GPUs . <EoL>
<BoL> Normalizes a Numpy array . <EoL>
<BoL> Converts a class vector ( integers ) to binary class matrix . <EoL>
<BoL> Raise errors if ` pydot ` or GraphViz unavailable . <EoL>
<BoL> Wraps a function so that its gradient can be specified and its invocation <EoL>
<BoL> Function from jinja2/_compat.py . License : BSD . <EoL>
<BoL> Returns a checkpointed version of ` fun ` , where intermediate values <EoL>
<BoL> Flags that a function is linear wrt all args <EoL>
<BoL> Get the names and default values of a function 's parameters . <EoL>
<BoL> Builds a function that returns the gradient of the first output and the <EoL>
<BoL> Takes gradients with respect to a named argument . <EoL>
<BoL> Builds a function that returns the exact Hessian-tensor product . <EoL>
<BoL> Builds a function for evaluating generalized-Gauss-Newton-vector products <EoL>
<BoL> Builds a function that returns the exact tensor-Jacobian product , that <EoL>
<BoL> make the compression factors and compute the normalization <EoL>
<BoL> Gradient for eigenvalues and vectors of a symmetric matrix . <EoL>
<BoL> Builds gradient of functions that choose a single item , such as min or max . <EoL>
<BoL> Returns the array g repeated along axis to fit vector space vs . <EoL>
<BoL> Visit a node . <EoL>
<BoL> Recursively add the gradient of two objects . <EoL>
<BoL> Append a statement to the current statement . <EoL>
<BoL> Append a statement to the current block . <EoL>
<BoL> Insert statements at the top of the function body . <EoL>
<BoL> Prepend a statement to the current statement . <EoL>
<BoL> Prepend a statement to the current block . <EoL>
<BoL> Remove the given node . <EoL>
<BoL> Visit a series of nodes in a node body . <EoL>
<BoL> Turn an AST into ANF-like form . <EoL>
<BoL> Called if no explicit visitor function exists for a node . <EoL>
<BoL> Find pushes and pops to the stack and annotate them as such . <EoL>
<BoL> Parse a function into an AST with function calls resolved . <EoL>
<BoL> Find unused definitions that can be remove . <EoL>
<BoL> Calculate the size of ` x ` along ` axis ` dimensions only . <EoL>
<BoL> Copy a node but keep its annotations intact . <EoL>
<BoL> Get the name of a variable . <EoL>
<BoL> Return the variable names created or mutated by this statement . <EoL>
<BoL> Check whether a context manager calls ` insert_grad_of ` . <EoL>
<BoL> A functional form of the ` astype ` method . <EoL>
<BoL> Gradient of the max operator with tie breaking . <EoL>
<BoL> Given a CFG with outgoing links , create incoming links . <EoL>
<BoL> Build a CFG for a function . <EoL>
<BoL> Link this node to the current leaves . <EoL>
<BoL> Perform a given analysis on all functions within an AST . <EoL>
<BoL> Add a comment to the given node . <EoL>
<BoL> Remove comments that repeat themselves . <EoL>
<BoL> Compile by saving to file and importing that . <EoL>
<BoL> Convert an AST or string into a function with inspectable source . <EoL>
<BoL> Given a variable , create a variable for the gradient . <EoL>
<BoL> Create a temporary variable . <EoL>
<BoL> Create a variable to store partial gradients . <EoL>
<BoL> Creates a LanguageFence . <EoL>
<BoL> Call this function to validate an AST . <EoL>
<BoL> Visit assignment statement . <EoL>
<BoL> Tangent of e.g . <EoL>
<BoL> Tangent of e.g . <EoL>
<BoL> Tangent of e.g . <EoL>
<BoL> Tangent of e.g . <EoL>
<BoL> Tangent of e.g . <EoL>
<BoL> Perform forward-mode AD on an AST . <EoL>
<BoL> Creates a customized copy of the Parameter . <EoL>
<BoL> Private method . Do n't use directly . <EoL>
<BoL> Get a BoundArguments object , that maps the passed ` args ` <EoL>
<BoL> Get a BoundArguments object , that partially maps the <EoL>
<BoL> Constructs Signature for the given python function <EoL>
<BoL> Creates a customized copy of the Signature . <EoL>
<BoL> Get a signature object for the passed callable . <EoL>
<BoL> Gradient of NumPy dot product w.r.t . to the left hand side . <EoL>
<BoL> Create a user-friendly forward function . <EoL>
<BoL> Create a user-friendly gradient function . <EoL>
<BoL> Perform AD on a single function and return the AST . <EoL>
<BoL> d|A|/dA = adj ( A ) .T <EoL>
<BoL> Finds functions that do not have implemented derivatives . <EoL>
<BoL> Initialize the gradient for an object . <EoL>
<BoL> The context manager that allows insertion of arbitrary adjoint code . <EoL>
<BoL> Implementation of dtfmatmul wrt x , separate for readability . <EoL>
<BoL> Implementation of dtfmatmul , separate for readability . <EoL>
<BoL> Access unwrapped versions of methods . <EoL>
<BoL> Construct a namer object for a given function scope . <EoL>
<BoL> When the name is too long , use the LHS or a random string instead . <EoL>
<BoL> Make a variable name unique by appending a number if needed . <EoL>
<BoL> Ensure a variable name is valid . <EoL>
<BoL> Name for the adjoint of a function . <EoL>
<BoL> Find the arguments and variables assigned to in a certain node . <EoL>
<BoL> Name for a function in joint mode . <EoL>
<BoL> Name for the primal of a function . <EoL>
<BoL> Name for a function in forward mode . <EoL>
<BoL> Make sure that a method returns a unique name . <EoL>
<BoL> Make sure that a method returns a unique name . <EoL>
<BoL> Check how many times a variable definition was used . <EoL>
<BoL> Pop a value from the stack ( i.e . read it from the tape ) . <EoL>
<BoL> Proxy of pop , where we know we 're popping a stack off of a stack . <EoL>
<BoL> Push a value onto the stack ( i.e . record it on the tape ) . <EoL>
<BoL> Proxy of push , where we know we 're pushing a stack onto a stack . <EoL>
<BoL> Get the source of a function and return its AST . <EoL>
<BoL> Parse a string into an AST . <EoL>
<BoL> Go from source code to AST nodes . <EoL>
<BoL> Return source code of a given AST . <EoL>
<BoL> Go from an AST to source code . <EoL>
<BoL> Register a new gradient initializer . <EoL>
<BoL> Register a new shape function . <EoL>
<BoL> Register a new unbroadcaster . <EoL>
<BoL> Register a new unreducer . <EoL>
<BoL> Checks whether a statement is active . <EoL>
<BoL> Build the primal and adjoint of a traceable function . <EoL>
<BoL> Visit a node . <EoL>
<BoL> Visit assignment statement . <EoL>
<BoL> Create adjoint for call . <EoL>
<BoL> Deal with the special with insert_grad_of ( x ) statement . <EoL>
<BoL> Generate the adjoint of a series of statements . <EoL>
<BoL> Fix the naive construction of the adjont . <EoL>
<BoL> Create pop and push nodes that are linked . <EoL>
<BoL> Create pop and push nodes for substacks that are linked . <EoL>
<BoL> Merge the bodies of primal and adjoint into a single function . <EoL>
<BoL> Perform reverse-mode AD on an AST . <EoL>
<BoL> Carry over the state from the primal to the adjoint . <EoL>
<BoL> Push the final state of the primal onto the stack for the adjoint . <EoL>
<BoL> Recursively check if shapes of object ` a ` and ` b ` match . <EoL>
<BoL> A decorator which removes the ` with insert_grad_of ` statement . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse summing over a dimension . <EoL>
<BoL> Decorator that marks a function to be traced . <EoL>
<BoL> Trace a function , and return a VJP and the function 's output . <EoL>
<BoL> Returns a function that computes f and is vjp w.r.t . params.Computes the value and gradient of the decorated function . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse summing over a dimension . <EoL>
<BoL> Reverse summing over a dimension . <EoL>
<BoL> Creates the reduction axis for unbroadcasting . <EoL>
<BoL> Initialize gradients for the types of common objects we support . <EoL>
<BoL> Initialize gradient for an bool type . This prints a warning . <EoL>
<BoL> Initialize gradient for an integral type . This prints a warning . <EoL>
<BoL> Register a new gradient adder supporting the given types . <EoL>
<BoL> Register a new shape checking function supporting given types . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse summing over a dimension , NumPy implementation . <EoL>
<BoL> Serializes or deserializes a value by given name . <EoL>
<BoL> Gets a child serializer . <EoL>
<BoL> Equivalent to getattr . <EoL>
<BoL> Registers a link hook . <EoL>
<BoL> Registers a child link to this chain . <EoL>
<BoL> Registers a persistent value to the link . <EoL>
<BoL> Clears all gradient arrays . <EoL>
<BoL> Counts the total number of parameters . <EoL>
<BoL> Unregisters the link hook . <EoL>
<BoL> Disables update rules of all parameters under the link hierarchy . <EoL>
<BoL> Enables update rules of all parameters under the link hierarchy . <EoL>
<BoL> Creates an initialization scope . <EoL>
<BoL> Registers an attribute of a given name as a persistent value . <EoL>
<BoL> Repeats this link multiple times to make a : class : ` ~chainer.Sequential ` . <EoL>
<BoL> Initializes all gradient arrays by zero . <EoL>
<BoL> Returns the child at given index . <EoL>
<BoL> Returns the number of children . <EoL>
<BoL> Registers a child link and adds it to the tail of the list . <EoL>
<BoL> Returns a deep copy of the chainlist . <EoL>
<BoL> Insert a child link at the given index . <EoL>
<BoL> Loads an object from this deserializer . <EoL>
<BoL> Adds a dictionary of scalars . <EoL>
<BoL> Creates a dictionary of mean values . <EoL>
<BoL> Creates a dictionary of statistics . <EoL>
<BoL> Evaluates the cumulative distribution function at the given points . <EoL>
<BoL> Evaluates the inverse cumulative distribution function at the given points . <EoL>
<BoL> Evaluates the log of cumulative distribution function at the given points . <EoL>
<BoL> Evaluates the logarithm of probability at the given points . <EoL>
<BoL> Evaluates the logarithm of survival function at the given points . <EoL>
<BoL> Evaluates the perplexity function at the given points . <EoL>
<BoL> Evaluates probability at the given points . <EoL>
<BoL> Samples random points from the distribution . <EoL>
<BoL> Samples n random points from the distribution . <EoL>
<BoL> Evaluates the survival function at the given points . <EoL>
<BoL> Applies forward propagation with chaining backward references . <EoL>
<BoL> Registers a function hook . <EoL>
<BoL> Applies backprop to output gradient arrays . <EoL>
<BoL> Applies backprop to output gradient arrays on CPU . <EoL>
<BoL> Applies backprop to output gradient arrays on GPU . <EoL>
<BoL> Checks types of input data before forward propagation . <EoL>
<BoL> Unregisters the specified function hook . <EoL>
<BoL> Applies forward propagation to input arrays . <EoL>
<BoL> Applies forward propagation to input arrays on CPU . <EoL>
<BoL> Applies forward propagation to input arrays on GPU . <EoL>
<BoL> Lets specified input variable nodes keep data arrays . <EoL>
<BoL> Lets specified output variable nodes keep data arrays . <EoL>
<BoL> Purges in/out nodes and this function itself from the graph . <EoL>
<BoL> Registers a function hook . <EoL>
<BoL> Computes output variables and grows the computational graph . <EoL>
<BoL> Unregisters the function hook . <EoL>
<BoL> Computes the output arrays from the input NumPy arrays . <EoL>
<BoL> Computes the output arrays from the input CuPy arrays . <EoL>
<BoL> Returns a tuple of retained input variables . <EoL>
<BoL> Returns a tuple of retained output variables . <EoL>
<BoL> Lets specified input variable nodes keep data arrays . <EoL>
<BoL> Lets specified output variable nodes keep data arrays . <EoL>
<BoL> Purges in/out nodes and this function node itself from the graph . <EoL>
<BoL> Callback function invoked when the function hook is registered <EoL>
<BoL> Callback function invoked after backward propagation . <EoL>
<BoL> Callback function invoked before backward propagation . <EoL>
<BoL> Callback function invoked when the function hook is unregistered <EoL>
<BoL> Callback function invoked after forward propagation . <EoL>
<BoL> Callback function invoked before forward propagation . <EoL>
<BoL> Computes gradients w.r.t.\\ specified inputs given output gradients . <EoL>
<BoL> Checks types of input data before forward propagation . <EoL>
<BoL> Computes the output arrays from the input arrays . <EoL>
<BoL> Registers a hook function . <EoL>
<BoL> Invokes hook functions in registration order . <EoL>
<BoL> Creates a new update rule object . <EoL>
<BoL> Starts a new epoch . <EoL>
<BoL> Reallocate gradients cleared by : meth : ` ~chainer.Variable.cleargrad ` . <EoL>
<BoL> Removes a hook function . <EoL>
<BoL> Serializes or deserializes the optimizer . <EoL>
<BoL> Sets loss scaling factor . <EoL>
<BoL> Updates parameters based on a loss function or computed gradients . <EoL>
<BoL> Enables or disables use of : func : ` ~chainer.Link.cleargrads ` in ` update ` . <EoL>
<BoL> Enables use of parameter update in fp32 . <EoL>
<BoL> Initializes given array . <EoL>
<BoL> Accumulates gradient values from given link . <EoL>
<BoL> Returns a generator of all child links . <EoL>
<BoL> Copies the link hierarchy to new one . <EoL>
<BoL> Copies all parameters from given link . <EoL>
<BoL> Returns a generator of all links under the hierarchy . <EoL>
<BoL> Returns a generator of all ( path , link ) pairs under the hierarchy . <EoL>
<BoL> Returns a generator of all ( path , param ) pairs under the hierarchy . <EoL>
<BoL> Returns a generator of all parameters under the link hierarchy . <EoL>
<BoL> Serializes the link object . <EoL>
<BoL> Copies parameter variables and persistent values to CPU . <EoL>
<BoL> Copies parameter variables and persistent values to GPU . <EoL>
<BoL> Copies parameter variables and persistent values to CPU . <EoL>
<BoL> Callback function invoked when the link hook is registered <EoL>
<BoL> Callback function invoked when the link hook is unregistered <EoL>
<BoL> Callback function invoked after a forward call of a link . <EoL>
<BoL> Callback function invoked before a forward call of a link . <EoL>
<BoL> Invokes hook functions in registration order . <EoL>
<BoL> Sets a target link and initializes the optimizer states . <EoL>
<BoL> Updates the parameters . <EoL>
<BoL> Element-wise absolute . <EoL>
<BoL> Element-wise addition . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise division <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise floor division . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Extract elements from array with specified shape , axes and offsets . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Returns the first dimension of the data array . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Matrix multiplication . <EoL>
<BoL> Element-wise multiplication . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise negation . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise power function . <EoL>
<BoL> Element-wise division . <EoL>
<BoL> Element-wise floor division . <EoL>
<BoL> Matrix multiplication . <EoL>
<BoL> Element-wise power function . <EoL>
<BoL> Element-wise subtraction . <EoL>
<BoL> Element-wise subtraction . <EoL>
<BoL> Accumulates the gradient array from given source variable . <EoL>
<BoL> Copies the data array from given source variable . <EoL>
<BoL> Display a summary of the stored data and location of the Variable { summary } <EoL>
<BoL> Initializes the uninitialized variable . <EoL>
<BoL> Returns a variable of a different shape and the same content . <EoL>
<BoL> Lets the corresponding variable node keep the underlying array . <EoL>
<BoL> Notifies the variable that the given function is its creator . <EoL>
<BoL> Notifies the variable that the given node is its creator . <EoL>
<BoL> Permute the dimensions of an input variable without copy . <EoL>
<BoL> Deletes the reference to the creator of this variable . <EoL>
<BoL> Deletes references between variable nodes and functions backward . <EoL>
<BoL> Updates the data array using the gradient and the update rule . <EoL>
<BoL> Makes this reporter object current . <EoL>
<BoL> Recovers the previous reporter object to the current . <EoL>
<BoL> Registers an observer of values . <EoL>
<BoL> Registers multiple observers at once . <EoL>
<BoL> Reports observed values . <EoL>
<BoL> Creates a scope to report observed values to `` observation `` . <EoL>
<BoL> Count the number of layers by layer type . <EoL>
<BoL> Flatten nested : class : ` ~chainer.Sequential ` links . <EoL>
<BoL> Forward pass computation . <EoL>
<BoL> Remove layers by layer type . <EoL>
<BoL> Saves an object by this serializer . <EoL>
<BoL> Adds a scalar value . <EoL>
<BoL> Computes the mean . <EoL>
<BoL> Computes and returns the mean and standard deviation values . <EoL>
<BoL> Adds a hook function . <EoL>
<BoL> Initializes the state . <EoL>
<BoL> Removes the specified hook function . <EoL>
<BoL> Serializes the update rule state . <EoL>
<BoL> Invokes hook functions and updates the parameter . <EoL>
<BoL> Updates the parameter . <EoL>
<BoL> Updates the parameter on CPU . <EoL>
<BoL> Updates the parameter on GPU . <EoL>
<BoL> Enables use of parameter update in fp32 . <EoL>
<BoL> Clears the gradient array . <EoL>
<BoL> Copies the data and gradient arrays to CPU . <EoL>
<BoL> Copies the data and gradient arrays to specified GPU . <EoL>
<BoL> Copies the data and gradient arrays to intel64 specific mdarray . <EoL>
<BoL> Initializes the gradient array by zeros . <EoL>
<BoL> Broadcast given variables . <EoL>
<BoL> Broadcast a given variable to a given shape . <EoL>
<BoL> Cast an input variable to a given type . <EoL>
<BoL> Concatenates given variables along an axis . <EoL>
<BoL> Copies the input variable onto the specified device . <EoL>
<BoL> Computes the depth2space transformation for subpixel calculations . <EoL>
<BoL> Take diagonal <EoL>
<BoL> Concatenate variables along third axis ( depth wise ) . <EoL>
<BoL> Expands dimensions of an input variable without copy . <EoL>
<BoL> Flatten a given array into one dimension . <EoL>
<BoL> Flips an input variable in reverse order along the given axis . <EoL>
<BoL> Flip array in the left/right direction . <EoL>
<BoL> Flip array in the up/down direction . <EoL>
<BoL> Concatenate variables horizontally ( column wise ) . <EoL>
<BoL> Extract patches from an image based on the filter . <EoL>
<BoL> Move the source axes to the destination . <EoL>
<BoL> Pad an input variable . <EoL>
<BoL> Pad given arrays to make a matrix . <EoL>
<BoL> Permutates a given variable along an axis . <EoL>
<BoL> Construct an array by repeating a given array . <EoL>
<BoL> Reshapes an input variable without copy . <EoL>
<BoL> Resize images to the given shape . <EoL>
<BoL> Roll the axis backwards to the given position . <EoL>
<BoL> Adds given values to specified elements of an array . <EoL>
<BoL> Select elements stored in given indices . <EoL>
<BoL> Separates an array along a given axis . <EoL>
<BoL> Computes the space2depth transformation for subpixel calculations . <EoL>
<BoL> 2D Spatial Transformer grid . <EoL>
<BoL> 2D Spatial Transformer sampler . <EoL>
<BoL> Make the output of np.split compatible with numpy > = 1.11 <EoL>
<BoL> Checks and convert `` indices_or_sections `` argument <EoL>
<BoL> Splits given variables along an axis . <EoL>
<BoL> Remove demensions of size one from the shape of a ndarray . <EoL>
<BoL> Concatenate variables along a new axis . <EoL>
<BoL> Swap two axes of a variable . <EoL>
<BoL> Construct an array by tiling a given array . <EoL>
<BoL> Permute the dimensions of an input variable without copy . <EoL>
<BoL> Transpose a list of Variables . <EoL>
<BoL> Concatenate variables vertically ( row wise ) . <EoL>
<BoL> Choose elements depending on condition . <EoL>
<BoL> Converts an array or a variable into : class : ` ~chainer.Variable ` . <EoL>
<BoL> Returns whether the input array has NaN values . <EoL>
<BoL> Copies the elements of an ndarray to those of another one . <EoL>
<BoL> Checks if CUDA is available . <EoL>
<BoL> Clears the memoized results for all functions decorated by memoize . <EoL>
<BoL> Copies a : class : ` cupy.ndarray ` object using the default stream . <EoL>
<BoL> Creates an elementwise kernel function . <EoL>
<BoL> Function fusing decorator . <EoL>
<BoL> Gets an appropriate one from : mod : ` numpy ` or : mod : ` cupy ` . <EoL>
<BoL> Gets the device from a device object , an ID integer or an array object . <EoL>
<BoL> Gets the device from a list of CuPy array or a single CuPy array . <EoL>
<BoL> Gets the device from an ID integer . <EoL>
<BoL> Gets the workspace size for cuDNN . <EoL>
<BoL> Makes a function memoizing the result for each argument and device . <EoL>
<BoL> Creates a raw kernel function . <EoL>
<BoL> Sets the workspace size for cuDNN . <EoL>
<BoL> Determines if we should use cuDNN . <EoL>
<BoL> Determines if Tensor Core should be used . <EoL>
<BoL> Copies the given GPU array to host CPU . <EoL>
<BoL> Copies the given CPU array to the specified device . <EoL>
<BoL> Gets an appropriate one from : mod : ` numpy ` or : mod : ` cupy ` . <EoL>
<BoL> Checks if iDeep is available . <EoL>
<BoL> Checks if input arrays are supported for an iDeep primitive . <EoL>
<BoL> Returns if iDeep is available . <EoL>
<BoL> Determines if we should use iDeep . <EoL>
<BoL> Converts graph in dot format . <EoL>
<BoL> Dumps graph as a text . <EoL>
<BoL> show ( file=sys.stdout ) <EoL>
<BoL> show ( file=sys.stdout ) <EoL>
<BoL> using_config ( name , value , config=chainer.config ) <EoL>
<BoL> Computes Cross entropy . <EoL>
<BoL> Concatenate data and transfer them to GPU asynchronously . <EoL>
<BoL> Returns an example or a sequence of examples . <EoL>
<BoL> Returns the number of data points . <EoL>
<BoL> Returns the i-th example . <EoL>
<BoL> With statement context manager method <EoL>
<BoL> With statement context manager method <EoL>
<BoL> Returns self . <EoL>
<BoL> Returns the next batch . <EoL>
<BoL> Finalizes the iterator and possibly releases the resources . <EoL>
<BoL> Python2 alternative of `` __next__ `` . <EoL>
<BoL> Serializes the internal state of the iterator . <EoL>
<BoL> Caches a file if it does not exist , or loads it otherwise . <EoL>
<BoL> Downloads a file and caches it . <EoL>
<BoL> Concatenates a list of examples into array ( s ) . <EoL>
<BoL> Returns the array of data transferred to a target device asynchronously . <EoL>
<BoL> Initiates asynchrous transfer of an array to a target device . <EoL>
<BoL> Send an array to a given device . <EoL>
<BoL> Gets the path to the directory of given dataset . <EoL>
<BoL> Gets the path to the root directory to download and cache datasets . <EoL>
<BoL> Sets the root directory to download and cache datasets . <EoL>
<BoL> Closes a file reader . <EoL>
<BoL> Manually closes all text files . <EoL>
<BoL> Gets the CIFAR-10 dataset . <EoL>
<BoL> Gets the CIFAR-100 dataset . <EoL>
<BoL> Provide a list of the string value names of the labels . <EoL>
<BoL> Creates a set of training/test splits for cross validation . <EoL>
<BoL> Creates a set of training/test splits for cross validation randomly . <EoL>
<BoL> Gets the Penn Tree Bank dataset as long word sequences . <EoL>
<BoL> Gets the Penn Tree Bank word vocabulary . <EoL>
<BoL> Opens a dataset stored in a given path . <EoL>
<BoL> Opens a writer to make a PickleDataset . <EoL>
<BoL> Splits a dataset into two subsets . <EoL>
<BoL> Splits a dataset into `` n `` subsets . <EoL>
<BoL> Splits a dataset into `` n `` subsets randomly . <EoL>
<BoL> Splits a dataset into two subsets randomly . <EoL>
<BoL> Computes Kullback-Leibler divergence . <EoL>
<BoL> Decorator to register KL divergence function . <EoL>
<BoL> Make a context manager which enables back-propagation . <EoL>
<BoL> Perform checks needed for creation of a static schedule.Auto-wrap the supplied function . <EoL>
<BoL> Make a context manager which disables back-propagation . <EoL>
<BoL> Returns a human redable bytes string . <EoL>
<BoL> Prints a summary report of memory profiling in functions . <EoL>
<BoL> Returns a summary of memory profiling in functions . <EoL>
<BoL> Returns total bytes that cupy memory pool acquired from GPU . <EoL>
<BoL> Returns total bytes that functions used from cupy memory pool . <EoL>
<BoL> Returns a human readable time . <EoL>
<BoL> Prints a summary report of time profiling in functions . <EoL>
<BoL> Returns a summary of time profiling in functions . <EoL>
<BoL> Returns total elapsed time in seconds . <EoL>
<BoL> Element-wise absolute error function . <EoL>
<BoL> Computes multiclass classification accuracy of the minibatch . <EoL>
<BoL> Clipped Rectifier Unit function . <EoL>
<BoL> Concatenated Rectified Linear Unit function . <EoL>
<BoL> Exponential Linear Unit function . <EoL>
<BoL> Element-wise hard-sigmoid function . <EoL>
<BoL> Leaky Rectified Linear Unit function . <EoL>
<BoL> Channel-wise log-softmax function . <EoL>
<BoL> Long Short-Term Memory units as an activation function . <EoL>
<BoL> Maxout activation function . <EoL>
<BoL> Parametric ReLU function . <EoL>
<BoL> Rectified Linear Unit function . <EoL>
<BoL> rrelu ( x , l=1 . / 8 , u=1 . / 3 , * , r=None , return_r=False ) <EoL>
<BoL> Element-wise sigmoid logistic function . <EoL>
<BoL> S-LSTM units as an activation function . <EoL>
<BoL> Softmax function . <EoL>
<BoL> Element-wise softplus function . <EoL>
<BoL> Swish activation function . <EoL>
<BoL> Elementwise hyperbolic tangent function . <EoL>
<BoL> Extract gates by split . <EoL>
<BoL> TreeLSTM unit as an activation function . <EoL>
<BoL> Elementwise arccosine function . <EoL>
<BoL> Elementwise arcsine function . <EoL>
<BoL> Elementwise arctangent function . <EoL>
<BoL> Elementwise arctangent function with two arguments . <EoL>
<BoL> Returns index which holds maximum of array elements over a given axis . <EoL>
<BoL> Computes a state that maximizes a joint probability of the given CRF . <EoL>
<BoL> Returns index which holds minimum of array elements over a given axis . <EoL>
<BoL> Calculate weighted average of array elements over a given axis . <EoL>
<BoL> 1-dimensional spatial average pooling function . <EoL>
<BoL> Spatial average pooling function . <EoL>
<BoL> 3-dimensional spatial average pooling function . <EoL>
<BoL> N-dimensionally spatial average pooling function . <EoL>
<BoL> Computes the determinant of a batch of square matrices . <EoL>
<BoL> Computes the inverse of a batch of square matrices . <EoL>
<BoL> L2 norm ( a.k.a.\\ Euclidean norm ) squared . <EoL>
<BoL> Computes the batch matrix multiplications of two sets of arrays . <EoL>
<BoL> Computes the negative log-likelihood of a Bernoulli distribution . <EoL>
<BoL> Elementwise summation with broadcasting . <EoL>
<BoL> Applies a bilinear function based on given parameters . <EoL>
<BoL> Computes binary classification accuracy of the minibatch . <EoL>
<BoL> BlackOut loss function . <EoL>
<BoL> Elementwise ceil function . <EoL>
<BoL> Calculates Precision , Recall , F beta Score , and support . <EoL>
<BoL> Clips ( limits ) elements of input variable . <EoL>
<BoL> Calculates and stores ` outh ` and ` outw ` . <EoL>
<BoL> Two-dimensional deformable convolution function using computed offset . <EoL>
<BoL> Two-dimensional depthwise convolution function . <EoL>
<BoL> Efficient linear function for one-hot input . <EoL>
<BoL> Linear function , or affine transformation . <EoL>
<BoL> Decorator to mark a function for inclusion in the static schedule . <EoL>
<BoL> Two-dimensional local convolution function . <EoL>
<BoL> Make an array of pointers denoting pointers of tensor descriptors . <EoL>
<BoL> Shift function . <EoL>
<BoL> Computes contrastive loss . <EoL>
<BoL> Elementwise cos function . <EoL>
<BoL> Elementwise hyperbolic cosine function . <EoL>
<BoL> Calculates negative log-likelihood of linear-chain CRF . <EoL>
<BoL> Computes the sum-squared cross-covariance penalty between `` y `` and `` z `` <EoL>
<BoL> Cumulative prod of array elements over a given axis . <EoL>
<BoL> Cumulative sum of array elements over a given axis . <EoL>
<BoL> Computes the DeCov loss of `` h `` <EoL>
<BoL> Computes the determinant of a single square matrix . <EoL>
<BoL> Digamma function . <EoL>
<BoL> dropout ( x , ratio=.5 , * , mask=None , return_mask=False ) <EoL>
<BoL> Einstein summation <EoL>
<BoL> Elementwise error function . <EoL>
<BoL> Elementwise complementary error function . <EoL>
<BoL> Elementwise inverse function of complementary error function . <EoL>
<BoL> Elementwise scaled complementary error function . <EoL>
<BoL> Elementwise inverse function of error function . <EoL>
<BoL> Computes R^2 ( coefficient of determination ) regression score function . <EoL>
<BoL> Elementwise exponential function . <EoL>
<BoL> Elementwise exponential minus one function . <EoL>
<BoL> Fast Fourier transform . <EoL>
<BoL> Elementwise fix function . <EoL>
<BoL> Batch normalization function with fixed statistics . <EoL>
<BoL> Elementwise floor function . <EoL>
<BoL> Elementwise mod function . <EoL>
<BoL> Calls a function without storing intermediate results . <EoL>
<BoL> gaussian ( mean , ln_var , * , eps=None , return_eps=False ) <EoL>
<BoL> Computes the KL-divergence of Gaussian variables from the standard one . <EoL>
<BoL> Computes the negative log-likelihood of a Gaussian distribution . <EoL>
<BoL> Group normalization function . <EoL>
<BoL> Gumbel-Softmax sampling function . <EoL>
<BoL> Computes the hinge loss for a one-of-many classification task . <EoL>
<BoL> Computes the Huber loss . <EoL>
<BoL> Just returns input variables . <EoL>
<BoL> Inverse fast Fourier transform . <EoL>
<BoL> Computes the inverse of square matrix . <EoL>
<BoL> Layer normalization . <EoL>
<BoL> logarithm of gamma function . <EoL>
<BoL> Elementwise linear-interpolation function . <EoL>
<BoL> Local response normalization across neighboring channels . <EoL>
<BoL> Elementwise natural logarithm function . <EoL>
<BoL> Elementwise logarithm function to the base 10 . <EoL>
<BoL> Elementwise natural logarithm plus one function . <EoL>
<BoL> Elementwise logarithm function to the base 2 . <EoL>
<BoL> Logarithm of cumulative distribution function of normal distribution . <EoL>
<BoL> Log-sum-exp of array elements over a given axis . <EoL>
<BoL> Flips a label probability matrix . <EoL>
<BoL> Flips label sequence . <EoL>
<BoL> Flips a path probability matrix . <EoL>
<BoL> Args : <EoL>
<BoL> Sum of array elements over a given axis . <EoL>
<BoL> Elementwise square root function . <EoL>
<BoL> Mean absolute error function . <EoL>
<BoL> Mean squared error function . <EoL>
<BoL> Negative sampling loss function . <EoL>
<BoL> Computes cross entropy loss for pre-sigmoid activations . <EoL>
<BoL> Squared error function . <EoL>
<BoL> Computes triplet loss . <EoL>
<BoL> Parses einsum operands . <EoL>
<BoL> Elementwise hyperbolic sine function . <EoL>
<BoL> Creates an array of pointers to matrices <EoL>
<BoL> Computes the matrix multiplication of two arrays . <EoL>
<BoL> Element-wise maximum of input variables . <EoL>
<BoL> Element-wise minimum of input variables . <EoL>
<BoL> Maximum of array elements over a given axis . <EoL>
<BoL> Minimum of array elements over a given axis . <EoL>
<BoL> Elementwise cumulative distribution function of normal distribution . <EoL>
<BoL> Elementwise inverse function of ndtr . <EoL>
<BoL> Polygamma function . <EoL>
<BoL> Product of array elements over a given axis . <EoL>
<BoL> Elementwise product with broadcasting . <EoL>
<BoL> Elementwise sign function . <EoL>
<BoL> Computes the batched multiplication of sparse and dense matrix . <EoL>
<BoL> Computes elementwise reciprocal of square root of input : math : ` x_i ` . <EoL>
<BoL> Elementwise square function . <EoL>
<BoL> Squared difference of input variables . <EoL>
<BoL> Sum elements along axes to output an array of a given shape . <EoL>
<BoL> Returns the tensor dot product of two arrays along specified axes . <EoL>
<BoL> Elementwise sin function . <EoL>
<BoL> Elementwise tan function . <EoL>
<BoL> zoneout ( h , x , ratio=.5 ) <EoL>
<BoL> L2 norm squared ( a.k.a.\\ Euclidean norm ) . <EoL>
<BoL> Spatial Region of Interest ( ROI ) pooling function . <EoL>
<BoL> Spatial pyramid pooling function . <EoL>
<BoL> Inverse operation of pooling for 2d array . <EoL>
<BoL> Inverse operation of 1-dimensional spatial pooling . <EoL>
<BoL> Inverse operation of 3-dimensional spatial pooling . <EoL>
<BoL> Inverse operation of N-dimensional spatial pooling . <EoL>
<BoL> Returns the current reporter object . <EoL>
<BoL> Resolves Chainer 's default dtype . <EoL>
<BoL> Make and return a new empty ndarray . <EoL>
<BoL> Run post-hooks . <EoL>
<BoL> Run hooks to set correct references . <EoL>
<BoL> Make in-use schedules available for use in next iteration . <EoL>
<BoL> Get a static schedule . <EoL>
<BoL> Append a function to the static schedule . <EoL>
<BoL> Build the static schedule . <EoL>
<BoL> Return the array index if it exists . <EoL>
<BoL> Return True if this schedule is empty . <EoL>
<BoL> Run hooks to update variable array references . <EoL>
<BoL> Run hooks to update output variable array references . <EoL>
<BoL> Update parameter attributes after schedule is executed . <EoL>
<BoL> Run parameter reference updater hooks . <EoL>
<BoL> Set output variables . <EoL>
<BoL> Flatten the input into a tuple of variables . <EoL>
<BoL> Decorator to mark a Chain 's `` __call__ ( ) `` as a static sub-graph . <EoL>
<BoL> Return initialized array . <EoL>
<BoL> Returns if the debug mode is enabled or not in the current thread . <EoL>
<BoL> Sample the next order . <EoL>
<BoL> Resets the population count for collecting population statistics . <EoL>
<BoL> Applies broadcasted elementwise summation . <EoL>
<BoL> Applies the bilinear function to inputs and the internal parameters . <EoL>
<BoL> Makes a Huffman tree from a dictionary containing word counts . <EoL>
<BoL> Computes the loss value for given input and ground truth labels . <EoL>
<BoL> Computes the loss value for given input and ground truth labels . <EoL>
<BoL> Computes a state that maximizes a joint probability . <EoL>
<BoL> Returns new cell state and output of Child-Sum TreeLSTM . <EoL>
<BoL> Computes the loss value for an input and label pair . <EoL>
<BoL> Applies N-dimensional convolution layer . <EoL>
<BoL> Applies the convolution layer . <EoL>
<BoL> Applies the deformable convolution . <EoL>
<BoL> Applies the depthwise convolution layer . <EoL>
<BoL> Applies the convolution layer . <EoL>
<BoL> Extracts the word embedding of given IDs . <EoL>
<BoL> forward ( self , x ) <EoL>
<BoL> Converts a pre-trained caffemodel to a chainer model . <EoL>
<BoL> extract ( self , images , layers= [ 'pool5 ' ] , size= ( 224 , 224 ) ) <EoL>
<BoL> forward ( self , x , layers= [ 'prob ' ] ) <EoL>
<BoL> Computes all the probabilities of given images . <EoL>
<BoL> Apply group normalization to given input . <EoL>
<BoL> Computes the output of the Highway module . <EoL>
<BoL> Computes the output of the Inception module . <EoL>
<BoL> Applies the linear layer . <EoL>
<BoL> Applies the local convolution layer . <EoL>
<BoL> Computes the output of the mlpconv layer . <EoL>
<BoL> Applies the maxout layer . <EoL>
<BoL> Returns new cell state and output of N-ary TreeLSTM . <EoL>
<BoL> Computes the loss value for given input and ground truth labels . <EoL>
<BoL> Applies the parametric ReLU activation function . <EoL>
<BoL> Converts a pre-trained caffemodel to a chainer model . <EoL>
<BoL> extract ( self , images , layers= [ 'pool5 ' ] , size= ( 224 , 224 ) ) <EoL>
<BoL> forward ( self , x , layers= [ 'prob ' ] ) <EoL>
<BoL> Computes all the probabilities of given images . <EoL>
<BoL> Applies broadcasted elementwise product . <EoL>
<BoL> Updates the internal state and returns the LSTM outputs . <EoL>
<BoL> Resets the internal states . <EoL>
<BoL> Updates the internal state and returns the LSTM outputs . <EoL>
<BoL> Resets the internal state . <EoL>
<BoL> Sets the internal state . <EoL>
<BoL> Returns new cell state and updated output of LSTM . <EoL>
<BoL> Converts a pre-trained caffemodel to a chainer model . <EoL>
<BoL> extract ( self , images , layers= [ 'fc7 ' ] , size= ( 224 , 224 ) ) <EoL>
<BoL> forward ( self , x , layers= [ 'prob ' ] ) <EoL>
<BoL> Computes all the probabilities of given images . <EoL>
<BoL> Calls RNN function . <EoL>
<BoL> forward ( self , hx , xs ) <EoL>
<BoL> Calls RNN function . <EoL>
<BoL> forward ( self , hx , cx , xs ) <EoL>
<BoL> Converts the given image to the numpy array for GoogLeNet . <EoL>
<BoL> Converts the given image to the numpy array for ResNets . <EoL>
<BoL> Converts the given image to the numpy array for VGG models . <EoL>
<BoL> Converts the hyperparameter into a dictionary . <EoL>
<BoL> Time-dependent annealed Gaussian noise function from the paper : <EoL>
<BoL> Reports observed values with the current reporter object . <EoL>
<BoL> Returns a report scope with the current reporter . <EoL>
<BoL> Loads an object from the file in HDF5 format . <EoL>
<BoL> Saves an object to the file in HDF5 format . <EoL>
<BoL> Loads an object from the file in NPZ format . <EoL>
<BoL> Saves an object to the file in NPZ format . <EoL>
<BoL> Enables or disables the debug mode in the current thread . <EoL>
<BoL> Invokes the extension . <EoL>
<BoL> Finalizes the extension . <EoL>
<BoL> Initializes up the trainer state . <EoL>
<BoL> Serializes the extension state . <EoL>
<BoL> Decides whether the extension should be called on this iteration . <EoL>
<BoL> Finalizes the updater object . <EoL>
<BoL> Gets a dictionary of all optimizers for this updater . <EoL>
<BoL> Gets the dataset iterator of given name . <EoL>
<BoL> Gets the optimizer of given name . <EoL>
<BoL> Serializes the current state of the updater object . <EoL>
<BoL> Updates the parameters of the target model . <EoL>
<BoL> Connects the updater to the trainer that will call it . <EoL>
<BoL> Returns the extension of a given name . <EoL>
<BoL> Executes the training loop . <EoL>
<BoL> Finalizes the updater object . <EoL>
<BoL> Gets a dictionary of all optimizers for this updater . <EoL>
<BoL> Gets the optimizer of given name . <EoL>
<BoL> Serializes the current state of the updater object . <EoL>
<BoL> Updates the parameters of the target model . <EoL>
<BoL> Executes the evaluator extension . <EoL>
<BoL> Evaluates the model and returns a result dictionary . <EoL>
<BoL> Finalizes the evaluator object . <EoL>
<BoL> Returns a dictionary of all iterators . <EoL>
<BoL> Returns a dictionary of all target links . <EoL>
<BoL> Returns the iterator of the given name . <EoL>
<BoL> Returns the target link of the given name . <EoL>
<BoL> Execute the statistics extension . <EoL>
<BoL> Register a function to compute a certain statistic . <EoL>
<BoL> Returns a trainer extension to take snapshots of a given object . <EoL>
<BoL> Returns a trainer extension to record the learning rate . <EoL>
<BoL> Returns a trainer extension to continuously record a value . <EoL>
<BoL> Gets a trigger object . <EoL>
<BoL> Decides whether the extension should be called on this iteration . <EoL>
<BoL> Decides whether the training loop should be stopped . <EoL>
<BoL> Decides whether the extension should be called on this iteration . <EoL>
<BoL> Get data type for NCCL <EoL>
<BoL> Put together all gradient arrays and make a single array <EoL>
<BoL> Put together all gradient arrays and make a single array <EoL>
<BoL> Put back contents of the specified array to the related gradient arrays <EoL>
<BoL> Put back contents of the specified array to the related gradient arrays <EoL>
<BoL> Count total size of all gradient arrays of a given link <EoL>
<BoL> Returns a dense matrix format of this sparse matrix . <EoL>
<BoL> Generates a random sample based on given probabilities . <EoL>
<BoL> Make a sampler CPU mode . <EoL>
<BoL> Make a sampler GPU mode . <EoL>
<BoL> Convenient function to generate ` repr ` string with custom named data <EoL>
<BoL> Calculates output size of convolution . <EoL>
<BoL> Calculates output size of deconvolution . <EoL>
<BoL> Declares that user is using an experimental feature . <EoL>
<BoL> Check if a coo matrix with given row and col is C or F order . <EoL>
<BoL> Crop an image into center , corners , and mirror images . <EoL>
<BoL> Check if a coo matrix with given row and col is c_order <EoL>
<BoL> Returns a single or a batch of matrices in COO format . <EoL>
<BoL> Evaluates the tree to get actual value . <EoL>
<BoL> Returns its length . <EoL>
<BoL> Returns an expression representing its length . <EoL>
<BoL> Assigns user friendly names for the input types . <EoL>
<BoL> Evaluates and tests all given expressions . <EoL>
<BoL> Checks if shapes can be broadcasted together . <EoL>
<BoL> Returns the corresponding : class : ` ~chainer.Variable ` object . <EoL>
<BoL> Returns the holding : class : ` ~chainer.Variable ` object or `` None `` . <EoL>
<BoL> Lets the node hold a reference to the underlying data array . <EoL>
<BoL> Sets a : class : ` ~chainer.Function ` object that created this node . <EoL>
<BoL> Sets a : class : ` ~chainer.FunctionNode ` object that created this node . <EoL>
<BoL> Deletes the reference to the creator of this variable node . <EoL>
<BoL> Return the string representation of a variable . <EoL>
<BoL> Return the string representation of a variable . <EoL>
<BoL> Return True if n is a node , False otherwise . Use : 'n in G ' . <EoL>
<BoL> Return a dict of neighbors of node n. Use : 'G [ n ] ' . <EoL>
<BoL> Initialize a graph with edges , name , or graph attributes . <EoL>
<BoL> Iterate over the nodes . Use : 'for n in G ' . <EoL>
<BoL> Return the number of nodes . Use : 'len ( G ) ' . <EoL>
<BoL> Return the graph name . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Add all the edges in ebunch_to_add . <EoL>
<BoL> Add a single node ` node_for_adding ` and update node attributes . <EoL>
<BoL> Add multiple nodes . <EoL>
<BoL> Add weighted edges in ` ebunch_to_add ` with specified weight attr <EoL>
<BoL> Return an iterator over ( node , adjacency dict ) tuples for all nodes . <EoL>
<BoL> Remove all nodes and edges from the graph . <EoL>
<BoL> Return a copy of the graph . <EoL>
<BoL> Returns the subgraph induced by the specified edges . <EoL>
<BoL> Return the attribute dictionary associated with edge ( u , v ) . <EoL>
<BoL> Return True if the edge ( u , v ) is in the graph . <EoL>
<BoL> Return True if the graph contains the node n . <EoL>
<BoL> Return True if node u has predecessor v . <EoL>
<BoL> Return True if node u has successor v . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Return an iterator over nodes contained in nbunch that are <EoL>
<BoL> Return an iterator over successor nodes of n . <EoL>
<BoL> Return the number of edges between two nodes . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Return an iterator over predecessor nodes of n . <EoL>
<BoL> Remove the edge between u and v . <EoL>
<BoL> Remove all edges specified in ebunch . <EoL>
<BoL> Remove node n . <EoL>
<BoL> Remove multiple nodes . <EoL>
<BoL> Return the reverse of the graph . <EoL>
<BoL> Return the number of edges or total of all edge weights . <EoL>
<BoL> Return a SubGraph view of the subgraph induced on ` nodes ` . <EoL>
<BoL> Return a directed representation of the graph . <EoL>
<BoL> Returns the class to use for empty directed copies . <EoL>
<BoL> Return an undirected representation of the digraph . <EoL>
<BoL> Returns the class to use for empty undirected copies . <EoL>
<BoL> Update the graph using nodes/edges/graphs as input . <EoL>
<BoL> Initialize a graph with edges , name , or graph attributes . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Add all the edges in ebunch_to_add . <EoL>
<BoL> Add a single node ` node_for_adding ` and update node attributes . <EoL>
<BoL> Add multiple nodes . <EoL>
<BoL> Remove all nodes and edges from the graph . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Return an iterator over all neighbors of node n . <EoL>
<BoL> Remove the edge between u and v . <EoL>
<BoL> Remove all edges specified in ebunch . <EoL>
<BoL> Remove node n . <EoL>
<BoL> Remove multiple nodes . <EoL>
<BoL> Return an undirected copy of the graph . <EoL>
<BoL> Add an edge to the graph . <EoL>
<BoL> Add a node to the graph . <EoL>
<BoL> Use the key information to decode the data XML if present . <EoL>
<BoL> Extracts all the keys and key defaults from the xml . <EoL>
<BoL> Appends attribute data to edges or nodes , and stores type information <EoL>
<BoL> Make a data element for an edge or a node . Keep a log of the <EoL>
<BoL> Serialize graph G in GraphML to the stream . <EoL>
<BoL> Add many graphs to this GraphML document . <EoL>
<BoL> Infer the attribute type of data named name . Currently this only <EoL>
<BoL> Return the cubic graph specified in LCF notation . <EoL>
<BoL> Initialize a graph with edges , name , or graph attributes . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Add all the edges in ebunch_to_add . <EoL>
<BoL> Return a copy of the graph . <EoL>
<BoL> Return the attribute dictionary associated with edge ( u , v ) . <EoL>
<BoL> Return True if the graph has an edge between nodes u and v . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Return an unused key for edges between nodes ` u ` and ` v ` . <EoL>
<BoL> Return the number of edges between two nodes . <EoL>
<BoL> Remove an edge between u and v . <EoL>
<BoL> Remove all edges specified in ebunch . <EoL>
<BoL> Return the reverse of the graph . <EoL>
<BoL> Return a directed representation of the graph . <EoL>
<BoL> Returns the class to use for empty directed copies . <EoL>
<BoL> Return an undirected representation of the digraph . <EoL>
<BoL> Returns the class to use for empty undirected copies . <EoL>
<BoL> Initialize a graph with edges , name , or graph attributes . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Remove an edge between u and v . <EoL>
<BoL> Return an undirected copy of the graph . <EoL>
<BoL> Adds a half-edge from start_node to end_node . <EoL>
<BoL> Adds a half-edge from start_node to end_node . <EoL>
<BoL> The added half-edge is inserted at the first position in the order . <EoL>
<BoL> Runs without exceptions if this object is valid . <EoL>
<BoL> Adds half-edges for ( v , w ) and ( w , v ) at some position . <EoL>
<BoL> Converts the adjacency structure into a better readable structure . <EoL>
<BoL> A valid PlanarEmbedding is undirected . <EoL>
<BoL> Generator for the neighbors of v in clockwise order . <EoL>
<BoL> Returns the following half-edge left of a face . <EoL>
<BoL> Returns nodes on the face that belong to the half-edge ( v , w ) . <EoL>
<BoL> r '' '' '' Compute the Adamic-Adar index of all node pairs in ebunch . <EoL>
<BoL> Add a cycle to the Graph G_to_add_to . <EoL>
<BoL> Add a path to the Graph G_to_add_to . <EoL>
<BoL> Add a star to Graph G_to_add_to . <EoL>
<BoL> Return adjacency matrix of G . <EoL>
<BoL> Return data in adjacency format that is suitable for JSON serialization <EoL>
<BoL> Return graph from adjacency data format . <EoL>
<BoL> Return eigenvalues of the adjacency matrix of G . <EoL>
<BoL> Generate a single line of the graph G in adjacency list format . <EoL>
<BoL> Return the string representation of t . <EoL>
<BoL> Decorator to ensure clean opening and closing of files . <EoL>
<BoL> Write graph G in single-line adjacency-list format to path . <EoL>
<BoL> Return a function that solves the Fiedler eigenvalue problem . <EoL>
<BoL> Compute edge weights and eliminate zero-weight edges . <EoL>
<BoL> Estimate the Fiedler vector using the reverse Cuthill-McKee ordering . <EoL>
<BoL> Compute the Fiedler vector of L using the TraceMIN-Fiedler algorithm.Make X orthogonal to the nullspace of L.Make X orthogonal to the nullspace of L . <EoL>
<BoL> Decorator to mark algorithms as not implemented <EoL>
<BoL> Decorator to generate a numpy.random.RandomState instance . <EoL>
<BoL> Generate an ordering ( permutation ) of the graph nodes to make <EoL>
<BoL> Return the composition of all graphs . <EoL>
<BoL> Return the disjoint union of all graphs . <EoL>
<BoL> Return a new graph that contains only the edges that exist in <EoL>
<BoL> Return the union of all graphs . <EoL>
<BoL> r '' '' '' Returns all minimum k cutsets of an undirected graph G . <EoL>
<BoL> Compute shortest paths between all nodes in a weighted graph . <EoL>
<BoL> Compute shortest path lengths between all nodes in a weighted graph . <EoL>
<BoL> Find shortest weighted paths and lengths between all nodes . <EoL>
<BoL> Compute shortest paths between all nodes in a weighted graph . <EoL>
<BoL> Compute shortest path lengths between all nodes in a weighted graph . <EoL>
<BoL> Compute the lowest common ancestor for pairs of nodes.Iterate through the in-order merge for each pair of interest.Returns index of the list containing the next item <EoL>
<BoL> Compute node connectivity between all pairs of nodes of G . <EoL>
<BoL> Compute shortest paths between all nodes . <EoL>
<BoL> Computes the shortest path lengths between all nodes in ` G ` . <EoL>
<BoL> Compute all shortest paths in the graph . <EoL>
<BoL> Generate all simple paths in the graph G from source to target . <EoL>
<BoL> Returns a generator of _all_ topological sorts of the directed graph G . <EoL>
<BoL> Return all nodes having a path to ` source ` in ` G ` . <EoL>
<BoL> Generates antichains from a directed acyclic graph ( DAG ) . <EoL>
<BoL> Yield the articulation points , or cut vertices , of a graph . <EoL>
<BoL> Compute assortativity for node attributes . <EoL>
<BoL> Return dictionary representation of mixing matrix for attribute . <EoL>
<BoL> Compute assortativity for attribute matrix M . <EoL>
<BoL> Return iterator of node-attribute pairs for all edges in G . <EoL>
<BoL> Generate node degree-degree pairs for edges in G . <EoL>
<BoL> Compute assortativity for numerical node attributes . <EoL>
<BoL> Return numeric mixing matrix for attribute . <EoL>
<BoL> Convert a dictionary of dictionaries to a numpy array <EoL>
<BoL> Return a dictionary representation of mixing matrix . <EoL>
<BoL> Return a list of nodes in a shortest path between source and target <EoL>
<BoL> Return the length of the shortest path between source and target using <EoL>
<BoL> DEPRECATED : Use `` ( G.subgraph ( c ) for c in attracting_components ( G ) ) `` <EoL>
<BoL> Generates the attracting components in ` G ` . <EoL>
<BoL> Returns True if ` G ` consists of a single attracting component . <EoL>
<BoL> Returns the number of attracting components in ` G ` . <EoL>
<BoL> Return the HITS authority matrix . <EoL>
<BoL> r '' '' '' Compute the average clustering coefficient for the graph G . <EoL>
<BoL> r '' '' '' Returns the average connectivity of a graph G . <EoL>
<BoL> r '' '' '' Return the average shortest path length . <EoL>
<BoL> Iterates over edges in a beam search.Returns a list of the best neighbors of a node . <EoL>
<BoL> Iterate over edges in a breadth-first search . <EoL>
<BoL> Returns the shortest path from source to target in a weighted graph G . <EoL>
<BoL> Returns the shortest path length from source to target <EoL>
<BoL> Decorator to generate a random.Random instance ( or equiv ) . <EoL>
<BoL> edge_betweenness_centrality_subset helper . <EoL>
<BoL> betweenness_centrality_subset helper . <EoL>
<BoL> edge_betweenness_centrality_subset helper . <EoL>
<BoL> Iterate over edges in a breadth-first-search starting at source . <EoL>
<BoL> Returns an iterator of predecessors in breadth-first-search from source . <EoL>
<BoL> Returns an iterator of successors in breadth-first-search from source . <EoL>
<BoL> Return an oriented tree constructed from of a breadth-first-search <EoL>
<BoL> Return a generator of lists of edges , one list for each biconnected <EoL>
<BoL> DEPRECATED : Use `` ( G.subgraph ( c ) for c in biconnected_components ( G ) ) `` <EoL>
<BoL> Return a generator of sets of nodes , one set for each biconnected <EoL>
<BoL> Return True if the graph is biconnected , False otherwise . <EoL>
<BoL> Dijkstra 's algorithm for shortest paths using bidirectional search . <EoL>
<BoL> Return a list of nodes in a shortest path between source and target . <EoL>
<BoL> Return a new graph of G composed with H . <EoL>
<BoL> Return a new graph that contains the edges that exist in G but not in H . <EoL>
<BoL> Return the disjoint union of graphs G and H . <EoL>
<BoL> Return a new graph that contains only the edges that exist in <EoL>
<BoL> Check if obj is string . <EoL>
<BoL> Return new graph with edges that exist in either G or H but not both . <EoL>
<BoL> Return the union of graphs G and H . <EoL>
<BoL> Return a bipartite graph from two given degree sequences using <EoL>
<BoL> r '' '' '' Compute the average bipartite clustering coefficient . <EoL>
<BoL> Returns a two-coloring of the graph . <EoL>
<BoL> Return the degrees of the two node sets in the bipartite graph B . <EoL>
<BoL> Return density of bipartite graph B . <EoL>
<BoL> Returns True if graph G is bipartite , False if not . <EoL>
<BoL> Returns True if nodes and G/nodes are a bipartition of G . <EoL>
<BoL> Returns bipartite node sets of graph G . <EoL>
<BoL> r '' '' '' Compute betweenness centrality for nodes in a bipartite network . <EoL>
<BoL> r '' '' '' Compute the closeness centrality for nodes in a bipartite network . <EoL>
<BoL> r '' '' '' Compute the degree centrality for nodes in a bipartite network . <EoL>
<BoL> r '' '' '' Compute a bipartite clustering coefficient for nodes . <EoL>
<BoL> r '' '' '' Compute the bipartite clustering of G . <EoL>
<BoL> r '' '' '' Newman 's weighted projection of B onto one of its node sets . <EoL>
<BoL> Return the complete bipartite graph ` K_ { n_1 , n_2 } ` . <EoL>
<BoL> Return a random bipartite graph from two given degree sequences . <EoL>
<BoL> Returns a set of edges which constitutes <EoL>
<BoL> Returns the maximum cardinality matching of the bipartite graph ` G ` . <EoL>
<BoL> Returns a set of edges which constitutes <EoL>
<BoL> Generate a single line of the bipartite graph G in edge list format . <EoL>
<BoL> Returns the maximum cardinality matching of the bipartite graph ` G ` . <EoL>
<BoL> r '' '' '' Creates a new bipartite graph from a biadjacency matrix given as a <EoL>
<BoL> Return a random bipartite graph G_ { n , m , k } . <EoL>
<BoL> Return a bipartite graph from two given degree sequences using a <EoL>
<BoL> Decorator to allow number of nodes or container of nodes . <EoL>
<BoL> Create a bipartite graph with a preferential attachment model from <EoL>
<BoL> Return a bipartite random graph . <EoL>
<BoL> Return a bipartite graph from two given degree sequences using a <EoL>
<BoL> r '' '' '' Weighted projection of B with a user-specified weight function . <EoL>
<BoL> Returns the set of vertices that are connected to one of the target <EoL>
<BoL> Returns True if and only if ` u ` is connected to one of the <EoL>
<BoL> Returns the minimum vertex cover corresponding to the given maximum <EoL>
<BoL> Returns an iterable over ( u , v , w ) triples , where u and v are adjacent <EoL>
<BoL> r '' '' '' Computes the node redundancy coefficients for the nodes in the bipartite <EoL>
<BoL> r '' '' '' Overlap weighted projection of B onto one of its node sets . <EoL>
<BoL> r '' '' '' Returns the projection of B onto one of its node sets . <EoL>
<BoL> r '' '' '' Returns a weighted projection of B onto one of its node sets . <EoL>
<BoL> Returns the redundancy of the node ` v ` in the bipartite graph ` G ` . <EoL>
<BoL> Fixture for nose tests . <EoL>
<BoL> Returns the spectral bipartivity . <EoL>
<BoL> Returns the edge boundary of ` nbunch1 ` . <EoL>
<BoL> Returns the node boundary of ` nbunch1 ` . <EoL>
<BoL> Returns the boundary expansion of the set ` S ` . <EoL>
<BoL> Generate all bridges in a graph . <EoL>
<BoL> r '' '' '' Return the Cartesian product of G and H . <EoL>
<BoL> Return the center of the graph G . <EoL>
<BoL> r '' '' '' Return subgraph communicability for all pairs of nodes in G . <EoL>
<BoL> Compute the degree centrality for nodes . <EoL>
<BoL> Compute the in-degree centrality for nodes . <EoL>
<BoL> Compute the out-degree centrality for nodes . <EoL>
<BoL> r '' '' '' Calculate dispersion between ` u ` and ` v ` in ` G ` .dispersion for all nodes 'v ' in a ego network G_u of node 'u <EoL>
<BoL> Compute edge load . <EoL>
<BoL> r '' '' '' Compute the eigenvector centrality for the graph G . <EoL>
<BoL> r '' '' '' Return the Estrada index of a the graph G . <EoL>
<BoL> Returns the global reaching centrality of a directed graph . <EoL>
<BoL> r '' '' '' Compute harmonic centrality for nodes . <EoL>
<BoL> Edge betweenness helper . <EoL>
<BoL> Returns the local reaching centrality of a node in a directed <EoL>
<BoL> Returns the average weight of an edge in a weighted path . <EoL>
<BoL> Compute the second order centrality for nodes of G . <EoL>
<BoL> Return whether the heap if empty . <EoL>
<BoL> Return whether a key exists in the heap . <EoL>
<BoL> Initialize a binary heap . <EoL>
<BoL> Return the number of key-value pairs in the heap . <EoL>
<BoL> Return whether the heap if empty . <EoL>
<BoL> Initialize a new min-heap . <EoL>
<BoL> Return the value associated with a key . <EoL>
<BoL> Insert a new key-value pair or modify the value in an existing <EoL>
<BoL> Query the minimum key-value pair . <EoL>
<BoL> Delete the minimum pair in the heap . <EoL>
<BoL> Initialize a pairing heap . <EoL>
<BoL> Cut a node from its parent . <EoL>
<BoL> Link two nodes , making the one with the smaller value the parent of <EoL>
<BoL> Merge the subtrees of the root using the standard two-pass method . <EoL>
<BoL> Find and return the name of the set containing the object . <EoL>
<BoL> Create a new empty union-find structure . <EoL>
<BoL> Iterate through all items ever found or unioned by this structure . <EoL>
<BoL> Iterates over the sets stored in this structure . <EoL>
<BoL> Find the sets containing the objects and merge them all . <EoL>
<BoL> Returns an arbitrary element of ` iterable ` without removing it . <EoL>
<BoL> Returns a random.Random instance depending on input . <EoL>
<BoL> Returns a numpy.random.RandomState instance depending on input . <EoL>
<BoL> Return normalized cumulative distribution from discrete distribution . <EoL>
<BoL> Generate an ordering ( permutation ) of the graph nodes to make <EoL>
<BoL> Opens ` filename ` using system 's default program . <EoL>
<BoL> Convert a dictionary of numbers to a 1d numpy array <EoL>
<BoL> Convert a dictionary of dictionaries to a 2d numpy array <EoL>
<BoL> Return sample sequence of length n from a given discrete distribution <EoL>
<BoL> Return flattened version of ( possibly nested ) iterable object . <EoL>
<BoL> Generate a unique node label . <EoL>
<BoL> Converts a many-to-one mapping into a one-to-many mapping . <EoL>
<BoL> Returns True if and only if the given object is an iterator <EoL>
<BoL> Return True if list is a list of ints . <EoL>
<BoL> Return True if obj is iterable with a well-defined len ( ) . <EoL>
<BoL> Return sample sequence of length n from a power law distribution . <EoL>
<BoL> Decorator to preserve the numpy.random state during a function . <EoL>
<BoL> Return k items without replacement from a weighted sample . <EoL>
<BoL> A context manager for temporarily reversing a directed graph in place . <EoL>
<BoL> r '' '' '' Return subgraph centrality for each node in G . <EoL>
<BoL> r '' '' '' Return the subgraph centrality for each node of G . <EoL>
<BoL> Converts lists to tuples . <EoL>
<BoL> Return a single element from a weighted sample . <EoL>
<BoL> r '' '' '' Return a random value chosen from the Zipf distribution . <EoL>
<BoL> Return the chain decomposition of a graph.Builds a directed graph composed of cycles from the given graph.Generate the chain starting from the given nontree edge . <EoL>
<BoL> Check if a graph is planar and return a counterexample or an embedding . <EoL>
<BoL> Return the set of maximal cliques of a connected chordal graph . <EoL>
<BoL> Given a graph G , starts a max cardinality search <EoL>
<BoL> Given a non-complete graph G , returns a missing edge . <EoL>
<BoL> Returns True if G is a complete graph . <EoL>
<BoL> Returns a the node in choices that has more connections in G <EoL>
<BoL> Returns the set of maximal cliques of a chordal graph . <EoL>
<BoL> Returns the treewidth of the chordal graph G . <EoL>
<BoL> Returns the set of induced nodes in the path from s to t . <EoL>
<BoL> Checks whether G is a chordal graph . <EoL>
<BoL> Returns a list of cliques containing the given node . <EoL>
<BoL> Returns all cliques in an undirected graph . <EoL>
<BoL> Returns all maximal cliques in an undirected graph . <EoL>
<BoL> Returns all maximal cliques in a graph . <EoL>
<BoL> Returns the clique number of the graph . <EoL>
<BoL> Returns the number of maximal cliques in the graph . <EoL>
<BoL> Returns the bipartite clique graph corresponding to ` G ` . <EoL>
<BoL> Returns the maximal clique graph of the given graph . <EoL>
<BoL> Returns the size of the largest maximal clique containing <EoL>
<BoL> Returns the number of maximal cliques for each node . <EoL>
<BoL> Returns the closeness vitality for nodes in the graph . <EoL>
<BoL> Return an iterator of <EoL>
<BoL> Return an iterator of <EoL>
<BoL> Return an iterator of ( node , degree , triangles , generalized degree ) . <EoL>
<BoL> Return an iterator of ( node , degree , weighted_triangles ) . <EoL>
<BoL> r '' '' '' Compute the clustering coefficient for nodes . <EoL>
<BoL> Compute the generalized degree for nodes . <EoL>
<BoL> r '' '' '' Compute the squares clustering coefficient for nodes . <EoL>
<BoL> r '' '' '' Compute graph transitivity , the fraction of all possible triangles <EoL>
<BoL> Compute the number of triangles . <EoL>
<BoL> r '' '' '' Count the number of common neighbors of all node pairs in ebunch <EoL>
<BoL> Color a graph using various strategies of greedy graph coloring . <EoL>
<BoL> This procedure is an adaption of the algorithm described by [ 1 ] _ , <EoL>
<BoL> Returns a maximal independent set of nodes in `` G `` by repeatedly <EoL>
<BoL> Returns an iterable over nodes in `` G `` in the order given by a <EoL>
<BoL> Returns an iterable over nodes in `` G `` in the order given by a <EoL>
<BoL> Returns an iterable over nodes in `` G `` in the order given by a <EoL>
<BoL> Uses a greedy independent set removal strategy to determine the <EoL>
<BoL> Returns a list of the nodes of `` G `` in decreasing order by <EoL>
<BoL> Returns a random permutation of the nodes of `` G `` as a list . <EoL>
<BoL> Iterates over all the nodes of `` G `` in `` saturation order '' ( also <EoL>
<BoL> Returns a deque of the nodes of `` G `` , `` smallest '' last . <EoL>
<BoL> r '' '' '' Return communicability between all pairs of nodes in G . <EoL>
<BoL> r '' '' '' Return communicability between all pairs of nodes in G . <EoL>
<BoL> Find communities in graph using the greedy modularity maximization . <EoL>
<BoL> Returns communities in ` G ` as detected by Fluid Communities algorithm . <EoL>
<BoL> Return True if the graph is connected , False otherwise . <EoL>
<BoL> Returns communities in ` G ` as detected by asynchronous label <EoL>
<BoL> Returns the connected components of the graph that results from <EoL>
<BoL> Finds communities in a graph using the Girvan–Newman method.Returns the edge with the highest betweenness centrality <EoL>
<BoL> Returns a list of sets , each of which represents a community in <EoL>
<BoL> Returns a list of numbers obeying a power law distribution , with <EoL>
<BoL> Returns a random value chosen from the Zipf distribution , <EoL>
<BoL> Return True if and only if ` communities ` is a partition of <EoL>
<BoL> Returns the coverage of a partition . <EoL>
<BoL> Find communities in graph using Clauset-Newman-Moore greedy modularity <EoL>
<BoL> Find k-clique communities in graph using the percolation method . <EoL>
<BoL> Colors the network so that neighboring nodes all have distinct colors . <EoL>
<BoL> Determines whether or not LPA is done . <EoL>
<BoL> Returns a set of all labels with maximum frequency in ` labeling ` . <EoL>
<BoL> Updates the label of a node using the Prec-Max tie breaking algorithm <EoL>
<BoL> Generates community sets determined by label propagation <EoL>
<BoL> r '' '' '' Returns the modularity of the given partition of the graph . <EoL>
<BoL> Priority queue class with updatable priorities . <EoL>
<BoL> Restore heap invariant and recalculate map . <EoL>
<BoL> Restore invariant by repeatedly replacing out-of-place element with <EoL>
<BoL> Move element at pos down to a leaf by repeatedly moving the smaller <EoL>
<BoL> Remove and return the smallest element in the queue . <EoL>
<BoL> Add an element to the queue . <EoL>
<BoL> Remove an element from the queue . <EoL>
<BoL> Replace an element in the queue with a new one . <EoL>
<BoL> Returns the performance of a partition . <EoL>
<BoL> Returns the number of inter-community edges according to the given <EoL>
<BoL> Returns the number of inter-community non-edges according to the <EoL>
<BoL> Returns the number of intra-community edges according to the given <EoL>
<BoL> Decorator that raises an exception if a partition is not a valid <EoL>
<BoL> Return the graph complement of G . <EoL>
<BoL> Returns the condensation of G . <EoL>
<BoL> A fast BFS node generator <EoL>
<BoL> DEPRECATED : Use `` ( G.subgraph ( c ) for c in connected_components ( G ) ) `` <EoL>
<BoL> Generate connected components . <EoL>
<BoL> Return the set of nodes in the component of graph containing node n . <EoL>
<BoL> Return the number of connected components . <EoL>
<BoL> Return True if the graph is semiconnected , False otherwise . <EoL>
<BoL> Test directed graph for strong connectivity . <EoL>
<BoL> Test directed graph for weak connectivity . <EoL>
<BoL> Generate nodes in strongly connected components of graph . <EoL>
<BoL> Return number of strongly connected components in graph . <EoL>
<BoL> Return the number of weakly connected components in G . <EoL>
<BoL> DEPRECATED : Use `` ( G.subgraph ( c ) for c in strongly_connected_components ( G ) ) `` <EoL>
<BoL> Generate nodes in strongly connected components of graph . <EoL>
<BoL> Generate nodes in strongly connected components of graph . <EoL>
<BoL> A fast BFS node generator <EoL>
<BoL> DEPRECATED : Use `` ( G.subgraph ( c ) for c in weakly_connected_components ( G ) ) `` <EoL>
<BoL> Generate weakly connected components of G . <EoL>
<BoL> Returns the conductance of two sets of nodes . <EoL>
<BoL> Attempts the specified number of double-edge swaps in the graph ` G ` . <EoL>
<BoL> Builds an auxiliary graph encoding edge-connectivity between nodes . <EoL>
<BoL> Queries the auxiliary graph for k-edge-connected components . <EoL>
<BoL> Queries the auxiliary graph for k-edge-connected subgraphs . <EoL>
<BoL> Finds all bridge-connected components G . <EoL>
<BoL> Auxiliary digraph for computing flow based edge connectivity <EoL>
<BoL> r '' '' '' Creates a directed graph D from an undirected graph G to compute flow <EoL>
<BoL> Build a residual network and initialize a zero flow . <EoL>
<BoL> Find a maximum single-commodity flow using Dinitz ' algorithm . <EoL>
<BoL> r '' '' '' Returns the edge connectivity of the graph or digraph G . <EoL>
<BoL> Returns node connectivity for a graph or digraph G . <EoL>
<BoL> r '' '' '' Returns a set of edges of minimum cardinality that disconnects G . <EoL>
<BoL> r '' '' '' Returns a set of nodes of minimum cardinality that disconnects G . <EoL>
<BoL> r '' '' '' Returns a set of nodes of minimum cardinality that disconnect source <EoL>
<BoL> wrapper around rng.shuffle for python 2 compatibility reasons <EoL>
<BoL> Maps available edges in the original graph to edges in the metagraph . <EoL>
<BoL> Helper function to compute a minimum rooted branching ( aka rooted <EoL>
<BoL> Returns the nodes in an undirected edge in lower-triangular order <EoL>
<BoL> Helper to separate avail into edges and corresponding weights <EoL>
<BoL> Finds the a set of edges that bridge connects G . <EoL>
<BoL> Collapses each group of nodes into a single node . <EoL>
<BoL> Returns only the edges in the complement of G <EoL>
<BoL> Greedy algorithm for finding a k-edge-augmentation <EoL>
<BoL> Tests to see if a graph is k-edge-connected . <EoL>
<BoL> Tests to see if an edge in a graph is locally k-edge-connected . <EoL>
<BoL> Finds set of edges to k-edge-connect G . <EoL>
<BoL> Finds minimum weight set of edges to connect G . <EoL>
<BoL> Finds augmentation that k-edge-connects as much of the graph as possible.finds edges between disjoint nodes <EoL>
<BoL> Finds an optimal 2-edge-augmentation of G using the fewest edges . <EoL>
<BoL> Finds the smallest set of edges to connect G . <EoL>
<BoL> Finds an approximate min-weight 2-edge-augmentation of G . <EoL>
<BoL> Finds the minimum weight set of edges to connect G if one exists . <EoL>
<BoL> Helper for filtering components that ca n't be k-edge-connected . <EoL>
<BoL> Helper to get the nodes from the subgraphs . <EoL>
<BoL> Helper for finding nodes with degree less than k . <EoL>
<BoL> General algorithm to find all maximal k-edge-connected subgraphs in G . <EoL>
<BoL> Generates nodes in each maximal k-edge-connected component in G . <EoL>
<BoL> Generates nodes in each maximal k-edge-connected subgraph in G . <EoL>
<BoL> r '' '' '' Returns the k-component structure of a graph G . <EoL>
<BoL> Merge sets that share k or more elements . <EoL>
<BoL> Assumes that the input graph is connected <EoL>
<BoL> Returns the weighted minimum edge cut using the Stoer-Wagner algorithm . <EoL>
<BoL> r '' '' '' Returns the constraint on all nodes in the graph `` G `` . <EoL>
<BoL> Returns the graph that results from contracting the specified edge . <EoL>
<BoL> Returns the graph that results from contracting ` u ` and ` v ` . <EoL>
<BoL> Returns the subgraph induced by nodes passing filter ` k_filter ` . <EoL>
<BoL> Return the core number for each vertex . <EoL>
<BoL> Return the k-core of G . <EoL>
<BoL> Return the k-corona of G . <EoL>
<BoL> Return the k-crust of G . <EoL>
<BoL> Return the k-shell of G . <EoL>
<BoL> Compute the cost of the flow given by flowDict on graph G . <EoL>
<BoL> Returns False if graphs are definitely not isomorphic . <EoL>
<BoL> Decides whether a set of edges is a valid edge cover of the graph . <EoL>
<BoL> Returns the size of the cut between two sets of nodes . <EoL>
<BoL> Returns the edge expansion between two node sets . <EoL>
<BoL> Returns the mixing expansion between two node sets . <EoL>
<BoL> Returns the node expansion of the set ` S ` . <EoL>
<BoL> Returns the normalized size of the cut between two sets of nodes . <EoL>
<BoL> Returns the volume of a set of nodes . <EoL>
<BoL> Returns a list of cycles which form a basis for cycles of G . <EoL>
<BoL> Computes the minimum weight cycle in G , <EoL>
<BoL> Removes the edges from path that occur even number of times . <EoL>
<BoL> Returns a cycle found via depth-first traversal . <EoL>
<BoL> Returns a minimum weight cycle basis for G <EoL>
<BoL> Find simple cycles ( elementary circuits ) of a directed graph.Recursively unblock and remove nodes from B [ thisnode ] . <EoL>
<BoL> Find simple cycles ( elementary circuits ) of a directed graph . <EoL>
<BoL> Returns the longest path in a directed acyclic graph ( DAG ) . <EoL>
<BoL> Returns the longest path length in a DAG <EoL>
<BoL> Returns a branching representing all ( overlapping ) paths from <EoL>
<BoL> Return all nodes reachable from ` source ` in ` G ` . <EoL>
<BoL> Calculate the Greatest Common Divisor of a and b . <EoL>
<BoL> Decides whether the directed graph has a cycle . <EoL>
<BoL> Return True if ` G ` is aperiodic . <EoL>
<BoL> Return True if the graph ` G ` is a directed acyclic graph ( DAG ) or <EoL>
<BoL> Return a generator of nodes in lexicographically topologically sorted <EoL>
<BoL> Yields root-to-leaf paths in a directed acyclic graph . <EoL>
<BoL> Return a generator of nodes in topologically sorted order . <EoL>
<BoL> Returns transitive closure of a directed graph <EoL>
<BoL> Returns transitive reduction of a directed graph <EoL>
<BoL> Find all-pairs shortest path lengths using Floyd 's algorithm . <EoL>
<BoL> Find all-pairs shortest path lengths using Floyd 's algorithm . <EoL>
<BoL> Find all-pairs shortest path lengths using Floyd 's algorithm . <EoL>
<BoL> Reconstruct a path from source to target using the predecessors <EoL>
<BoL> Iterate over edges in a depth-first-search ( DFS ) . <EoL>
<BoL> Iterate over edges in a depth-first-search ( DFS ) labeled by type . <EoL>
<BoL> Generate nodes in a depth-first-search post-ordering starting at source . <EoL>
<BoL> Return dictionary of predecessors in depth-first-search from source . <EoL>
<BoL> Generate nodes in a depth-first-search pre-ordering starting at source . <EoL>
<BoL> Return dictionary of successors in depth-first-search from source . <EoL>
<BoL> Return oriented tree constructed from a depth-first-search from source . <EoL>
<BoL> Return the diameter of the graph G . <EoL>
<BoL> Returns the shortest weighted path from source to target in G . <EoL>
<BoL> Returns the shortest weighted path length in G from source to target . <EoL>
<BoL> Compute weighted shortest path length and predecessors . <EoL>
<BoL> Return the eccentricity of nodes in G . <EoL>
<BoL> Compute requested extreme distance metric of undirected graph G <EoL>
<BoL> Return the periphery of the graph G . <EoL>
<BoL> Return the radius of the graph G . <EoL>
<BoL> Return global parameters for a given intersection array . <EoL>
<BoL> Returns the intersection array of a distance-regular graph . <EoL>
<BoL> Returns True if the graph is distance regular , False otherwise . <EoL>
<BoL> Returns True if and only if the given graph is strongly <EoL>
<BoL> Returns the dominance frontiers of all nodes of a directed graph . <EoL>
<BoL> Returns the immediate dominators of all nodes of a directed graph . <EoL>
<BoL> r '' '' '' Finds a dominating set for the graph G . <EoL>
<BoL> Checks if ` nbunch ` is a dominating set for ` G ` . <EoL>
<BoL> Swap two edges in the graph while keeping the node degrees fixed . <EoL>
<BoL> A directed , breadth-first-search of edges in ` G ` , beginning at ` source ` . <EoL>
<BoL> A directed , depth-first-search of edges in ` G ` , beginning at ` source ` . <EoL>
<BoL> r '' '' '' Returns the effective size of all nodes in the graph `` G `` . <EoL>
<BoL> Returns the efficiency of a pair of nodes in a graph . <EoL>
<BoL> Returns an iterator over the edges of an Eulerian circuit in ` G ` . <EoL>
<BoL> Transforms a graph into an Eulerian graph <EoL>
<BoL> Returns True if and only if ` G ` is Eulerian . <EoL>
<BoL> Returns False if graphs are definitely not isomorphic . <EoL>
<BoL> Returns False if graphs are definitely not isomorphic . <EoL>
<BoL> Bidirectional breadth-first search for the growth stage.Augmentation stage.Adoption stage . <EoL>
<BoL> Build a flow dictionary from a residual network . <EoL>
<BoL> Build a flow dictionary from a residual network . <EoL>
<BoL> Build a residual network and initialize a zero flow . <EoL>
<BoL> Detect infinite-capacity negative cycles . <EoL>
<BoL> Build a path using DFS starting from the sink <EoL>
<BoL> Detect an infinite-capacity s-t path in R . <EoL>
<BoL> Implementation of the Edmonds-Karp algorithm.Augment flow along a path from s to t.Bidirectional breadth-first search for an augmenting path . <EoL>
<BoL> Implementation of the Edmonds-Karp algorithm . <EoL>
<BoL> r '' '' '' Returns the Gomory-Hu tree of an undirected graph G . <EoL>
<BoL> Return a maximum ( s , t ) -flow of minimum cost . <EoL>
<BoL> r '' '' '' Find a minimum cost flow satisfying all demands in digraph G.Return the reduced cost of an edge i.Yield entering edges until none can be found.Find the lowest common ancestor of nodes p and q in the spanningReturn the nodes and edges on the path from node p to its ancestorReturn the nodes and edges on the cycle containing edge i == ( p , q ) Return the residual capacity of an edge i in the direction awayReturn the leaving edge in a cycle represented by Wn and We.Augment f units of flow along a cycle represented by Wn and We.Yield the nodes in the subtree rooted at a node p.Remove an edge ( s , t ) where parent [ t ] == s from the spanning tree.Make a node q the root of its containing subtree.Add an edge ( p , q ) to the spanning tree where q is the root of aUpdate the potentials of the nodes in the subtree rooted at a nodeAdd a flow dict entry . <EoL>
<BoL> Perform a reverse breadth-first search from src in the residualPush flow units of flow from u to v.Move a node from the inactive set to the active set of its level.Relabel a node to create an admissible edge.Discharge a node until it becomes inactive or , during phase 1 ( seeApply the gap heuristic.Apply the global relabeling heuristic . <EoL>
<BoL> Augment flow along a path from s to t.Relabel a node to create an admissible edge . <EoL>
<BoL> Returns the flow hierarchy of a directed network . <EoL>
<BoL> Returns the rooted tree corresponding to the given nested tuple.Recursively creates a tree from the given sequence of nested <EoL>
<BoL> r '' '' '' Returns the tree corresponding to the given Prüfer sequence . <EoL>
<BoL> Return *True* if *G* has a path from *source* to *target* . <EoL>
<BoL> Compute shortest paths in the graph . <EoL>
<BoL> Returns the average global efficiency of the graph . <EoL>
<BoL> Compute shortest path lengths and predecessors on shortest pathsTopologically sort nodes relabeled in the previous round and detectRelax out-edges of relabeled nodes . <EoL>
<BoL> r '' '' '' Returns True if some directed graph can realize the in- and out-degree <EoL>
<BoL> Returns True if sequence is a valid degree sequence . <EoL>
<BoL> Returns True if some multigraph can realize the sequence . <EoL>
<BoL> Returns True if some pseudograph can realize the sequence . <EoL>
<BoL> r '' '' '' Returns True if deg_sequence can be realized by a simple graph . <EoL>
<BoL> r '' '' '' Returns True if deg_sequence can be realized by a simple graph . <EoL>
<BoL> Decide whether a graph has any bridges . <EoL>
<BoL> Return HITS hubs and authorities values for nodes . <EoL>
<BoL> Return HITS hubs and authorities values for nodes . <EoL>
<BoL> Return HITS hubs and authorities values for nodes . <EoL>
<BoL> Return the HITS hub matrix . <EoL>
<BoL> Returns True if and only if ` G ` is locally ` ( k , l ) ` -connected . <EoL>
<BoL> Returns the maximum locally ` ( k , l ) ` -connected subgraph of ` G ` . <EoL>
<BoL> Returns True if ` G ` is an arborescence . <EoL>
<BoL> Returns True if ` G ` is a branching . <EoL>
<BoL> Returns True if ` G ` is a forest . <EoL>
<BoL> Determines whether a node is an isolate . <EoL>
<BoL> Returns True if the graphs G1 and G2 are isomorphic and False otherwise . <EoL>
<BoL> Decides whether the given set or dictionary represents a valid <EoL>
<BoL> Decides whether the given set or dictionary represents a valid <EoL>
<BoL> Decides whether the given set represents a valid perfect matching in <EoL>
<BoL> Returns True if and only if the given nodes form a simple path in <EoL>
<BoL> Returns True if ` G ` is a tree . <EoL>
<BoL> Iterator over isolates in the graph . <EoL>
<BoL> Returns the number of isolates in the graph . <EoL>
<BoL> Initialize graph matcher . <EoL>
<BoL> Iterator over candidate pairs of nodes in G1 and G2 . <EoL>
<BoL> Reinitializes the state of the algorithm . <EoL>
<BoL> Returns True if G1 and G2 are isomorphic graphs . <EoL>
<BoL> Generator over isomorphisms between G1 and G2 . <EoL>
<BoL> Extends the isomorphism mapping . <EoL>
<BoL> Restores the recursion limit . <EoL>
<BoL> Returns True if mapping G1_node to G2_node is semantically feasible . <EoL>
<BoL> Returns True if a subgraph of G1 is isomorphic to G2 . <EoL>
<BoL> Generator over isomorphisms between a subgraph of G1 and G2 . <EoL>
<BoL> Returns True if adding ( G1_node , G2_node ) is syntactically feasible . <EoL>
<BoL> Initialize graph matcher . <EoL>
<BoL> Iterator over candidate pairs of nodes in G1 and G2 . <EoL>
<BoL> Reinitializes the state of the algorithm . <EoL>
<BoL> Returns True if mapping G1_node to G2_node is semantically feasible . <EoL>
<BoL> Returns True if adding ( G1_node , G2_node ) is syntactically feasible . <EoL>
<BoL> Initialize TimeRespectingDiGraphMatcher . <EoL>
<BoL> Get the dates of edges from predecessors . <EoL>
<BoL> Get the dates of edges to successors . <EoL>
<BoL> The ego node . <EoL>
<BoL> Returns True if adding ( G1_node , G2_node ) is semantically <EoL>
<BoL> Edges one hop out from Gx_node in the mapping should be <EoL>
<BoL> Edges from a dual Gx_node in the mapping should be ordered in <EoL>
<BoL> The predeccessors of the ego node . <EoL>
<BoL> The successors of the ego node . <EoL>
<BoL> Initialize TimeRespectingGraphMatcher . <EoL>
<BoL> Edges one hop out from a node in the mapping should be <EoL>
<BoL> Returns True if adding ( G1_node , G2_node ) is semantically <EoL>
<BoL> Paths of length 2 from Gx_node should be time-respecting . <EoL>
<BoL> Returns a comparison function for a generic attribute . <EoL>
<BoL> Initializes DiGMState object . <EoL>
<BoL> Deletes the DiGMState object and restores the class variables . <EoL>
<BoL> Initializes GMState object . <EoL>
<BoL> Deletes the GMState object and restores the class variables . <EoL>
<BoL> Returns True if x and y are sufficiently close , elementwise . <EoL>
<BoL> Returns True if x and y are sufficiently close . <EoL>
<BoL> Returns a deepcopy of a function . <EoL>
<BoL> r '' '' '' Compute the Jaccard coefficient of all node pairs in ebunch . <EoL>
<BoL> r '' '' '' Uses Johnson 's Algorithm to compute shortest paths . <EoL>
<BoL> Returns a new rooted tree with a root node joined with the roots <EoL>
<BoL> Latticize the given graph by swapping edges . <EoL>
<BoL> r '' '' '' Return the lexicographic product of G and H . <EoL>
<BoL> Applies the given function to each edge in the specified iterable <EoL>
<BoL> Get the community of the given node . <EoL>
<BoL> r '' '' '' Compute the preferential attachment score of all node pairs in ebunch . <EoL>
<BoL> r '' '' '' Compute the resource allocation index of all node pairs in <EoL>
<BoL> r '' '' '' Compute the resource allocation index of all node pairs in ebunch . <EoL>
<BoL> Compute the ratio of within- and inter-cluster common neighbors <EoL>
<BoL> Iterate over local bridges of ` G ` optionally computing the span <EoL>
<BoL> r '' '' '' Returns the local constraint on the node `` u `` with respect to <EoL>
<BoL> Returns the average local efficiency of the graph . <EoL>
<BoL> Compute the lowest common ancestor of the given pair of nodes . <EoL>
<BoL> r '' '' '' Yield the lowest common ancestor for sets of pairs in a tree . <EoL>
<BoL> Converts a dictionary representing a matching ( as returned by <EoL>
<BoL> Compute a maximum-weighted matching of G.Dummy value which is different from any node.Representation of a non-trivial blossom or sub-blossom . <EoL>
<BoL> r '' '' '' Find a maximal matching in the graph . <EoL>
<BoL> Return a random maximal independent set guaranteed to contain <EoL>
<BoL> r '' '' '' Return the density of a graph . <EoL>
<BoL> Returns the set of equivalence classes of the given ` iterable ` under <EoL>
<BoL> Find shortest weighted paths in G from a given set of source <EoL>
<BoL> Return True if there exists a negative edge cycle anywhere in G . <EoL>
<BoL> Node classification by Harmonic functionBuild propagation matrix of Harmonic functionBuild base matrix of Harmonic function <EoL>
<BoL> Get and return information of labels from the input graph <EoL>
<BoL> Create and return zero matrix <EoL>
<BoL> Predict labels by learnt label matrix <EoL>
<BoL> Propagate labels by one step <EoL>
<BoL> Fixture for nose tests . <EoL>
<BoL> Build propagation matrix of Local and global consistencyBuild base matrix of Local and global consistency <EoL>
<BoL> Fixture for nose tests . <EoL>
<BoL> Return the small-world coefficient ( omega ) of a graph <EoL>
<BoL> Returns the specified power of a graph . <EoL>
<BoL> Return the rooted product of graphs G and H rooted at root in H . <EoL>
<BoL> r '' '' '' Return the strong product of G and H . <EoL>
<BoL> r '' '' '' Return the tensor product of G and H . <EoL>
<BoL> Return the reverse directed graph of G . <EoL>
<BoL> Parameters : Parameters : Parameters : <EoL>
<BoL> Compute the reciprocity for the whole graph . <EoL>
<BoL> Return the lowest lowpoint of a conflict pair <EoL>
<BoL> Swap left and right intervals <EoL>
<BoL> Return True if interval I conflicts with edge b <EoL>
<BoL> Return a copy of this interval <EoL>
<BoL> Check if the interval is empty <EoL>
<BoL> Completes the embedding . <EoL>
<BoL> Recursive version of : meth : ` dfs_embedding ` . <EoL>
<BoL> Orient the graph by DFS , compute lowpoints and nesting order . <EoL>
<BoL> Recursive version of : meth : ` dfs_orientation ` . <EoL>
<BoL> Test for LR partition . <EoL>
<BoL> Recursive version of : meth : ` dfs_testing ` . <EoL>
<BoL> Execute the LR planarity test . <EoL>
<BoL> Recursive version of : meth : ` lr_planarity ` . <EoL>
<BoL> Resolve the relative side of an edge to the absolute side . <EoL>
<BoL> Recursive version of : meth : ` sign ` . <EoL>
<BoL> Recursive version of : meth : ` check_planarity ` . <EoL>
<BoL> Obtains a Kuratowski subgraph . <EoL>
<BoL> Recursive version of : meth : ` get_counterexample ` . <EoL>
<BoL> Returns the element on top of the stack . <EoL>
<BoL> Returns dict of predecessors for the path from source to all nodes in G <EoL>
<BoL> Compute a random graph by swapping edges of a given graph . <EoL>
<BoL> Compute the reciprocity in a directed graph . <EoL>
<BoL> r '' '' '' Returns the rich-club coefficient of the graph ` G ` . <EoL>
<BoL> Returns the rich-club coefficient for each degree in the graph <EoL>
<BoL> Return the s-metric of graph . <EoL>
<BoL> Compute shortest paths and lengths in a weighted graph G . <EoL>
<BoL> Compute shortest path between source and all other reachable <EoL>
<BoL> Compute the shortest path length between source and all other <EoL>
<BoL> Find shortest weighted paths in G from a source node . <EoL>
<BoL> Compute shortest path between source <EoL>
<BoL> Compute the shortest path lengths from source to all reachable nodes . <EoL>
<BoL> Compute shortest path to target from all nodes that reach target . <EoL>
<BoL> Compute the shortest path lengths to target from all reachable nodes . <EoL>
<BoL> Bidirectional shortest path helper . <EoL>
<BoL> Returns shortest paths <EoL>
<BoL> Yields ( node , level ) in a breadth first search <EoL>
<BoL> Returns a function that returns the weight of an edge . <EoL>
<BoL> Generate all simple paths in the graph G from source to target , <EoL>
<BoL> Return the small-world coefficient ( sigma ) of the given graph . <EoL>
<BoL> Fixture for nose tests . <EoL>
<BoL> Bidirectional shortest path helper . <EoL>
<BoL> Returns a spanner of the given graph with the given stretch . <EoL>
<BoL> Add the edge { u , v } to the spanner H and take weight from <EoL>
<BoL> Find the lightest edge to each cluster . <EoL>
<BoL> Setup residual graph as a copy of G with unique edges weights . <EoL>
<BoL> Returns the sum of the weights of the edge from ` u ` to ` v ` and <EoL>
<BoL> Returns normalized mutual weight of the edges from ` u ` to ` v ` <EoL>
<BoL> Returns a nested tuple representation of the given tree.Recursively compute the nested tuple representation of the <EoL>
<BoL> r '' '' '' Returns the Prüfer sequence of the given tree . <EoL>
<BoL> Returns a Hamiltonian path in the given tournament graph . <EoL>
<BoL> Returns the index of the first element in ` iterable ` that <EoL>
<BoL> Decides whether there is a path from ` s ` to ` t ` in theReturns the set of nodes at distance at most two from ` v ` .Decides whether the given set of nodes is closed . <EoL>
<BoL> Decides whether the given tournament is strongly connected . <EoL>
<BoL> Returns True if and only if ` G ` is a tournament . <EoL>
<BoL> r '' '' '' Returns a random tournament graph on ` n ` nodes . <EoL>
<BoL> Returns the score sequence for the given tournament graph . <EoL>
<BoL> r '' '' '' Returns the tournament matrix for the given tournament graph . <EoL>
<BoL> Find the edge directed toward v with maximal weight.Returns True if ` u ` is a root node in G . <EoL>
<BoL> Returns the total weight of a branching . <EoL>
<BoL> Key is now required . <EoL>
<BoL> Returns the edge keys of the unique path between u and v . <EoL>
<BoL> Returns a branching obtained through a greedy algorithm . <EoL>
<BoL> Returns the optimum ( minimum or maximum ) edge on the edge <EoL>
<BoL> Determines the triadic census of a directed graph . <EoL>
<BoL> Returns the integer code of the given triad . <EoL>
<BoL> Returns the Voronoi cells centered at ` center_nodes ` with respect <EoL>
<BoL> Returns the Wiener index of the given graph . <EoL>
<BoL> Returns all of the neighbors of a node in the graph . <EoL>
<BoL> Sequentially read the file containing the edge list data for the <EoL>
<BoL> Returns graph number ` i ` from the Graph Atlas . <EoL>
<BoL> Return the list of all graphs with up to seven nodes named in the <EoL>
<BoL> Returns a function that returns a value from G [ u ] [ v ] . <EoL>
<BoL> Returns a function that returns a value from G.nodes [ u ] . <EoL>
<BoL> Return the perfectly balanced ` r ` -ary tree of height ` h ` . <EoL>
<BoL> Returns a random graph according to the Barabási–Albert preferential <EoL>
<BoL> Return the Barbell Graph : two complete graphs connected by a path . <EoL>
<BoL> Returns a $ G_ { n , p } $ random graph , also known as an Erdős-Rényi graph <EoL>
<BoL> Return the Bull graph . <EoL>
<BoL> Returns a caveman graph of ` l ` cliques of size ` k ` . <EoL>
<BoL> Return the chordal cycle graph on ` p ` nodes . <EoL>
<BoL> Return the Chvátal graph . <EoL>
<BoL> Generates the circulant graph $ Ci_n ( x_1 , x_2 , ... , x_m ) $ with $ n $ vertices . <EoL>
<BoL> Return the circular ladder graph $ CL_n $ of length n . <EoL>
<BoL> Return the common neighbors of two nodes in a graph . <EoL>
<BoL> Return a copy of the graph G with all of the edges removed . <EoL>
<BoL> Return a degree view of single node or of nbunch of nodes . <EoL>
<BoL> Return a list of the frequency of each degree value . <EoL>
<BoL> Returns a view of the subgraph induced by the specified edges . <EoL>
<BoL> Return an edge view of edges incident to nodes in nbunch . <EoL>
<BoL> Modify graph to prevent further change by adding or removing <EoL>
<BoL> Dummy method for raising errors when trying to modify frozen graphs <EoL>
<BoL> Get edge attributes from graph <EoL>
<BoL> Get node attributes from graph <EoL>
<BoL> Return a SubGraph view of ` G ` showing only nodes in nbunch . <EoL>
<BoL> Print short summary of information for the graph G or the node n . <EoL>
<BoL> Return True if graph is directed . <EoL>
<BoL> Returns True if ` G ` has no edges . <EoL>
<BoL> Return True if graph is frozen . <EoL>
<BoL> Returns True if ` G ` has negatively weighted edges . <EoL>
<BoL> Returns True if ` G ` has weighted edges . <EoL>
<BoL> Return a list of nodes connected to node n . <EoL>
<BoL> Return an iterator over the graph nodes . <EoL>
<BoL> Returns an iterator over nodes with self loops . <EoL>
<BoL> Returns the non-existent edges in the graph . <EoL>
<BoL> Returns the non-neighbors of the node in the graph . <EoL>
<BoL> Return the number of edges in the graph . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Return the number of selfloop edges . <EoL>
<BoL> Returns a view of ` G ` with hidden nodes and edges . <EoL>
<BoL> Provide a reverse view of the digraph with edges reversed . <EoL>
<BoL> Returns an iterator over selfloop edges . <EoL>
<BoL> Sets edge attributes from a given value or dictionary of values . <EoL>
<BoL> Sets node attributes from a given value or dictionary of values . <EoL>
<BoL> Return the subgraph induced on nodes in nbunch . <EoL>
<BoL> Return a directed view of the graph ` graph ` . <EoL>
<BoL> Return an undirected view of the graph ` graph ` . <EoL>
<BoL> Return the complete graph ` K_n ` with n nodes . <EoL>
<BoL> Returns the complete multipartite graph with the specified subset sizes . <EoL>
<BoL> Return the cycle graph $ C_n $ of cyclically connected nodes . <EoL>
<BoL> Return the hierarchically constructed Dorogovtsev-Goltsev-Mendes graph . <EoL>
<BoL> Return the empty graph with n nodes and zero edges . <EoL>
<BoL> Creates a full r-ary tree of n vertices . <EoL>
<BoL> Return the Ladder graph of length n . <EoL>
<BoL> Return the Lollipop Graph ; ` K_m ` connected to ` P_n ` . <EoL>
<BoL> Return the Null graph with no nodes or edges . <EoL>
<BoL> Return the Path graph ` P_n ` of linearly connected nodes . <EoL>
<BoL> Return the star graph <EoL>
<BoL> Return the Trivial graph with one node ( with label 0 ) and no edges . <EoL>
<BoL> r '' '' '' Return the Turan Graph <EoL>
<BoL> Return the wheel graph <EoL>
<BoL> Return a random graph with the given degree sequence . <EoL>
<BoL> Returns a connected caveman graph of ` l ` cliques of size ` k ` . <EoL>
<BoL> Returns a connected Watts–Strogatz small-world graph . <EoL>
<BoL> Return a graph from a dictionary of dictionaries . <EoL>
<BoL> Return a graph from a dictionary of lists . <EoL>
<BoL> Return a graph from a list of edges . <EoL>
<BoL> Return adjacency representation of graph as a dictionary of dictionaries . <EoL>
<BoL> Return adjacency representation of graph as a dictionary of lists . <EoL>
<BoL> Return a list of edges in the graph . <EoL>
<BoL> Make a NetworkX graph from a known data structure . <EoL>
<BoL> Converts a SciPy sparse matrix in **Coordinate** format to an iterable <EoL>
<BoL> Converts a SciPy sparse matrix in **Compressed Sparse Column** format to <EoL>
<BoL> Converts a SciPy sparse matrix in **Compressed Sparse Row** format to <EoL>
<BoL> Converts a SciPy sparse matrix in **Dictionary of Keys** format to an <EoL>
<BoL> Return a graph from NumPy array . <EoL>
<BoL> Return a graph from numpy matrix . <EoL>
<BoL> r '' '' '' Return a graph from Pandas DataFrame . <EoL>
<BoL> Return the graph adjacency matrix as a NumPy recarray . <EoL>
<BoL> Return the 3-regular Platonic Cubical graph . <EoL>
<BoL> Return data in Cytoscape JSON format ( cyjs ) . <EoL>
<BoL> Return Davis Southern women social network . <EoL>
<BoL> Returns True if and only if an arbitrary remaining node can <EoL>
<BoL> Returns a list of degree-repeated node numbers . <EoL>
<BoL> Make a tree for the given degree sequence . <EoL>
<BoL> r '' '' '' Return a random graph with given expected degrees . <EoL>
<BoL> Return a simple graph with given degree sequence constructed <EoL>
<BoL> r '' '' '' Return a simple random graph with the given degree sequence . <EoL>
<BoL> Returns a $ G_ { n , m } $ random graph . <EoL>
<BoL> Return the Desargues graph . <EoL>
<BoL> Return the Diamond graph . <EoL>
<BoL> Return the growing network ( GN ) digraph with ` n ` nodes . <EoL>
<BoL> Return the growing network with copying ( GNC ) digraph with ` n ` nodes . <EoL>
<BoL> Return the growing network with redirection ( GNR ) digraph with ` n ` <EoL>
<BoL> Returns a random ` k ` -out graph with preferential attachment . <EoL>
<BoL> Return the directed modularity matrix of G . <EoL>
<BoL> Return the Platonic Dodecahedral graph . <EoL>
<BoL> Draw the graph G with Matplotlib . <EoL>
<BoL> Draw the graph G with a circular layout . <EoL>
<BoL> Draw the graph G with a Kamada-Kawai force-directed layout . <EoL>
<BoL> Draw the graph G using Matplotlib . <EoL>
<BoL> Draw the graph G with a random layout . <EoL>
<BoL> Draw networkx graph with shell layout . <EoL>
<BoL> Draw the graph G with a spectral layout . <EoL>
<BoL> Draw the graph G with a spring layout . <EoL>
<BoL> Position nodes uniformly at random in the unit square . <EoL>
<BoL> Return scaled position array to ( -scale , scale ) in all axes . <EoL>
<BoL> Position nodes in concentric circles . <EoL>
<BoL> Position nodes using the eigenvectors of the graph Laplacian . <EoL>
<BoL> Internal function to display a graph in OS dependent manner . <EoL>
<BoL> Return a NetworkX Graph or DiGraph from a PyGraphviz graph . <EoL>
<BoL> Create node positions for G using Graphviz . <EoL>
<BoL> Create node positions for G using Graphviz . <EoL>
<BoL> Return a NetworkX graph from a dot file on path . <EoL>
<BoL> Return a pygraphviz graph from a NetworkX graph N . <EoL>
<BoL> Write NetworkX graph G to Graphviz dot format on path . <EoL>
<BoL> Import and return the ` pydot ` module if the currently installed version of <EoL>
<BoL> Return a NetworkX graph from a Pydot graph . <EoL>
<BoL> Return the charset that the user is likely using , <EoL>
<BoL> Create node positions using Pydot and Graphviz . <EoL>
<BoL> Create node positions using : mod : ` pydot ` and Graphviz . <EoL>
<BoL> Return a NetworkX : class : ` MultiGraph ` or : class : ` MultiDiGraph ` from the <EoL>
<BoL> Return a pydot graph from a NetworkX graph N . <EoL>
<BoL> Write NetworkX graph G to Graphviz dot format on path . <EoL>
<BoL> Apply an alpha ( or list of alphas ) to the colors provided . <EoL>
<BoL> Returns an undirected graph using the duplication-divergence model . <EoL>
<BoL> Return a random graph using the partial duplication model . <EoL>
<BoL> Generate a single line of the graph G in edge list format . <EoL>
<BoL> Returns induced subgraph of neighbors centered at node n within <EoL>
<BoL> Return the Margulis-Gabber-Galil undirected MultiGraph on ` n^2 ` nodes . <EoL>
<BoL> Returns an extended Barabási–Albert model graph . <EoL>
<BoL> Returns a $ G_ { n , p } $ random graph , also known as an Erdős-Rényi graph or <EoL>
<BoL> Return Florentine families graph . <EoL>
<BoL> Read a simple undirected graph in graph6 format from string.Return sequence of individual bits from 6-bit-per-value <EoL>
<BoL> Read an undirected graph in sparse6 format from string.Return stream of pairs b [ i ] , x [ i ] for sparse6 format . <EoL>
<BoL> Return the Frucht Graph . <EoL>
<BoL> Return a random intersection graph with independent probabilities <EoL>
<BoL> Generate lines of GEXF format representation of G . <EoL>
<BoL> r '' '' '' Generate a single entry of the graph ` G ` in GML format . <EoL>
<BoL> Generate GraphML lines for G <EoL>
<BoL> Generate a single line of the graph G in multiline adjacency list format . <EoL>
<BoL> Generate lines in Pajek graph format . <EoL>
<BoL> Return the planted l-partition graph . <EoL>
<BoL> Return the random partition graph with a partition of sizes . <EoL>
<BoL> Return a relaxed caveman graph . <EoL>
<BoL> Defines a `` ring of cliques '' graph . <EoL>
<BoL> Generate a windmill graph . <EoL>
<BoL> Returns edge list of node pairs within ` radius ` of each other <EoL>
<BoL> Returns edge list of node pairs within ` radius ` of each other <EoL>
<BoL> Returns the Euclidean distance between the vectors `` x `` and `` y `` . <EoL>
<BoL> r '' '' '' Return a navigable small-world graph . <EoL>
<BoL> Returns a random geometric graph in the unit cube of dimensions ` dim ` . <EoL>
<BoL> Returns a $ G_ { n , m } $ random graph . <EoL>
<BoL> Returns the two-dimensional grid graph . <EoL>
<BoL> Returns the *n*-dimensional grid graph . <EoL>
<BoL> Return the Heawood graph , a ( 3,6 ) cage . <EoL>
<BoL> Return the Hoffman-Singleton Graph . <EoL>
<BoL> Return the House graph ( square with triangle on top ) . <EoL>
<BoL> Return the House graph with a cross inside the house square . <EoL>
<BoL> Returns the *n*-dimensional hypercube graph . <EoL>
<BoL> Return the Platonic Icosahedral graph . <EoL>
<BoL> Return a intersection graph with randomly chosen attribute sets for <EoL>
<BoL> Return a uniform random intersection graph . <EoL>
<BoL> Returns the inverse line graph of graph G . <EoL>
<BoL> Checks whether the given joint degree dictionary is realizable <EoL>
<BoL> Generates a random simple graph with the given joint degree dictionary . <EoL>
<BoL> Releases one free stub for saturated node `` w `` , while preserving <EoL>
<BoL> Return Zachary 's Karate Club graph.\ <EoL>
<BoL> Return the Krackhardt Kite Social Network . <EoL>
<BoL> Relabel the nodes of the graph G . <EoL>
<BoL> Returns the edges from G , handling keys for multigraphs as necessary . <EoL>
<BoL> Find a partition of the vertices of G into cells of complete graphs <EoL>
<BoL> Return the line graph L of the ( multi ) digraph G . <EoL>
<BoL> Return the line graph L of the ( multi ) graph G . <EoL>
<BoL> Returns a function which returns a sorted node for line graphs . <EoL>
<BoL> Test whether T is an odd triangle in G <EoL>
<BoL> Select a cell to initiate _find_partition <EoL>
<BoL> Returns a sorted edge . <EoL>
<BoL> Return list of all triangles containing edge e <EoL>
<BoL> Returns the line graph of the graph or digraph ` G ` . <EoL>
<BoL> Return the small graph described by graph_description . <EoL>
<BoL> Return the Moebius-Kantor graph . <EoL>
<BoL> Generator for the n_th Mycielski Graph . <EoL>
<BoL> r '' '' '' Returns the Mycielskian of a simple , undirected graph G <EoL>
<BoL> Return a Newman–Watts–Strogatz small-world graph . <EoL>
<BoL> Returns a list of nonisomporphic trees <EoL>
<BoL> Returns the number of nonisomorphic trees <EoL>
<BoL> Return the Platonic Octahedral graph . <EoL>
<BoL> Return the Pappus graph . <EoL>
<BoL> Return the Petersen graph . <EoL>
<BoL> Holme and Kim algorithm for growing graphs with powerlaw <EoL>
<BoL> Creates a directed prefix tree from the given list of iterables.Recursively create a trie from the given list of paths . <EoL>
<BoL> r '' '' '' Generate a random graph with the given joint independent edge degree and <EoL>
<BoL> Return m unique elements from seq . <EoL>
<BoL> r '' '' '' Return an random graph based on the specified kernel . <EoL>
<BoL> Returns a random lobster graph . <EoL>
<BoL> Returns a tree with a power law degree distribution . <EoL>
<BoL> Returns a degree sequence for a tree with a power law distribution . <EoL>
<BoL> r '' '' '' Returns a random $ d $ -regular graph on $ n $ nodes . <EoL>
<BoL> Returns a random shell graph for the constructor given . <EoL>
<BoL> Return a Watts–Strogatz small-world graph . <EoL>
<BoL> Returns a uniformly random tree on ` n ` nodes . <EoL>
<BoL> Return a small maze with a cycle . <EoL>
<BoL> Return a small undirected graph described by graph_description . <EoL>
<BoL> Return the 3-regular Platonic Tetrahedral graph . <EoL>
<BoL> Return the skeleton of the truncated cube . <EoL>
<BoL> Return the skeleton of the truncated Platonic tetrahedron . <EoL>
<BoL> Return the Tutte graph . <EoL>
<BoL> Return a random simple graph with spectrum resembling that of ` G ` <EoL>
<BoL> Returns a right-stochastic representation of directed graph ` G ` . <EoL>
<BoL> Returns the triad graph with the given name . <EoL>
<BoL> Replace root element of this tree . <EoL>
<BoL> Find first matching element by tag name or path . <EoL>
<BoL> Find all matching subelements by tag name or path . <EoL>
<BoL> Find first matching element by tag name or path . <EoL>
<BoL> Return root element of this tree . <EoL>
<BoL> Create and return tree iterator for the root element . <EoL>
<BoL> Find all matching subelements by tag name or path . <EoL>
<BoL> Load external XML document into element tree . <EoL>
<BoL> Read graph in GEXF format from path . <EoL>
<BoL> Relabel graph using `` label '' node keyword for node label . <EoL>
<BoL> Write G in GEXF format to path . <EoL>
<BoL> Use XML character references to escape characters . <EoL>
<BoL> Convert a Python literal to the value it represents . <EoL>
<BoL> Safely evaluate an expression node or a string containing a Python <EoL>
<BoL> Convert a ` value ` to a Python literal in GML representation . <EoL>
<BoL> Parse GML graph from a string or iterable . <EoL>
<BoL> Parse GML ` lines ` into a graph . <EoL>
<BoL> Read graph in GML format from ` path ` . <EoL>
<BoL> Replace XML character references with the referenced characters <EoL>
<BoL> Write a graph ` G ` in GML format to the file or file handle ` path ` . <EoL>
<BoL> Read graph object in Python pickle format . <EoL>
<BoL> Write graph in Python pickle format . <EoL>
<BoL> Yield bytes in the graph6 encoding of a graph . <EoL>
<BoL> Read initial one- , four- or eight-unit value from graph6 <EoL>
<BoL> Convert an integer to one- , four- or eight-unit graph6 sequence . <EoL>
<BoL> Read simple undirected graphs in graph6 format from path . <EoL>
<BoL> Convert a simple undirected graph to bytes in graph6 format . <EoL>
<BoL> Write a simple undirected graph to a path in graph6 format . <EoL>
<BoL> Write a simple undirected graph to a file-like object in graph6 format . <EoL>
<BoL> Appends attribute data . <EoL>
<BoL> Serialize graph G in GraphML to the stream . <EoL>
<BoL> Parse XML document from string constant . <EoL>
<BoL> Read graph in GraphML format from string . <EoL>
<BoL> Read graph in GraphML format from path . <EoL>
<BoL> Return data in JIT JSON format . <EoL>
<BoL> Read a graph from JIT JSON . <EoL>
<BoL> Return data in node-link format that is suitable for JSON serialization <EoL>
<BoL> Return graph from node-link data format . <EoL>
<BoL> Return data in tree format that is suitable for JSON serialization <EoL>
<BoL> Return graph from tree data format . <EoL>
<BoL> Return the Laplacian matrix of G . <EoL>
<BoL> Return eigenvalues of the Laplacian of G <EoL>
<BoL> r '' '' '' Return the normalized Laplacian matrix of G . <EoL>
<BoL> Read graph in LEDA format from string or iterable . <EoL>
<BoL> Read graph in LEDA format from path . <EoL>
<BoL> Return the modularity matrix of G . <EoL>
<BoL> Return eigenvalues of the modularity matrix of G . <EoL>
<BoL> Generate edges for each line in geom <EoL>
<BoL> Generates a networkx.DiGraph from shapefiles . Point geometries are <EoL>
<BoL> Writes a networkx.DiGraph to two shapefiles , edges and nodes . <EoL>
<BoL> Read graph in YAML format from path . <EoL>
<BoL> Write graph G in YAML format to path . <EoL>
<BoL> Return the string representation of t . <EoL>
<BoL> Parse Pajek format graph from string or iterable . <EoL>
<BoL> Read graph in Pajek format from path . <EoL>
<BoL> Write graph in Pajek format to path . <EoL>
<BoL> Read an undirected graph in sparse6 format from path . <EoL>
<BoL> Yield bytes in the sparse6 encoding of a graph.Big endian k-bit encoding of x <EoL>
<BoL> Convert an undirected graph to bytes in sparse6 format . <EoL>
<BoL> Write graph G to given path in sparse6 format . <EoL>
<BoL> Returns revision and vcs information , dynamically obtained . <EoL>
<BoL> Creates a static file containing version information . '' '' '' <EoL>
<BoL> Run NetworkX tests . <EoL>
<BoL> decorator ( caller ) converts a caller function into a decorator <EoL>
<BoL> Decorator for inheriting docstrings from base classes . <EoL>
<BoL> The numpy array interface . <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> Provide method name lookup and completion <EoL>
<BoL> Return an item . <EoL>
<BoL> Returns an Iterator over the values of this Categorical . <EoL>
<BoL> The length of this Categorical . <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> Item assignment . <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Generates the total memory usage for an object that returns <EoL>
<BoL> Return a string representation for a particular Object <EoL>
<BoL> Unicode representation . <EoL>
<BoL> Code the categories to ensure we can groupby for categoricals . <EoL>
<BoL> add additional __dir__ for this object <EoL>
<BoL> delete unwanted __dir__ for this object <EoL>
<BoL> Get the codes . <EoL>
<BoL> return an indexer coerced to the codes dtype <EoL>
<BoL> return the base repr for the categories <EoL>
<BoL> Returns a string representation of the footer . <EoL>
<BoL> Reset cached properties . If `` key `` is passed , only clears that key . <EoL>
<BoL> Compute the inverse of a categorical , returning <EoL>
<BoL> Sets new categories inplace <EoL>
<BoL> Not settable by the user directly <EoL>
<BoL> Internal method for directly updating the CategoricalDtype <EoL>
<BoL> Return a slice of myself . <EoL>
<BoL> a short repr displaying only max_vals and an optional ( but default <EoL>
<BoL> For correctly ranking ordered categorical data . See GH # 15420 <EoL>
<BoL> Add new categories . <EoL>
<BoL> Sets the Categorical to be ordered <EoL>
<BoL> Sets the Categorical to be unordered <EoL>
<BoL> Coerce this type to another dtype <EoL>
<BoL> assert that we are ordered <EoL>
<BoL> Copy constructor . <EoL>
<BoL> Describes this Categorical <EoL>
<BoL> Return the Categorical without null values . <EoL>
<BoL> Returns True if categorical arrays are equal . <EoL>
<BoL> Fill NA/NaN values using the specified method . <EoL>
<BoL> Make a Categorical type from codes and categories arrays . <EoL>
<BoL> Return the values . <EoL>
<BoL> Returns True if categoricals are the same dtype <EoL>
<BoL> Check whether ` values ` are contained in Categorical . <EoL>
<BoL> Detect missing values <EoL>
<BoL> Map categories using input correspondence ( dict , Series , or function ) . <EoL>
<BoL> The maximum value of the object . <EoL>
<BoL> Memory usage of my values <EoL>
<BoL> The minimum value of the object . <EoL>
<BoL> Returns the mode ( s ) of the Categorical . <EoL>
<BoL> Inverse of isna <EoL>
<BoL> Replace specific elements in the Categorical with given values . <EoL>
<BoL> Return a flattened ( numpy ) array . <EoL>
<BoL> Removes the specified categories . <EoL>
<BoL> Removes categories which are not used . <EoL>
<BoL> Renames categories . <EoL>
<BoL> Reorders categories as specified in new_categories . <EoL>
<BoL> Repeat elements of a Categorical . <EoL>
<BoL> Sets the ordered attribute to the boolean value <EoL>
<BoL> Shift Categorical by desired number of periods . <EoL>
<BoL> Sorts the Categorical by category value returning a new <EoL>
<BoL> Take elements from the Categorical . <EoL>
<BoL> Return my 'dense ' representation <EoL>
<BoL> Return a list of the values . <EoL>
<BoL> Return the `` Categorical `` which `` categories `` and `` codes `` are <EoL>
<BoL> Returns a Series containing counts of each category . <EoL>
<BoL> Return a view of myself . <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Gets called after a ufunc <EoL>
<BoL> Override numpy.ndarray 's __getitem__ method to work as desired . <EoL>
<BoL> Return an iterator of the values . <EoL>
<BoL> return the length of the Index <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Return a string representation for this object . <EoL>
<BoL> add in Categorical accessor methods <EoL>
<BoL> add in comparison methods <EoL>
<BoL> add in logical methods % ( desc ) s <EoL>
<BoL> add in logical methods to disable <EoL>
<BoL> add in the numeric add/sub methods to disable <EoL>
<BoL> add in numeric methods <EoL>
<BoL> add in numeric methods to disable other than add/sub <EoL>
<BoL> add in numeric unary methods <EoL>
<BoL> Check value is valid for scalar op <EoL>
<BoL> Faster check for `` name in self `` when we know ` name ` is a Python <EoL>
<BoL> always allow reindexing <EoL>
<BoL> Return a Categorical adjusted for groupby <EoL>
<BoL> we need to coerce a scalar to a compat for our index type <EoL>
<BoL> coerces data to ndarray , raises on scalar data . Converts other <EoL>
<BoL> Concatenate to_concat which has the same class <EoL>
<BoL> Convert value to be insertable to ndarray <EoL>
<BoL> Parameters <EoL>
<BoL> .. versionadded : : 0.19.0 <EoL>
<BoL> method delegation to the ._values <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> Return the formatted data as a unicode string <EoL>
<BoL> actually format my specific types <EoL>
<BoL> return an attributes dict for my class <EoL>
<BoL> Given 2 indexes , give a consensus name meaning <EoL>
<BoL> Fallback pad/backfill get_indexer that works for monotonic decreasing <EoL>
<BoL> Return an Index of values for requested level , equal to the length <EoL>
<BoL> This is overridden on subclasses ( namely , IntervalIndex ) to control <EoL>
<BoL> Get the indexer for the nearest index labels ; requires an index with <EoL>
<BoL> Returns an index containing unique values . <EoL>
<BoL> consistent invalid indexer message <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> return a boolean if we need a qualified .info display <EoL>
<BoL> returns sorter for the inner most level while preserving the <EoL>
<BoL> An internal function that maps values using the input <EoL>
<BoL> If we have a float key and are not a floating index <EoL>
<BoL> Update Index attributes ( e.g . freq ) depending on op <EoL>
<BoL> reindex from a non-unique ; which CategoricalIndex 's are almost <EoL>
<BoL> Initializes or resets `` _id `` attribute with new object <EoL>
<BoL> Set new names on index . Each name has to be a hashable type . <EoL>
<BoL> create a new Index inferring the class with passed value , do n't copy <EoL>
<BoL> compat with MultiIndex <EoL>
<BoL> Return a summarized representation <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> convert to object if we are a categorical <EoL>
<BoL> Attempt to convert an array of data into an integer index . <EoL>
<BoL> return valid other , evaluate or raise TypeError <EoL>
<BoL> validate if we can perform a numeric unary operation <EoL>
<BoL> Validate index level . <EoL>
<BoL> if we are positional indexer <EoL>
<BoL> Handles the quirks of having a singular 'name ' parameter for general <EoL>
<BoL> Append a collection of Index options together <EoL>
<BoL> return a ndarray of the maximum argument indexer <EoL>
<BoL> return a ndarray of the minimum argument indexer <EoL>
<BoL> For a sorted index , return the most recent label up to and including <EoL>
<BoL> where : array of timestamps <EoL>
<BoL> Make new Index with passed location ( -s ) deleted <EoL>
<BoL> Return a new Index with elements from the index that are not in <EoL>
<BoL> Make new Index with passed list of labels deleted <EoL>
<BoL> Return Index with duplicate values removed . <EoL>
<BoL> Determines if two CategorialIndex objects contain the same elements . <EoL>
<BoL> Render a string representation of the Index <EoL>
<BoL> Extract duplicated index elements . <EoL>
<BoL> guaranteed return of an indexer even when non-unique <EoL>
<BoL> Get integer location , slice or boolean mask for requested label . <EoL>
<BoL> Calculate slice bound that corresponds to given label . <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you <EoL>
<BoL> return the underlying data as an ndarray <EoL>
<BoL> Group the index labels by a given array of values . <EoL>
<BoL> Similar to equals , but check that other comparable attributes are <EoL>
<BoL> Make new Index inserting new item at location . Follows <EoL>
<BoL> Form the intersection of two Index objects . <EoL>
<BoL> More flexible , faster check like `` is `` but that works through views <EoL>
<BoL> Check if the Index holds categorical data . <EoL>
<BoL> Return a boolean array where the index values are in ` values ` . <EoL>
<BoL> Detect missing values . <EoL>
<BoL> return the first element of the underlying data as a python <EoL>
<BoL> Map values using input correspondence ( a dict , Series , or function ) . <EoL>
<BoL> Detect existing ( non-missing ) values . <EoL>
<BoL> Return number of unique elements in the object . <EoL>
<BoL> return a new Index of the values set with the mask <EoL>
<BoL> return an ndarray of the flattened values of the underlying data <EoL>
<BoL> Set new names on index . Defaults to returning new index . <EoL>
<BoL> Repeat elements of an Index . <EoL>
<BoL> Set new names on index . Defaults to returning new index . <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you <EoL>
<BoL> Shift index by desired number of time frequency increments . <EoL>
<BoL> For an ordered or unique index , compute the slice indexer for input <EoL>
<BoL> Compute slice locations for input labels . <EoL>
<BoL> Return a sorted copy of the index . <EoL>
<BoL> For internal compatibility with with the Index API <EoL>
<BoL> Return a summarized representation <EoL>
<BoL> Compute the symmetric difference of two Index objects . <EoL>
<BoL> Create a DataFrame with a column containing the Index . <EoL>
<BoL> Format specified values of ` self ` and return them . <EoL>
<BoL> Create a Series with both index and values equal to the index keys <EoL>
<BoL> return the transpose , which is by definition self <EoL>
<BoL> Form the union of two Index objects and sorts if possible . <EoL>
<BoL> True if the key is in the info axis <EoL>
<BoL> Delete item <EoL>
<BoL> Propagate metadata from other to self . <EoL>
<BoL> After regular attribute access , try looking up the name <EoL>
<BoL> Iterate over infor axis <EoL>
<BoL> Returns length of info axis , but here we use the index <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> After regular attribute access , try setting the name <EoL>
<BoL> Return a string representation for a particular DataFrame <EoL>
<BoL> Add the operations to the cls ; evaluate the doc strings again <EoL>
<BoL> Add the series only operations to the cls ; evaluate the doc <EoL>
<BoL> Add the series or dataframe only operations to the cls ; evaluate <EoL>
<BoL> provide an implementation for the aggregatorsaggregate a 1-dim with howaggregate a 2-dim with howrun the aggregations over the arg with func <EoL>
<BoL> provide boxed values for a column <EoL>
<BoL> check whether we allow in-place setting with this type of value <EoL>
<BoL> Check if we are a view , have a cacher , and are of mixed type . <EoL>
<BoL> Check whether ` key ` matches both a level of the input ` axis ` and a <EoL>
<BoL> Validate percentiles ( used by describe and quantile ) . <EoL>
<BoL> Parameters <EoL>
<BoL> Compute NDFrame with `` consolidated '' internals ( data of each dtype <EoL>
<BoL> Consolidate data in place and return None <EoL>
<BoL> Return an axes dictionary for myself . <EoL>
<BoL> Return an axes dictionary for myself . <EoL>
<BoL> Return an axes dictionary for the passed axes . <EoL>
<BoL> Construct and returns axes if supplied in args/kwargs . <EoL>
<BoL> Create an indexer like _name in the class . <EoL>
<BoL> add the string-like attributes from the info_axis . <EoL>
<BoL> Drop labels from specified axis . Used in the `` drop `` method <EoL>
<BoL> Drop labels and/or levels for the given ` axis ` . <EoL>
<BoL> ensure that if we do n't have an index , that we can create one from the <EoL>
<BoL> Retrieves the index of the first valid value . <EoL>
<BoL> let 's be explicit about this <EoL>
<BoL> Map the axis to the block_manager axis . <EoL>
<BoL> return my cacher or None <EoL>
<BoL> Return the cached item , item represents a label indexer . <EoL>
<BoL> Return a 1-D array of values associated with ` key ` , a label or level <EoL>
<BoL> return the actual column <EoL>
<BoL> Return the cached item , item represents a positional indexer . <EoL>
<BoL> True if the repr should show the info view . <EoL>
<BoL> Segregate Series based on type and coerce into matrices . <EoL>
<BoL> passed a manager and a axes dict <EoL>
<BoL> if we define an builtin function for this argument , return it , <EoL>
<BoL> if we define an internal function for this argument , return it <EoL>
<BoL> Test whether a key is a label or level reference for a given axis . <EoL>
<BoL> Test whether a key is a label reference for a given axis . <EoL>
<BoL> Test whether a key is a level reference for a given axis . <EoL>
<BoL> i : int , slice , or sequence of integersNotesNotes <EoL>
<BoL> The object has called back to us saying maybe it has changed . <EoL>
<BoL> See if we need to update our parent cacher if clear , then clear our <EoL>
<BoL> Check if we do need a multi reindex . <EoL>
<BoL> Consolidate _data -- if the blocks have changed , then clear the <EoL>
<BoL> we are guaranteed non-Nones in the axes ! <EoL>
<BoL> Not a real Jupyter special repr method , but we use the same <EoL>
<BoL> Check if full repr fits in horizontal boundaries imposed by the display <EoL>
<BoL> Check length against max_rows . <EoL>
<BoL> Return a html representation for a particular DataFrame . <EoL>
<BoL> Returns a LaTeX representation for a particular object . <EoL>
<BoL> Reset the cacher . <EoL>
<BoL> Ensures new columns ( which go into the BlockManager as new blocks ) are <EoL>
<BoL> Set the _cacher attribute on the calling object with a weakref to <EoL>
<BoL> Alter the name or names of the axis . <EoL>
<BoL> Add series to DataFrame in specified column . <EoL>
<BoL> return a new object with the replacement attributes <EoL>
<BoL> Construct a slice of this container . <EoL>
<BoL> Return a dict of dtype - > Constructor Types that <EoL>
<BoL> if arg is a string , then try to operate on it : <EoL>
<BoL> Replace self internals with result . <EoL>
<BoL> validate the passed dtype <EoL>
<BoL> Returns a cross-section ( row ( s ) or column ( s ) ) from the <EoL>
<BoL> Return a Series/DataFrame with absolute numeric value of each element . <EoL>
<BoL> Prefix labels with string ` prefix ` . <EoL>
<BoL> Suffix labels with string ` suffix ` . <EoL>
<BoL> Apply a function to a Dataframe elementwise . <EoL>
<BoL> Convert the frame to a dict of dtype - > Constructor Types that each has <EoL>
<BoL> Convert the frame to its Numpy-array representation . <EoL>
<BoL> The last row without any NaN is taken ( or the last row without <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Cast a pandas object to a specified dtype `` dtype `` . <EoL>
<BoL> Select values at particular time of day ( e.g . 9:30AM ) . <EoL>
<BoL> Synonym for : meth : ` DataFrame.fillna ( method='bfill ' ) < DataFrame.fillna > ` <EoL>
<BoL> Return the bool of a single element PandasObject . <EoL>
<BoL> Return copy of the input with values below a threshold truncated . <EoL>
<BoL> Return copy of input with values above given value ( s ) truncated . <EoL>
<BoL> Add two DataFrame objects and do not propagate NaN values , so if for a <EoL>
<BoL> Combine two DataFrame objects and default to non-null values in frame <EoL>
<BoL> Compute NDFrame with `` consolidated '' internals ( data of each dtype <EoL>
<BoL> Make a copy of this object 's indices and data . <EoL>
<BoL> Compute pairwise correlation of columns , excluding NA/null values <EoL>
<BoL> Compute pairwise correlation between rows or columns of two DataFrame <EoL>
<BoL> Count non-NA cells for each column or row . <EoL>
<BoL> Compute pairwise covariance of columns , excluding NA/null values . <EoL>
<BoL> Generates descriptive statistics that summarize the central tendency , <EoL>
<BoL> First discrete difference of element . <EoL>
<BoL> Matrix multiplication with DataFrame or Series objects . Can also be <EoL>
<BoL> Return DataFrame with duplicate rows removed , optionally only <EoL>
<BoL> Return boolean Series denoting duplicate rows , optionally only <EoL>
<BoL> Determines if two NDFrame objects contain the same elements . NaNs in <EoL>
<BoL> Evaluate a string describing operations on DataFrame columns . <EoL>
<BoL> Synonym for : meth : ` DataFrame.fillna ( method='ffill ' ) < DataFrame.fillna > ` <EoL>
<BoL> Subset rows or columns of dataframe according to labels in <EoL>
<BoL> Convenience method for subsetting initial periods of time series data <EoL>
<BoL> Construct DataFrame from dict of array-like or dicts . <EoL>
<BoL> Construct a dataframe from a list of tuples <EoL>
<BoL> Get item from object for given key ( DataFrame column , Panel slice , <EoL>
<BoL> Return counts of unique dtypes in this object . <EoL>
<BoL> Return counts of unique ftypes in this object . <EoL>
<BoL> Quickly retrieve single value at passed column and index <EoL>
<BoL> Return an ndarray after converting sparse values to dense . <EoL>
<BoL> Return the first ` n ` rows . <EoL>
<BoL> Return index of first occurrence of maximum over requested axis . <EoL>
<BoL> Return index of first occurrence of minimum over requested axis . <EoL>
<BoL> Attempt to infer better dtypes for object columns . <EoL>
<BoL> Insert column into DataFrame at specified location . <EoL>
<BoL> Return boolean DataFrame showing whether each element in the <EoL>
<BoL> Iterator over ( column name , Series ) pairs . <EoL>
<BoL> Iterate over DataFrame rows as ( index , Series ) pairs . <EoL>
<BoL> Iterate over DataFrame rows as namedtuples , with index value as first <EoL>
<BoL> Get the 'info axis ' ( see Indexing for more ) <EoL>
<BoL> Convenience method for subsetting final periods of time series data <EoL>
<BoL> Label-based `` fancy indexing '' function for DataFrame . <EoL>
<BoL> Return the memory usage of each column in bytes . <EoL>
<BoL> Gets the mode ( s ) of each element along the axis selected . Adds a row <EoL>
<BoL> Return the first ` n ` rows ordered by ` columns ` in descending order . <EoL>
<BoL> Get the rows of a DataFrame sorted by the ` n ` smallest <EoL>
<BoL> Return Series with number of distinct observations over requested <EoL>
<BoL> Return reshaped DataFrame organized by given index / column values . <EoL>
<BoL> Return item and drop from frame . Raise KeyError if not found . <EoL>
<BoL> Query the columns of a frame with a boolean expression . <EoL>
<BoL> Alter axes labels . <EoL>
<BoL> Alter the name of the index or columns . <EoL>
<BoL> Rearrange index levels using input order . <EoL>
<BoL> Round a DataFrame to a variable number of decimal places . <EoL>
<BoL> Return data corresponding to axis labels matching criteria <EoL>
<BoL> Return a subset of the DataFrame 's columns based on the column dtypes . <EoL>
<BoL> Assign desired index to given axis . <EoL>
<BoL> Put single value at passed column and index <EoL>
<BoL> Equivalent to ` shift ` without copying data . The shifted data will <EoL>
<BoL> Squeeze length 1 dimensions . <EoL>
<BoL> Stack the prescribed level ( s ) from columns to index . <EoL>
<BoL> Interchange axes and swap values axes appropriately <EoL>
<BoL> Swap levels i and j in a MultiIndex on a particular axis <EoL>
<BoL> Return the last ` n ` rows . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return dense representation of NDFrame ( as opposed to sparse ) <EoL>
<BoL> Convert the DataFrame to a dictionary . <EoL>
<BoL> write out the binary feather-format for DataFrames <EoL>
<BoL> Write the contained data to an HDF5 file using HDFStore . <EoL>
<BoL> msgpack ( serialize ) object to input file path <EoL>
<BoL> Transform long ( stacked ) format ( DataFrame ) into wide ( 3D , Panel ) <EoL>
<BoL> Convert DataFrame from DatetimeIndex to PeriodIndex with desired <EoL>
<BoL> Convert DataFrame to a NumPy record array . <EoL>
<BoL> Convert to SparseDataFrame <EoL>
<BoL> Cast to DatetimeIndex of timestamps , at *beginning* of period <EoL>
<BoL> Return an xarray object from the pandas object . <EoL>
<BoL> Transpose index and columns . <EoL>
<BoL> Truncate a Series or DataFrame before and after some index value . <EoL>
<BoL> Shift the time index , using the index 's frequency if available . <EoL>
<BoL> Convert tz-aware axis to target time zone . <EoL>
<BoL> Pivot a level of the ( necessarily hierarchical ) index labels , returning <EoL>
<BoL> Reconstruct an instance from a pickled state <EoL>
<BoL> Roll provided date backward to next offset only if not on offset <EoL>
<BoL> Roll provided date forward to next offset only if not on offset <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> This getitem defers to the underlying array , which by-definition can <EoL>
<BoL> Return an iterator over the boxed values <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> add in comparison methods <EoL>
<BoL> add in the datetimelike methods ( as we may have to override the <EoL>
<BoL> Add a timedelta-like , DateOffset , or TimedeltaIndex-like object <EoL>
<BoL> Add a delta of a timedeltalike <EoL>
<BoL> Add a delta of a TimedeltaIndex <EoL>
<BoL> Add pd.NaT to self <EoL>
<BoL> Add or subtract array-like of DateOffset objects <EoL>
<BoL> Ensure incoming data can be represented as ints . <EoL>
<BoL> apply box func to passed values <EoL>
<BoL> return object Index which contains boxed values <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> Concatenate to_concat which has the same class <EoL>
<BoL> Convert value to be insertable to ndarray <EoL>
<BoL> we do n't allow integer or float indexing on datetime-like when using <EoL>
<BoL> ensure that we are re-localized <EoL>
<BoL> We have been called because a comparison between <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> If label is a string , cast it to datetime according to resolution . <EoL>
<BoL> Parameters <EoL>
<BoL> Update Index attributes ( e.g . freq ) depending on op <EoL>
<BoL> Return Index or ndarray filled with NaT which has the same <EoL>
<BoL> Calculate datetime bounds for parsed time string and its resolution . <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> subtraction of two DatetimeIndexes <EoL>
<BoL> Subtract pd.NaT from self <EoL>
<BoL> Return a summarized representation <EoL>
<BoL> return an array repr of this object , potentially casting to object <EoL>
<BoL> convert to object if we are a categorical <EoL>
<BoL> Validate that a frequency is compatible with the values of a given <EoL>
<BoL> Returns the indices of the maximum values along an axis . <EoL>
<BoL> Returns the indices of the minimum values along an axis . <EoL>
<BoL> Return the integer indicies that would sort the index . <EoL>
<BoL> Return the day names of the DateTimeIndex with specified locale . <EoL>
<BoL> Make a new DatetimeIndex with passed location ( s ) deleted . <EoL>
<BoL> Indicate duplicate index values . <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> Get integer location for requested label <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you <EoL>
<BoL> Return ` Index ` data as an ` numpy.ndarray ` . <EoL>
<BoL> Returns index locations of index values at particular time of day <EoL>
<BoL> Make new Index inserting new item at location <EoL>
<BoL> Specialized intersection for DatetimeIndex objects . May be much faster <EoL>
<BoL> Compute boolean array of whether each index value is found in the <EoL>
<BoL> Return the maximum value of the Index or maximum along <EoL>
<BoL> Return the minimum value of the Index or minimum along <EoL>
<BoL> Return the month names of the DateTimeIndex with specified locale . <EoL>
<BoL> Convert times to midnight . <EoL>
<BoL> Analogous to ndarray.repeat <EoL>
<BoL> Specialized shift which produces a DatetimeIndex <EoL>
<BoL> Return indexer for specified label slice . <EoL>
<BoL> Snap time stamps to nearest occurring frequency <EoL>
<BoL> Return sorted copy of Index <EoL>
<BoL> Convert DatetimeIndex to Float64Index of Julian Dates . <EoL>
<BoL> Cast to PeriodIndex at a particular frequency . <EoL>
<BoL> Calculate TimedeltaIndex of difference between index <EoL>
<BoL> Return DatetimeIndex as object ndarray of datetime.datetime objects <EoL>
<BoL> Create a Series with both index and values equal to the index keys <EoL>
<BoL> return a list of the underlying data <EoL>
<BoL> Convert tz-aware DatetimeIndex from one time zone to another . <EoL>
<BoL> Localize tz-naive DatetimeIndex to tz-aware DatetimeIndex . <EoL>
<BoL> Specialized union for DatetimeIndex objects . If combine <EoL>
<BoL> A bit of a hack to accelerate unioning a collection of indexes <EoL>
<BoL> converts the contents of the cell into a pandas <EoL>
<BoL> Convert comma separated list of column names and column ranges to a <EoL>
<BoL> close io if necessary <EoL>
<BoL> Convert numpy types to Python types for the Excel writers . <EoL>
<BoL> checks that path 's extension against the Writer 's supported <EoL>
<BoL> synonym for save , to make it more file-like <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> add in comparison methods <EoL>
<BoL> Subclasses need to override this only if the process of casting data <EoL>
<BoL> Convert value to be insertable to ndarray <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> we require the we have a dtype compat for the values <EoL>
<BoL> Make new Index with passed location ( -s ) deleted <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> we always want to get an index value , never a value <EoL>
<BoL> Make new Index inserting new item at location . Follows <EoL>
<BoL> Map values using input correspondence ( a dict , Series , or function ) . <EoL>
<BoL> Return the maximum value of the Index . <EoL>
<BoL> Return the minimum value of the Index . <EoL>
<BoL> Return a list of the values . <EoL>
<BoL> Parameters <EoL>
<BoL> given an object and the specifications , setup the internal grouper <EoL>
<BoL> check for existence of this key <EoL>
<BoL> allow attribute access to get stores <EoL>
<BoL> validate / deprecate formats ; return the new kwargs <EoL>
<BoL> Close the PyTables file handle <EoL>
<BoL> Create a pytables index on the table <EoL>
<BoL> Force all buffered modifications to be written to disk . <EoL>
<BoL> Retrieve pandas object stored in file <EoL>
<BoL> return the node with the key or None if it does not exist <EoL>
<BoL> return the storer object for a key , raise if not in the file <EoL>
<BoL> return a list of all the top-level nodes ( that are not themselves a <EoL>
<BoL> print detailed information on the store <EoL>
<BoL> iterate on key- > group <EoL>
<BoL> Return a ( potentially unordered ) list of the keys corresponding to the <EoL>
<BoL> Open the file in the specified mode <EoL>
<BoL> Store object in HDFStore <EoL>
<BoL> Remove pandas object partially by specifying the where condition <EoL>
<BoL> return a single column from the table . This is generally only useful to <EoL>
<BoL> Concatenate to_concat which has the same class <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> return a boolean if this key is IN the index <EoL>
<BoL> assert that we all have the same .closed <EoL>
<BoL> we are passed a list-like indexer . Return the <EoL>
<BoL> actually format my specific types <EoL>
<BoL> Return an indexer for a target IntervalIndex with self <EoL>
<BoL> we need to cast the key , which could be a scalar <EoL>
<BoL> Verify that the IntervalIndex is valid . <EoL>
<BoL> Return a boolean indicating if the key is IN the index <EoL>
<BoL> Return a new IntervalIndex with passed location ( -s ) deleted <EoL>
<BoL> Determines if two IntervalIndex objects contain the same elements <EoL>
<BoL> Get integer location , slice or boolean mask for requested label . <EoL>
<BoL> Return a new IntervalIndex inserting new item at location . Follows <EoL>
<BoL> Return an Index of tuples of the form ( left , right ) <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Parameters <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> we categorizing our labels by using the <EoL>
<BoL> Return vector of label values for requested level , <EoL>
<BoL> validate and return the hash for the provided key <EoL>
<BoL> return a boolean if we need a qualified .info display <EoL>
<BoL> return the number of bytes in the underlying data <EoL>
<BoL> Returns True if the name refered to in self.names is duplicated . <EoL>
<BoL> Set new names on index . Each name has to be a hashable type . <EoL>
<BoL> .. versionadded : : 0.20.0 <EoL>
<BoL> convert to object if we are a categorical <EoL>
<BoL> Parameters <EoL>
<BoL> Append a collection of Index options together <EoL>
<BoL> Make new index with passed location deleted <EoL>
<BoL> Compute sorted set difference of two MultiIndex objects <EoL>
<BoL> Make new MultiIndex with passed list of labels deleted <EoL>
<BoL> Return Index with requested level removed . If MultiIndex has only 2 <EoL>
<BoL> Return True if the levels of both MultiIndex objects are the same <EoL>
<BoL> Determines if two MultiIndex objects have the same labeling information <EoL>
<BoL> fillna is not implemented for MultiIndex <EoL>
<BoL> Convert arrays to MultiIndex <EoL>
<BoL> Make a MultiIndex from the cartesian product of multiple iterables <EoL>
<BoL> Convert list of tuples to MultiIndex <EoL>
<BoL> Return vector of label values for requested level , <EoL>
<BoL> Get location for a label or a tuple of labels as an integer , slice orconvert integer indexer to boolean mask or slice if possible <EoL>
<BoL> Get both the location for the requested label ( s ) and the <EoL>
<BoL> Get location for a given label/slice/list/mask or a sequence of such as <EoL>
<BoL> For an ordered MultiIndex , compute the slice locations for input <EoL>
<BoL> Make new MultiIndex inserting new item at location <EoL>
<BoL> Form the intersection of two MultiIndex objects , sorting if possible <EoL>
<BoL> Return True if the labels are lexicographically sorted <EoL>
<BoL> create a new MultiIndex from the current that removing <EoL>
<BoL> Rearrange levels using input order . May not drop or duplicate levels <EoL>
<BoL> Sort MultiIndex at the requested level . The result will respect the <EoL>
<BoL> Swap level i with level j . <EoL>
<BoL> Create a DataFrame with the levels of the MultiIndex as columns . <EoL>
<BoL> Return a MultiIndex reshaped to conform to the <EoL>
<BoL> Slice index between two labels / tuples , return new MultiIndex <EoL>
<BoL> Form the union of two MultiIndex objects , sorting if possible <EoL>
<BoL> this is defined as a copy with the same identity <EoL>
<BoL> Returns length of info axis <EoL>
<BoL> Return a string representation for a particular Panel <EoL>
<BoL> handle 2-d slices , equiv to iterating over the other axis <EoL>
<BoL> return the type for the ndim of the result <EoL>
<BoL> return a list of the axis indicies <EoL>
<BoL> return the slice dictionary for these axes <EoL>
<BoL> Get my plane axes indexes : these are already <EoL>
<BoL> Get my plane axes indexes : these are already <EoL>
<BoL> sub-classes to define <EoL>
<BoL> Conform set of _constructor_sliced-like objects to either <EoL>
<BoL> Generate ND initialization ; axes are passed <EoL>
<BoL> i : int , slice , or sequence of integers <EoL>
<BoL> do n't allow a multi reindex on Panel or above ndim <EoL>
<BoL> Return slice of panel along selected axis <EoL>
<BoL> Applies function along axis ( or axes ) of the Panel <EoL>
<BoL> Conform input DataFrame to align with chosen axis pair . <EoL>
<BoL> Return number of observations over requested axis . <EoL>
<BoL> Drop 2D from panel , holding passed axis constant <EoL>
<BoL> Construct Panel from dict of DataFrame objects <EoL>
<BoL> Quickly retrieve single value at ( item , major , minor ) location <EoL>
<BoL> Group data on given axis , returning GroupBy object <EoL>
<BoL> Iterate over ( label , values ) on info axis <EoL>
<BoL> Join items with other Panel either on major and minor axes column <EoL>
<BoL> Return slice of panel along major axis <EoL>
<BoL> Return slice of panel along minor axis <EoL>
<BoL> Round each value in Panel to a specified number of decimal places . <EoL>
<BoL> Quickly set single value at ( item , major , minor ) location <EoL>
<BoL> Shift index by desired number of periods with an optional time freq . <EoL>
<BoL> Swap levels i and j in a MultiIndex on a particular axis <EoL>
<BoL> Write each DataFrame in Panel to a separate excel sheet <EoL>
<BoL> Transform wide format into long ( stacked ) format as DataFrame whose <EoL>
<BoL> NOT IMPLEMENTED : do not call this method , as sparsifying is not <EoL>
<BoL> Gets called after a ufunc . Needs additional handling as <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> add in comparison methods <EoL>
<BoL> we need to coerce a scalar to a compat for our index type <EoL>
<BoL> Values should be int ordinals <EoL>
<BoL> wrap Index._get_unique_index to handle NaT <EoL>
<BoL> create the join wrapper methods <EoL>
<BoL> If label is a string or a datetime , cast it to Period.ordinal according <EoL>
<BoL> we always want to return a PeriodIndex <EoL>
<BoL> Values can be any type that can be coerced to Periods . <EoL>
<BoL> return an array repr of this object , potentially casting to object <EoL>
<BoL> Convert the PeriodIndex to the specified frequency ` freq ` . <EoL>
<BoL> where : array of timestamps <EoL>
<BoL> Get integer location for requested label <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you <EoL>
<BoL> Specialized shift which produces an PeriodIndex <EoL>
<BoL> Cast to DatetimeIndex <EoL>
<BoL> Convert tz-aware DatetimeIndex from one time zone to another ( using <EoL>
<BoL> Localize tz-naive DatetimeIndex to given time zone ( using <EoL>
<BoL> Conserve RangeIndex type for scalar and slice keys . <EoL>
<BoL> return the length of the RangeIndex <EoL>
<BoL> add in numeric methods , specialized to RangeIndexParameters <EoL>
<BoL> Extended Euclidean algorithms to solve Bezout 's identity : <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> return a list of tuples of start , stop , step <EoL>
<BoL> Returns the largest element smaller than or equal to the limit <EoL>
<BoL> Returns the smallest element greater than or equal to the limit <EoL>
<BoL> require dtype to be None or int64 <EoL>
<BoL> Returns the indices that would sort the index and its <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> create RangeIndex from a range ( py3 ) , or xrange ( py2 ) object <EoL>
<BoL> Form the intersection of two Index objects . Sortedness of the result is <EoL>
<BoL> The maximum value of the RangeIndex <EoL>
<BoL> Memory usage of my values <EoL>
<BoL> The minimum value of the RangeIndex <EoL>
<BoL> Form the union of two Index objects and sorts if possible <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Gets called prior to a ufunc <EoL>
<BoL> Gets called after a ufunc <EoL>
<BoL> return the length of the Series <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> Return a string representation for a particular DataFrame <EoL>
<BoL> Perform generic binary operation with optional fill value <EoL>
<BoL> Return the values that can be formatted ( used by SeriesFormatter <EoL>
<BoL> sub-classes to define <EoL>
<BoL> Derive the `` _data '' and `` index '' attributes of a new Series from a <EoL>
<BoL> Return the i-th value or values in the Series by location <EoL>
<BoL> check if we do need a multi reindex ; this is for compat with <EoL>
<BoL> override generic , we want to set the _typ here <EoL>
<BoL> Set the Series name . <EoL>
<BoL> Concatenate two or more Series . <EoL>
<BoL> Invoke function on values of Series . Can be ufunc ( a NumPy function <EoL>
<BoL> Return the row label of the maximum value . <EoL>
<BoL> Return the row label of the minimum value . <EoL>
<BoL> Overrides ndarray.argsort . Argsorts the value , omitting NA/null values , <EoL>
<BoL> Lag-N autocorrelation <EoL>
<BoL> Return boolean Series equivalent to left < = series < = right . <EoL>
<BoL> Perform elementwise binary operation on two Series using given function <EoL>
<BoL> Combine Series values , choosing the calling Series 's values <EoL>
<BoL> Return selected slices of an array along given axis as a Series <EoL>
<BoL> Compute correlation with ` other ` Series , excluding missing values <EoL>
<BoL> Return number of non-NA/null observations in the Series <EoL>
<BoL> Compute covariance with Series , excluding missing values <EoL>
<BoL> First discrete difference of element . <EoL>
<BoL> Matrix multiplication with DataFrame or inner-product with Series <EoL>
<BoL> Return Series with duplicate values removed . <EoL>
<BoL> Return a new Series with missing values removed . <EoL>
<BoL> Indicate duplicate Series values . <EoL>
<BoL> Quickly retrieve single value at passed index label <EoL>
<BoL> same as values ( but handles sparseness conversions ) ; is a view <EoL>
<BoL> Check whether ` values ` are contained in Series . <EoL>
<BoL> Lazily iterate over ( index , value ) tuples <EoL>
<BoL> Alias for index <EoL>
<BoL> Map values of Series using input correspondence ( a dict , Series , or <EoL>
<BoL> Return the memory usage of the Series . <EoL>
<BoL> Return the mode ( s ) of the dataset . <EoL>
<BoL> Return the largest ` n ` elements . <EoL>
<BoL> Return the *integer* indices of the elements that are non-zero <EoL>
<BoL> Return the smallest ` n ` elements . <EoL>
<BoL> Applies the ` put ` method to its ` values ` attribute <EoL>
<BoL> Return value at the given quantile , a la numpy.percentile . <EoL>
<BoL> Return the flattened underlying data as an ndarray <EoL>
<BoL> Conform Series to new index with optional filling logic . <EoL>
<BoL> Alter Series index labels or name <EoL>
<BoL> Rearrange index levels using input order . May not drop or duplicate <EoL>
<BoL> Repeat elements of an Series . Refer to ` numpy.ndarray.repeat ` <EoL>
<BoL> Generate a new DataFrame or Series with the index reset . <EoL>
<BoL> Round each value in a Series to the given number of decimals . <EoL>
<BoL> Quickly set single value at passed label . If label is not contained , <EoL>
<BoL> Sort Series with MultiIndex by chosen level . Data will be <EoL>
<BoL> Swap levels i and j in a MultiIndex <EoL>
<BoL> Convert Series to { label - > value } dict or dict-like object . <EoL>
<BoL> Convert Series to DataFrame <EoL>
<BoL> Convert Series from DatetimeIndex to PeriodIndex with desired <EoL>
<BoL> Convert Series to SparseSeries <EoL>
<BoL> Cast to datetimeindex of timestamps , at *beginning* of period <EoL>
<BoL> Return unique values of Series object . <EoL>
<BoL> Unstack , a.k.a . pivot , Series with MultiIndex to produce DataFrame . <EoL>
<BoL> Modify Series in place using non-NA values from passed <EoL>
<BoL> Return Series without null values . <EoL>
<BoL> Create a new view of the Series . <EoL>
<BoL> Gets called after any ufunc or other array operations , necessary <EoL>
<BoL> NumPy calls this method when ufunc is applied <EoL>
<BoL> <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Tests whether all elements evaluate True <EoL>
<BoL> Tests whether at least one of elements evaluate True <EoL>
<BoL> Make a copy of the SparseArray . Only the actual sparse values need to <EoL>
<BoL> Compute sum of non-NA/null observations in SparseArray . If the <EoL>
<BoL> Cumulative sum of non-NA/null values . <EoL>
<BoL> return a dense representation <EoL>
<BoL> Mean of non-NA/null values <EoL>
<BoL> Sum of non-NA/null values <EoL>
<BoL> Convert SparseArray to a NumPy array . <EoL>
<BoL> Returns a Series containing counts of unique values . <EoL>
<BoL> Retrieve column or slice from DataFrame <EoL>
<BoL> get new SparseDataFrame applying func to each columns <EoL>
<BoL> Init self from ndarray or list of lists <EoL>
<BoL> Creates a new SparseArray from the input value . <EoL>
<BoL> original pickle format <EoL>
<BoL> Apply a function to a DataFrame that is intended to operate <EoL>
<BoL> Make a copy of this SparseDataFrame <EoL>
<BoL> Return SparseDataFrame of cumulative sums over requested axis . <EoL>
<BoL> Quickly retrieve single value at passed column and index <EoL>
<BoL> Put single value at passed column and index <EoL>
<BoL> Return the contents of the frame as a sparse SciPy COO matrix . <EoL>
<BoL> Convert to dense DataFrame <EoL>
<BoL> Returns a DataFrame with the rows/columns switched . <EoL>
<BoL> Returns a row ( cross-section ) from the SparseDataFrame as a Series <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Gets called after any ufunc or other array operations , necessary <EoL>
<BoL> Gets called prior to a ufunc ( and after ) <EoL>
<BoL> forward to the array <EoL>
<BoL> forward to the array <EoL>
<BoL> Return the i-th value or values in the SparseSeries by location <EoL>
<BoL> Return an object with absolute value taken . Only applicable to objects <EoL>
<BoL> return my self as a sparse array , do not copy by default <EoL>
<BoL> Combine Series values , choosing the calling Series 's values <EoL>
<BoL> Make a copy of the SparseSeries . Only the actual sparse values need to <EoL>
<BoL> Cumulative sum of non-NA/null values . <EoL>
<BoL> Analogous to Series.dropna . If fill_value=NaN , returns a dense Series <EoL>
<BoL> Create a SparseSeries from a scipy.sparse.coo_matrix . <EoL>
<BoL> Returns value occupying requested label , default to specified <EoL>
<BoL> Retrieve single value at passed index label <EoL>
<BoL> same as values <EoL>
<BoL> Quickly set single value at passed label . If label is not contained , a <EoL>
<BoL> Conform sparse values to new SparseIndex <EoL>
<BoL> Create a scipy.sparse.coo_matrix from a SparseSeries with MultiIndex . <EoL>
<BoL> Convert SparseSeries to a Series . <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> add in comparison methods <EoL>
<BoL> Add a timedelta-like , Tick , or TimedeltaIndex-like object <EoL>
<BoL> If label is a string , cast it to timedelta according to resolution . <EoL>
<BoL> Update Index attributes ( e.g . freq ) depending on op <EoL>
<BoL> Make a new TimedeltaIndex with passed location ( s ) deleted . <EoL>
<BoL> Get integer location for requested label <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you <EoL>
<BoL> Make new Index inserting new item at location <EoL>
<BoL> Specialized intersection for TimedeltaIndex objects . May be much faster <EoL>
<BoL> Return TimedeltaIndex as object ndarray of datetime.timedelta objects <EoL>
<BoL> Return total duration of each element expressed in seconds . <EoL>
<BoL> Specialized union for TimedeltaIndex objects . If combine <EoL>
<BoL> Ensure incoming data can be represented as uints . <EoL>
<BoL> Check whether the provided array or dtype is of a boolean dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the Categorical dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the datetime64 dtype . <EoL>
<BoL> Check whether the provided array or dtype is of a float dtype . <EoL>
<BoL> Check whether the provided array or dtype is of an integer dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the object dtype . <EoL>
<BoL> Converts input into a pandas only dtype object or a numpy dtype object . <EoL>
<BoL> Combine list-like of Categorical-like , unioning categories . All <EoL>
<BoL> True if two arrays , left and right , have equal non-NaN elements , and NaNs <EoL>
<BoL> Check if two dtypes are equal . <EoL>
<BoL> Detect missing values for an array-like object . <EoL>
<BoL> Determine the fold status of a `` wall '' datetime , given a representation <EoL>
<BoL> Given a timezone-aware datetime in a given timezone , calculates a <EoL>
<BoL> Set the time zone data of this object from a _tzfile object <EoL>
<BoL> The `` tzfile `` implementation of : py : func : ` datetime.tzinfo.fromutc ` . <EoL>
<BoL> Whether or not the `` wall time '' of a given datetime is ambiguous in this <EoL>
<BoL> Given a timezone-aware datetime in a given timezone , calculates a <EoL>
<BoL> Whether or not the `` wall time '' of a given datetime is ambiguous in this <EoL>
<BoL> Given a datetime in UTC , return local time <EoL>
<BoL> Whether or not the `` wall time '' of a given datetime is ambiguous in this <EoL>
<BoL> For a given year , get the DST on and off transition times , expressed <EoL>
<BoL> Fast track version of fromutc ( ) returns the original `` dt `` object for <EoL>
<BoL> Whether or not the `` wall time '' of a given datetime is ambiguous in this <EoL>
<BoL> This function breaks the time string into lexical units ( tokens ) , which <EoL>
<BoL> Whether the next character is part of a number <EoL>
<BoL> Whether the next character is whitespace <EoL>
<BoL> Whether or not the next character is part of a word <EoL>
<BoL> Parse a string in one of the supported formats , using the <EoL>
<BoL> Whether or not the `` wall time '' of a given datetime is ambiguous in this <EoL>
<BoL> Hash table-based unique . Uniques are returned in order <EoL>
<BoL> Specify whether to record warnings and if an alternative module <EoL>
<BoL> Iterate over elements of the array . <EoL>
<BoL> Length of this array <EoL>
<BoL> Reconstruct an ExtensionArray after factorization . <EoL>
<BoL> Construct a new ExtensionArray from a sequence of scalars . <EoL>
<BoL> Return the indices that would sort this array . <EoL>
<BoL> Cast to a NumPy array with 'dtype ' . <EoL>
<BoL> Fill NA/NaN values using the specified method . <EoL>
<BoL> Compute the ExtensionArray of unique values . <EoL>
<BoL> Check whether 'other ' is equal to self . <EoL>
<BoL> Attempt to construct this type from a string . <EoL>
<BoL> Check if we match 'dtype ' . <EoL>
<BoL> Take elements from an array . <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> Rules for CDT equality : <EoL>
<BoL> Return a string representation for a particular Object <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError if <EoL>
<BoL> clear the cache <EoL>
<BoL> Returns a CategoricalDtype with categories and ordered taken from dtype <EoL>
<BoL> Validates that we have good categories <EoL>
<BoL> Validates that we have a valid ordered parameter . If <EoL>
<BoL> Create a new unit if needed , otherwise return from the cache <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError if <EoL>
<BoL> Parameters <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError <EoL>
<BoL> Return a boolean if we if the passed type is an actual dtype that we <EoL>
<BoL> Parameters <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError <EoL>
<BoL> Return a boolean if we if the passed type is an actual dtype that we <EoL>
<BoL> Check if the object is array-like . <EoL>
<BoL> Check whether an array-like is a Categorical instance . <EoL>
<BoL> Check whether the provided array or dtype is of a complex dtype . <EoL>
<BoL> Check whether the provided array or dtype is of the datetime64 dtype . <EoL>
<BoL> Check whether the provided array or dtype is of the datetime64 [ ns ] dtype . <EoL>
<BoL> Check whether an array-like or dtype is of a DatetimeTZDtype dtype . <EoL>
<BoL> Check whether an array-like is a datetime array-like with a timezone <EoL>
<BoL> Check if the object is dict-like . <EoL>
<BoL> Check whether an array-like is of a pandas extension class instance . <EoL>
<BoL> Check if the object is a file-like object . <EoL>
<BoL> Return True if hash ( obj ) will succeed , False otherwise . <EoL>
<BoL> Check whether the provided array or dtype is of the int64 dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the Interval dtype . <EoL>
<BoL> Check if the object is an iterator . <EoL>
<BoL> Check if the object is list-like . <EoL>
<BoL> Check if the object is a named tuple . <EoL>
<BoL> Check if the object is a number . <EoL>
<BoL> Check whether the provided array or dtype is of a numeric dtype . <EoL>
<BoL> Check whether an array-like is a periodical index . <EoL>
<BoL> Check whether an array-like or dtype is of the Period dtype . <EoL>
<BoL> Check if the object is a regex pattern instance . <EoL>
<BoL> Check if the object can be compiled into a regex pattern instance . <EoL>
<BoL> Check whether the provided array or dtype is of a signed integer dtype . <EoL>
<BoL> Check whether an array-like is a pandas sparse array . <EoL>
<BoL> Check whether the provided array or dtype is of the string dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the timedelta64 dtype . <EoL>
<BoL> Check whether the provided array or dtype is of the timedelta64 [ ns ] dtype . <EoL>
<BoL> Check whether the provided array or dtype is of an unsigned integer dtype . <EoL>
<BoL> Initialize a ChainMap by setting *maps* to the given mappings . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Bind a method to class , python 2 and python 3 compatible . <EoL>
<BoL> New ChainMap with a new map followed by all previous maps . <EoL>
<BoL> Calculate display width considering unicode East Asian Width <EoL>
<BoL> Gets the start , stop , and step parameters from a range object <EoL>
<BoL> import lzma from the std library <EoL>
<BoL> am I little endian <EoL>
<BoL> If 'Series.argmax ' is called via the 'numpy ' library , <EoL>
<BoL> If 'Series.argmin ' is called via the 'numpy ' library , <EoL>
<BoL> Checks whether the length of the ` *args ` argument passed into a function <EoL>
<BoL> If 'Categorical.argsort ' is called via the 'numpy ' library , the <EoL>
<BoL> If 'NDFrame.clip ' is called via the numpy library , the third <EoL>
<BoL> If this function is called via the 'numpy ' library , the third <EoL>
<BoL> 'args ' and 'kwargs ' should be empty , except for allowed <EoL>
<BoL> Checks whether parameters passed to the **kwargs argument in a <EoL>
<BoL> 'args ' and 'kwargs ' should be empty because all of <EoL>
<BoL> If this function is called via the 'numpy ' library , the third <EoL>
<BoL> provide compat for construction of an array of strings to a <EoL>
<BoL> provide compat for construction of strings to numpy datetime64 's with <EoL>
<BoL> load a pickle , with a provided encoding <EoL>
<BoL> Bind the name/qualname attributes of the function <EoL>
<BoL> Convert bytes and non-string into Python 3 str <EoL>
<BoL> Helper function to determine if dtype is valid for <EoL>
<BoL> Helper function to concat ` current_indexer ` and ` other_indexer ` <EoL>
<BoL> In the case where the params is a mutable sequence ( list or dictionary ) <EoL>
<BoL> Update self.params with supplied args . <EoL>
<BoL> ensure that we are arraylike if not already <EoL>
<BoL> routine to ensure that our data is of the correct <EoL>
<BoL> Parameters <EoL>
<BoL> reverse of _ensure_data <EoL>
<BoL> Parameters <EoL>
<BoL> Perform array addition that checks for underflow and overflow.Helper function to broadcast arrays / scalars to the desired shape . <EoL>
<BoL> Transform any list-like object in a 1-dimensional numpy array of object <EoL>
<BoL> Decorator to deprecate a keyword argument of a function . <EoL>
<BoL> difference of n between self , <EoL>
<BoL> Return boolean ndarray denoting duplicate values . <EoL>
<BoL> Check if an object is a pandas extension array type . <EoL>
<BoL> Compute the isin boolean array <EoL>
<BoL> Compute locations of to_match into values <EoL>
<BoL> Returns the mode ( s ) of an array . <EoL>
<BoL> Return a dtype compat na value <EoL>
<BoL> Check whether the array or dtype should be converted to int64 . <EoL>
<BoL> Compute sample quantile or quantiles of the input array . For example , q=0.5Returns the point at the given fraction between a and b , where <EoL>
<BoL> Detect non-missing values for an array-like object . <EoL>
<BoL> Return a fixed frequency PeriodIndex , with day ( calendar ) as the default <EoL>
<BoL> Alter default behavior on how float is formatted in DataFrame . <EoL>
<BoL> Convert argument to a numeric type . <EoL>
<BoL> Convert argument to timedelta <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> Prevents setting additional attributes <EoL>
<BoL> Factorize an input ` values ` into ` categories ` and ` codes ` . Preserves <EoL>
<BoL> A higher-level wrapper over ` _factorize_from_iterable ` . <EoL>
<BoL> utility routine to turn values into codes given the specified categories <EoL>
<BoL> Coerce to a categorical if a series is given . <EoL>
<BoL> Convert a set of codes for to a new set of categories <EoL>
<BoL> coerce the indexer input array to the smallest dtype possible <EoL>
<BoL> Detect terminal size and return tuple = ( width , height ) . <EoL>
<BoL> Check whether an array-like is a datetime-like array-like . <EoL>
<BoL> Check if the object is a sequence of objects . <EoL>
<BoL> we might have a array ( or single object ) that is datetime like , <EoL>
<BoL> Ensures that argument passed in arg_name is of type bool . <EoL>
<BoL> Validate the keyword arguments to 'fillna ' . <EoL>
<BoL> dispatch to apply <EoL>
<BoL> sub-classes to define <EoL>
<BoL> Memory usage of the values <EoL>
<BoL> Returns a boolean indicating if all arguments are None <EoL>
<BoL> Returns a boolean indicating if all arguments are not None <EoL>
<BoL> Returns a boolean indicating if any argument is None <EoL>
<BoL> Returns a boolean indicating if any argument is not None <EoL>
<BoL> Evaluate possibly callable input using obj and kwargs if it is callable , <EoL>
<BoL> Returns the count of arguments that are not None <EoL>
<BoL> Helper function to convert datetimelike-keyed dicts to Timestamp-keyed dict <EoL>
<BoL> Return a list with distinct elements of `` objs '' ( different ids ) . <EoL>
<BoL> Slice the info axis of ` obj ` with ` indexer ` . <EoL>
<BoL> Transform label or iterable of labels to array , for use in Index . <EoL>
<BoL> Check if the object is an iterable but not a string . <EoL>
<BoL> Returns a generator consisting of the arguments that are not None <EoL>
<BoL> Apply a function `` func `` to object `` obj `` either by passing obj as the <EoL>
<BoL> Helper function for processing random_state arguments . <EoL>
<BoL> Flatten an arbitrarily nested sequence . <EoL>
<BoL> check if we 're running in an interactive shell <EoL>
<BoL> check if we 're inside an IPython Notebook <EoL>
<BoL> check if we 're inside an an IPython zmq frontend <EoL>
<BoL> check if we 're inside an IPython qtconsole <EoL>
<BoL> we have a full length slice <EoL>
<BoL> we have a null slice <EoL>
<BoL> Find non-trivial slices in `` l '' : return a list of booleans with same length . <EoL>
<BoL> Parameters <EoL>
<BoL> Returns a dictionary with ( element , index ) pairs for each element in the <EoL>
<BoL> Generates tuples of ranges which cover all True value in mask <EoL>
<BoL> Helper function to standardize a supplied mapping . <EoL>
<BoL> Align a set of terms <EoL>
<BoL> Check a sequence of terms for instances of PandasObject . <EoL>
<BoL> Reconstruct an object given its type , raw value , and possibly empty <EoL>
<BoL> wrapper around numpy.result_type which overcomes the NPY_MAXARGS ( 32 ) <EoL>
<BoL> if we have bytes , decode them to unicode <EoL>
<BoL> Return an evaluated expression . <EoL>
<BoL> Convert an expression for evaluation . <EoL>
<BoL> Run the engine on the expression <EoL>
<BoL> Attempt to prevent foot-shooting in a helpful way . <EoL>
<BoL> Make sure a valid engine is passed . <EoL>
<BoL> Make sure an expression is not an empty string <EoL>
<BoL> Make sure a valid parser is passed . <EoL>
<BoL> Convert an object to an expression . <EoL>
<BoL> Return a partial function with an Op subclass with an operator <EoL>
<BoL> support a single assignment node , like <EoL>
<BoL> in 3.5 the starargs attribute was changed to be more flexible , <EoL>
<BoL> df.index [ 4 ] <EoL>
<BoL> df.index [ slice ( 4,6 ) ] <EoL>
<BoL> Recursively evaluate an expression in Python space . <EoL>
<BoL> Print a generic n-ary operator and its operands using infix <EoL>
<BoL> Convert datetimes to a comparable value in an expression . <EoL>
<BoL> Evaluate a binary operation *before* being passed to the engine . <EoL>
<BoL> search order for local ( i.e. , @ variable ) variables : <EoL>
<BoL> Parse an expression <EoL>
<BoL> Get specifically scoped variables from a list of stack frames . <EoL>
<BoL> Add a temporary variable to the scope . <EoL>
<BoL> Resolve a variable name in a possibly local context <EoL>
<BoL> Replace a variable name , with a potentially new value . <EoL>
<BoL> Update the current scope by going back ` level ` levels . <EoL>
<BoL> Filter out AST nodes that are subclasses of `` superclass `` . <EoL>
<BoL> Factory for a type checking function of type `` t `` or tuple of types . <EoL>
<BoL> Return a function that raises a NotImplementedError with a passed node <EoL>
<BoL> Return a function to create an op class with its symbol already passed.Return a partial function with an Op subclass with an operator <EoL>
<BoL> Replace `` & `` with `` and `` and `` | `` with `` or `` so that bitwise <EoL>
<BoL> Replace local variables with a syntactically valid name . <EoL>
<BoL> Rewrite the assignment operator for PyTables expressions that use `` = `` <EoL>
<BoL> Decorator to add default implementation of ops . <EoL>
<BoL> Compose 2 or more callables <EoL>
<BoL> Decorator to disallow certain nodes from parsing . Raises a <EoL>
<BoL> Tokenize a Python source code string . <EoL>
<BoL> return a boolean if we WILL be using numexpr <EoL>
<BoL> standard evaluation <EoL>
<BoL> get test result and reset test_results <EoL>
<BoL> Keeps track of whether numexpr was used . Stores an additional `` True `` <EoL>
<BoL> evaluate the where condition cond on a and b <EoL>
<BoL> Cast an expression inplace . <EoL>
<BoL> Compute the vectorized membership of `` x in y `` if possible , otherwise <EoL>
<BoL> Compute the vectorized membership of `` x not in y `` if possible , <EoL>
<BoL> inplace conform rhs <EoL>
<BoL> convert the expression that is in the term to something that is <EoL>
<BoL> return the actual ne format <EoL>
<BoL> create and return the op string for this TermValue <EoL>
<BoL> invert the condition <EoL>
<BoL> create and return a new specialized BinOp from myself <EoL>
<BoL> return the actual filter format <EoL>
<BoL> invert the filter <EoL>
<BoL> quote the string if not encoded <EoL>
<BoL> Convert string 'r ' to a timedelta object . <EoL>
<BoL> Validate that the where statement is of the right type . <EoL>
<BoL> loose checking if s is a pytables-acceptable expression <EoL>
<BoL> Return a prettier version of obj <EoL>
<BoL> Return the padded hexadecimal id of `` obj `` . <EoL>
<BoL> Replace a number with its hexadecimal representation . Used to tag <EoL>
<BoL> Builds a formatted description of a registered option and prints it <EoL>
<BoL> Retrieves the metadata for a deprecated option , if ` key ` is deprecated . <EoL>
<BoL> Retrieves the option metadata if ` key ` is a registered option . <EoL>
<BoL> Returns True if the given option has been deprecated <EoL>
<BoL> returns a list of keys matching ` pat ` <EoL>
<BoL> if key id deprecated and a replacement key defined , will return the <EoL>
<BoL> Checks if ` key ` is a deprecated option and if so , prints a warning . <EoL>
<BoL> contextmanager for multiple invocations of API with a common prefix <EoL>
<BoL> Mark option ` key ` as deprecated , if code attempts to access this option , <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Builds a concise listing of available options , grouped by prefix <EoL>
<BoL> Register an option in the package-wide pandas config object <EoL>
<BoL> Try to find the most capable encoding supported by the console . <EoL>
<BoL> Detect if Python is running in a terminal . <EoL>
<BoL> return a view if copy is False , but <EoL>
<BoL> create np.ndarray of specified shape and dtype , filled with values <EoL>
<BoL> given a dtypes and a result set , coerce the result elements to the <EoL>
<BoL> create a np.ndarray / pandas type of specified shape and dtype <EoL>
<BoL> Construct a new ndarray , coercing ` values ` to ` dtype ` , preserving NA . <EoL>
<BoL> Find a common data type among the given dtypes . <EoL>
<BoL> interpret the dtype from a scalar or array . This is a convenience <EoL>
<BoL> infer the dtype from a scalar or array <EoL>
<BoL> interpret the dtype from a scalar <EoL>
<BoL> Change string like dtypes to object for <EoL>
<BoL> Check whether the provided array or dtype is of <EoL>
<BoL> return a boolean if we have a nested object , e.g . a Series with 1 or <EoL>
<BoL> try to cast the array/value to a datetimelike dtype , converting float <EoL>
<BoL> try to do platform conversion , allow ndarray or list here <EoL>
<BoL> Convert a python scalar to the appropriate numpy dtype if possible <EoL>
<BoL> Convert string-like and string-like array to convert object dtype . <EoL>
<BoL> try to cast to the specified dtype ( e.g . convert back to bool/int <EoL>
<BoL> Try to infer an object 's dtype , for use in arithmetic ops <EoL>
<BoL> provide explicit type promotion and coercion <EoL>
<BoL> A safe version of putmask that potentially upcasts the result <EoL>
<BoL> Coerce a string or np.dtype to a pandas or numpy <EoL>
<BoL> Ensure that an array-like object is a Categorical ( if not already ) . <EoL>
<BoL> Ensure that an array object has a float dtype if possible . <EoL>
<BoL> Get the dtype instance associated with an array <EoL>
<BoL> Get a numpy dtype.type-style object for a dtype object . <EoL>
<BoL> Get the type ( NOT dtype ) instance associated with <EoL>
<BoL> Check if the exception raised is an unorderable exception . <EoL>
<BoL> Check whether the dtype is a date-like dtype . Raises an error if invalid . <EoL>
<BoL> Check whether the provided array or dtype is of an integer dtype . <EoL>
<BoL> Check whether an array-like is a datetime array-like or DatetimeIndex . <EoL>
<BoL> Check if we are comparing a datetime-like object to a numeric object.Check if an object has a numeric dtype ( i.e . integer or float ) . <EoL>
<BoL> Check if we are comparing a datetime-like object to an object instance . <EoL>
<BoL> Check whether two arrays have compatible dtypes to do a union . <EoL>
<BoL> Check whether the provided array or dtype is an instance of <EoL>
<BoL> Check whether the provided array or dtype is of an <EoL>
<BoL> Check if the object is list-like , and that all of its elements <EoL>
<BoL> Check if we are comparing a string-like object to a numeric ndarray . <EoL>
<BoL> Check if obj or all elements of list-like is DateOffset <EoL>
<BoL> Check whether an array-like is a periodical array-like or PeriodIndex . <EoL>
<BoL> Check whether an array-like is a scipy.sparse.spmatrix instance . <EoL>
<BoL> Check if the object is a string . <EoL>
<BoL> Check whether the provided array or dtype is of a string-like dtype . <EoL>
<BoL> Concatenate an object/categorical array of arrays , each of which is a <EoL>
<BoL> provide concatenation of an array of arrays each of which is a single <EoL>
<BoL> provide concatenation of an datetimelike array of arrays each of which is a <EoL>
<BoL> concat DatetimeIndex with the same tz <EoL>
<BoL> concat all inputs as object . DatetimeIndex , TimedeltaIndex and <EoL>
<BoL> Concatenates multiple RangeIndex instances . All members of `` indexes '' must <EoL>
<BoL> provide concatenation of an sparse/dense array of arrays each of which is a <EoL>
<BoL> return appropriate class of DataFrame-like concat <EoL>
<BoL> return appropriate class of Series concat <EoL>
<BoL> return appropriate class of Series . When data is sparse <EoL>
<BoL> Parameters <EoL>
<BoL> infer the fill value for the nan/NaT from the provided <EoL>
<BoL> Parameters <EoL>
<BoL> Detect missing values . Treat None , NaN , INF , -INF as null . <EoL>
<BoL> if we have a compatible fill_value and arr dtype , then fill <EoL>
<BoL> Option change callback for na/inf behaviour <EoL>
<BoL> test whether the object is a null datelike , e.g . Nat <EoL>
<BoL> Return array-like containing only true/non-NaN values , possibly empty . <EoL>
<BoL> return a dict of the counts of the function in BlockManager <EoL>
<BoL> Return ndarray from blocks with specified item order <EoL>
<BoL> Check all axes except items <EoL>
<BoL> Update mgr._blknos / mgr._blklocs . <EoL>
<BoL> Slice/take blocks along axis=0 . <EoL>
<BoL> Convert the blockmanager data into an numpy array . <EoL>
<BoL> return a new manager with the blocks <EoL>
<BoL> Join together blocks having same dtype <EoL>
<BoL> Make deep or shallow copy of BlockManager <EoL>
<BoL> Delete selected item ( items if non-unique ) in-place . <EoL>
<BoL> get a cross sectional for a given location in the <EoL>
<BoL> Return values for selected item ( ndarray or BlockManager ) . <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Retrieve single item <EoL>
<BoL> Return the data as a SingleBlockManager if fastpath=True and possible <EoL>
<BoL> Insert item at selected position . <EoL>
<BoL> Return True if more than one block with the same dtype <EoL>
<BoL> return an empty BlockManager with the items axis of len 0 <EoL>
<BoL> Rename one of axes . <EoL>
<BoL> a 2d-nd reshape operation on a BlockManager <EoL>
<BoL> Set new item in-place . Does not consolidate . Adds new Block if not <EoL>
<BoL> Take items along any axis . <EoL>
<BoL> Return a dict of str ( dtype ) - > BlockManager <EoL>
<BoL> Return a blockmanager with all blocks unstacked . <EoL>
<BoL> Segregate Series based on type and coerce into matrices . <EoL>
<BoL> Ensure that we have an index from some index-like object <EoL>
<BoL> Construct an index from sequences of data . <EoL>
<BoL> extract from a masked rec array and create the manager <EoL>
<BoL> Return list of arrays , columns <EoL>
<BoL> if we are index sliceable , then return my slicer , otherwise return None <EoL>
<BoL> Argument handler for mixed index , columns / axis functions <EoL>
<BoL> Checks whether the frame should be truncated . If so , slices <EoL>
<BoL> Render a DataFrame to a list of columns ( as lists of strings ) . <EoL>
<BoL> Render a DataFrame to a html table . <EoL>
<BoL> Render a DataFrame to a console-friendly tabular output . <EoL>
<BoL> convert rhs to meet lhs dims if input is list , tuple or np.ndarray <EoL>
<BoL> Return a tuple of the doc parms . <EoL>
<BoL> Parameters <EoL>
<BoL> require integer args ( and convert to label arguments ) <EoL>
<BoL> convert a range argument <EoL>
<BoL> Convert indexing key into something we can use to do actual fancy <EoL>
<BoL> validate that an positional indexer can not enlarge its target <EoL>
<BoL> check the key for valid keys across my indexer <EoL>
<BoL> create the reindex map for our objects , raise the _exception if we <EoL>
<BoL> return True if we have an equal len settable <EoL>
<BoL> Ensure that key is valid for current indexer . <EoL>
<BoL> Check that indexer can be used to return a result ( e.g . at least one <EoL>
<BoL> Replaces values in a Series using the fill method specified when no <EoL>
<BoL> Outputs rounded and formatted percentiles . <EoL>
<BoL> Return DateOffset object from string or tuple representation <EoL>
<BoL> Groupby iterator <EoL>
<BoL> add numeric operations to the GroupBy generically <EoL>
<BoL> we create the grouper on instantiation <EoL>
<BoL> Shared func to call any / all Cython GroupBy implementations <EoL>
<BoL> Parameters <EoL>
<BoL> Overridden method to join grouped columns in output <EoL>
<BoL> safe get index , translate keys for datelike to underlying repr <EoL>
<BoL> safe get multiple indices , translate keys for <EoL>
<BoL> sub-classes to define <EoL>
<BoL> If we have categorical groupers , then we want to make sure that <EoL>
<BoL> Clear group based selection . Used for methods needing to return info on <EoL>
<BoL> Create group based selection . Used when selection is not passed <EoL>
<BoL> Fast transform path for aggregations <EoL>
<BoL> Parameters : <EoL>
<BoL> try to cast the result to our obj original type , <EoL>
<BoL> Returns True if all values in the group are truthful , else False <EoL>
<BoL> Returns True if any value in the group is truthful , else False <EoL>
<BoL> Backward fill the values <EoL>
<BoL> Compute count of group , excluding missing values <EoL>
<BoL> Number each item in each group from 0 to the length of that group - 1 . <EoL>
<BoL> Cumulative max for each group <EoL>
<BoL> Cumulative min for each group <EoL>
<BoL> Cumulative product for each group <EoL>
<BoL> Cumulative sum for each group <EoL>
<BoL> Return an expanding grouper , providing expanding <EoL>
<BoL> Forward fill the values <EoL>
<BoL> Return a copy of a DataFrame excluding elements from groups that <EoL>
<BoL> Constructs NDFrame from group with provided name <EoL>
<BoL> Returns first n rows of each group . <EoL>
<BoL> Compute mean of groups , excluding missing values <EoL>
<BoL> Compute median of groups , excluding missing values <EoL>
<BoL> Number each group from 0 to the number of groups - 1 . <EoL>
<BoL> Take the nth row from each group if n is an int , or a subset of rows <EoL>
<BoL> Return DataFrame with number of distinct observations per group for <EoL>
<BoL> Compute sum of values , excluding missing values <EoL>
<BoL> Provide resampling when using a TimeGrouper <EoL>
<BoL> Return a rolling grouper , providing rolling <EoL>
<BoL> Compute standard error of the mean of groups , excluding missing values <EoL>
<BoL> Shift each group by periods observations <EoL>
<BoL> Compute group sizes <EoL>
<BoL> Compute standard deviation of groups , excluding missing values <EoL>
<BoL> Returns last n rows of each group <EoL>
<BoL> Compute variance of groups , excluding missing values <EoL>
<BoL> Shared function for ` pad ` and ` backfill ` to call Cython method <EoL>
<BoL> Compute count of group , excluding missing values <EoL>
<BoL> return a pass thru <EoL>
<BoL> fast version of transform , only applicable to <EoL>
<BoL> common agg/transform wrapping logic <EoL>
<BoL> Compute count of group , excluding missing values <EoL>
<BoL> Return a copy of a Series excluding elements from groups that <EoL>
<BoL> Returns number of unique elements in the group <EoL>
<BoL> Calculate percent change of each value to previous entry in group <EoL>
<BoL> if we define an builtin function for this argument , return it , <EoL>
<BoL> Groupby iterator <EoL>
<BoL> Compute group sizes <EoL>
<BoL> Groupby iterator <EoL>
<BoL> Aggregate using input function or dict of { column - > function } <EoL>
<BoL> set / reset the _group_selection_context <EoL>
<BoL> Yields all GroupBy member defs for DataFrame/Series names in _whitelist.def % ( name ) s ( % ( sig ) s ) : @ property <EoL>
<BoL> Group_index is offsets into cartesian product of all possible labels . This <EoL>
<BoL> reconstruct labels from observed group ids <EoL>
<BoL> Generate bin edge offsets and bin labels for one array using another array <EoL>
<BoL> For the particular label_list , gets the offsets into the hypothetical list <EoL>
<BoL> algos.groupsort_indexer implements ` counting sort ` and it is at least <EoL>
<BoL> return a diction of { labels } - > { indexers } <EoL>
<BoL> Returns a string repr of the arg list of a func call , with any defaults . <EoL>
<BoL> This is called upon unpickling , rather than the default which does n't <EoL>
<BoL> Return the data as an array of native Python datetime objects <EoL>
<BoL> Return an array of native ` datetime.timedelta ` objects . <EoL>
<BoL> This method will not function because object is immutable . <EoL>
<BoL> Auxiliary function for : meth : ` str.cat ` . Turn potentially mixed input <EoL>
<BoL> Concatenate strings in the Series/Index with given separator . <EoL>
<BoL> Return the Unicode normal form for the strings in the Series/Index . <EoL>
<BoL> Filling left side of strings in the Series/Index with 0 . <EoL>
<BoL> If seq is an iterator , put its values into a list . <EoL>
<BoL> Trims zeros and decimal points <EoL>
<BoL> Return a binary method that always raises a TypeError . <EoL>
<BoL> helper for coercing an input scalar or array to i8 <EoL>
<BoL> Return a pickleable state <EoL>
<BoL> Wrap comparison operations to convert datetime-like to datetime64 <EoL>
<BoL> This is called upon unpickling , rather than the default which does n't <EoL>
<BoL> Timestamp-like = > dt64 <EoL>
<BoL> alias to closest period strings BQ- > Q etc <EoL>
<BoL> This method will not function because object is immutable . <EoL>
<BoL> Return a string representation for this object . <EoL>
<BoL> Find indices where elements of v should be inserted <EoL>
<BoL> returns *copy* of underlying array <EoL>
<BoL> Given an Interval or IntervalIndex , return the corresponding interval with <EoL>
<BoL> helper for interval_range to check type compat of start/end/freq <EoL>
<BoL> helper for interval_range to check if start/end are valid types <EoL>
<BoL> This is called upon unpickling , rather than the default which does n't have <EoL>
<BoL> Try to do platform conversion , with special casing for IntervalIndex . <EoL>
<BoL> Transform combination ( s ) of uint64 in one Python integer ( each ) , in a <EoL>
<BoL> Transform combination ( s ) of uint64 in one uint64 ( each ) , in a strictly <EoL>
<BoL> Wrap comparison operations to convert Period-like to PeriodDtype <EoL>
<BoL> return a boolean whether I can attempt conversion to a TimedeltaIndex <EoL>
<BoL> Wrap comparison operations to convert timedelta-like to timedelta64 <EoL>
<BoL> Timedelta-like = > dt64 <EoL>
<BoL> require they keys to be the same type as the index ( so we do n't <EoL>
<BoL> Transform a list of keys into a new array ready to be used as axis of <EoL>
<BoL> Translate any partial string timestamp matches in key , returning the <EoL>
<BoL> this is pretty simple as we just have to deal with labels <EoL>
<BoL> much simpler as we only have to deal with our valid types <EoL>
<BoL> Return Series values by list or array of integers <EoL>
<BoL> want nice defaults for background_gradient that do n't break <EoL>
<BoL> Ensurse that a slice does n't reduce to a Series or Scalar . <EoL>
<BoL> Validate that value and indexer are the same length . <EoL>
<BoL> create a filtered indexer that does n't have any missing indexers <EoL>
<BoL> reverse convert a missing indexer , which is a dict <EoL>
<BoL> return the length of a single non-tuple indexer which could be a slice <EoL>
<BoL> Attempt to convert indices into valid , positive indices . <EoL>
<BoL> We likely want to take the cross-product <EoL>
<BoL> Perform bounds-checking for an indexer . <EoL>
<BoL> require the same dtype as ourselves <EoL>
<BoL> ndim inference and validation . <EoL>
<BoL> no-op on a non-ObjectBlock <EoL>
<BoL> return a slice of my values <EoL>
<BoL> try to cast the result to our original type , we may have <EoL>
<BoL> provide coercion to our input arguments <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> Return a list of unstacked blocks of self <EoL>
<BoL> apply the function to my values ; return a block if we are not <EoL>
<BoL> coerce the current block to a dtype compat for other <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> attempt to coerce any object types to better types return a copy <EoL>
<BoL> copy constructor <EoL>
<BoL> Delete given loc ( -s ) from block in-place . <EoL>
<BoL> return block for the diff of the values <EoL>
<BoL> try to downcast each item to the dict of dtypes if present <EoL>
<BoL> evaluate the block ; return result block from the result <EoL>
<BoL> return an outside world format , currently just the ndarray <EoL>
<BoL> Return the internal values used by the DataFrame/SeriesFormatter <EoL>
<BoL> return an internal format , currently just the ndarray <EoL>
<BoL> Perform __getitem__-like , return result as block . <EoL>
<BoL> return an internal format , currently just the ndarray <EoL>
<BoL> validate that we have a astypeable to categorical , <EoL>
<BoL> Create a new block , with type inference propagate any values that are <EoL>
<BoL> Create a ScalarBlock <EoL>
<BoL> compute the quantiles of the <EoL>
<BoL> Parameters <EoL>
<BoL> Modify Block in-place with new item value <EoL>
<BoL> Set the value inplace , returning a a maybe different typed block . <EoL>
<BoL> shift the block by periods , possibly upcast <EoL>
<BoL> split the block per-column , and apply the callable f <EoL>
<BoL> Take values according to indexer and return them as a block.bb <EoL>
<BoL> Unbox to an extension array . <EoL>
<BoL> return a slice of my values <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> Return a list of unstacked blocks of self <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> Set the value inplace , returning a same-typed block . <EoL>
<BoL> Take values according to indexer and return them as a block . <EoL>
<BoL> convert to our native types format , slicing if desired <EoL>
<BoL> these automatically copy , so copy=True has no effect <EoL>
<BoL> Input validation for values passed to __init__ . Ensure that <EoL>
<BoL> Coerce values and other to dtype 'i8 ' . NaN and NaT convert to <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> return object dtype as boxed values , such as Timestamps/Timedelta <EoL>
<BoL> Modify Block in-place with new item value <EoL>
<BoL> Input validation for values passed to __init__ . Ensure that <EoL>
<BoL> return a slice of my values <EoL>
<BoL> localize and return i8 for the values <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> copy constructor <EoL>
<BoL> 1st discrete difference <EoL>
<BoL> we internally represent the data as a DatetimeIndex , but for <EoL>
<BoL> shift the block by periods <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> Initialize a non-consolidatable block . <EoL>
<BoL> return a slice of my values ( but densify first ) <EoL>
<BoL> need to to_dense myself ( and always return a ndim sized object ) <EoL>
<BoL> provide coercion to our input arguments <EoL>
<BoL> attempt to coerce any object types to better types return a copy of <EoL>
<BoL> Modify Block in-place with new item value <EoL>
<BoL> Concatenate a list of SingleBlockManagers into a single <EoL>
<BoL> convert the whole block as one <EoL>
<BoL> Delete single item from SingleBlockManager . <EoL>
<BoL> fast path for getting a cross-section <EoL>
<BoL> Return the internal values used by the DataFrame/SeriesFormatter <EoL>
<BoL> return a dense type view <EoL>
<BoL> shift the block by periods <EoL>
<BoL> sparse reindex and return a new block <EoL>
<BoL> Coerce values and other to int64 , with null values converted to <EoL>
<BoL> reverse of try_coerce_args / try_operate <EoL>
<BoL> pivot to the labels shape <EoL>
<BoL> guarantee the shape of the values to be at least 1 d <EoL>
<BoL> Merge blocks having same dtype , exclude non-consolidating blocks <EoL>
<BoL> return a new extended blocks , givin the result <EoL>
<BoL> given a tuple of shape and a list of Categorical labels , return the <EoL>
<BoL> Faster version of set ( arr ) for sequences of small numbers . <EoL>
<BoL> Parameters <EoL>
<BoL> array must be SparseSeries or SparseArray <EoL>
<BoL> return an array of blocks that potentially have different dtypes <EoL>
<BoL> Return a new ndarray , try to preserve dtype if possible . <EoL>
<BoL> If possible , reshape ` arr ` to have shape ` new_shape ` , <EoL>
<BoL> return a single array of a block that has a single dtype ; if dtype is <EoL>
<BoL> return an array of blocks that potentially have different dtypes ( and <EoL>
<BoL> Apply function to all values found in index . <EoL>
<BoL> Combine multiple concatenation plans into one . <EoL>
<BoL> Concatenate block managers into one . <EoL>
<BoL> Concatenate values from several join units along selected axis . <EoL>
<BoL> raise a helpful message about our construction <EoL>
<BoL> Find the appropriate Block subclass to use for the given values and dtype . <EoL>
<BoL> Return dtype and N/A values to use when concatenating specified units . <EoL>
<BoL> Construct concatenation plan for given block manager and indexers . <EoL>
<BoL> Check if the join units consist of blocks of uniform type that can <EoL>
<BoL> If two indices overlap , add suffixes to overlapping entries . <EoL>
<BoL> Reduce join_unit 's shape along item axis to length . <EoL>
<BoL> Convenience function for akima interpolation . <EoL>
<BoL> Convenience function for interpolate.BPoly.from_derivatives <EoL>
<BoL> Get indexers of values that wo n't be filled <EoL>
<BoL> [ True , True , False , True , False ] , 2 - > <EoL>
<BoL> Fill nulls caused by division by zero , casting to a diffferent dtype <EoL>
<BoL> if this is a reversed op , then flip x , y <EoL>
<BoL> Return a masking array of same size/shape as arr <EoL>
<BoL> Set results of 0 / 0 or 0 // 0 to np.nan , regardless of the dtypes <EoL>
<BoL> return the correct fill value for the dtype of the values <EoL>
<BoL> Return the missing value for ` values ` <EoL>
<BoL> wrap our results if needed <EoL>
<BoL> Returns -1 in the NA case <EoL>
<BoL> Returns -1 in the NA case <EoL>
<BoL> a , b : ndarrays <EoL>
<BoL> Compute the sample excess kurtosis . <EoL>
<BoL> Compute the sample skewness . <EoL>
<BoL> align lhs and rhs Series <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid <EoL>
<BoL> For SparseSeries operation , coerce to float64 if the result is expected <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid <EoL>
<BoL> divmod returns a tuple of like indexed series instead of a single series . <EoL>
<BoL> If the raw op result has a non-None name ( e.g . it is an Index object ) and <EoL>
<BoL> Find the keyword arguments to pass to numexpr for the given operation . <EoL>
<BoL> Find the appropriate fill value to use when filling in undefined values <EoL>
<BoL> Only DataFrame cares about default_axis , specifically : <EoL>
<BoL> Find the appropriate operation-wrappers to use when defining flex/special <EoL>
<BoL> Find the name to attach to this method according to conventions <EoL>
<BoL> Find the operation string , if any , to pass to numexpr for this <EoL>
<BoL> Make the appropriate substitutions for the given operation and class-typ <EoL>
<BoL> Try to find a name to attach to the result of an operation between <EoL>
<BoL> Adds the full suite of flex arithmetic methods ( `` pow `` , `` mul `` , `` add `` ) <EoL>
<BoL> Adds the full suite of special arithmetic methods ( `` __add__ `` , return an inplace wrapper for this method <EoL>
<BoL> Wrap Series left in the given index_class to delegate the operation op <EoL>
<BoL> If a non-None fill_value is given , replace null entries in left and right <EoL>
<BoL> Find the appropriate name to pin to an operation result . This result <EoL>
<BoL> Apply the function ` op ` to only non-null points in x and y . <EoL>
<BoL> Makes sure that time and panels are conformable <EoL>
<BoL> Numpy version of itertools.product or pandas.compat.product . <EoL>
<BoL> Returns a multi-index suitable for a panel-like DataFrame <EoL>
<BoL> Reshape long-format data to wide . Generalized inverse of DataFrame.pivot <EoL>
<BoL> Produce 'pivot ' table based on 3 columns of this DataFrame . <EoL>
<BoL> Quantile-based discretization function . Discretize variable into <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return index to be used along concatenation axis . <EoL>
<BoL> return the join indexersunlike np.transpose , this returns an array of tuples <EoL>
<BoL> Restore index levels specified as ` on ` parameters <EoL>
<BoL> return the join indexers <EoL>
<BoL> Note : has side effects ( copy/delete key columns ) <EoL>
<BoL> Given a dtype , return a C name like 'int64_t ' or 'double ' <EoL>
<BoL> Upcast a dtype to 'int64_t ' , 'double ' , or 'object ' <EoL>
<BoL> Produce 'pivot ' table based on 3 columns of this DataFrame . <EoL>
<BoL> Logic for converting the level number to something we can safely pass <EoL>
<BoL> Group_index is offsets into cartesian product of all possible labels . This <EoL>
<BoL> Construct 1-0 dummy variables corresponding to designated axis <EoL>
<BoL> See DataFrame.pivot <EoL>
<BoL> Convert DataFrame to Series with multi-level Index . Columns become the <EoL>
<BoL> if the passed data is of datetime/timedelta type , <EoL>
<BoL> if the passed bin is of datetime/timedelta type , <EoL>
<BoL> Infer an appropriate precision for _round_frac <EoL>
<BoL> handles preprocessing for cut where we convert passed <EoL>
<BoL> Round the fractional part of the given number <EoL>
<BoL> Compose 2 callables <EoL>
<BoL> install the scalar coercion methods <EoL>
<BoL> sanitize an index type to return an ndarray of the underlying , pass <EoL>
<BoL> .. deprecated : : % ( version ) s <EoL>
<BoL> Remove null values from array like structure . <EoL>
<BoL> This is intended to be a drop-in replacement for np.argsort which <EoL>
<BoL> Sort `` values `` and reorder corresponding `` labels `` . <EoL>
<BoL> try to convert to dense <EoL>
<BoL> return an ndarray for our input , <EoL>
<BoL> wrap op result to have correct dtype <EoL>
<BoL> Convert ndarray to sparse format <EoL>
<BoL> Conform a set of SparseSeries ( with NaN fill_value ) to a common SparseIndex <EoL>
<BoL> Only makes sense when fill_value is NaN <EoL>
<BoL> create and return the block manager from a dataframe of series , <EoL>
<BoL> Convert a scipy.sparse.coo_matrix to a SparseSeries . <EoL>
<BoL> For arbitrary ( MultiIndexed ) SparseSeries returnReturn sparse coords and dense labels for subset levelsReturn OrderedDict of unique labels to number . <EoL>
<BoL> Auxiliary function for : func : ` str_cat ` <EoL>
<BoL> Used in both extract_noexpand and extract_frame <EoL>
<BoL> For each subject string in the Series , extract groups from the <EoL>
<BoL> Find groups in each string in the Series using passed regular <EoL>
<BoL> Auxiliary function for : meth : ` str.cat ` <EoL>
<BoL> Test if pattern or regex is contained within a string of a Series or Index . <EoL>
<BoL> Count occurrences of pattern in each string of the Series/Index . <EoL>
<BoL> Decode character string in the Series/Index using indicated encoding . <EoL>
<BoL> Encode character string in the Series/Index using indicated encoding . <EoL>
<BoL> Test if the end of each string element matches a pattern . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return indexes in each strings in the Series/Index where the <EoL>
<BoL> Find all occurrences of pattern or regular expression in the Series/Index . <EoL>
<BoL> Extract element from each component at specified position . <EoL>
<BoL> Split each string in the Series by sep and return a frame of <EoL>
<BoL> Join lists contained as elements in the Series/Index with passed delimiter . <EoL>
<BoL> Determine if each string matches a regular expression . <EoL>
<BoL> Pad strings in the Series/Index with an additional character to <EoL>
<BoL> Duplicate each string in the Series/Index by indicated number <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Split each string in the Series/Index by the given delimiter <EoL>
<BoL> Slice substrings from each element in the Series/Index <EoL>
<BoL> Replace a positional slice of a string with another value . <EoL>
<BoL> Split strings around given separator/delimiter . <EoL>
<BoL> Test if the start of each string element matches a pattern . <EoL>
<BoL> Strip whitespace ( including newlines ) from each string in the <EoL>
<BoL> Map all characters in the string through the given mapping table . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> assemble the unit specified fields from the arg ( DataFrame ) <EoL>
<BoL> try to parse the YYYYMMDD/ % Y % m % d format , try to deal with NaT-like , <EoL>
<BoL> Convert array of dates with a cache and box the result <EoL>
<BoL> Create a cache of unique dates from an array of dates <EoL>
<BoL> Returns date in YYYYMMDD format . <EoL>
<BoL> function for converting excel date to normal date format <EoL>
<BoL> Parse time strings to time objects using fixed strptime formats ( `` % H : % M '' , <EoL>
<BoL> Convert a list of objects to a timedelta index object . <EoL>
<BoL> provide validation / translation for timedelta short units <EoL>
<BoL> Parameters <EoL>
<BoL> Hash a Categorical by hashing its categories , and then mapping the codes <EoL>
<BoL> Hash scalar value <EoL>
<BoL> Given a 1d array , return an array of deterministic integers . <EoL>
<BoL> Hash a single tuple efficiently <EoL>
<BoL> Hash an MultiIndex / list-of-tuples efficiently <EoL>
<BoL> provide a nice str repr of our rolling object <EoL>
<BoL> Rolling statistical measure using supplied function . Designed to be <EoL>
<BoL> center the result in the window <EoL>
<BoL> resample according to the how , return a new object <EoL>
<BoL> split data into blocks & return conformed data <EoL>
<BoL> Return index as ndarrays <EoL>
<BoL> sub-classes to define <EoL>
<BoL> wrap a single result <EoL>
<BoL> wrap the results <EoL>
<BoL> exponential weighted sample correlation <EoL>
<BoL> exponential weighted sample covariance <EoL>
<BoL> exponential weighted moving average <EoL>
<BoL> exponential weighted moving stddev <EoL>
<BoL> exponential weighted moving variance <EoL>
<BoL> validate & return window frequency <EoL>
<BoL> validate on is monotonic <EoL>
<BoL> validate that on is monotonic ; <EoL>
<BoL> Applies a moving window of type `` window_type `` on the data . <EoL>
<BoL> provide validation for our window type , return the window <EoL>
<BoL> Backwards compatible alias for `` HDFStore `` <EoL>
<BoL> Infer the most likely frequency given the input index . If the frequency is <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Load a feather-format object from the file path <EoL>
<BoL> Read from the store , close it if we opened it . <EoL>
<BoL> r '' '' '' Read HTML tables into a `` list `` of `` DataFrame `` objects . <EoL>
<BoL> Load msgpack pandas object from the specified <EoL>
<BoL> Load a parquet object from the file path , returning a DataFrame . <EoL>
<BoL> Load pickled pandas object ( or any object ) from file . <EoL>
<BoL> msgpack ( serialize ) object to input file path <EoL>
<BoL> Pickle ( serialize ) object to file . <EoL>
<BoL> Attempt to write text representation of object to the system clipboard <EoL>
<BoL> Read in the table of contents for the ZIP file . <EoL>
<BoL> Call the `` close ( ) '' method in case the user forgot . <EoL>
<BoL> Extract the ZipInfo object 'member ' to a physical <EoL>
<BoL> Replace bad characters and remove trailing dots from parts . <EoL>
<BoL> Check for errors before writing a file to the archive . <EoL>
<BoL> Close the file , and for mode 'w ' , 'x ' and 'a ' write the ending <EoL>
<BoL> Extract a member from the archive to the current working directory , <EoL>
<BoL> Extract all members from the archive to the current working <EoL>
<BoL> Return the instance of ZipInfo given 'name ' . <EoL>
<BoL> Return a list of class ZipInfo instances for files in the <EoL>
<BoL> Return a list of file names in the archive . <EoL>
<BoL> Return file-like object for 'name ' . <EoL>
<BoL> Print a table of contents for the zip file . <EoL>
<BoL> Return file bytes ( as a string ) for name . <EoL>
<BoL> Set default password for encrypted files . <EoL>
<BoL> Read all the files and check the CRC . <EoL>
<BoL> Write a file into the archive . The contents is 'data ' , which <EoL>
<BoL> Return the argument with an initial component of ~ or ~user <EoL>
<BoL> Get the compression method for filepath_or_buffer . If compression='infer ' , <EoL>
<BoL> Check to see if a URL has a valid protocol . <EoL>
<BoL> Attempt to convert a path-like object to a string . <EoL>
<BoL> converts an absolute native path to a FILE URL . <EoL>
<BoL> Check for an s3 , s3n , or s3a url <EoL>
<BoL> Converts lists of lists/tuples into DataFrames with proper type inference <EoL>
<BoL> Convert `` alignment_dict `` to an openpyxl v2 Alignment object <EoL>
<BoL> Convert `` border_dict `` to an openpyxl v2 Border object <EoL>
<BoL> Convert `` color_spec `` to an openpyxl v2 Color object <EoL>
<BoL> Convert `` fill_dict `` to an openpyxl v2 Fill object <EoL>
<BoL> Convert `` font_dict `` to an openpyxl v2 Font object <EoL>
<BoL> Convert `` number_format_dict `` to an openpyxl v2.1.0 number format <EoL>
<BoL> Convert `` protection_dict `` to an openpyxl v2 Protection object . <EoL>
<BoL> Convert `` side_spec `` to an openpyxl v2 Side object <EoL>
<BoL> Convert `` stop_seq `` to a list of openpyxl v2 Color objects , <EoL>
<BoL> converts a style_dict to an openpyxl style object <EoL>
<BoL> Convert a style_dict to a set of kwargs suitable for initializing <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> converts a style_dict to an xlsxwriter format dict <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> converts a style_dict to an xlwt style object <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> Forward fills blank entries in row , but only inside the same parent index <EoL>
<BoL> ( header , new_data ) for header rows in MultiIndex parsing <EoL>
<BoL> Adds engine to the excel writer registry . You must use this method to <EoL>
<BoL> Write a DataFrame to the feather-format <EoL>
<BoL> Return console size as tuple = ( width , height ) . <EoL>
<BoL> we by definition have DO NOT have a TZ <EoL>
<BoL> we by definition have a TZ <EoL>
<BoL> Formats a number in engineering notation , appending a letter <EoL>
<BoL> Returns a function to be applied on each value to format it <EoL>
<BoL> Returns the float values converted into strings using <EoL>
<BoL> given values and a date_format , return a string format <EoL>
<BoL> Return a formatter function for a range of timedeltas . <EoL>
<BoL> Trims zeros , leaving just one before the decimal points if need be . <EoL>
<BoL> Glues together two sets of strings using the amount of space requested . <EoL>
<BoL> Appends lines to a buffer . <EoL>
<BoL> For each index in each level the function returns lengths of indexes . <EoL>
<BoL> Perform ljust , center , rjust against string or list-like <EoL>
<BoL> internal . pprinter for iterables . you should probably use pprint_thing ( ) <EoL>
<BoL> internal . pprinter for iterables . you should probably use pprint_thing ( ) <EoL>
<BoL> Returns list of tables , potentially removing hidden elements <EoL>
<BoL> Parse the raw data into a list of lists . <EoL>
<BoL> Return a tree-like object that can be used to iterate over the DOM . <EoL>
<BoL> Return all tables from the parsed DOM . <EoL>
<BoL> Return the list of tbody elements from the parsed table element . <EoL>
<BoL> Return the td elements from a row element . <EoL>
<BoL> Return the footer of the table if any . <EoL>
<BoL> Return the header of a table . <EoL>
<BoL> Return the list of row elements from the parsed table element . <EoL>
<BoL> Return the text of an individual DOM node . <EoL>
<BoL> Raises <EoL>
<BoL> Build an xpath expression to simulate bs4 's ability to pass in kwargs to <EoL>
<BoL> Get an iterator given an integer , slice or container . <EoL>
<BoL> Choose the parser based on the input flavor . <EoL>
<BoL> Try to read from a url , file or string . <EoL>
<BoL> Replace extra whitespace inside of a string with a single space . <EoL>
<BoL> Create a Table schema from `` data `` . <EoL>
<BoL> Pack object ` o ` and write it to ` stream ` <EoL>
<BoL> Pack object ` o ` and return packed bytes <EoL>
<BoL> Convert strings to complex number instance with specified numpy type . <EoL>
<BoL> convert the numpy values to a list <EoL>
<BoL> Decoder for deserializing numpy data types . <EoL>
<BoL> return my dtype mapping , whether number or name <EoL>
<BoL> Data encoder <EoL>
<BoL> return our implementation <EoL>
<BoL> Write a DataFrame to the parquet format . <EoL>
<BoL> Cast values to specified type <EoL>
<BoL> Infer types of values , possibly casting <EoL>
<BoL> Set the columns that should not undergo dtype conversions . <EoL>
<BoL> Alert a user about a malformed row . <EoL>
<BoL> Return a line from buffer , filling buffer if required . <EoL>
<BoL> Checks whether the file begins with the BOM character . <EoL>
<BoL> Try several cases to get lines : <EoL>
<BoL> Sets self._col_indices <EoL>
<BoL> Check if a line is empty or not . <EoL>
<BoL> Wrapper around iterating through ` self.data ` ( CSV source ) . <EoL>
<BoL> Iterate through the lines and remove any that are <EoL>
<BoL> Read rows from self.f , skipping as specified . <EoL>
<BoL> Workhorse function for processing nested list into DataFrame <EoL>
<BoL> Check whether or not the 'usecols ' parameter <EoL>
<BoL> Get the NaN values for a given column . <EoL>
<BoL> Check whether or not the ` columns ` parameter <EoL>
<BoL> Generic reader of line files . <EoL>
<BoL> return a stringified and numeric for these values <EoL>
<BoL> Checks whether the 'name ' parameter for parsing is either <EoL>
<BoL> Check if the ` names ` parameter contains duplicates . <EoL>
<BoL> Check whether or not the 'parse_dates ' parameter <EoL>
<BoL> Validate the 'skipfooter ' parameter . <EoL>
<BoL> Validate the 'usecols ' parameter . <EoL>
<BoL> Validates that all usecols are present in a given <EoL>
<BoL> return the axis for c <EoL>
<BoL> return a pretty representatgion of myself <EoL>
<BoL> return the metadata pathname for this key <EoL>
<BoL> Create a pytables index on the specified columns <EoL>
<BoL> retrieve our attributes <EoL>
<BoL> these are written transposed <EoL>
<BoL> return a list of my index cols <EoL>
<BoL> infer the axes of my storer <EoL>
<BoL> process axes filters <EoL>
<BoL> return a dict of the kinds allowable columns for this object <EoL>
<BoL> create and return the axes sniffed from the table : return boolean <EoL>
<BoL> return a single column from the table , generally only indexables <EoL>
<BoL> select coordinates ( row numbers ) from a table ; return the <EoL>
<BoL> return the meta data array for this key <EoL>
<BoL> set our table type & indexables <EoL>
<BoL> update our table index info <EoL>
<BoL> set my pandas type & version <EoL>
<BoL> compute and set our version <EoL>
<BoL> validate against an existing table <EoL>
<BoL> take the input data_columns and min_itemize and create a data <EoL>
<BoL> create / validate metadata <EoL>
<BoL> validate the min_itemisze does n't contain items that are not in the <EoL>
<BoL> validate that we can store the multi-index ; reset and return the <EoL>
<BoL> are we trying to operate on an old version ? <EoL>
<BoL> return a list of my values cols <EoL>
<BoL> we form the data into a 2-d including indexes , values , mask <EoL>
<BoL> Parameters <EoL>
<BoL> write out a meta data array to the key as a fixed-format Series <EoL>
<BoL> we are going to write this as a frame table <EoL>
<BoL> these are written transposed <EoL>
<BoL> we have n indexable columns , with an arbitrary number of data <EoL>
<BoL> we are going to write this as a frame table <EoL>
<BoL> return the data for this obj <EoL>
<BoL> return a pretty representation of myself <EoL>
<BoL> Returns true if any axis is zero length . <EoL>
<BoL> support fully deleting the node in its entirety ( only ) - where <EoL>
<BoL> retrieve our attributes <EoL>
<BoL> read an array for the specified node ( off of group <EoL>
<BoL> set our object attributes <EoL>
<BoL> validate against an existing storable <EoL>
<BoL> remove table keywords from kwargs and return <EoL>
<BoL> are we trying to operate on an old version ? <EoL>
<BoL> write a 0-len array <EoL>
<BoL> compare 2 col items <EoL>
<BoL> set the data from this selection ( and convert to the correct dtype <EoL>
<BoL> return the PyTables column class for this column <EoL>
<BoL> get the data for this column <EoL>
<BoL> infer this column from the table : create and return a new object <EoL>
<BoL> maybe set a string col itemsize : <EoL>
<BoL> retrieve the metadata for this columns <EoL>
<BoL> set the data for this column <EoL>
<BoL> set the axis over which I index <EoL>
<BoL> set my state from the passed info <EoL>
<BoL> record the metadata <EoL>
<BoL> set the name of this indexer <EoL>
<BoL> set the position of this column in the Table <EoL>
<BoL> return the data & release the memory <EoL>
<BoL> set/update the info for this indexable with the key/value <EoL>
<BoL> validate that we have the same order as the existing & same dtype <EoL>
<BoL> validate this column : return the compared against itemsize <EoL>
<BoL> validate that kind=category does not change the categories <EoL>
<BoL> set the meta data <EoL>
<BoL> get our object attributes <EoL>
<BoL> set our object attributes <EoL>
<BoL> compare 2 col items <EoL>
<BoL> set the values from this selection : take = take ownership <EoL>
<BoL> return the values & release the memory <EoL>
<BoL> retrieve our attributes <EoL>
<BoL> set the values from this selection : take = take ownership <EoL>
<BoL> set the kind for this column <EoL>
<BoL> set the kind for this column <EoL>
<BoL> where can be a : dict , list , tuple , string <EoL>
<BoL> generate the selection <EoL>
<BoL> generate the selection <EoL>
<BoL> we do n't support start , stop kwds in Sparse <EoL>
<BoL> write it as a collection of individual sparse series <EoL>
<BoL> read the indicies and the indexing array , calculate offset rows and <EoL>
<BoL> write in a format that we can search later on ( but can not append <EoL>
<BoL> we take a string-like that is object dtype and coerce to a fixed size <EoL>
<BoL> if we have bytes , decode them to unicode <EoL>
<BoL> Ensure that an index / column name is a str ( python 3 ) or <EoL>
<BoL> ensure that the where is a Term or a list of Term <EoL>
<BoL> get/create the info for this name <EoL>
<BoL> for a tz-aware type , return an encoded zone <EoL>
<BoL> Check if a given group is a metadata group for a given parent_group . <EoL>
<BoL> coerce the values to a DatetimeIndex if tz is set <EoL>
<BoL> Simple passthrough to SQLAlchemy connectable <EoL>
<BoL> Infer datatype of the Series col . In case the dtype of col is 'object ' <EoL>
<BoL> Make the DataFrame 's column types align with the SQL table <EoL>
<BoL> Return a list of SQL statements that creates a table reflecting the <EoL>
<BoL> Convert SQL and params args to DBAPI2.0 compliant format . <EoL>
<BoL> Returns a SQLAlchemy engine from a URI ( if con is a string ) <EoL>
<BoL> Force non-datetime columns to be read as such . <EoL>
<BoL> Execute the given SQL query using the provided connection object . <EoL>
<BoL> Get the SQL db table schema for the given frame . <EoL>
<BoL> Check if DataBase has named table . <EoL>
<BoL> enter context manager <EoL>
<BoL> exit context manager <EoL>
<BoL> Map between numpy and state dtypes <EoL>
<BoL> close the handle if its open <EoL>
<BoL> Returns data label of Stata file <EoL>
<BoL> Reads lines from Stata file and returns as dataframe <EoL>
<BoL> Returns a dict , associating each variable name a dict , associating <EoL>
<BoL> Returns variable labels as a dict , associating each variable name <EoL>
<BoL> Python 3 compatibility shim <EoL>
<BoL> Generates the binary blob of GSOs that is written to the dta file . <EoL>
<BoL> Generates the GSO lookup table for the DataFRame <EoL>
<BoL> Python 3 compatibility shim <EoL>
<BoL> Parameters <EoL>
<BoL> Checks column names to ensure that they are valid Stata column names . <EoL>
<BoL> Close the file if it was created by the writer . <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> Check for categorical columns , retain categorical information for <EoL>
<BoL> No-op , forward compatibility <EoL>
<BoL> Helper to call encode before writing to file for Python 3 compat . <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> Write 5 zeros for expansion fields <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> Convert columns to StrLs if either very large or in the <EoL>
<BoL> Surround val with < tag > < /tag > <EoL>
<BoL> Update map location for tag with file position <EoL>
<BoL> Update column names for conversion to strl if they might have been <EoL>
<BoL> No-op in dta 117+ <EoL>
<BoL> Write the file header <EoL>
<BoL> Called twice during file write . The first populates the values in <EoL>
<BoL> Checks the dtypes of the columns of a pandas DataFrame for <EoL>
<BoL> Converts from one of the stata date formats to a type in TYPE_MAP <EoL>
<BoL> Convert from datetime to SIF . http : //www.stata.com/help.cgi ? datetime <EoL>
<BoL> Converts dtype types to stata types . Returns the byte of the given ordinal . <EoL>
<BoL> Converts dtype types to stata types . Returns the byte of the given ordinal . <EoL>
<BoL> Open a binary file or no-op if file-like <EoL>
<BoL> Takes a char string and pads it with null bytes until it 's length chars <EoL>
<BoL> Takes a bytes instance and pads it with null bytes until it 's length chars . <EoL>
<BoL> Convert from SIF to datetime . http : //www.stata.com/help.cgi ? datetimeConvert year and month to datetimes , using pandas vectorized versionsConverts year ( e.g . 1999 ) and days since the start of the year to aConvert base dates and deltas to datetimes , using pandas vectorized <EoL>
<BoL> Return business hours in a day by seconds . <EoL>
<BoL> If n is positive , return tomorrow 's business day opening time . <EoL>
<BoL> Slight speedups using calculated values <EoL>
<BoL> If n is positive , return yesterday 's business day opening time . <EoL>
<BoL> Roll provided date backward to next offset only if not on offset <EoL>
<BoL> Roll provided date forward to next offset only if not on offset <EoL>
<BoL> roll ` other ` back to the most recent date that was on a fiscal year <EoL>
<BoL> Find the day in the same month as other that has the same <EoL>
<BoL> Add days portion of offset to DatetimeIndex i <EoL>
<BoL> Add days portion of offset to DatetimeIndex i <EoL>
<BoL> Handle specific apply logic for child classes <EoL>
<BoL> Apply the correct day for each date in i <EoL>
<BoL> Return an array with the correct n for each date in i . <EoL>
<BoL> Add self to the given DatetimeIndex , specialized for case where <EoL>
<BoL> Find the day in the same month as other that has the same <EoL>
<BoL> This method was ported from the work done by GM Arts , <EoL>
<BoL> Increment the datetime ` other ` by the given number of days , retaining <EoL>
<BoL> Return the : class : ` ~matplotlib.units.AxisInfo ` for *unit* . <EoL>
<BoL> Set the view limits to include the data range . <EoL>
<BoL> Return the time of day as a formatted string . <EoL>
<BoL> Sets the view limits to the nearest multiples of base that contain the <EoL>
<BoL> Convert seconds to 'D days HH : MM : SS.F ' <EoL>
<BoL> Convert : mod : ` datetime ` to the Gregorian date as UTC float days , <EoL>
<BoL> Returns a default spacing between consecutive ticks for annual data . <EoL>
<BoL> Remove pandas ' formatters and converters <EoL>
<BoL> Returns true if the `` label_flags `` indicate there is at least one label <EoL>
<BoL> Returns the indices where the given period changes . <EoL>
<BoL> Register Pandas Formatters and Converters with matplotlib <EoL>
<BoL> Common post process unrelated to data <EoL>
<BoL> Manage style and color based on column number and its label . <EoL>
<BoL> get left ( primary ) or right ( secondary ) axes <EoL>
<BoL> check whether ax has data <EoL>
<BoL> Look for error keyword arguments and return the actual errorbar data <EoL>
<BoL> Common post process for each axes <EoL>
<BoL> Area plot <EoL>
<BoL> Vertical bar plot . <EoL>
<BoL> Make a horizontal bar plot . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Draw one histogram of the DataFrame 's columns . <EoL>
<BoL> Plot DataFrame columns as lines . <EoL>
<BoL> Generate a pie plot . <EoL>
<BoL> Create a scatter plot with varying marker point size and color . <EoL>
<BoL> merge BoxPlot/KdePlot properties to passed kwds <EoL>
<BoL> Post process for each axes . Overridden in child classes <EoL>
<BoL> Area plot <EoL>
<BoL> Vertical bar plot <EoL>
<BoL> Horizontal bar plot <EoL>
<BoL> Boxplot <EoL>
<BoL> Histogram <EoL>
<BoL> Line plot <EoL>
<BoL> Pie chart <EoL>
<BoL> Returns a random color represented as a list of length 3 <EoL>
<BoL> Helper function to convert DataFrame and Series to matplotlib.table <EoL>
<BoL> Autocorrelation plot for time series . <EoL>
<BoL> Bootstrap plot on mean , median and mid-range statistics . <EoL>
<BoL> Lag plot for time series . <EoL>
<BoL> Plot a multidimensional dataset in 2D . <EoL>
<BoL> Reset the option store to its initial state <EoL>
<BoL> Temporarily set a parameter value using the with statement . <EoL>
<BoL> Return DateOffset object associated with rule name <EoL>
<BoL> Wrap a single paragraph of text , returning a list of wrapped lines . <EoL>
<BoL> Checks whether 'args ' has length of at most 'compat_args ' . Raises <EoL>
<BoL> Check that the keys in ` arg_val_dict ` are mapped to their <EoL>
<BoL> Checks whether 'kwargs ' contains any keys that are not <EoL>
<BoL> Initialize an _AssertRaisesContextManager instance . <EoL>
<BoL> Check that the Exception raised matches the expected Exception <EoL>
<BoL> Check to see if we can set a locale without throwing an exception . <EoL>
<BoL> Helper method for our assert_* methods that ensures that <EoL>
<BoL> Create a function for calling on an array . <EoL>
<BoL> Return a list of normalized locales that do not throw an `` Exception `` <EoL>
<BoL> Generator which can be iterated over to get instances of all the various <EoL>
<BoL> Generator which can be iterated over to get instances of all the classes <EoL>
<BoL> checks attributes are equal . Both objects must have attribute . <EoL>
<BoL> checks classes are equal . <EoL>
<BoL> iter1 , iter2 : iterables that produce elements <EoL>
<BoL> Check that left and right ExtensionArrays are equal . <EoL>
<BoL> Check that the left and right SparseArray are equal . <EoL>
<BoL> Try to connect to the given url . True if succeeds , False if IOError <EoL>
<BoL> Decorator to capture stderr in a buffer so that it can be checked <EoL>
<BoL> Decorator to capture stdout in a buffer so that it can be checked <EoL>
<BoL> Open a compressed file and return a file object <EoL>
<BoL> Gets a temporary path and agrees to remove on close . <EoL>
<BoL> Checks if the set of unique elements of arr1 and arr2 are equivalent . <EoL>
<BoL> Get all the locales that are available on the system . <EoL>
<BoL> make a length k index or n categories <EoL>
<BoL> make a length k IntervalIndex <EoL>
<BoL> allows a decorator to take optional positional and keyword arguments . <EoL>
<BoL> Temporarily patch an attribute of an object . <EoL>
<BoL> Generate one random byte string . <EoL>
<BoL> Generate an array of byte strings . <EoL>
<BoL> Generate one random unicode string . <EoL>
<BoL> Generate an array of unicode strings . <EoL>
<BoL> Reset the display options for printing and representing objects . <EoL>
<BoL> Write an object to file specified by a py.path LocalPath and read it back <EoL>
<BoL> Write an object to file specified by a pathlib.Path and read it back <EoL>
<BoL> Pickle an object and then read it again . <EoL>
<BoL> Set default encoding ( as given by sys.getdefaultencoding ( ) ) to the given <EoL>
<BoL> Context manager for temporarily setting a locale . <EoL>
<BoL> Context manager for temporarily setting a timezone . <EoL>
<BoL> Context manager for running bits of code while emulating an arbitrary <EoL>
<BoL> Decorator to run the same function multiple times in parallel . <EoL>
<BoL> Duplicate this Apply instance with inputs = self.inputs . <EoL>
<BoL> Duplicate this Apply instance in a new graph . <EoL>
<BoL> Returns the default output for this node . <EoL>
<BoL> Returns the params for the node , or NoParams if no params is set . <EoL>
<BoL> Associate linker with fgraph <EoL>
<BoL> Return a complete hashable signature of the module we compiled . <EoL>
<BoL> Generates code for a struct that does the computation of the fgraph and <EoL>
<BoL> Returns a list of compile args that are needed by one <EoL>
<BoL> This compiles the source code for this linker and returns a <EoL>
<BoL> Fills the inputs , outputs , variables , orphans , temps and node_order <EoL>
<BoL> Return a cmodule.DynamicModule instance full of the code for our fgraph . <EoL>
<BoL> Returns a list of lib directories that are needed by one <EoL>
<BoL> Returns a list of headers that are needed by one <EoL>
<BoL> Return a list of code snippets that have to be inserted <EoL>
<BoL> Returns a list of lib directories that are needed by one <EoL>
<BoL> Returns a list of libraries that are needed by one <EoL>
<BoL> Returns a function that takes values corresponding to the inputs of the <EoL>
<BoL> Returns a list of support code strings that are needed by <EoL>
<BoL> WRITEME <EoL>
<BoL> Return a repr of the Variable . <EoL>
<BoL> Return a repr of the test value . <EoL>
<BoL> We clone this object , but we do n't clone the data to lower memory <EoL>
<BoL> Evaluates this variable . <EoL>
<BoL> Initialize a DualLinker . <EoL>
<BoL> Update/tie self with fgraph <EoL>
<BoL> Compiles this linker 's fgraph and returns a function to perform the <EoL>
<BoL> Updates the list of clients of r with new_clients . <EoL>
<BoL> This is needed as some features introduce instance methods . <EoL>
<BoL> Given an apply_node , recursively search from this node to know graph , <EoL>
<BoL> Import variables to this FunctionGraph and also their apply_node , <EoL>
<BoL> Adds a gof.toolbox.Feature to this function_graph and triggers its <EoL>
<BoL> Changes node.inputs [ i ] to new_r . <EoL>
<BoL> Call this for a diagnosis if things go awry . <EoL>
<BoL> Set of all the ( node , i ) pairs such that node.inputs [ i ] is r . <EoL>
<BoL> Clone the graph and get a memo ( a dict ) that map old node to new node <EoL>
<BoL> Clone the graph and get a dict that maps old nodes to new ones <EoL>
<BoL> Collects callbacks <EoL>
<BoL> Cleans up all of this FunctionGraph 's nodes and variables so they are <EoL>
<BoL> Execute callbacks <EoL>
<BoL> Return dict d s.t . d [ node ] is a list of nodes that must be evaluated <EoL>
<BoL> Removes the feature from the graph . <EoL>
<BoL> This is the main interface to manipulate the subgraph in FunctionGraph . <EoL>
<BoL> For every node that uses r as input , makes it use new_r instead <EoL>
<BoL> Toposort <EoL>
<BoL> Create a function . <EoL>
<BoL> Return a new ` Variable ` instance of Type ` self ` . <EoL>
<BoL> Optional : Return a list of compile args recommended to compile the <EoL>
<BoL> Optional : Return the name of the primitive C type of items into variables <EoL>
<BoL> Optional : C code to extract a PyObject * instance . <EoL>
<BoL> Optional : Return a list of header search paths required by code <EoL>
<BoL> Optional : Return a list of header files required by code returned by <EoL>
<BoL> Optional : return a list of code snippets to be inserted in module <EoL>
<BoL> Optional : Return True for small or builtin C types . <EoL>
<BoL> Optional : Return a list of library search paths required by code <EoL>
<BoL> Optional : Return a list of libraries required by code returned by <EoL>
<BoL> Optional : WRITEME <EoL>
<BoL> Optional : return a list of incompatible gcc compiler arguments . <EoL>
<BoL> Optional : Return utility code ( a string , or a list of strings ) for use by a ` Variable ` or ` Op ` to be <EoL>
<BoL> Patch variable so that its type will match self , if possible . <EoL>
<BoL> Convert a symbolic variable into this Type , if compatible . <EoL>
<BoL> Return a new ` Variable ` instance of Type ` self ` . <EoL>
<BoL> Optional : Return a message explaining the output of <EoL>
<BoL> Return True if a and b can be considered exactly equal . <EoL>
<BoL> Return True if a and b can be considered approximately equal.Optional function . See TensorType ( ) .get_shape_info for definition.Optional function . See TensorType ( ) .get_size for definition . <EoL>
<BoL> This function must return a triplet ( function , input_variables , <EoL>
<BoL> Create a new instance of this Mode . <EoL>
<BoL> Adds new optimization instances to a mode . <EoL>
<BoL> This method is primarily used by tensor.Rop <EoL>
<BoL> Optional : return some or all output [ s ] of ` make_node ` . <EoL>
<BoL> Extract test value from variable v . <EoL>
<BoL> Add tag.trace to an node or variable . <EoL>
<BoL> Optional : return a code string specific to the apply to be <EoL>
<BoL> Required : return the C implementation of an Op . <EoL>
<BoL> Return a tuple of integers indicating the version of this Op . <EoL>
<BoL> Return a tuple of integers indicating the version of this Op . <EoL>
<BoL> Optional : return C code to run after c_code , whether it failed or not . <EoL>
<BoL> Optional : return a code string specific to the apply <EoL>
<BoL> Optional : return a code string specific to the apply <EoL>
<BoL> Optional : return utility code for use by an ` Op ` that will be <EoL>
<BoL> Optional : return utility code for use by an ` Op ` that will be <EoL>
<BoL> This allows each op to determine if it wants to be constant <EoL>
<BoL> Like make_thunk , but will only try to make a C thunk . <EoL>
<BoL> Create a `` apply '' nodes for the inputs in that order . <EoL>
<BoL> Required : Calculate the function on the inputs and put the variables in <EoL>
<BoL> Make any special modifications that the Op needs before doing <EoL>
<BoL> converts self._lop_op from user supplied form to type ( self ) instance <EoL>
<BoL> converts self._rop_op from user supplied form to type ( self ) instance <EoL>
<BoL> Return connection pattern of subfgraph defined by inputs and outputs . <EoL>
<BoL> getter method for self._lop_op <EoL>
<BoL> getter method for self._rop_op <EoL>
<BoL> Set gradient overrides , see help ( theano.OpFromGraph ) for syntax <EoL>
<BoL> Set L_op overrides , see help ( theano.OpFromGraph ) for syntax <EoL>
<BoL> Set R_op overrides , see help ( theano.OpFromGraph ) for syntax <EoL>
<BoL> Associate linker with fgraph <EoL>
<BoL> Return the compilation arg `` fopenmp '' if openMP is supported <EoL>
<BoL> Return the header file name `` omp.h '' if openMP is supported <EoL>
<BoL> Check if openMP is supported # include < omp.h > <EoL>
<BoL> Make sure self.openmp is not True if there is no support in gxx . <EoL>
<BoL> Parameters <EoL>
<BoL> Returns Function to run all nodes , list of input containers , list of outputs <EoL>
<BoL> dict op - > total number of thunk calls <EoL>
<BoL> dict op - > total number of nodes <EoL>
<BoL> dict op - > total number of nodes <EoL>
<BoL> dict op - > total time on thunks <EoL>
<BoL> dict op - > total time icluding the time for parents <EoL>
<BoL> node - > fill total time icluding its parents ( returns nothing ) <EoL>
<BoL> dict op - > total number of thunk calls <EoL>
<BoL> dict op - > 'C ' or 'Py ' depending how the op is implemented <EoL>
<BoL> dict op - > total number of nodes <EoL>
<BoL> dict op - > total time on thunks <EoL>
<BoL> Ignore previous function call <EoL>
<BoL> Calculate memory with specific node order.Generate all valid node order from node_list and compute its <EoL>
<BoL> TODO : writeme <EoL>
<BoL> Return C code to clean up after ` c_extract ` . <EoL>
<BoL> Return a tuple of integers indicating the version of this Type . <EoL>
<BoL> Required : Return c code to declare variables that will be <EoL>
<BoL> Required : Return c code to extract a PyObject * instance . <EoL>
<BoL> Required : Return c code to initialize the variables that were declared <EoL>
<BoL> Required : Return C code to pack C types back into a PyObject . <EoL>
<BoL> Required : Return data or an appropriately wrapped/converted data . <EoL>
<BoL> Required : Return True for any python object ` a ` that would be a <EoL>
<BoL> Return a str representation of the Variable . <EoL>
<BoL> Return a new Variable like self . <EoL>
<BoL> Convert the input to a Numpy array . <EoL>
<BoL> Decorator that converts a function into a basic Theano op that will call <EoL>
<BoL> Return -1 if x < y , 0 if x == y , 1 if x > y . <EoL>
<BoL> Unfortunately , Conda offers to make itself the default Python <EoL>
<BoL> Same as self.optimize ( fgraph ) . <EoL>
<BoL> This is meant as a shortcut to : <EoL>
<BoL> Applies the optimization to the provided L { FunctionGraph } . It may <EoL>
<BoL> Return an instance of ` _Maker ` which handles much of the debugging work . <EoL>
<BoL> Tuple of properties of all attributes <EoL>
<BoL> This return a dict of all `` __props__ `` key- > value . <EoL>
<BoL> Evaluates value of a function on given arguments . <EoL>
<BoL> Copy a function . Copied function have separate intermediate <EoL>
<BoL> Assert two SharedVariable follow some restirctions : <EoL>
<BoL> When allow_gc = False , clear the Variables in storage_map <EoL>
<BoL> Return the shared variable read or updated by by this function . <EoL>
<BoL> Create a new instance of this Mode . <EoL>
<BoL> The method that calls the thunk ` fn ` . <EoL>
<BoL> Add features to the fgraph that are required to apply the optimization . <EoL>
<BoL> Get the non-symbolic value associated with this SharedVariable . <EoL>
<BoL> Set the non-symbolic value associated with this SharedVariable . <EoL>
<BoL> Set the values of a shared variable to 0 . <EoL>
<BoL> Return the variable to which v is aliased by view_maps and destroy_maps . <EoL>
<BoL> Returns the connection pattern of a subgraph defined by given <EoL>
<BoL> Clones a variable and its inputs recursively until all are in clone_d . <EoL>
<BoL> Upgrade a input shortcut to an In instance . <EoL>
<BoL> Return a pretty multiline string representating the cause <EoL>
<BoL> Return the Op class whose c_code and perform implementations <EoL>
<BoL> Return a pretty multiline string representing the cause of <EoL>
<BoL> Initialize a filter . <EoL>
<BoL> Parameters <EoL>
<BoL> This functions raises a BadViewMap exception when it detects the <EoL>
<BoL> Use a simple algorithm to find broken optimizations . <EoL>
<BoL> Use a simple algorithm to find broken optimizations.Verify that ` r ` has the same value as the results it replaces . <EoL>
<BoL> Returns <EoL>
<BoL> Parameters <EoL>
<BoL> Create a FunctionGraph for debugging . <EoL>
<BoL> Converts number to string by rendering it in base 26 using <EoL>
<BoL> Given an fgraph and a list of variables , returns the list or set <EoL>
<BoL> Re-raise an exception while annotating the exception object with <EoL>
<BoL> Add a ` Mode ` which can be referred to by ` name ` in ` function ` . <EoL>
<BoL> Makes an FunctionGraph corresponding to the input specs and the output <EoL>
<BoL> Reconstruct the full `` updates '' dictionary , mapping from FunctionGraph input <EoL>
<BoL> Return a human-readable description of named and un-named inputs . <EoL>
<BoL> Insert deepcopy in the fgraph to break aliasing of outputs <EoL>
<BoL> Return True iff Variables ` var1 ` and ` var2 ` perform the same computation . <EoL>
<BoL> Add to ` treeset ` all variables that are views of v , given that v is <EoL>
<BoL> Add a ` Linker ` which can be referred to by ` name ` in ` Mode ` . <EoL>
<BoL> Add a ` Optimizer ` which can be referred to by ` name ` in ` Mode ` . <EoL>
<BoL> Tell DeepCopyOp how to generate C code for a Theano Type . <EoL>
<BoL> Tell Rebroadcast how to generate C code for a Theano Type . <EoL>
<BoL> Tell Shape Op how to generate C code for a Theano Type . <EoL>
<BoL> Tell Shape_i how to generate C code for a Theano Type . <EoL>
<BoL> Tell ViewOp how to generate C code for a Theano Type . <EoL>
<BoL> Equivalent of var.shape [ i ] , but apply if possible the shape feature <EoL>
<BoL> Print ProfileStat objects in _atexit_print_list to _atexit_print_file . <EoL>
<BoL> Print the following stats : <EoL>
<BoL> Return a SharedVariable Variable , initialized with a copy or <EoL>
<BoL> SharedVariable Constructor . <EoL>
<BoL> Add a new variable to theano.config <EoL>
<BoL> If allow_override is False , we ca n't change the value after the import <EoL>
<BoL> Calls subprocess_Popen and discards the output , returning only the <EoL>
<BoL> Returns the number of CPUs in the system <EoL>
<BoL> Return location of the user 's home directory . <EoL>
<BoL> Return 32 for 32bit arch , 64 for 64bit arch . <EoL>
<BoL> Calls subprocess_Popen , returning the output , error and exit code <EoL>
<BoL> Return the bit width of Python int ( C long int ) . <EoL>
<BoL> Make sure the user is not attempting to use dnn.conv.algo_bwd ` . <EoL>
<BoL> Make sure the user is not attempting to use dnn.conv.workmem ` . <EoL>
<BoL> Make sure the user is not attempting to use dnn.conv.workmem_bwd ` . <EoL>
<BoL> Return a safe shorter version of platform.platform ( ) . <EoL>
<BoL> Take version as a dot-separated string , return a tuple of int <EoL>
<BoL> We only support clang++ as otherwise we hit strange g++/OSX bugs . <EoL>
<BoL> Return True iff we should warn about bugs fixed after a given version . <EoL>
<BoL> Return the overriding config value for a key . <EoL>
<BoL> Return a string sha256 of the current config options . In the past , <EoL>
<BoL> Parses a config string ( comma-separated key=value components ) into a dict . <EoL>
<BoL> Return a symbolic matrix/dot product between l and r <EoL>
<BoL> return the constant scalar ( 0-D ) value underlying variable ` v ` <EoL>
<BoL> Called by FunctionGraph.attach_feature , the method that attaches <EoL>
<BoL> Called whenever node.inputs [ i ] is changed from r to new_r . <EoL>
<BoL> Should remove any dynamically added functionality <EoL>
<BoL> Called whenever a node is imported into function_graph , which is <EoL>
<BoL> Called whenever a node is pruned ( removed ) from the function_graph , <EoL>
<BoL> Called by toposort . It should return a dictionary of <EoL>
<BoL> Return code for a C function that will convert an enumeration value <EoL>
<BoL> Get a constant value by its alias . <EoL>
<BoL> Return the sorted tuple of all aliases in this enumeration . <EoL>
<BoL> return True if and only if this enum has this alias . <EoL>
<BoL> Returns a list of ( name , value ) pairs that will be turned into <EoL>
<BoL> Sections are loaded from files in order with sections in later <EoL>
<BoL> Stitches all the macros and `` code_cleanup '' together <EoL>
<BoL> Get the code section for init_code <EoL>
<BoL> Stitches all the macros and `` init_code '' together <EoL>
<BoL> Convert a path relative to the location of the class file into <EoL>
<BoL> Loads the c code to perform the Op <EoL>
<BoL> Parameters <EoL>
<BoL> Do the check for only 1 level . <EoL>
<BoL> When attaching to a new fgraph , check that <EoL>
<BoL> app.inputs [ i ] changed from old_r to new_r . <EoL>
<BoL> Add Apply instance to set which must be computed . <EoL>
<BoL> Remove Apply instance from set which must be computed . <EoL>
<BoL> Return orderings induced by destructive operations . <EoL>
<BoL> Makes sure self.droot , self.impact , and self.root_destroyer are up to <EoL>
<BoL> Return None . <EoL>
<BoL> Install some FunctionGraph listeners to help the navigator deal with <EoL>
<BoL> Undo the work of attach_updater . <EoL>
<BoL> This function will use ` lopt ` to ` transform ` the ` node ` . The <EoL>
<BoL> Failure_callback for NavigatorOptimizer : print traceback . <EoL>
<BoL> Failure_callback for NavigatorOptimizer : ignore all errors . <EoL>
<BoL> Failure_callback for NavigatorOptimizer . <EoL>
<BoL> Called by FunctionGraph.attach_feature , the method that attaches <EoL>
<BoL> Called by remove_feature ( feature ) . Should remove any dynamically-added <EoL>
<BoL> Should remove any dynamically added functionality <EoL>
<BoL> Reverts the graph to whatever it was at the provided <EoL>
<BoL> If this local optimization wants to add some requirements to the <EoL>
<BoL> Return the list of op classes that this opt applies to . <EoL>
<BoL> Transform a subgraph whose output is ` node ` . <EoL>
<BoL> Should remove any dynamically added functionality <EoL>
<BoL> Requires the following features : <EoL>
<BoL> Look for a constant that has alias `` alias `` in the Theano enumeration types <EoL>
<BoL> Return a copy of current ParamsType <EoL>
<BoL> Look for a constant named `` key `` in the Theano enumeration types <EoL>
<BoL> Return the name ( string ) of the first field associated to <EoL>
<BoL> Convenient method to extract fields values from a list of Python objects and key-value args , <EoL>
<BoL> Return the Theano type associated to the given field name <EoL>
<BoL> Return True if current ParamsType contains the specified Theano type . <EoL>
<BoL> Checks if the graph from node corresponds to in_pattern . If it does , <EoL>
<BoL> Should remove any dynamically added functionality <EoL>
<BoL> Required : return an Apply instance representing the <EoL>
<BoL> Should remove any dynamically added functionality <EoL>
<BoL> If the caller is replace_all_validate , just raise the <EoL>
<BoL> Parameters <EoL>
<BoL> Applies each L { Optimizer } in self in turn . <EoL>
<BoL> Merge 2 profiles returned by this cass apply ( ) fct . <EoL>
<BoL> Default failure_callback for SeqOptimizer . <EoL>
<BoL> Parameters <EoL>
<BoL> Should remove any dynamically added functionality <EoL>
<BoL> Shallow copy of a WrapLinker . <EoL>
<BoL> Parameters <EoL>
<BoL> Variant on WrapLinker that runs a series of wrapper functions instead of <EoL>
<BoL> Retrieve item from the cache ( if available ) <EoL>
<BoL> Cache `` filename '' as a pickle file <EoL>
<BoL> Maps a failure code to the task that is associated to it . <EoL>
<BoL> Default checker for DualLinker . This checks that the <EoL>
<BoL> Apply the list of policies to name.r , sub <EoL>
<BoL> From a list of L { CodeBlock } instances , returns a string <EoL>
<BoL> Code contained in sub [ 'fail ' ] , usually substituted for % ( fail ) s . <EoL>
<BoL> Code for failure in the struct init . <EoL>
<BoL> Wrapper around c_cleanup that decrefs py_name . <EoL>
<BoL> Wrapper around c_declare that declares py_name . <EoL>
<BoL> Wrapper around c_extract that initializes py_name from storage . <EoL>
<BoL> Wrapper around c_extract_out that initializes py_name from storage . <EoL>
<BoL> Wrapper around c_init that initializes py_name to Py_None . <EoL>
<BoL> Wrapper around c_sync that syncs py_name with storage . <EoL>
<BoL> Obtain lock on compilation directory . <EoL>
<BoL> Parameters <EoL>
<BoL> WRITEME <EoL>
<BoL> Release lock on compilation directory . <EoL>
<BoL> Generates a struct conforming to the following specifications : <EoL>
<BoL> Update `` sub '' dict and create two codeblocks with different failure modes <EoL>
<BoL> Print out the code with line numbers to ` ofile ` . <EoL>
<BoL> Returns the signature for this function . <EoL>
<BoL> Add a key to self.keys , and update pickled file if asked to . <EoL>
<BoL> Delete from entry_from_key all keys associated to this KeyData object . <EoL>
<BoL> Return path to the module file . <EoL>
<BoL> Remove a key from self.keys , and update pickled file if asked to . <EoL>
<BoL> Dump this object into its ` key_pkl ` file . <EoL>
<BoL> This function expects the compile lock to be held . <EoL>
<BoL> Returns a module if the passed-in key is found in the cache <EoL>
<BoL> Fetch a compiled module from the loaded cache or the disk . <EoL>
<BoL> Perform checks to detect broken __eq__ / __hash__ implementations . <EoL>
<BoL> Remove base directories 'cutils_ext ' , 'lazylinker_ext ' and <EoL>
<BoL> Delete entries from the filesystem for cache entries that are too old . <EoL>
<BoL> Delete unversioned dynamic modules . <EoL>
<BoL> Return a module from the cache , compiling it if necessary . <EoL>
<BoL> Debug counter to know how often we go through some piece of code . <EoL>
<BoL> Dynamically load a .so , .pyd , .dll , or .py file . <EoL>
<BoL> Return a directory where you should put your .so file for dlimport <EoL>
<BoL> Recursively flatten tuple , list and set in a list . <EoL>
<BoL> Detect if the g++ version used is the llvm one or not . <EoL>
<BoL> Return the platform-dependent GCC argument for shared libraries . <EoL>
<BoL> Return the platform-dependent extension for compiled modules . <EoL>
<BoL> Create a new module_cache with the ( k , v ) pairs in this dictionary <EoL>
<BoL> Return a SHA256 hash that uniquely identifies a module . <EoL>
<BoL> Return a tuple containing a subset of ` key ` , to be used to find equal keys . <EoL>
<BoL> Return True iff both paths can be considered to point to the same module . <EoL>
<BoL> Return the number of seconds since the epoch of the last access of a <EoL>
<BoL> Scan the contents of a cache directory and return full path of the <EoL>
<BoL> Utility function to work around windows behavior that open windows . <EoL>
<BoL> Try to compile and run a simple C snippet using current flags . <EoL>
<BoL> Remove current lock . <EoL>
<BoL> Delete the compilation lock if someone else has it . <EoL>
<BoL> Obtain lock access by creating a given temporary directory ( whose base will <EoL>
<BoL> 'Refresh ' an existing lock by re-writing the file containing the owner 's <EoL>
<BoL> Enable or disable the lock on the compilation directory ( which is enabled <EoL>
<BoL> Function to check if the given graph contains a cycle <EoL>
<BoL> Return the variables in inputs that are posible candidate for as inputs of <EoL>
<BoL> Return a list of the parents of this node . <EoL>
<BoL> Return the variables that contribute to those in variable_list ( inclusive ) . <EoL>
<BoL> Returns a string representation of the subgraph between i and o <EoL>
<BoL> Copies the subgraph contained between i and o . <EoL>
<BoL> Return the inputs required to compute the given Variables . <EoL>
<BoL> Perform topological sort from input and output nodes <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Return the apply nodes of the graph between inputs and outputs . <EoL>
<BoL> A contextmanager that is used in inherit_stack_trace and keeps track <EoL>
<BoL> Op to return a string representation of the subgraph <EoL>
<BoL> Set of Ops contained within the subgraph between i and o <EoL>
<BoL> Extracts list of variables within input and output nodes <EoL>
<BoL> Search through a graph , either breadth- or depth-first . <EoL>
<BoL> Extracts list of variables within input and output nodes via dfs travesal <EoL>
<BoL> Extract list of variables between i and o nodes via <EoL>
<BoL> Utility function that returns the leaves of a search through <EoL>
<BoL> Decorator for FromFunctionOptimizer . <EoL>
<BoL> Return the set of Variable instances which are computed by node_list . <EoL>
<BoL> Log Theano 's diagnostic stack trace for an exception <EoL>
<BoL> Ensure there is storage ( a length-1 list ) for inputs , outputs , and interior nodes . <EoL>
<BoL> This function is meant to replace excepthook and do some <EoL>
<BoL> WRITEME <EoL>
<BoL> Customized assert with options to ignore the assert <EoL>
<BoL> Displays a message saying that an error was found in some <EoL>
<BoL> Intended use : <EoL>
<BoL> Extract test value from ` v ` . Raises AttributeError if there is none . <EoL>
<BoL> Displays msg , a message saying that some test_value is missing , <EoL>
<BoL> Can be overrided to change the way opts are selected <EoL>
<BoL> If implemented , returns a dictionary mapping all symbolic variables <EoL>
<BoL> Check if a constant can be merged , and queue that replacement . <EoL>
<BoL> Check if a node can be merged , and queue that replacement . <EoL>
<BoL> WRITEME <EoL>
<BoL> WRITEME <EoL>
<BoL> This function checks if the outputs of specific ops of a compiled graph <EoL>
<BoL> Copies the stack trace from one or more tensor variables to <EoL>
<BoL> Uses the TopoOptimizer from the input nodes to output nodes of the graph . <EoL>
<BoL> Contextmanager that copies the stack trace from one or more variable nodes to all <EoL>
<BoL> Merge-based implementation of ` theano.gof.graph.is_same_graph ` . <EoL>
<BoL> merge 2 dicts by adding the values . <EoL>
<BoL> Decorator for FromFunctionOptimizer . <EoL>
<BoL> Uses the TopoOptimizer from the output nodes to input nodes of the graph . <EoL>
<BoL> Merge constants in the subgraph used to compute nodes in ` vars ` . <EoL>
<BoL> This function traverses the computation graph described by all <EoL>
<BoL> Topological sort algorithm by Kahn [ 1 ] - O ( nodes + vertices ) . <EoL>
<BoL> comparator function based on `` key '' function <EoL>
<BoL> Create a comparator to represent the dependence of nodes in a graph.A cmp function for nodes in a graph - does a depend on b ? <EoL>
<BoL> Returns True if a depends on b . <EoL>
<BoL> Memoization decorator for a function taking a single argument . <EoL>
<BoL> Partially ordered sort with multiple comparators.Tests for cycles in manufactured edges . <EoL>
<BoL> Reverses direction of dependence dict . <EoL>
<BoL> Order a graph of apply nodes according to a list of comparators . <EoL>
<BoL> Make a schedule function from comparators.Order nodes in a FunctionGraph . <EoL>
<BoL> Return a function that makes a value from an integer . <EoL>
<BoL> Make a value of this type . <EoL>
<BoL> For a variable v , returns a Variable that represents the tightest <EoL>
<BoL> Links all the specified vars to a Variable that represents their <EoL>
<BoL> Tuple of properties of all attributesThis return a dict of all `` __props__ `` key- > value . <EoL>
<BoL> Decorator which will print a warning message on the first call . <EoL>
<BoL> Returns all elements in seq1 which are not in seq2 : i.e `` seq1\seq2 `` . <EoL>
<BoL> Return the SHA256 hash of a file . <EoL>
<BoL> Cache the return value for each tuple of arguments ( which must be hashable ) . <EoL>
<BoL> Return those items of collection for which predicate ( item ) is true . <EoL>
<BoL> This is traceback.extract_stack from python 2.7 with this change : <EoL>
<BoL> Sorts prereqs_d.keys ( ) topologically . <EoL>
<BoL> Do not use set , this must always return the same value at the same index . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Free any internal references to temporary variables . <EoL>
<BoL> Accumulate into the profile object <EoL>
<BoL> Run the thunk corresponding to Apply instance ` node ` . <EoL>
<BoL> Run the machine . <EoL>
<BoL> Check if fgraph is the first FunctionGraph that has ever been <EoL>
<BoL> Returns dict : variable K - > list of variables [ v1 , v2 , v3 , ... ] <EoL>
<BoL> Like ones_like , but forces the object to have a <EoL>
<BoL> Like zeros_like , but forces the object to have a <EoL>
<BoL> Returns 'yes ' , 'no ' , or 'maybe ' indicating whether x <EoL>
<BoL> given an apply node , obtain its connection pattern <EoL>
<BoL> Populates term_dict [ node ] and returns it <EoL>
<BoL> Helper function for grad function . <EoL>
<BoL> DEPRECATED : use zero_grad ( ) or disconnected_grad ( ) instead . <EoL>
<BoL> Consider an expression constant when computing gradients . <EoL>
<BoL> Formats the outputs according to the flags ` use_list ` and ` use_tuple ` . <EoL>
<BoL> This op do a view in the forward , but clip the gradient . <EoL>
<BoL> Return an un-computable symbolic variable of type ` x.type ` . <EoL>
<BoL> This op scale or inverse the gradient in the backpropagation . <EoL>
<BoL> Return an un-computable symbolic variable of type ` x.type ` . <EoL>
<BoL> Return the gradient of f at pt . <EoL>
<BoL> Return absolute and relative error between a and b . <EoL>
<BoL> Return the abs and rel error of gradient estimate ` g_pt ` <EoL>
<BoL> Find the biggest error between g_pt and self.gf . <EoL>
<BoL> With respect to ` wrt ` , computes gradients of cost and/or from <EoL>
<BoL> Consider the gradient of this variable undefined . <EoL>
<BoL> Consider an expression constant when computing gradients . <EoL>
<BoL> Returns a short , mostly hexadecimal hash of a numpy ndarray <EoL>
<BoL> Returns a string , with no endlines , fully specifying <EoL>
<BoL> This function is called by Elemwise when all inputs and outputs are <EoL>
<BoL> Returns True if the current op has functioning C code for <EoL>
<BoL> This op.__init__ fct do n't have the same parameter as other scalar op . <EoL>
<BoL> Assemble the C code for this Composite Op . <EoL>
<BoL> Return a readable string representation of self.fgraph . <EoL>
<BoL> Return a list of functions that compute each output of self . <EoL>
<BoL> This op.__init__ fct do n't have the same parameter as other scalar op . <EoL>
<BoL> We want the result to have the same sign as Python , not the other <EoL>
<BoL> For for theano.scalar.Scalar and TensorVariable . <EoL>
<BoL> Symbolically cast ` x ` to a Scalar of given ` dtype ` . <EoL>
<BoL> Convert the input to a properly typed numpy value according to the <EoL>
<BoL> Proxy for either true_div or int_div , depending on types of x , y . <EoL>
<BoL> Return a Scalar ( dtype ) object . <EoL>
<BoL> Return 'int ' or 'true ' depending on the type of division used for x / y . <EoL>
<BoL> Upgrade any int types to float32 or float64 to avoid losing precision . <EoL>
<BoL> Upgrade any int and float32 to float64 to do as SciPy . <EoL>
<BoL> Do n't accept complex , otherwise call upgrade_to_float ( ) . <EoL>
<BoL> SharedVariable constructor for scalar values . Default : int64 or float64 . <EoL>
<BoL> Wrap the input into a list if it is not already a list . <EoL>
<BoL> The args are packed like this : <EoL>
<BoL> Compute and return dictionary mappings between the inputs and <EoL>
<BoL> Conventions : Checks that the broadcast pattern of v1 and v2.This functions ensures that `` out `` has the same dtype as <EoL>
<BoL> Perform some elementary validations on the inner graph to ensure <EoL>
<BoL> Compare True iff other is the same kind of TensorType . <EoL>
<BoL> Hash equal for same kinds of TensorType <EoL>
<BoL> Override ` CLinkerType.c_cleanup ` . <EoL>
<BoL> Override ` CLinkerType.c_declare ` . <EoL>
<BoL> Override ` CLinkerType.c_extract ` . <EoL>
<BoL> Override ` CLinkerObject.c_headers ` . <EoL>
<BoL> Override ` CLinkerType.c_init ` . <EoL>
<BoL> Override ` CLinkerObject.c_support_code ` . <EoL>
<BoL> Override ` CLinkerType.c_sync ` . <EoL>
<BoL> Return a copy of the type optionally with a new dtype or <EoL>
<BoL> Return a tuple ( python type , c type , numpy typenum ) that corresponds <EoL>
<BoL> Convert ` data ` to something which can be associated to a <EoL>
<BoL> Convert a symbolic Variable into a TensorType , if compatible . <EoL>
<BoL> Return the information needed to compute the memory size of `` obj `` . <EoL>
<BoL> Number of bytes taken by the object represented by shape_info . <EoL>
<BoL> Return a ` TensorVariable ` of this type . <EoL>
<BoL> Create an numpy ndarray full of 0 values . <EoL>
<BoL> Return ` x ` , transformed into a ` TensorType ` . <EoL>
<BoL> Check all internal values of the graph that compute the variable `` out `` <EoL>
<BoL> Internal function that constructs a new variable from x with the same <EoL>
<BoL> If the alloc would be useless , this function returns val . <EoL>
<BoL> IMPORTANT NOTE : This function uses set and dictionary data structures . <EoL>
<BoL> Given a inner nit_sot output of scan , return True iff the outer <EoL>
<BoL> IMPORTANT NOTE : This function uses set and dictionary data structure . <EoL>
<BoL> Attempts to replace a Scan node by one which computes the specified <EoL>
<BoL> This function checks if node ` node ` belongs to ` set_nodes ` , in the <EoL>
<BoL> Checks if Theano graphs represent the same computations.Compare two nodes to determine if they perform equal computation . <EoL>
<BoL> Returns true if l has any duplicates ( according to __eq__ ) . <EoL>
<BoL> Builds a dictionary of equivalences between inner inputs based on <EoL>
<BoL> Helpful function that gets a Scan op , a list of indices indicating <EoL>
<BoL> Transforms the shape of a tensor from ( d1 , d2 ... ) to ( d1+size , d2 , .. ) <EoL>
<BoL> This function tries to recognize the updates OrderedDict , theEnsure ` x ` is made only of allowed data types . <EoL>
<BoL> Compute the shape of the outputs given the shape of the inputs of a theanoGo back in the graph , from out , adding computable shapes to shape_of . <EoL>
<BoL> Construct new graphs based on 'graphs ' with some variables replaced <EoL>
<BoL> Different interface to clone , that allows you to pass inputs . <EoL>
<BoL> Looks at all outputs defined by indices `` out_idxs `` and see whom can be <EoL>
<BoL> Function used by scan to parse the tree and figure out which nodes <EoL>
<BoL> This function return a new variable whose gradient will be <EoL>
<BoL> Parameters <EoL>
<BoL> Return the outputs dtype and broadcastable pattern and the <EoL>
<BoL> If the inputs have different number of dimensions , their shape <EoL>
<BoL> Return True if we do not want to compile c code <EoL>
<BoL> Return C code to add x to zview . Should DECREF zview if the <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> Should raise NotImplementedError if c_code does not support <EoL>
<BoL> Return a dictionary of arguments to pass to helper_c_code . <EoL>
<BoL> Parameters <EoL>
<BoL> Parameters <EoL>
<BoL> The gradient wrt a join op is a ` Split ` , used to partition <EoL>
<BoL> Parameters <EoL>
<BoL> Perform the permutation by doing a recursion over the input <EoL>
<BoL> /* Return 1 if output has the correct shape . */ <EoL>
<BoL> Join the gradients along the axis that was used to split x . <EoL>
<BoL> WRITEME <EoL>
<BoL> WRITEME <EoL>
<BoL> Parameters <EoL>
<BoL> Change references to Variables into references to Types . <EoL>
<BoL> Returns a dictionary of default arguments to helper_c_code . <EoL>
<BoL> Parameters <EoL>
<BoL> See ` theano.tensor.argmax ` . <EoL>
<BoL> See ` theano.tensor.argmin ` . <EoL>
<BoL> See ` theano.tensor.argsort ` . <EoL>
<BoL> Construct an array from an index array and a set of arrays to choose <EoL>
<BoL> Return selected slices only . <EoL>
<BoL> See ` theano.tensor.conj ` . <EoL>
<BoL> Return a symbolic copy and optionally assign a name . <EoL>
<BoL> Reorder the dimensions of this variable , optionally inserting <EoL>
<BoL> Fill inputted tensor with the assigned value . <EoL>
<BoL> See ` theano.tensor.max ` . <EoL>
<BoL> See ` theano.tensor.mean ` . <EoL>
<BoL> See ` theano.tensor.min ` . <EoL>
<BoL> See ` theano.tensor.nonzero ` . <EoL>
<BoL> See ` theano.tensor.nonzero_values ` . <EoL>
<BoL> See ` theano.tensor.prod ` . <EoL>
<BoL> See 'theano.tensor.ptp ' . <EoL>
<BoL> See ` theano.tensor.repeat ` . <EoL>
<BoL> Return a reshaped view/copy of this variable . <EoL>
<BoL> See ` theano.tensor.round ` . <EoL>
<BoL> See ` theano.tensor.sort ` . <EoL>
<BoL> Remove broadcastable dimensions from the shape of an array . <EoL>
<BoL> See ` theano.tensor.std ` . <EoL>
<BoL> See ` theano.tensor.sum ` . <EoL>
<BoL> Return 'tensor.swapaxes ( self , axis1 , axis2 ) . <EoL>
<BoL> If ` target ` is ` 'cpu ' ` this will transfer to a TensorType ( if <EoL>
<BoL> Returns <EoL>
<BoL> See ` theano.tensor.var ` . <EoL>
<BoL> Compute sum of non NaN / Inf values in the array . <EoL>
<BoL> Make the input broadcastable in the specified axes . <EoL>
<BoL> This function is only used to determine the broadcast pattern for <EoL>
<BoL> Implement Numpy 's `` allclose `` on tensors . <EoL>
<BoL> Returns indices of maximum elements obtained by iterating over given axis . <EoL>
<BoL> Returns indices of minimum elements obtained by iterating over given axis . <EoL>
<BoL> Returns the indices that would sort an array . <EoL>
<BoL> Returns the indices of k-largest elements along an axis . <EoL>
<BoL> An instance of this class returns the Bartlett spectral window in the <EoL>
<BoL> Convert x to a list if it is an iterable , otherwise wrap it in a list . <EoL>
<BoL> Replace a symbol definition with an elementwise version of the <EoL>
<BoL> Reduces a tensor dot product to a matrix or vector dot product . Based <EoL>
<BoL> Compute the batched dot product of two variables : <EoL>
<BoL> Compute a batched tensordot product . <EoL>
<BoL> Symbolically cast ` x ` to a Tensor of type ` dtype ` . <EoL>
<BoL> Safely compute ceil ( float_division ( a , b ) ) . <EoL>
<BoL> Check axes , normalize and convert them to a Python list of integers . <EoL>
<BoL> Return True iff x and y are equal . <EoL>
<BoL> Construct an array from an index array and a set of arrays to choose from . <EoL>
<BoL> Return a symbolic column variable ( ndim=2 , broadcastable= [ False , True ] ) . <EoL>
<BoL> Alias for ` join ` ( axis , *tensor_list ) . <EoL>
<BoL> Return a symbolic ` Constant ` with value ` x ` . <EoL>
<BoL> Add ` f ` to : doc : ` oplist ` . <EoL>
<BoL> Calculate the covariance matrix . <EoL>
<BoL> A helper function for two ops : ` theano.tensor.ExtractDiag ` and <EoL>
<BoL> A helper function for ` theano.tensor.ExtractDiag ` . It accepts tensor with <EoL>
<BoL> Proxy for either true_div or int_div , depending on types of x , y . <EoL>
<BoL> elementvise divmod , using floor_div and mod_check <EoL>
<BoL> Computes the dot product of two variables . <EoL>
<BoL> This function is basically a call to tensor.get_scalar_constant_value . <EoL>
<BoL> Return a 2-D array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Return a vector of indices that are non-zero in the flattened version of a . <EoL>
<BoL> Reshapes the variable x by keeping <EoL>
<BoL> Return the run-time length of a symbolic vector . <EoL>
<BoL> Horizontally stack two L { TensorType } s . <EoL>
<BoL> Computes the inverse of permutations . <EoL>
<BoL> cast ( round ( a , mode ) , 'int64 ' ) <EoL>
<BoL> Verifies the dimensionality of the var is equal to <EoL>
<BoL> Implements Numpy 's `` isclose `` on tensors . <EoL>
<BoL> isinf ( a ) <EoL>
<BoL> isnan ( a ) <EoL>
<BoL> Convenience function to concatenate ` TensorType ` s along the given axis . <EoL>
<BoL> Return the [ elementwise ] largest of a variable number of arguments . <EoL>
<BoL> Reintroduces in y with length one the axes of x which have been left out <EoL>
<BoL> Return a symbolic matrix variable . <EoL>
<BoL> Returns maximum elements obtained by iterating over given axis . <EoL>
<BoL> Returns maximum elements and their indices obtained by iterating over <EoL>
<BoL> Returns minimum elements obtained by iterating over given axis . <EoL>
<BoL> Make sure we do not try to use complex numbers . <EoL>
<BoL> Returns one of the following : <EoL>
<BoL> Return a vector of non-zero elements contained in the input array . <EoL>
<BoL> Return a scalar stored in a numpy ndarray . <EoL>
<BoL> Create a Tensor filled with ones , closer to Numpy 's syntax than `` alloc `` . <EoL>
<BoL> equivalent of numpy.ones_like <EoL>
<BoL> Return vector-vector outer product . <EoL>
<BoL> Make the input adopt a specific broadcasting pattern . <EoL>
<BoL> Range of values ( maximum - minimum ) along an axis . <EoL>
<BoL> Register a transfer function for alternative targets . <EoL>
<BoL> Convenience function to roll TensorTypes along the given axis . <EoL>
<BoL> round_mode ( a ) with mode in [ half_away_from_zero , half_to_even ] . <EoL>
<BoL> Return a symbolic row variable ( ndim=2 , broadcastable= [ True , False ] ) . <EoL>
<BoL> Return a symbolic scalar variable . <EoL>
<BoL> Reshape ` t ` by inserting 1 at the dimension ` axis ` . <EoL>
<BoL> Reshape ` t ` by left-padding the shape with ` n_ones ` 1s . <EoL>
<BoL> Reshape ` t ` by right-padding the shape with ` n_ones ` 1s . <EoL>
<BoL> Return the [ elementwise ] smallest of a variable number of arguments . <EoL>
<BoL> Stack tensors in sequence on given axis ( default is 0 ) . <EoL>
<BoL> Recursively stack lists of tensors to maintain similar structure . <EoL>
<BoL> Computes the standard deviation along the given axis ( es ) of a tensor ` input ` . <EoL>
<BoL> Computes the sum along the given axis ( es ) of a tensor ` input ` . <EoL>
<BoL> Return a symbolic 3-D variable . <EoL>
<BoL> Return a symbolic 4-D variable . <EoL>
<BoL> Return a symbolic 5-D variable . <EoL>
<BoL> Return a symbolic 6-D variable . <EoL>
<BoL> Return a symbolic 7-D variable . <EoL>
<BoL> Compute a generalized dot product over provided axes . <EoL>
<BoL> Tile input array ` x ` according to ` reps ` . <EoL>
<BoL> Return a version of ` var ` transferred to ` target ` . <EoL>
<BoL> Reorder the dimensions of x . ( Default : reverse them ) <EoL>
<BoL> An array with ones at and below the given diagonal and zeros elsewhere . <EoL>
<BoL> Lower triangle of an array . <EoL>
<BoL> Upper triangle of an array . <EoL>
<BoL> Make the input impossible to broadcast in the specified axes . <EoL>
<BoL> Computes the variance along the given axis ( es ) of a tensor ` input ` . <EoL>
<BoL> Return a symbolic vector variable . <EoL>
<BoL> Create a Tensor filled with zeros , closer to Numpy 's syntax than `` alloc `` . <EoL>
<BoL> equivalent of numpy.zeros_like <EoL>
<BoL> Count number of occurrences of each value in array of ints . <EoL>
<BoL> // clean up views <EoL>
<BoL> template < typename dtype > <EoL>
<BoL> Return None or a TensorVariable whose type is in T.float_scalar_types <EoL>
<BoL> Returns None , or a list to replace node.outputs . <EoL>
<BoL> : todo : In many expressions , there are many ways to turn it into a <EoL>
<BoL> C header for the fortran blas interfaceextern `` C '' <EoL>
<BoL> Extract a list of compilation flags from config.blas.ldflags . <EoL>
<BoL> C header for the cblas interface.// # include < stddef.h > <EoL>
<BoL> Try to detect a bug in the default BLAS in MacOS . <EoL>
<BoL> C header for MKL threads interfaceextern `` C '' <EoL>
<BoL> C header for OpenBLAS threads interfaceextern `` C '' <EoL>
<BoL> This function checks if the index list in idx_list is correct . <EoL>
<BoL> Return the cumulative product of the elements along a given axis . <EoL>
<BoL> Return the cumulative sum of the elements along a given axis . <EoL>
<BoL> The grad of this Op could be very easy , if it is was not for the case <EoL>
<BoL> Generate C code to allocate outputs . <EoL>
<BoL> Produce code to declare all necessary variables . <EoL>
<BoL> Make a nested loop over several arrays and associate specific code <EoL>
<BoL> Make a nested loop over several arrays and associate specific code <EoL>
<BoL> Returns a list containing a C expression representing the <EoL>
<BoL> Notes <EoL>
<BoL> Notes <EoL>
<BoL> Return selected slices of an array along given axis . <EoL>
<BoL> Calculate the n-th order discrete difference along given axis . <EoL>
<BoL> Returns a copy of an array with all <EoL>
<BoL> Returns a copy of an array with all <EoL>
<BoL> Converts a tuple of index arrays into an array of flat <EoL>
<BoL> Repeat elements of an array . <EoL>
<BoL> Find indices where elements should be inserted to maintain order . <EoL>
<BoL> Remove broadcastable dimensions from the shape of an array . <EoL>
<BoL> Return a matrix where each row correspond to the one hot <EoL>
<BoL> Converts a flat index or array of flat indices into a tuple <EoL>
<BoL> Given a slice [ start : stop : step ] transform it into a canonical form <EoL>
<BoL> Given a list of inputs to the subtensor and its idx_list reorders <EoL>
<BoL> Non-blocking receive . <EoL>
<BoL> Non blocking send . <EoL>
<BoL> Load an array from an .npy file . <EoL>
<BoL> Wait as long as possible on Waits , Start Send/Recvs early . <EoL>
<BoL> Break MPI ties by using the variable tag - prefer lower tags first . <EoL>
<BoL> Blocking receive . <EoL>
<BoL> Blocking send . <EoL>
<BoL> Convert python litterals to theano constants in subtensor arguments . <EoL>
<BoL> r '' '' '' The gradient function should return <EoL>
<BoL> Implements the `` reverse-mode '' gradient for the eigensystem of <EoL>
<BoL> r '' '' '' The gradient function should return <EoL>
<BoL> r '' '' '' The gradient function should return <EoL>
<BoL> r '' '' '' The gradient function should return <EoL>
<BoL> Numpy-compatibility method <EoL>
<BoL> Shorthand for product between several dots . <EoL>
<BoL> Raise a square matrix to the ( integer ) power n . <EoL>
<BoL> Computes the QR decomposition of a matrix . <EoL>
<BoL> This function performs the SVD on CPU . <EoL>
<BoL> Does not run on GPU ; <EoL>
<BoL> Theano utilization of numpy.linalg.tensorsolve . Does not run on GPU ! <EoL>
<BoL> Returns the sum of diagonal elements of matrix X . <EoL>
<BoL> Useful with the hack in profiling to print the MFlops . <EoL>
<BoL> Computes the output dimensions of convolving an image of shape `` inshp '' <EoL>
<BoL> By default if len ( img2d.shape ) ==3 , we TODO <EoL>
<BoL> Return True if we will generate code that use gemm . <EoL>
<BoL> Parameters <EoL>
<BoL> The math , where x is an input vector , and t is a target index : <EoL>
<BoL> npy_intp* Nx = PyArray_DIMS ( % ( x ) s ) ; // minibatch loop// Compute xdev and sum ( exp ( xdev ) , axis=1 ) } <EoL>
<BoL> Basic slow Python 2D or 3D convolution for DebugMode <EoL>
<BoL> Useful with the hack in profiling to print the MFlops <EoL>
<BoL> Basic slow Python unshared 2d convolution . <EoL>
<BoL> This function adds Assert nodes that check if shape is a valid convolution shape . <EoL>
<BoL> Wraps ` x ` in an ` Assert ` to check its shape . <EoL>
<BoL> Compute 1D kernel for bilinear upsampling <EoL>
<BoL> Compute 2D kernel for bilinear upsampling <EoL>
<BoL> Computes a tuple for padding given the border_mode parameter <EoL>
<BoL> Compute the crossentropy of binary random variables . <EoL>
<BoL> Compute the dot product of the specified pieces of vectors <EoL>
<BoL> Compute the dot product of the specified pieces of vectors <EoL>
<BoL> Compute the dot product ( plus bias ) of the specified pieces of vectors <EoL>
<BoL> Return the cross-entropy between an approximating distribution and a true <EoL>
<BoL> Computes the confusion matrix of given vectors containing <EoL>
<BoL> c_code for ConvOp that unroll the batch size loop . } //for n <EoL>
<BoL> Upcast input variables if necessary . <EoL>
<BoL> This generates the C code for CorrMM ( direction= '' forward '' ) , <EoL>
<BoL> Upcast input variables if necessary . <EoL>
<BoL> Returns <EoL>
<BoL> Compute the element-wise exponential linear activation function [ 2 ] _ . <EoL>
<BoL> An approximation of sigmoid . <EoL>
<BoL> Check that 'rows ' is the same node as T.arange ( labels.shape [ 0 ] ) . <EoL>
<BoL> Compute the element-wise rectified linear activation function . <EoL>
<BoL> Compute the element-wise Scaled Exponential Linear unit [ 3 ] _ . <EoL>
<BoL> Compute the cross-entropy of binary random variables . <EoL>
<BoL> This method was used to generate the graph : sigmoid_prec.png in the doc . <EoL>
<BoL> Returns <EoL>
<BoL> Compute the Variable that is the output of a multiplication tree . <EoL>
<BoL> Returns <EoL>
<BoL> Match a variable with either of the ` exp ( x ) ` or ` -exp ( x ) ` patterns . <EoL>
<BoL> Match a variable with ` x * y * z * ... ` . <EoL>
<BoL> Match a variable with the ` -x ` pattern . <EoL>
<BoL> Parse a tree of multiplications starting at the given root . <EoL>
<BoL> Attempt to replace a leaf of a multiplication tree . <EoL>
<BoL> Simplify a multiplication tree . <EoL>
<BoL> Returns <EoL>
<BoL> This extract two lists , num and denum , such that the input is : <EoL>
<BoL> Utility function which takes two lists , num and denum , and <EoL>
<BoL> Shorthand for : <EoL>
<BoL> Find all constants and put them together into a single constant . <EoL>
<BoL> For any Variable r which is both in num and denum , removes it <EoL>
<BoL> Usage : InplaceElemwiseOptimizer ( op ) .optimize ( fgraph ) <EoL>
<BoL> Return a list of shape tuple or None for the outputs of node . <EoL>
<BoL> Optimization can call this to get the current shape_i <EoL>
<BoL> Register r 's shape in the shape_of dictionary . <EoL>
<BoL> Return True if we are able to assert that x and y have the <EoL>
<BoL> Assign the shape ` s ` to previously un-shaped variable ` r ` . <EoL>
<BoL> Replace element i of shape_of [ r ] by s_i <EoL>
<BoL> Return symbolic r.shape [ i ] for tensor variable r , int i . <EoL>
<BoL> Return a tuple of symbolic shape vars for tensor variable r . <EoL>
<BoL> Return a symbolic integer scalar for the shape element s_i . <EoL>
<BoL> Replace shape of r by shape of other_r . <EoL>
<BoL> Apply as many times as required the optimization local_useless_rebroadcast <EoL>
<BoL> Return a Variable with the same shape and dtype as the template , <EoL>
<BoL> Convert x/abs ( x ) into sign ( x ) . <EoL>
<BoL> Parameters <EoL>
<BoL> Used by erf/erfc opt to track less frequent op . <EoL>
<BoL> Used by erf/erfc opt to track less frequent op . <EoL>
<BoL> Given two data types ( as strings ) , check if converting to <EoL>
<BoL> Given two consecutive operations , check if they are the <EoL>
<BoL> Fuse consecutive add or mul in one such node with more inputs . <EoL>
<BoL> elemwise ( alloc ( x , shp ) , ... , y.TensorType ( BROADCAST CONDITION ) ) <EoL>
<BoL> As part of specialization , we fuse two consecutive elemwise Ops of the <EoL>
<BoL> As part of specialization , we fuse two consecutive elemwise Ops of the <EoL>
<BoL> Reshape ( Reshape ( shape1 ) , shape2 ) - > Reshape ( shape2 ) <EoL>
<BoL> This function merges two slices into a single slice . The code works on <EoL>
<BoL> Partition a list of variables into two kinds : <EoL>
<BoL> Parameters <EoL>
<BoL> Sample from a normal distribution centered on avg with <EoL>
<BoL> Return permutations of the integers between 0 and n-1 . <EoL>
<BoL> Draw samples from a Poisson distribution . <EoL>
<BoL> Return a variable with every row ( rightmost index ) shuffled . <EoL>
<BoL> Sample a tensor of given size whose element from a uniform <EoL>
<BoL> Return indices over each shape that broadcast them to match out_shape . <EoL>
<BoL> Infer the number of dimensions from the shape or the other arguments . <EoL>
<BoL> Helper function to draw random numbers using numpy 's choice function . <EoL>
<BoL> Helper function drawing from multinomial distributions . <EoL>
<BoL> Sample from a normal distribution centered on avg with <EoL>
<BoL> Return permutations of the integers between 0 and n-1 . <EoL>
<BoL> Helper function to generate permutations from integers . <EoL>
<BoL> Draw samples from a Poisson distribution . <EoL>
<BoL> Helper function to draw random integers . <EoL>
<BoL> Sample from a uniform distribution between low and high . <EoL>
<BoL> Retrieve the numpy RandomState instance associated with a particular <EoL>
<BoL> Set the numpy RandomState instance associated with a particular stream . <EoL>
<BoL> Create a new random stream in this container . <EoL>
<BoL> Re-initialize each random stream . <EoL>
<BoL> This function is only here to keep some pickles loading <EoL>
<BoL> Parameters <EoL>
<BoL> Sum of gx over dimensions to reproduce x.broadcastable . <EoL>
<BoL> Returns the k-largest elements along an axis . <EoL>
<BoL> Returns the results of both topk ( ) and argtopk ( ) in one Op . <EoL>
<BoL> Return a hash from an ndarray . <EoL>
<BoL> Compute the numeric shape of all intermediate variables given input shapes . <EoL>
<BoL> Generate argv for nosetest command <EoL>
<BoL> Creates a new storage in shared memory with the same data type <EoL>
<BoL> Casts this storage to byte type <EoL>
<BoL> Casts this storage to char type <EoL>
<BoL> Returns a copy of this storage <EoL>
<BoL> Returns a CPU copy of this storage if it 's not already on the CPU <EoL>
<BoL> Returns a copy of this object in CUDA memory . <EoL>
<BoL> Casts this storage to double type <EoL>
<BoL> Casts this storage to float type <EoL>
<BoL> Casts this storage to half type <EoL>
<BoL> Casts this storage to int type <EoL>
<BoL> Casts this storage to long type <EoL>
<BoL> Copies the storage to pinned memory , if it 's not already pinned . <EoL>
<BoL> Moves the storage to shared memory . <EoL>
<BoL> Casts this storage to short type <EoL>
<BoL> Returns a list containing the elements of this storage <EoL>
<BoL> Returns the type if ` dtype ` is not provided , else casts this object to <EoL>
<BoL> r '' '' '' Reverses the tensor along dimension 0 . <EoL>
<BoL> r '' '' '' See : func : ` torch.argmax ` <EoL>
<BoL> r '' '' '' See : func : ` torch.argmin ` <EoL>
<BoL> r '' '' '' Computes the gradient of current tensor w.r.t . graph leaves . <EoL>
<BoL> r '' '' '' See : func : ` torch.btrifact ` <EoL>
<BoL> r '' '' '' Returns true if this tensor resides in pinned memory <EoL>
<BoL> r '' '' '' Checks if tensor is in shared memory . <EoL>
<BoL> r '' '' '' Registers a backward hook . <EoL>
<BoL> r '' '' '' Enables .grad attribute for non-leaf Tensors . <EoL>
<BoL> r '' '' '' Moves the underlying storage to shared memory . <EoL>
<BoL> r '' '' '' See : func : ` torch.split ` <EoL>
<BoL> r '' '' '' Returns the unique scalar elements of the tensor as a 1-D tensor . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Flatten dense tensors into a contiguous 1D buffer . Assume tensors are of <EoL>
<BoL> Flatten sparse tensors into two contiguous 1D buffers , one of indices and <EoL>
<BoL> Assume that tensors are of same order as ordered_tensors within their <EoL>
<BoL> Group tensors into chunks . This generator yields a chunk at each time , <EoL>
<BoL> View a flat buffer using the sizes of tensors . Assume that tensors are of <EoL>
<BoL> View flat buffer ( containing indices and values ) using the sizes of <EoL>
<BoL> Returns the indices of the maximum values of a tensor across a dimension . <EoL>
<BoL> Returns the indices of the minimum values of a tensor across a dimension . <EoL>
<BoL> r '' '' '' Marks given tensors as modified in an in-place operation . <EoL>
<BoL> r '' '' '' Marks outputs as non-differentiable . <EoL>
<BoL> r '' '' '' Saves given tensors for a future call to : func : ` ~Function.backward ` . <EoL>
<BoL> r '' '' '' Computes the sum of gradients of given tensors w.r.t . graph leaves . <EoL>
<BoL> r '' '' '' Defines a formula for differentiating the operation . <EoL>
<BoL> r '' '' '' Performs the operation . <EoL>
<BoL> r '' '' '' Marks Function as traceable for the JIT . <EoL>
<BoL> r '' '' '' Check gradients computed via small finite differences against analytical <EoL>
<BoL> Exports an EventList as a Chrome tracing tools file . <EoL>
<BoL> Averages all function events over their keys . <EoL>
<BoL> Prints an EventList as a nicely formatted table . <EoL>
<BoL> Averages all events . <EoL>
<BoL> Prints a summary of events ( which can be a list of FunctionEvent or FunctionEventAvg ) . <EoL>
<BoL> Demangle a C++ identifier using c++filt <EoL>
<BoL> Defines how to format time in FunctionEvent <EoL>
<BoL> Opens an nvprof trace file and parses autograd annotations . <EoL>
<BoL> r '' '' '' Returns whether PyTorch is built with MKL support . <EoL>
<BoL> r '' '' '' Batch LU factorization . <EoL>
<BoL> r '' '' '' Unpacks the data and pivots from a batched LU factorization ( btrifact ) of a tensor . <EoL>
<BoL> Returns the time elapsed before the event was recorded . <EoL>
<BoL> Returns an IPC handle of this event . <EoL>
<BoL> Checks if the event has been recorded . <EoL>
<BoL> Records the event in a given stream . <EoL>
<BoL> Synchronizes with the event . <EoL>
<BoL> Makes a given stream wait for the event . <EoL>
<BoL> Convenience for checking if a timeout has expired . <EoL>
<BoL> Construct and return tuple with IO objects : <EoL>
<BoL> Convenience for _communicate when computing timeouts . <EoL>
<BoL> All callers to this function MUST hold self._waitpid_lock . <EoL>
<BoL> Interact with process : Send data to stdin . Read data from <EoL>
<BoL> Kill the process with SIGKILL <EoL>
<BoL> Check if child process has terminated . Set and return returncode <EoL>
<BoL> Send a signal to the process . <EoL>
<BoL> Terminate the process with SIGTERM <EoL>
<BoL> Wait for child process to terminate . Returns returncode <EoL>
<BoL> Checks if all the work submitted has been completed . <EoL>
<BoL> Records an event . <EoL>
<BoL> Wait for all the kernels in this stream to complete . <EoL>
<BoL> Makes all future work submitted to the stream wait for an event . <EoL>
<BoL> Synchronizes with another stream . <EoL>
<BoL> Found GPU % d % s which requires CUDA_VERSION > = % d forFound GPU % d % s which is of cuda capability % d. % d . <EoL>
<BoL> Broadcasts a tensor to a number of GPUs . <EoL>
<BoL> Broadcasts a sequence tensors to the specified GPUs . <EoL>
<BoL> Gathers tensors from multiple GPUs . <EoL>
<BoL> Sums tensors from multiple GPUs . <EoL>
<BoL> Sums tensors from multiple GPUs . <EoL>
<BoL> Scatters tensor across multiple GPUs . <EoL>
<BoL> r '' '' '' Returns cublasHandle_t pointer to current cuBLAS handle <EoL>
<BoL> r '' '' '' Returns the index of a currently selected device . <EoL>
<BoL> r '' '' '' Returns a currently selected : class : ` Stream ` . <EoL>
<BoL> Returns the number of GPUs available . <EoL>
<BoL> r '' '' '' Releases all unoccupied cached memory currently held by the caching <EoL>
<BoL> r '' '' '' Gets the cuda capability of a device . <EoL>
<BoL> r '' '' '' Gets the name of a device . <EoL>
<BoL> r '' '' '' Returns the random number generator state of the current <EoL>
<BoL> r '' '' '' Returns a tuple of ByteTensor representing the random number states of all devices . <EoL>
<BoL> r '' '' '' Initialize PyTorch 's CUDA state . You may need to call <EoL>
<BoL> r '' '' '' Returns the current random seed of the current GPU . <EoL>
<BoL> r '' '' '' Returns a bool indicating if CUDA is currently available . <EoL>
<BoL> r '' '' '' Sets the seed for generating random numbers for the current GPU . <EoL>
<BoL> r '' '' '' Sets the seed for generating random numbers on all GPUs . <EoL>
<BoL> r '' '' '' Returns the maximum GPU memory usage by tensors in bytes for a given <EoL>
<BoL> r '' '' '' Returns the maximum GPU memory managed by the caching allocator in bytes <EoL>
<BoL> r '' '' '' Returns the current GPU memory usage by tensors in bytes for a given <EoL>
<BoL> r '' '' '' Returns the current GPU memory managed by the caching allocator in bytes <EoL>
<BoL> Describe an instantaneous event that occurred at some point . <EoL>
<BoL> Pops a range off of a stack of nested range spans . Returns the <EoL>
<BoL> Pushes a range onto a stack of nested range span . Returns zero-based <EoL>
<BoL> r '' '' '' Sets the seed for generating random numbers to a random number for the current GPU . <EoL>
<BoL> r '' '' '' Sets the seed for generating random numbers to a random number on all GPUs . <EoL>
<BoL> r '' '' '' Sets the random number generator state of the current GPU . <EoL>
<BoL> r '' '' '' Sets the random number generator state of all devices . <EoL>
<BoL> r '' '' '' Sets the current device . <EoL>
<BoL> r '' '' '' Context-manager that selects a given stream . <EoL>
<BoL> r '' '' '' Waits for all kernels in all streams on current device to complete . <EoL>
<BoL> Clear the created distributed group 's cached resource <EoL>
<BoL> Gathers tensors from the whole group in a list . <EoL>
<BoL> Reduces the tensor data across all machines in such a way that all get <EoL>
<BoL> Reduces the tensor data across all machines in such a way that all get <EoL>
<BoL> Synchronizes all processes . <EoL>
<BoL> Broadcasts the tensor to the whole group . <EoL>
<BoL> Broadcasts the tensor to the whole group with multiple GPU tensors <EoL>
<BoL> Destroy the initialized distributed package <EoL>
<BoL> Gathers a list of tensors in a single process . <EoL>
<BoL> Returns the rank of current process . <EoL>
<BoL> Returns the number of processes in the distributed group . <EoL>
<BoL> Initializes the distributed package . <EoL>
<BoL> Receives a tensor asynchronously . <EoL>
<BoL> Checking if the process group has been initialized <EoL>
<BoL> Sends a tensor asynchronously . <EoL>
<BoL> Creates a new distributed group . <EoL>
<BoL> Receives a tensor synchronously . <EoL>
<BoL> Reduces the tensor data across all machines . <EoL>
<BoL> Reduces the tensor data on multiple GPUs across all machines . Each tensor <EoL>
<BoL> Scatters a list of tensors to all processes in a group . <EoL>
<BoL> Sends a tensor synchronously . <EoL>
<BoL> Computes the transform ` x = > y ` . <EoL>
<BoL> Inverts the transform ` y = > x ` . <EoL>
<BoL> Computes the log det jacobian ` log |dy/dx| ` given input and output . <EoL>
<BoL> Returns the size of the sample returned by the distribution , given <EoL>
<BoL> Argument validation for distribution methods such as ` log_prob ` , <EoL>
<BoL> Returns the cumulative density/mass function evaluated at <EoL>
<BoL> Returns the inverse cumulative density/mass function evaluated at <EoL>
<BoL> Returns perplexity of distribution , batched over batch_shape . <EoL>
<BoL> Generates a sample_shape shaped reparameterized sample or sample_shape <EoL>
<BoL> Generates n samples or n batches of samples if the distribution <EoL>
<BoL> Returns tensor containing all values supported by a discrete <EoL>
<BoL> Generates a sample_shape shaped sample or sample_shape shaped batch of <EoL>
<BoL> Returns entropy of distribution , batched over batch_shape . <EoL>
<BoL> Abstract method to compute forward transformation . <EoL>
<BoL> Abstract method to compute inverse transformation . <EoL>
<BoL> Returns the log of the probability density/mass function evaluated at <EoL>
<BoL> Abstract method for log normalizer function . Returns a log normalizer based on <EoL>
<BoL> Method to compute the entropy using Bregman divergence of the log normalizer . <EoL>
<BoL> This conditionally flips `` value - > 1-value `` to ensure : meth : ` cdf ` is <EoL>
<BoL> Computes the cumulative distribution function by inverting the <EoL>
<BoL> Computes the inverse cumulative distribution function using <EoL>
<BoL> Scores the sample by inverting the transform ( s ) and computing the score <EoL>
<BoL> Generates a sample_shape shaped reparameterized sample or sample_shape <EoL>
<BoL> Generates a sample_shape shaped sample or sample_shape shaped batch of <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Looks up a transform to constrained space , given a constraint object . <EoL>
<BoL> Registers a : class : ` ~torch.distributions.constraints.Constraint ` <EoL>
<BoL> Returns a byte tensor of ` sample_shape + batch_shape ` indicating <EoL>
<BoL> Given a batch of matrices , returns the lower triangular part of each matrix , with <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Utility function for calculating the trace of XX^ { T } with X having arbitrary trailing batch dimensions <EoL>
<BoL> Find the most specific approximate match , assuming single inheritance . <EoL>
<BoL> Helper function for obtaining infinite KL Divergence throughout <EoL>
<BoL> Utility function for calculating x log x <EoL>
<BoL> r '' '' '' <EoL>
<BoL> Decorator to register a pairwise function with : meth : ` kl_divergence ` . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Pads tensor . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Returns a new tensor with boolean elements representing if each element is ` Finite ` or not . <EoL>
<BoL> r '' '' '' Returns a new tensor with boolean elements representing if each element is ` +/-INF ` or not . <EoL>
<BoL> r '' '' '' Returns a new tensor with boolean elements representing if each element is ` NaN ` or not . <EoL>
<BoL> r '' '' '' Splits the tensor into chunks . <EoL>
<BoL> r '' '' '' Returns the unique scalar elements of the input tensor as a 1-D tensor . <EoL>
<BoL> r '' '' '' Returns the random number generator state as a ` torch.ByteTensor ` . <EoL>
<BoL> r '' '' '' Returns the initial seed for generating random numbers as a <EoL>
<BoL> r '' '' '' Returns True if ` obj ` is a PyTorch storage object . <EoL>
<BoL> r '' '' '' Returns True if ` obj ` is a PyTorch tensor . <EoL>
<BoL> r '' '' '' Copies parameters and buffers from : attr : ` state_dict ` into only <EoL>
<BoL> r '' '' '' Adds a child module to the current module . <EoL>
<BoL> r '' '' '' Applies `` fn `` recursively to every submodule ( as returned by `` .children ( ) `` ) <EoL>
<BoL> r '' '' '' Returns an iterator over immediate children modules . <EoL>
<BoL> r '' '' '' Moves all model parameters and buffers to the CPU . <EoL>
<BoL> r '' '' '' Moves all model parameters and buffers to the GPU . <EoL>
<BoL> r '' '' '' Casts all floating point parameters and buffers to `` double `` datatype . <EoL>
<BoL> r '' '' '' Sets the module in evaluation mode . <EoL>
<BoL> r '' '' '' Set the extra representation of the module <EoL>
<BoL> r '' '' '' Casts all floating point parameters and buffers to float datatype . <EoL>
<BoL> r '' '' '' Casts all floating point parameters and buffers to `` half `` datatype . <EoL>
<BoL> r '' '' '' Copies parameters and buffers from : attr : ` state_dict ` into <EoL>
<BoL> r '' '' '' Returns an iterator over all modules in the network . <EoL>
<BoL> r '' '' '' Returns an iterator over immediate children modules , yielding both <EoL>
<BoL> r '' '' '' Returns an iterator over all modules in the network , yielding <EoL>
<BoL> r '' '' '' Returns an iterator over module parameters , yielding both the <EoL>
<BoL> r '' '' '' Returns an iterator over module parameters . <EoL>
<BoL> r '' '' '' Registers a backward hook on the module . <EoL>
<BoL> r '' '' '' Adds a persistent buffer to the module . <EoL>
<BoL> r '' '' '' Registers a forward hook on the module . <EoL>
<BoL> r '' '' '' Registers a forward pre-hook on the module . <EoL>
<BoL> r '' '' '' Adds a parameter to the module . <EoL>
<BoL> r '' '' '' Returns a dictionary containing a whole state of the module . <EoL>
<BoL> r '' '' '' Moves and/or casts the parameters and buffers . <EoL>
<BoL> r '' '' '' Sets the module in training mode . <EoL>
<BoL> r '' '' '' Casts all parameters and buffers to : attr : ` dst_type ` . <EoL>
<BoL> r '' '' '' Sets gradients of all model parameters to zero . <EoL>
<BoL> r '' '' '' Defines the computation performed at every call . <EoL>
<BoL> Get the absolute index for the list of modules <EoL>
<BoL> r '' '' '' Appends a given module to the end of the list . <EoL>
<BoL> r '' '' '' Appends modules from a Python iterable to the end of the list . <EoL>
<BoL> Appends a given parameter at the end of the list . <EoL>
<BoL> Appends parameters from a Python iterable to the end of the list . <EoL>
<BoL> Get the idx-th item of the iterator <EoL>
<BoL> Creates a function which , given a string variable name , <EoL>
<BoL> Trace a function or model , returning a tuple consisting of the both the <EoL>
<BoL> Trace a function and return an executable trace that will be optimized <EoL>
<BoL> Verify that a JIT compiled model has the same behavior as its uncompiled <EoL>
<BoL> Loads an object saved with : func : ` torch.save ` from a file . <EoL>
<BoL> r '' '' '' Sets the seed for generating random numbers . Returns a <EoL>
<BoL> Returns a set of sharing strategies supported on a current system . <EoL>
<BoL> Returns the current strategy for sharing CPU tensors . <EoL>
<BoL> Register a reduce function for a type . <EoL>
<BoL> Sets the strategy for sharing CPU tensors . <EoL>
<BoL> Given input tensor , and output of ` self.head ` , <EoL>
<BoL> Computes log probabilities for all : math : ` n\_classes ` <EoL>
<BoL> This is equivalent to ` self.log_pob ( input ) .argmax ( dim=1 ) ` , <EoL>
<BoL> r '' '' '' Creates Embedding instance from given 2-dimensional FloatTensor . <EoL>
<BoL> Resets parameter data pointer so that they can use faster code paths . <EoL>
<BoL> Remove all items from the ModuleDict . <EoL>
<BoL> r '' '' '' Return an iterable of the ModuleDict key/value pairs . <EoL>
<BoL> r '' '' '' Return an iterable of the ModuleDict keys . <EoL>
<BoL> r '' '' '' Remove key from the ModuleDict and return its module . <EoL>
<BoL> r '' '' '' Update the ModuleDict with the key/value pairs from a mapping or <EoL>
<BoL> r '' '' '' Return an iterable of the ModuleDict values . <EoL>
<BoL> Remove all items from the ParameterDict . <EoL>
<BoL> r '' '' '' Return an iterable of the ParameterDict key/value pairs . <EoL>
<BoL> r '' '' '' Return an iterable of the ParameterDict keys . <EoL>
<BoL> r '' '' '' Remove key from the ParameterDict and return its parameter . <EoL>
<BoL> r '' '' '' Update the ParameterDict with the key/value pairs from a mapping or <EoL>
<BoL> r '' '' '' Return an iterable of the ParameterDict values . <EoL>
<BoL> Draw a sample from the Gumbel-Softmax distribution <EoL>
<BoL> Sample from Gumbel ( 0 , 1 ) <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Applies a 1D adaptive max pooling over an input signal composed of <EoL>
<BoL> r '' '' '' Applies a 2D adaptive max pooling over an input signal composed of <EoL>
<BoL> r '' '' '' Applies a 3D adaptive max pooling over an input signal composed of <EoL>
<BoL> r '' '' '' Generates a 2d flow field , given a batch of affine matrices : attr : ` theta ` <EoL>
<BoL> r '' '' '' Applies alpha dropout to the input . <EoL>
<BoL> r '' '' '' Applies a 1-dimensional sequence convolution over an input sequence . <EoL>
<BoL> r '' '' '' Returns cosine similarity between x1 and x2 , computed along dim . <EoL>
<BoL> r '' '' '' Applies element-wise , <EoL>
<BoL> r '' '' '' Combines an array of sliding local blocks into a large containing <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Given an : attr : ` input ` and a flow-field : attr : ` grid ` , computes the <EoL>
<BoL> r '' '' '' Applies Group Normalization for last certain number of dimensions . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Down/up samples the input to either the given : attr : ` size ` or the given <EoL>
<BoL> r '' '' '' The ` Kullback-Leibler divergence ` _ Loss . <EoL>
<BoL> r '' '' '' l1_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> r '' '' '' Applies Layer Normalization for last certain number of dimensions . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Applies local response normalization over an input signal composed of <EoL>
<BoL> r '' '' '' Applies a softmax followed by a logarithm . <EoL>
<BoL> r '' '' '' Applies a 1D power-average pooling over an input signal composed of <EoL>
<BoL> r '' '' '' Applies a 2D power-average pooling over an input signal composed of <EoL>
<BoL> r '' '' '' mse_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> r '' '' '' multilabel_margin_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> r '' '' '' Performs : math : ` L_p ` normalization of inputs over specified dimension . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Rearranges elements in a tensor of shape : math : ` [ * , C*r^2 , H , W ] ` to a <EoL>
<BoL> r '' '' '' relu ( input , inplace=False ) - > Tensor <EoL>
<BoL> r '' '' '' relu6 ( input , inplace=False ) - > Tensor <EoL>
<BoL> r '' '' '' rrelu ( input , lower=1./8 , upper=1./3 , training=False , inplace=False ) - > Tensor <EoL>
<BoL> r '' '' '' selu ( input , inplace=False ) - > Tensor <EoL>
<BoL> r '' '' '' sigmoid ( input ) - > Tensor <EoL>
<BoL> r '' '' '' Function that uses a squared term if the absolute <EoL>
<BoL> r '' '' '' soft_margin_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> r '' '' '' Applies a softmax function . <EoL>
<BoL> r '' '' '' Applies a softmin function . <EoL>
<BoL> r '' '' '' softsign ( input ) - > Tensor <EoL>
<BoL> r '' '' '' tanh ( input ) - > Tensor <EoL>
<BoL> r '' '' '' tanhshrink ( input ) - > Tensor <EoL>
<BoL> r '' '' '' Thresholds each element of the input Tensor . <EoL>
<BoL> r '' '' '' Extracts sliding local blocks from an batched input tensor . <EoL>
<BoL> r '' '' '' Upsamples the input to either the given : attr : ` size ` or the given <EoL>
<BoL> r '' '' '' Upsamples the input , using bilinear upsampling . <EoL>
<BoL> r '' '' '' Upsamples the input , using nearest neighbours ' pixel values . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Return the recommended gain value for the given nonlinearity function . <EoL>
<BoL> r '' '' '' Fills the input Tensor with the value : math : ` \text { val } ` . <EoL>
<BoL> r '' '' '' Fills the { 3 , 4 , 5 } -dimensional input ` Tensor ` with the Dirac <EoL>
<BoL> r '' '' '' Fills the 2-dimensional input ` Tensor ` with the identity <EoL>
<BoL> r '' '' '' Fills the input ` Tensor ` with values according to the method <EoL>
<BoL> r '' '' '' Fills the input ` Tensor ` with values according to the method <EoL>
<BoL> r '' '' '' Fills the input Tensor with values drawn from the normal <EoL>
<BoL> r '' '' '' Fills the input Tensor with ones ` . <EoL>
<BoL> r '' '' '' Fills the input ` Tensor ` with a ( semi ) orthogonal matrix , as <EoL>
<BoL> r '' '' '' Fills the 2D input ` Tensor ` as a sparse matrix , where the <EoL>
<BoL> r '' '' '' Fills the input Tensor with values drawn from the uniform <EoL>
<BoL> r '' '' '' Fills the input ` Tensor ` with values according to the method <EoL>
<BoL> r '' '' '' Fills the input ` Tensor ` with values according to the method <EoL>
<BoL> r '' '' '' Fills the input Tensor with zeros ` . <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to byte type <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to char type <EoL>
<BoL> Returns a CPU copy if ` self.data ` not already on the CPU <EoL>
<BoL> Returns a GPU copy if ` self.data ` not already on the GPU <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to double type <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to float type <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to half type <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to int type <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to long type <EoL>
<BoL> r '' '' '' Returns copy with ` self.data ` cast to short type <EoL>
<BoL> r '' '' '' Performs dtype and/or device conversion on ` self.data ` . <EoL>
<BoL> Broadcast a sequence of tensors to the default group from rank 0 . <EoL>
<BoL> This function registers the callback all-reduction function for the <EoL>
<BoL> Gets a background stream for copying between CPU and GPU <EoL>
<BoL> r '' '' '' Evaluates module ( input ) in parallel across the GPUs given in device_ids . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Applies each ` module ` in : attr : ` modules ` in parallel on arguments <EoL>
<BoL> r '' '' '' Scatter with support for kwargs dictionary <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Clips gradient norm of an iterable of parameters . <EoL>
<BoL> r '' '' '' Clips gradient norm of an iterable of parameters . <EoL>
<BoL> r '' '' '' Clips gradient of an iterable of parameters at specified value . <EoL>
<BoL> r '' '' '' This helper function is to check if the parameters are located <EoL>
<BoL> r '' '' '' Convert parameters to one vector <EoL>
<BoL> r '' '' '' Convert one vector to the parameters <EoL>
<BoL> r '' '' '' Removes the spectral normalization reparameterization from a module . <EoL>
<BoL> r '' '' '' Removes the weight normalization reparameterization from a module . <EoL>
<BoL> r '' '' '' Packs a Tensor containing padded sequences of variable length . <EoL>
<BoL> r '' '' '' Packs a list of variable length Tensors <EoL>
<BoL> r '' '' '' Pads a packed batch of variable length sequences . <EoL>
<BoL> r '' '' '' Pad a list of variable length Tensors with zero <EoL>
<BoL> r '' '' '' Applies spectral normalization to a parameter in the given module . <EoL>
<BoL> r '' '' '' Applies weight normalization to a parameter in the given module . <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' <EoL>
<BoL> r '' '' '' Add a param group to the : class : ` Optimizer ` s ` param_groups ` . <EoL>
<BoL> r '' '' '' Loads the optimizer state.r '' '' '' Make a deep copy of value , casting all tensors to device of param . <EoL>
<BoL> r '' '' '' Returns the state of the optimizer as a : class : ` dict ` . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> r '' '' '' Clears the gradients of all optimized : class : ` torch.Tensor ` s . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> r '' '' '' Performs a single optimization step ( parameter update ) . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Loads the schedulers state . <EoL>
<BoL> Returns the state of the scheduler as a : class : ` dict ` . <EoL>
<BoL> Resets num_bad_epochs counter and cooldown counter . <EoL>
<BoL> Forks the RNG , so that when you return , the RNG is reset <EoL>
<BoL> r '' '' '' Sets the random number generator state . <EoL>
<BoL> Saves an object to a disk file . <EoL>
<BoL> Checks if f is a file that should be read directly . It should be read <EoL>
<BoL> Executes a body function with a file object for f , opening <EoL>
<BoL> r '' '' '' Sets the default floating point dtype to : attr : ` d ` . This type will be <EoL>
<BoL> r '' '' '' Sets the default `` torch.Tensor `` type to floating point tensor type <EoL>
